                        .module SPI.c
                        .area text(rom, con, rel)
 0000                   .dbfile ..\..\DMAVR-~3\FAT-NE~1\SPI.c
 0000                   .dbfile E:\DMAVR-~3\FAT-NE~1\SPI.c
 0000                   .dbfunc e spiInit _spiInit fV
                        .even
 0000           _spiInit::
 0000                   .dbline -1
 0000                   .dbline 50
 0000           ; //**********************************************************************
 0000           ; //SD卡读写中SPI接口相关函数V1.0
 0000           ; //编译环境：AVR Studio 4.17 + WinAVR 20100110
 0000           ; //作者：http://www.avrgcc.com
 0000           ; //时间：2010.08.01
 0000           ; //版权：版权所有，转载请注明
 0000           ; //**********************************************************************
 0000           ; 
 0000           ; //**********************************************************************
 0000           ; //              相关头文件
 0000           ; //**********************************************************************
 0000           ; 
 0000           ; #include <iom128v.h>
 0000           ; //#include <user/spi.h">
 0000           ; 
 0000           ; typedef unsigned char uint8;
 0000           ; typedef unsigned int uint16;
 0000           ; typedef unsigned long uint32;
 0000           ; 
 0000           ; volatile uint8 spiTransferComplete;  //传输完成标志
 0000           ; 
 0000           ; //**********************************************************************
 0000           ; //              函数声明
 0000           ; //**********************************************************************
 0000           ; 
 0000           ; void   spiInit(void);
 0000           ; uint8  spiSendByte(uint8 data);
 0000           ; uint16 spiTransferWord(uint16 data);
 0000           ; 
 0000           ; /***********************************************************************
 0000           ; 函数功能：SPI采用中断的中断函数
 0000           ; 操作内容：传输完成标志置1
 0000           ; ***********************************************************************/
 0000           ; 
 0000           ; #ifdef SPI_USEINT
 0000           ; SIGNAL(SIG_SPI)
 0000           ; {
 0000           ;       spiTransferComplete = 1;
 0000           ; }
 0000           ; #endif
 0000           ; 
 0000           ; /***********************************************************************
 0000           ; 函数功能：SPI初始化
 0000           ; 操作内容：1、设置端口输入输出属性
 0000           ;                 2、设置SPI接口相关寄存器
 0000           ;           3、支持常用AVR单片机接口，兼容性增强，可扩展
 0000           ; ***********************************************************************/
 0000           ; 
 0000           ; void spiInit()
 0000           ; {
 0000                   .dbline 53
 0000           ;    
 0000           ; 
 0000           ;       PORTB |= (1 << PB1);  //设置SCK为1
 0000 C19A              sbi 0x18,1
 0002                   .dbline 54
 0002           ;     DDRB |= (1<<DDB1);    //设置SCK为输出
 0002 B99A              sbi 0x17,1
 0004                   .dbline 55
 0004           ;       DDRB &= ~(1<<DDB3);   //设置MISO为输入
 0004 BB98              cbi 0x17,3
 0006                   .dbline 56
 0006           ;       DDRB |= (1<<DDB2);    //设置MOSI为输出
 0006 BA9A              sbi 0x17,2
 0008                   .dbline 57
 0008           ;       DDRB |= (1<<DDB0);    //主机模式下，设置SS为输出，可以控制SPI外设的片选信号
 0008 B89A              sbi 0x17,0
 000A                   .dbline 58
 000A           ;     PORTB |= (1 << PB0);  //拉高SS信号
 000A C09A              sbi 0x18,0
 000C                   .dbline 60
 000C           ; 
 000C           ;     SPCR = (1<<MSTR)| (1<<SPR1) | (1<<SPE);  //SPI允许，主机模式，数据MSB在前，16分频
 000C 82E5              ldi R24,82
 000E 8DB9              out 0xd,R24
 0010                   .dbline 62
 0010           ;       
 0010           ;       spiTransferComplete = 1;
 0010 81E0              ldi R24,1
 0012 80930000          sts _spiTransferComplete,R24
 0016                   .dbline -2
 0016           L1:
 0016                   .dbline 0 ; func end
 0016 0895              ret
 0018                   .dbend
 0018                   .dbfunc e spiLow _spiLow fV
                        .even
 0018           _spiLow::
 0018                   .dbline -1
 0018                   .dbline 74
 0018           ; 
 0018           ; 
 0018           ; }
 0018           ; 
 0018           ; /***********************************************************************
 0018           ; 函数功能：SPI低速模式
 0018           ; 操作内容：1、晶振64分频
 0018           ;                 2、非倍速模式
 0018           ; ***********************************************************************/
 0018           ; 
 0018           ; void spiLow(void)
 0018           ; {
 0018                   .dbline 75
 0018           ;        SPCR = (1<<MSTR)| (1<<SPR1) | (1<<SPE);  //SPI允许，主机模式，数据MSB在前，16分频
 0018 82E5              ldi R24,82
 001A 8DB9              out 0xd,R24
 001C                   .dbline 76
 001C           ;        SPSR &= ~(1<<SPI2X);                     //SPI2X为0，非倍速模式
 001C 7098              cbi 0xe,0
 001E                   .dbline -2
 001E           L2:
 001E                   .dbline 0 ; func end
 001E 0895              ret
 0020                   .dbend
 0020                   .dbfunc e spiHigh _spiHigh fV
                        .even
 0020           _spiHigh::
 0020                   .dbline -1
 0020                   .dbline 86
 0020           ; }
 0020           ; 
 0020           ; /***********************************************************************
 0020           ; 函数功能：SPI倍速模式
 0020           ; 操作内容：1、晶振8分频
 0020           ;                 2、倍速模式
 0020           ; ***********************************************************************/
 0020           ; 
 0020           ; void spiHigh(void)
 0020           ; {
 0020                   .dbline 87
 0020           ;       SPCR = (1<<MSTR)| (1<<SPR0) | (1<<SPE);  //SPI允许，主机模式，数据MSB在前，8分频
 0020 81E5              ldi R24,81
 0022 8DB9              out 0xd,R24
 0024                   .dbline 88
 0024           ;       SPSR |= (1<<SPI2X);                      //SPI2X为1，倍速模式
 0024 709A              sbi 0xe,0
 0026                   .dbline -2
 0026           L3:
 0026                   .dbline 0 ; func end
 0026 0895              ret
 0028                   .dbend
 0028                   .dbfunc e spiSendByte _spiSendByte fc
 0028           ;           data -> R16
                        .even
 0028           _spiSendByte::
 0028                   .dbline -1
 0028                   .dbline 97
 0028           ; }
 0028           ; 
 0028           ; /***********************************************************************
 0028           ; 函数功能：SPI字节传输函数
 0028           ; 操作内容：数据从SPDR读出或者读入
 0028           ; ***********************************************************************/
 0028           ; 
 0028           ; uint8 spiSendByte(uint8 data)
 0028           ; {
 0028                   .dbline 103
 0028           ; #ifdef SPI_USEINT                    //如果启用中断模式
 0028           ;       while(!spiTransferComplete);
 0028           ;       SPDR=data;                      //数据输出到SPDR
 0028           ;       spiTransferComplete = 0;
 0028           ; #else
 0028           ;     SPDR=data;                      //数据输出到SPDR
 0028 0FB9              out 0xf,R16
 002A           L5:
 002A                   .dbline 104
 002A           ;       while(!(SPSR & (1<<SPIF)));     //等待上次传输完成
 002A           L6:
 002A                   .dbline 104
 002A 779B              sbis 0xe,7
 002C FECF              rjmp L5
 002E           X0:
 002E                   .dbline 106
 002E           ; #endif
 002E           ;     return SPDR;                     //返回SPDR值
 002E 0FB1              in R16,0xf
 0030                   .dbline -2
 0030           L4:
 0030                   .dbline 0 ; func end
 0030 0895              ret
 0032                   .dbsym r data 16 c
 0032                   .dbend
 0032                   .dbfunc e spiTransferWord _spiTransferWord fi
 0032           ;         rxData -> R10,R11
 0032           ;           data -> R20,R21
                        .even
 0032           _spiTransferWord::
 0032 0E940000          xcall push_xgset300C
 0036 A801              movw R20,R16
 0038                   .dbline -1
 0038                   .dbline 116
 0038           ;       
 0038           ; }
 0038           ; 
 0038           ; /***********************************************************************
 0038           ; 函数功能：SPI双字节传输函数
 0038           ; 操作内容：先传输高字节，再传输低字节
 0038           ; ***********************************************************************/
 0038           ; 
 0038           ; uint16 spiTransferWord(uint16 data)
 0038           ; {
 0038                   .dbline 117
 0038           ;       uint16 rxData = 0;
 0038                   .dbline 119
 0038           ; 
 0038           ;       rxData = (spiSendByte((data>>8) & 0x00FF))<<8;   //先传输高字节
 0038 8A01              movw R16,R20
 003A 012F              mov R16,R17
 003C 1127              clr R17
 003E 1070              andi R17,0
 0040 F3DF              xcall _spiSendByte
 0042 A02E              mov R10,R16
 0044 BB24              clr R11
 0046 BA2C              mov R11,R10
 0048 AA24              clr R10
 004A                   .dbline 120
 004A           ;       rxData |= (spiSendByte(data & 0x00FF));          //再传输低字节
 004A 8A01              movw R16,R20
 004C 1070              andi R17,0
 004E ECDF              xcall _spiSendByte
 0050 202E              mov R2,R16
 0052 3324              clr R3
 0054 A228              or R10,R2
 0056 B328              or R11,R3
 0058                   .dbline 121
 0058           ;       return rxData;
 0058 8501              movw R16,R10
 005A                   .dbline -2
 005A           L8:
 005A                   .dbline 0 ; func end
 005A 0C940000          xjmp pop_xgset300C
 005E                   .dbsym r rxData 10 i
 005E                   .dbsym r data 20 i
 005E                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile E:\DMAVR-~3\FAT-NE~1\SPI.c
 0000           _spiTransferComplete::
 0000                   .blkb 1
 0001                   .dbsym e spiTransferComplete _spiTransferComplete c
 0001           ; }
