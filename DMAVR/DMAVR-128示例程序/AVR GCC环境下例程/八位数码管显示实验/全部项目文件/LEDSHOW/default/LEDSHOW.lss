
LEDSHOW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000128  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000043  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000163  00000000  00000000  0000020f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000109  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001c6  00000000  00000000  0000047b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ea  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000076e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e2       	ldi	r30, 0x28	; 40
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  b6:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <system_init>:

uchar table[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};

void system_init()
{
    Data_IO=0xFF;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	8b bb       	out	0x1b, r24	; 27
    Data_DDR=0xFF;
  c2:	8a bb       	out	0x1a, r24	; 26

    PORTD=0xFF;
  c4:	82 bb       	out	0x12, r24	; 18
    DDRD=0xFF;
  c6:	81 bb       	out	0x11, r24	; 17
}
  c8:	08 95       	ret

000000ca <Write_LED>:


void Write_LED()
{
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	a0 e0       	ldi	r26, 0x00	; 0
  d0:	b1 e0       	ldi	r27, 0x01	; 1
  d2:	31 e0       	ldi	r19, 0x01	; 1
   uchar i,j;
   j=0x01;
  for(i=0;i<8;i++)
  {
    D_LE1;
  d4:	e2 e3       	ldi	r30, 0x32	; 50
  d6:	f0 e0       	ldi	r31, 0x00	; 0
    W_LE1;
    Data_IO=~j;
  d8:	cb e3       	ldi	r28, 0x3B	; 59
  da:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  dc:	63 e3       	ldi	r22, 0x33	; 51
  de:	77 e0       	ldi	r23, 0x07	; 7

void Write_LED()
{
   uchar i,j;
   j=0x01;
  for(i=0;i<8;i++)
  e0:	48 e0       	ldi	r20, 0x08	; 8
  e2:	51 e0       	ldi	r21, 0x01	; 1
  {
    D_LE1;
  e4:	80 81       	ld	r24, Z
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	80 83       	st	Z, r24
    W_LE1;
  ea:	80 81       	ld	r24, Z
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	80 83       	st	Z, r24
    Data_IO=~j;
  f0:	23 2f       	mov	r18, r19
  f2:	20 95       	com	r18
  f4:	28 83       	st	Y, r18
    W_LE0;
  f6:	80 81       	ld	r24, Z
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	80 83       	st	Z, r24
	j=(j<<1);
  fc:	33 0f       	add	r19, r19
    Data_IO=table[i];
  fe:	8d 91       	ld	r24, X+
 100:	88 83       	st	Y, r24
    D_LE0;
 102:	80 81       	ld	r24, Z
 104:	8f 7e       	andi	r24, 0xEF	; 239
 106:	80 83       	st	Z, r24
 108:	cb 01       	movw	r24, r22
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <Write_LED+0x40>

void Write_LED()
{
   uchar i,j;
   j=0x01;
  for(i=0;i<8;i++)
 10e:	a4 17       	cp	r26, r20
 110:	b5 07       	cpc	r27, r21
 112:	41 f7       	brne	.-48     	; 0xe4 <Write_LED+0x1a>
    Data_IO=table[i];
    D_LE0;
    delay_ms(1);

  }
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <main>:

void main(void)
{

     system_init();
 11a:	0e 94 5f 00 	call	0xbe	; 0xbe <system_init>

 while(1)
   {
     Write_LED();
 11e:	0e 94 65 00 	call	0xca	; 0xca <Write_LED>
 122:	fd cf       	rjmp	.-6      	; 0x11e <main+0x4>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
