
MMC_SD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000b9c  00800100  000024ea  0000257e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000041  00800c9c  00800c9c  0000311a  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  0000311a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000468  00000000  00000000  000031ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000022d2  00000000  00000000  00003622  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000091c  00000000  00000000  000058f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001df4  00000000  00000000  00006210  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000310  00000000  00000000  00008004  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000861  00000000  00000000  00008314  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001822  00000000  00000000  00008b75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  0000a397  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	1c e0       	ldi	r17, 0x0C	; 12
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea ee       	ldi	r30, 0xEA	; 234
      a0:	f4 e2       	ldi	r31, 0x24	; 36
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 39       	cpi	r26, 0x9C	; 156
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	1c e0       	ldi	r17, 0x0C	; 12
      b4:	ac e9       	ldi	r26, 0x9C	; 156
      b6:	bc e0       	ldi	r27, 0x0C	; 12
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 3d       	cpi	r26, 0xDD	; 221
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 0d 02 	call	0x41a	; 0x41a <main>
      c6:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <LED_Off>:
//***********************************************************************
//			关闭数码管，防止显示乱码
//***********************************************************************
void LED_Off()
{
    PORTD=0xFF;
      ce:	8f ef       	ldi	r24, 0xFF	; 255
      d0:	82 bb       	out	0x12, r24	; 18
	DDRD=0xFF;
      d2:	81 bb       	out	0x11, r24	; 17
	D_LE1;                             				//关掉数码管，以免显示乱码                   
      d4:	94 9a       	sbi	0x12, 4	; 18
    W_LE1;                     
      d6:	95 9a       	sbi	0x12, 5	; 18
    Data_IO=0xFF;                      				//关数码管            
      d8:	8b bb       	out	0x1b, r24	; 27
    W_LE0; 
      da:	95 98       	cbi	0x12, 5	; 18
}
      dc:	08 95       	ret

000000de <disp_image>:
extern u08  FAT32_Enable;
//***********************************************************************
//			显示图片函数，每张图片轮流显示，文件位于根目录下，24位色
//***********************************************************************
void disp_image(void)
  {
      de:	2f 92       	push	r2
      e0:	3f 92       	push	r3
      e2:	4f 92       	push	r4
      e4:	5f 92       	push	r5
      e6:	6f 92       	push	r6
      e8:	7f 92       	push	r7
      ea:	8f 92       	push	r8
      ec:	9f 92       	push	r9
      ee:	af 92       	push	r10
      f0:	bf 92       	push	r11
      f2:	cf 92       	push	r12
      f4:	df 92       	push	r13
      f6:	ef 92       	push	r14
      f8:	ff 92       	push	r15
      fa:	0f 93       	push	r16
      fc:	1f 93       	push	r17
      fe:	df 93       	push	r29
     100:	cf 93       	push	r28
     102:	cd b7       	in	r28, 0x3d	; 61
     104:	de b7       	in	r29, 0x3e	; 62
     106:	ae 97       	sbiw	r28, 0x2e	; 46
     108:	0f b6       	in	r0, 0x3f	; 63
     10a:	f8 94       	cli
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	0f be       	out	0x3f, r0	; 63
     110:	cd bf       	out	0x3d, r28	; 61
    WORD count= 1 ,i =0   ;
	u08 *buffer ;
	u08 type ,x , rgb,first ,color_byte,byte1,byte2,byte3 ;
	u16 y ,color,tmp_color ;
    u32 p;							//簇指示值			
	type = 1 ;
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	89 83       	std	Y+1, r24	; 0x01

    struct direntry BMPInfo;		//要显示的BMP文件信息		
	
	
	
	if( image_all == 0 )    		//读取总图片数
     116:	80 91 9e 0c 	lds	r24, 0x0C9E
     11a:	90 91 9f 0c 	lds	r25, 0x0C9F
     11e:	9e 01       	movw	r18, r28
     120:	2e 5f       	subi	r18, 0xFE	; 254
     122:	3f 4f       	sbci	r19, 0xFF	; 255
     124:	ae 01       	movw	r20, r28
     126:	4f 5f       	subi	r20, 0xFF	; 255
     128:	5f 4f       	sbci	r21, 0xFF	; 255
     12a:	89 2b       	or	r24, r25
     12c:	09 f0       	breq	.+2      	; 0x130 <disp_image+0x52>
     12e:	4b c0       	rjmp	.+150    	; 0x1c6 <disp_image+0xe8>
	  {
         image_count =  0 ;
     130:	10 92 9d 0c 	sts	0x0C9D, r1
     134:	10 92 9c 0c 	sts	0x0C9C, r1
	     byte1 = Search(&BMPInfo,&image_count,&type) ;
     138:	c9 01       	movw	r24, r18
     13a:	6c e9       	ldi	r22, 0x9C	; 156
     13c:	7c e0       	ldi	r23, 0x0C	; 12
     13e:	0e 94 4d 06 	call	0xc9a	; 0xc9a <Search>
     142:	88 a7       	std	Y+40, r24	; 0x28
		 image_all = image_count ;
     144:	80 91 9c 0c 	lds	r24, 0x0C9C
     148:	90 91 9d 0c 	lds	r25, 0x0C9D
     14c:	90 93 9f 0c 	sts	0x0C9F, r25
     150:	80 93 9e 0c 	sts	0x0C9E, r24
 		 DisplayChar(image_all/10+'0',8,9,0xffff);  //BMP图片数量显示
     154:	6a e0       	ldi	r22, 0x0A	; 10
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	0e 94 3d 12 	call	0x247a	; 0x247a <__udivmodhi4>
     15c:	cb 01       	movw	r24, r22
     15e:	c0 96       	adiw	r24, 0x30	; 48
     160:	68 e0       	ldi	r22, 0x08	; 8
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	49 e0       	ldi	r20, 0x09	; 9
     166:	50 e0       	ldi	r21, 0x00	; 0
     168:	2f ef       	ldi	r18, 0xFF	; 255
     16a:	3f ef       	ldi	r19, 0xFF	; 255
     16c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <DisplayChar>
		 DisplayChar(image_all%10+'0',9,9,0xffff);  //BMP图片数量显示
     170:	80 91 9e 0c 	lds	r24, 0x0C9E
     174:	90 91 9f 0c 	lds	r25, 0x0C9F
     178:	6a e0       	ldi	r22, 0x0A	; 10
     17a:	70 e0       	ldi	r23, 0x00	; 0
     17c:	0e 94 3d 12 	call	0x247a	; 0x247a <__udivmodhi4>
     180:	c0 96       	adiw	r24, 0x30	; 48
     182:	69 e0       	ldi	r22, 0x09	; 9
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	49 e0       	ldi	r20, 0x09	; 9
     188:	50 e0       	ldi	r21, 0x00	; 0
     18a:	2f ef       	ldi	r18, 0xFF	; 255
     18c:	3f ef       	ldi	r19, 0xFF	; 255
     18e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <DisplayChar>
		 DisplayString("       ",10,9,0xffff);  	//BMP图片数量，最大显示99张，可以更改算法
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	6a e0       	ldi	r22, 0x0A	; 10
     198:	70 e0       	ldi	r23, 0x00	; 0
     19a:	49 e0       	ldi	r20, 0x09	; 9
     19c:	50 e0       	ldi	r21, 0x00	; 0
     19e:	2f ef       	ldi	r18, 0xFF	; 255
     1a0:	3f ef       	ldi	r19, 0xFF	; 255
     1a2:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DisplayString>
     1a6:	80 e1       	ldi	r24, 0x10	; 16
     1a8:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1aa:	28 eb       	ldi	r18, 0xB8	; 184
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	f9 01       	movw	r30, r18
     1b0:	31 97       	sbiw	r30, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <disp_image+0xd2>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1b6:	d9 f7       	brne	.-10     	; 0x1ae <disp_image+0xd0>
		 delay_ms(1000);
		 image_count = 1 ;
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	90 93 9d 0c 	sts	0x0C9D, r25
     1c0:	80 93 9c 0c 	sts	0x0C9C, r24
     1c4:	06 c0       	rjmp	.+12     	; 0x1d2 <disp_image+0xf4>
		 		 
	  }
	else  
      {		
          byte1 = Search(&BMPInfo,&image_count,&type) ;
     1c6:	c9 01       	movw	r24, r18
     1c8:	6c e9       	ldi	r22, 0x9C	; 156
     1ca:	7c e0       	ldi	r23, 0x0C	; 12
     1cc:	0e 94 4d 06 	call	0xc9a	; 0xc9a <Search>
     1d0:	88 a7       	std	Y+40, r24	; 0x28
      }	
	 
	 
	 
	p = BMPInfo.deStartCluster+(((u32)BMPInfo.deHighClust)<<16);//读文件首簇
     1d2:	8e 89       	ldd	r24, Y+22	; 0x16
     1d4:	9f 89       	ldd	r25, Y+23	; 0x17
     1d6:	a0 e0       	ldi	r26, 0x00	; 0
     1d8:	b0 e0       	ldi	r27, 0x00	; 0
     1da:	6c 01       	movw	r12, r24
     1dc:	bb 24       	eor	r11, r11
     1de:	aa 24       	eor	r10, r10
     1e0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     1e2:	9d 8d       	ldd	r25, Y+29	; 0x1d
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	a8 0e       	add	r10, r24
     1ea:	b9 1e       	adc	r11, r25
     1ec:	ca 1e       	adc	r12, r26
     1ee:	db 1e       	adc	r13, r27
	x = 0 ;
	y = 159 ;
	rgb = 0 ;
	count = 0 ;
	first = 0 ;
	buffer=malloc(512);	
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	92 e0       	ldi	r25, 0x02	; 2
     1f4:	0e 94 19 11 	call	0x2232	; 0x2232 <malloc>
     1f8:	2c 01       	movw	r4, r24
     1fa:	1a a6       	std	Y+42, r1	; 0x2a
     1fc:	99 24       	eor	r9, r9
     1fe:	19 a6       	std	Y+41, r1	; 0x29
     200:	8f e9       	ldi	r24, 0x9F	; 159
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	9d a3       	std	Y+37, r25	; 0x25
     206:	8c a3       	std	Y+36, r24	; 0x24
     208:	22 24       	eor	r2, r2
     20a:	33 24       	eor	r3, r3
     20c:	b2 c0       	rjmp	.+356    	; 0x372 <disp_image+0x294>
		i = 0 ;
	
	    for( ; i < SectorsPerClust ; i++ )      //簇
	     {
	 
	        FAT_LoadPartCluster(p,i,buffer);	//读一个扇区	
     20e:	c6 01       	movw	r24, r12
     210:	b5 01       	movw	r22, r10
     212:	a1 01       	movw	r20, r2
     214:	92 01       	movw	r18, r4
     216:	0e 94 ce 04 	call	0x99c	; 0x99c <FAT_LoadPartCluster>
	   
	        if(i==0 && first==0) { count= buffer[0x0a] ; color_byte = buffer[0x1c] / 8  ;  first = 1 ; } 
     21a:	21 14       	cp	r2, r1
     21c:	31 04       	cpc	r3, r1
     21e:	71 f4       	brne	.+28     	; 0x23c <disp_image+0x15e>
     220:	99 a5       	ldd	r25, Y+41	; 0x29
     222:	99 23       	and	r25, r25
     224:	59 f4       	brne	.+22     	; 0x23c <disp_image+0x15e>
     226:	f2 01       	movw	r30, r4
     228:	82 85       	ldd	r24, Z+10	; 0x0a
     22a:	68 2e       	mov	r6, r24
     22c:	77 24       	eor	r7, r7
     22e:	84 8c       	ldd	r8, Z+28	; 0x1c
     230:	86 94       	lsr	r8
     232:	86 94       	lsr	r8
     234:	86 94       	lsr	r8
     236:	f1 e0       	ldi	r31, 0x01	; 1
     238:	f9 a7       	std	Y+41, r31	; 0x29
     23a:	02 c0       	rjmp	.+4      	; 0x240 <disp_image+0x162>
     23c:	66 24       	eor	r6, r6
     23e:	77 24       	eor	r7, r7
     240:	72 01       	movw	r14, r4
     242:	e6 0c       	add	r14, r6
     244:	f7 1c       	adc	r15, r7
	        
			
			while(count<512)  //读取一簇512扇区 (SectorsPerClust 每簇扇区数)
	          {
		   
		        if(color_byte == 3)   //24位颜色图
     246:	83 e0       	ldi	r24, 0x03	; 3
     248:	88 16       	cp	r8, r24
     24a:	31 f5       	brne	.+76     	; 0x298 <disp_image+0x1ba>
		          {
                      switch ( rgb ) 
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	99 16       	cp	r9, r25
     250:	71 f0       	breq	.+28     	; 0x26e <disp_image+0x190>
     252:	99 16       	cp	r9, r25
     254:	28 f0       	brcs	.+10     	; 0x260 <disp_image+0x182>
     256:	e2 e0       	ldi	r30, 0x02	; 2
     258:	9e 16       	cp	r9, r30
     25a:	09 f0       	breq	.+2      	; 0x25e <disp_image+0x180>
     25c:	65 c0       	rjmp	.+202    	; 0x328 <disp_image+0x24a>
     25e:	12 c0       	rjmp	.+36     	; 0x284 <disp_image+0x1a6>
                        {
			               case 0 : tmp_color = buffer[count]>>3 ;
			                        color |= tmp_color;
     260:	f7 01       	movw	r30, r14
     262:	80 81       	ld	r24, Z
     264:	86 95       	lsr	r24
     266:	86 95       	lsr	r24
     268:	86 95       	lsr	r24
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	12 c0       	rjmp	.+36     	; 0x292 <disp_image+0x1b4>
					                break ;
					  
			               case 1 : tmp_color = buffer[count]>>2 ;
     26e:	f7 01       	movw	r30, r14
     270:	80 81       	ld	r24, Z
     272:	86 95       	lsr	r24
     274:	86 95       	lsr	r24
     276:	90 e0       	ldi	r25, 0x00	; 0
			                        tmp_color <<= 5 ;
			                        color |= tmp_color ;
     278:	25 e0       	ldi	r18, 0x05	; 5
     27a:	88 0f       	add	r24, r24
     27c:	99 1f       	adc	r25, r25
     27e:	2a 95       	dec	r18
     280:	e1 f7       	brne	.-8      	; 0x27a <disp_image+0x19c>
     282:	07 c0       	rjmp	.+14     	; 0x292 <disp_image+0x1b4>
					                break ;
					   
       			           case 2 : tmp_color = buffer[count]>>3 ;
     284:	f7 01       	movw	r30, r14
     286:	80 81       	ld	r24, Z
			                        tmp_color <<= 11 ;
			                        color |= tmp_color ;
     288:	88 7f       	andi	r24, 0xF8	; 248
     28a:	8c a7       	std	Y+44, r24	; 0x2c
     28c:	1b a6       	std	Y+43, r1	; 0x2b
     28e:	8b a5       	ldd	r24, Y+43	; 0x2b
     290:	9c a5       	ldd	r25, Y+44	; 0x2c
     292:	08 2b       	or	r16, r24
     294:	19 2b       	or	r17, r25
     296:	48 c0       	rjmp	.+144    	; 0x328 <disp_image+0x24a>
			
                      rgb ++ ;
			      }
		        else
		          {
			          if(color_byte==2)  //16位颜色图
     298:	92 e0       	ldi	r25, 0x02	; 2
     29a:	89 16       	cp	r8, r25
     29c:	81 f4       	brne	.+32     	; 0x2be <disp_image+0x1e0>
				        {
				          switch ( rgb )
     29e:	99 20       	and	r9, r9
     2a0:	e9 f0       	breq	.+58     	; 0x2dc <disp_image+0x1fe>
     2a2:	e1 e0       	ldi	r30, 0x01	; 1
     2a4:	9e 16       	cp	r9, r30
     2a6:	09 f0       	breq	.+2      	; 0x2aa <disp_image+0x1cc>
     2a8:	3f c0       	rjmp	.+126    	; 0x328 <disp_image+0x24a>
					          case 0 : byte1 = buffer[count] ;
								       break ; 
								   
						      case 1 :    
								       color = buffer[count] ;
								       color<<=8 ;
     2aa:	f7 01       	movw	r30, r14
     2ac:	f0 81       	ld	r31, Z
     2ae:	fb a3       	std	Y+35, r31	; 0x23
     2b0:	1a a2       	std	Y+34, r1	; 0x22
								       color |= byte1 ;
     2b2:	88 a5       	ldd	r24, Y+40	; 0x28
     2b4:	08 2f       	mov	r16, r24
     2b6:	10 e0       	ldi	r17, 0x00	; 0
     2b8:	ea a1       	ldd	r30, Y+34	; 0x22
     2ba:	fb a1       	ldd	r31, Y+35	; 0x23
     2bc:	33 c0       	rjmp	.+102    	; 0x324 <disp_image+0x246>
					      rgb ++ ;
				    
				        }
				      else 
				        {
				          if(color_byte==4) //32位颜色图
     2be:	f4 e0       	ldi	r31, 0x04	; 4
     2c0:	8f 16       	cp	r8, r31
     2c2:	99 f5       	brne	.+102    	; 0x32a <disp_image+0x24c>
				            {
				              switch ( rgb )
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	98 16       	cp	r9, r24
     2c8:	69 f0       	breq	.+26     	; 0x2e4 <disp_image+0x206>
     2ca:	98 16       	cp	r9, r24
     2cc:	38 f0       	brcs	.+14     	; 0x2dc <disp_image+0x1fe>
     2ce:	92 e0       	ldi	r25, 0x02	; 2
     2d0:	99 16       	cp	r9, r25
     2d2:	61 f0       	breq	.+24     	; 0x2ec <disp_image+0x20e>
     2d4:	e3 e0       	ldi	r30, 0x03	; 3
     2d6:	9e 16       	cp	r9, r30
     2d8:	39 f5       	brne	.+78     	; 0x328 <disp_image+0x24a>
     2da:	0c c0       	rjmp	.+24     	; 0x2f4 <disp_image+0x216>
					            {
					              case 0 :  byte1 = buffer[count] ;
     2dc:	f7 01       	movw	r30, r14
     2de:	f0 81       	ld	r31, Z
     2e0:	f8 a7       	std	Y+40, r31	; 0x28
     2e2:	22 c0       	rjmp	.+68     	; 0x328 <disp_image+0x24a>
								            break ; 
								   
						          case 1 :  byte2 = buffer[count] ;
     2e4:	f7 01       	movw	r30, r14
     2e6:	f0 81       	ld	r31, Z
     2e8:	ff a3       	std	Y+39, r31	; 0x27
     2ea:	1e c0       	rjmp	.+60     	; 0x328 <disp_image+0x24a>
                                            break ;
									   
							      case 2 :  byte3 = buffer[count] ;
     2ec:	f7 01       	movw	r30, r14
     2ee:	f0 81       	ld	r31, Z
     2f0:	fe a3       	std	Y+38, r31	; 0x26
     2f2:	1a c0       	rjmp	.+52     	; 0x328 <disp_image+0x24a>
							                break ;
									   
							      case 3 :  tmp_color = byte1 >> 3 ;
			                                color |= tmp_color;
									        tmp_color = byte2 >>2 ;
     2f4:	2f a1       	ldd	r18, Y+39	; 0x27
     2f6:	26 95       	lsr	r18
     2f8:	26 95       	lsr	r18
     2fa:	30 e0       	ldi	r19, 0x00	; 0
									   
							      case 2 :  byte3 = buffer[count] ;
							                break ;
									   
							      case 3 :  tmp_color = byte1 >> 3 ;
			                                color |= tmp_color;
     2fc:	88 a5       	ldd	r24, Y+40	; 0x28
     2fe:	86 95       	lsr	r24
     300:	86 95       	lsr	r24
     302:	86 95       	lsr	r24
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	08 2b       	or	r16, r24
     308:	19 2b       	or	r17, r25
									        tmp_color = byte2 >>2 ;
			                                tmp_color <<= 5 ;
			                                color |= tmp_color ;
     30a:	85 e0       	ldi	r24, 0x05	; 5
     30c:	22 0f       	add	r18, r18
     30e:	33 1f       	adc	r19, r19
     310:	8a 95       	dec	r24
     312:	e1 f7       	brne	.-8      	; 0x30c <disp_image+0x22e>
     314:	02 2b       	or	r16, r18
     316:	13 2b       	or	r17, r19
									        tmp_color = byte3 >>3 ;
			                                tmp_color <<= 11 ;
			                                color |= tmp_color ;
     318:	8e a1       	ldd	r24, Y+38	; 0x26
     31a:	88 7f       	andi	r24, 0xF8	; 248
     31c:	8e a7       	std	Y+46, r24	; 0x2e
     31e:	1d a6       	std	Y+45, r1	; 0x2d
     320:	ed a5       	ldd	r30, Y+45	; 0x2d
     322:	fe a5       	ldd	r31, Y+46	; 0x2e
     324:	0e 2b       	or	r16, r30
     326:	1f 2b       	or	r17, r31
									        break ;
					     
					            }
					           rgb ++ ;
     328:	93 94       	inc	r9
				     
				        }   
			 
			       }
           
		   count ++ ;
     32a:	08 94       	sec
     32c:	61 1c       	adc	r6, r1
     32e:	71 1c       	adc	r7, r1
		   
		   if(rgb == color_byte)        //读取1像素数数据后显示
     330:	98 14       	cp	r9, r8
     332:	99 f4       	brne	.+38     	; 0x35a <disp_image+0x27c>
		     {
			    GUIpoint(x, y,color) ;
     334:	8a a5       	ldd	r24, Y+42	; 0x2a
     336:	6c a1       	ldd	r22, Y+36	; 0x24
     338:	a8 01       	movw	r20, r16
     33a:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GUIpoint>
				color = 0x00 ;
			    x++ ;
     33e:	fa a5       	ldd	r31, Y+42	; 0x2a
     340:	ff 5f       	subi	r31, 0xFF	; 255
     342:	fa a7       	std	Y+42, r31	; 0x2a
			    if(x>=128)
     344:	f7 ff       	sbrs	r31, 7
     346:	06 c0       	rjmp	.+12     	; 0x354 <disp_image+0x276>
				  {
				    y-- ;
     348:	8c a1       	ldd	r24, Y+36	; 0x24
     34a:	9d a1       	ldd	r25, Y+37	; 0x25
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	9d a3       	std	Y+37, r25	; 0x25
     350:	8c a3       	std	Y+36, r24	; 0x24
     352:	1a a6       	std	Y+42, r1	; 0x2a
     354:	99 24       	eor	r9, r9
     356:	00 e0       	ldi	r16, 0x00	; 0
     358:	10 e0       	ldi	r17, 0x00	; 0
     35a:	08 94       	sec
     35c:	e1 1c       	adc	r14, r1
     35e:	f1 1c       	adc	r15, r1
	        if(i==0 && first==0) { count= buffer[0x0a] ; color_byte = buffer[0x1c] / 8  ;  first = 1 ; } 
	        else { count=0 ; }
	   
	        
			
			while(count<512)  //读取一簇512扇区 (SectorsPerClust 每簇扇区数)
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	69 16       	cp	r6, r25
     364:	92 e0       	ldi	r25, 0x02	; 2
     366:	79 06       	cpc	r7, r25
     368:	08 f4       	brcc	.+2      	; 0x36c <disp_image+0x28e>
     36a:	6d cf       	rjmp	.-294    	; 0x246 <disp_image+0x168>
	buffer=malloc(512);	
	while(1)
	 {
		i = 0 ;
	
	    for( ; i < SectorsPerClust ; i++ )      //簇
     36c:	08 94       	sec
     36e:	21 1c       	adc	r2, r1
     370:	31 1c       	adc	r3, r1
     372:	80 91 b3 0c 	lds	r24, 0x0CB3
     376:	90 91 b4 0c 	lds	r25, 0x0CB4
     37a:	28 16       	cp	r2, r24
     37c:	39 06       	cpc	r3, r25
     37e:	08 f4       	brcc	.+2      	; 0x382 <disp_image+0x2a4>
     380:	46 cf       	rjmp	.-372    	; 0x20e <disp_image+0x130>
			
		}
	   
	 }  // 读取完一簇数据
	 
	 free(buffer) ;
     382:	c2 01       	movw	r24, r4
     384:	0e 94 c6 11 	call	0x238c	; 0x238c <free>
	 p=FAT_NextCluster(p);//读下一簇数据			
     388:	c6 01       	movw	r24, r12
     38a:	b5 01       	movw	r22, r10
     38c:	0e 94 03 05 	call	0xa06	; 0xa06 <FAT_NextCluster>
     390:	5b 01       	movw	r10, r22
     392:	6c 01       	movw	r12, r24
	 buffer=malloc(512);	
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	92 e0       	ldi	r25, 0x02	; 2
     398:	0e 94 19 11 	call	0x2232	; 0x2232 <malloc>
     39c:	9c 01       	movw	r18, r24
     39e:	2c 01       	movw	r4, r24
	
	if(p == 0x0fffffff || p == 0x0ffffff8 || (FAT32_Enable == 0 && p == 0xffff))//如果无后续簇则结束
     3a0:	ef ef       	ldi	r30, 0xFF	; 255
     3a2:	ae 16       	cp	r10, r30
     3a4:	ef ef       	ldi	r30, 0xFF	; 255
     3a6:	be 06       	cpc	r11, r30
     3a8:	ef ef       	ldi	r30, 0xFF	; 255
     3aa:	ce 06       	cpc	r12, r30
     3ac:	ef e0       	ldi	r30, 0x0F	; 15
     3ae:	de 06       	cpc	r13, r30
     3b0:	c1 f0       	breq	.+48     	; 0x3e2 <disp_image+0x304>
     3b2:	f8 ef       	ldi	r31, 0xF8	; 248
     3b4:	af 16       	cp	r10, r31
     3b6:	ff ef       	ldi	r31, 0xFF	; 255
     3b8:	bf 06       	cpc	r11, r31
     3ba:	ff ef       	ldi	r31, 0xFF	; 255
     3bc:	cf 06       	cpc	r12, r31
     3be:	ff e0       	ldi	r31, 0x0F	; 15
     3c0:	df 06       	cpc	r13, r31
     3c2:	79 f0       	breq	.+30     	; 0x3e2 <disp_image+0x304>
     3c4:	80 91 cc 0c 	lds	r24, 0x0CCC
     3c8:	88 23       	and	r24, r24
     3ca:	09 f0       	breq	.+2      	; 0x3ce <disp_image+0x2f0>
     3cc:	1d cf       	rjmp	.-454    	; 0x208 <disp_image+0x12a>
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	a8 16       	cp	r10, r24
     3d2:	8f ef       	ldi	r24, 0xFF	; 255
     3d4:	b8 06       	cpc	r11, r24
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	c8 06       	cpc	r12, r24
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	d8 06       	cpc	r13, r24
     3de:	09 f0       	breq	.+2      	; 0x3e2 <disp_image+0x304>
     3e0:	13 cf       	rjmp	.-474    	; 0x208 <disp_image+0x12a>
		{
		        free(buffer) ;
     3e2:	c9 01       	movw	r24, r18
     3e4:	0e 94 c6 11 	call	0x238c	; 0x238c <free>
	 
  }
		
	free(buffer) ;
  
 }
     3e8:	ae 96       	adiw	r28, 0x2e	; 46
     3ea:	0f b6       	in	r0, 0x3f	; 63
     3ec:	f8 94       	cli
     3ee:	de bf       	out	0x3e, r29	; 62
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	cd bf       	out	0x3d, r28	; 61
     3f4:	cf 91       	pop	r28
     3f6:	df 91       	pop	r29
     3f8:	1f 91       	pop	r17
     3fa:	0f 91       	pop	r16
     3fc:	ff 90       	pop	r15
     3fe:	ef 90       	pop	r14
     400:	df 90       	pop	r13
     402:	cf 90       	pop	r12
     404:	bf 90       	pop	r11
     406:	af 90       	pop	r10
     408:	9f 90       	pop	r9
     40a:	8f 90       	pop	r8
     40c:	7f 90       	pop	r7
     40e:	6f 90       	pop	r6
     410:	5f 90       	pop	r5
     412:	4f 90       	pop	r4
     414:	3f 90       	pop	r3
     416:	2f 90       	pop	r2
     418:	08 95       	ret

0000041a <main>:
}
//***********************************************************************
//			主函数，初始化及函数调用
//***********************************************************************
int main(void)
{
     41a:	0f 93       	push	r16
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	98 e4       	ldi	r25, 0x48	; 72
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	f1 f7       	brne	.-4      	; 0x426 <main+0xc>
  unsigned char i, x,retry=0;
  u08 ok,er ;
  unsigned int y ;
  delay_ms(10);
  McuInit();
     42a:	0e 94 4b 0b 	call	0x1696	; 0x1696 <McuInit>
  LCD_RD1; 
     42e:	80 91 65 00 	lds	r24, 0x0065
     432:	80 61       	ori	r24, 0x10	; 16
     434:	80 93 65 00 	sts	0x0065, r24
  LCD_Init();     									//LCD初始化
     438:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_Init>
  x = 1 ;
  y = 0 ;
  LCD_clear(0) ;
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <LCD_clear>
     444:	10 e0       	ldi	r17, 0x00	; 0
     446:	81 2f       	mov	r24, r17
     448:	8e 5e       	subi	r24, 0xEE	; 238
  	
  for(i=0; i<5 ;i++)
   {
	DisplayGB2312(i+18,i+1,0,0x07E0) ;    			//显示欣世纪电子
     44a:	1f 5f       	subi	r17, 0xFF	; 255
     44c:	61 2f       	mov	r22, r17
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	20 ee       	ldi	r18, 0xE0	; 224
     452:	37 e0       	ldi	r19, 0x07	; 7
     454:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <DisplayGB2312>
  LCD_Init();     									//LCD初始化
  x = 1 ;
  y = 0 ;
  LCD_clear(0) ;
  	
  for(i=0; i<5 ;i++)
     458:	15 30       	cpi	r17, 0x05	; 5
     45a:	a9 f7       	brne	.-22     	; 0x446 <main+0x2c>
   {
	DisplayGB2312(i+18,i+1,0,0x07E0) ;    			//显示欣世纪电子
   }
	DisplayString("DMAVR-128 Board",0,1,0xf800);  	//字符串显示调用
     45c:	88 e0       	ldi	r24, 0x08	; 8
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	41 e0       	ldi	r20, 0x01	; 1
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	38 ef       	ldi	r19, 0xF8	; 248
     46c:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DisplayString>
	DisplayString("Show BMP from SD",0,2,0xeee);  	//字符串显示调用
     470:	88 e1       	ldi	r24, 0x18	; 24
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	42 e0       	ldi	r20, 0x02	; 2
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	2e ee       	ldi	r18, 0xEE	; 238
     47e:	3e e0       	ldi	r19, 0x0E	; 14
     480:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DisplayString>
	GUIline(0,49,127,49,0xe387);
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	61 e3       	ldi	r22, 0x31	; 49
     488:	4f e7       	ldi	r20, 0x7F	; 127
     48a:	21 e3       	ldi	r18, 0x31	; 49
     48c:	07 e8       	ldi	r16, 0x87	; 135
     48e:	13 ee       	ldi	r17, 0xE3	; 227
     490:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <GUIline>
	GUIline(0,51,127,51,0xfef);
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	63 e3       	ldi	r22, 0x33	; 51
     498:	4f e7       	ldi	r20, 0x7F	; 127
     49a:	23 e3       	ldi	r18, 0x33	; 51
     49c:	0f ee       	ldi	r16, 0xEF	; 239
     49e:	1f e0       	ldi	r17, 0x0F	; 15
     4a0:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <GUIline>
		
 	ok = 0 ;
 	er = 0 ;
	DisplayString("Starting Init SD",0,4,0xffff);  //字符串显示调用
     4a4:	89 e2       	ldi	r24, 0x29	; 41
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	44 e0       	ldi	r20, 0x04	; 4
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	2f ef       	ldi	r18, 0xFF	; 255
     4b2:	3f ef       	ldi	r19, 0xFF	; 255
     4b4:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DisplayString>
	DisplayString("Waiting...",0,5,0xffff);  		//字符串显示调用
     4b8:	8a e3       	ldi	r24, 0x3A	; 58
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	45 e0       	ldi	r20, 0x05	; 5
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	2f ef       	ldi	r18, 0xFF	; 255
     4c6:	3f ef       	ldi	r19, 0xFF	; 255
     4c8:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DisplayString>
  	mmcInit();
     4cc:	0e 94 c1 04 	call	0x982	; 0x982 <mmcInit>
     4d0:	83 e3       	ldi	r24, 0x33	; 51
     4d2:	97 e0       	ldi	r25, 0x07	; 7
     4d4:	01 97       	sbiw	r24, 0x01	; 1
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <main+0xba>
     4d8:	10 e0       	ldi	r17, 0x00	; 0
     4da:	18 c0       	rjmp	.+48     	; 0x50c <main+0xf2>
  	delay_ms(1);
  
	  
  while(mmcReset())									//初始化SD卡					
	{
		retry++;
     4dc:	1f 5f       	subi	r17, 0xFF	; 255
		if(retry>20)
     4de:	15 31       	cpi	r17, 0x15	; 21
     4e0:	a9 f4       	brne	.+42     	; 0x50c <main+0xf2>
		{
			while(1)   											//初始化失败显示
			{
				DisplayString("Init Failure",0,7,0xf800);  		//字符串显示调用
     4e2:	85 e4       	ldi	r24, 0x45	; 69
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	47 e0       	ldi	r20, 0x07	; 7
     4ec:	50 e0       	ldi	r21, 0x00	; 0
     4ee:	20 e0       	ldi	r18, 0x00	; 0
     4f0:	38 ef       	ldi	r19, 0xF8	; 248
     4f2:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DisplayString>
	            DisplayString("Please Check SD",0,8,0xf800);  	//字符串显示调用
     4f6:	82 e5       	ldi	r24, 0x52	; 82
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	48 e0       	ldi	r20, 0x08	; 8
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	20 e0       	ldi	r18, 0x00	; 0
     504:	38 ef       	ldi	r19, 0xF8	; 248
     506:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DisplayString>
     50a:	eb cf       	rjmp	.-42     	; 0x4e2 <main+0xc8>
	DisplayString("Waiting...",0,5,0xffff);  		//字符串显示调用
  	mmcInit();
  	delay_ms(1);
  
	  
  while(mmcReset())									//初始化SD卡					
     50c:	0e 94 8a 04 	call	0x914	; 0x914 <mmcReset>
     510:	88 23       	and	r24, r24
     512:	21 f7       	brne	.-56     	; 0x4dc <main+0xc2>
	            DisplayString("Please Check SD",0,8,0xf800);  	//字符串显示调用
			}
		}
	} 
	  	  
	DisplayString("Init SD Success!",0,6,0xffff);  				//字符串显示调用
     514:	82 e6       	ldi	r24, 0x62	; 98
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	46 e0       	ldi	r20, 0x06	; 6
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	2f ef       	ldi	r18, 0xFF	; 255
     522:	3f ef       	ldi	r19, 0xFF	; 255
     524:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DisplayString>
	 
	
	if(FAT_Init())												//初始化文件系统 支持FAT16和FAT32	
     528:	0e 94 3f 0a 	call	0x147e	; 0x147e <FAT_Init>
     52c:	88 23       	and	r24, r24
     52e:	59 f0       	breq	.+22     	; 0x546 <main+0x12c>
	{
		while(1)
		{
			while(1)
			{
				DisplayString("Init FAT Failure",0,7,0xf800);  //字符串显示调用
     530:	83 e7       	ldi	r24, 0x73	; 115
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	47 e0       	ldi	r20, 0x07	; 7
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	38 ef       	ldi	r19, 0xF8	; 248
     540:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DisplayString>
     544:	f5 cf       	rjmp	.-22     	; 0x530 <main+0x116>
			}
		}

	}
	SearchInit();  												//搜索文件初始化
     546:	0e 94 1b 09 	call	0x1236	; 0x1236 <SearchInit>
     54a:	08 eb       	ldi	r16, 0xB8	; 184
     54c:	10 e0       	ldi	r17, 0x00	; 0
		    {
		      image_count ++ ;
		    }
		 else 
		    {
			  image_count = 1 ;
     54e:	c1 e0       	ldi	r28, 0x01	; 1
     550:	d0 e0       	ldi	r29, 0x00	; 0
	SearchInit();  												//搜索文件初始化

	
	while(1)                               						//轮流显示SD卡中的图片
	 {
	    disp_image() ;
     552:	0e 94 6f 00 	call	0xde	; 0xde <disp_image>
     556:	80 e1       	ldi	r24, 0x10	; 16
     558:	97 e2       	ldi	r25, 0x27	; 39
     55a:	f8 01       	movw	r30, r16
     55c:	31 97       	sbiw	r30, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <main+0x142>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     560:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     562:	d9 f7       	brne	.-10     	; 0x55a <main+0x140>
     564:	80 e1       	ldi	r24, 0x10	; 16
     566:	97 e2       	ldi	r25, 0x27	; 39
     568:	f8 01       	movw	r30, r16
     56a:	31 97       	sbiw	r30, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <main+0x150>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     56e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     570:	d9 f7       	brne	.-10     	; 0x568 <main+0x14e>
     572:	80 e1       	ldi	r24, 0x10	; 16
     574:	97 e2       	ldi	r25, 0x27	; 39
     576:	f8 01       	movw	r30, r16
     578:	31 97       	sbiw	r30, 0x01	; 1
     57a:	f1 f7       	brne	.-4      	; 0x578 <main+0x15e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     57c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     57e:	d9 f7       	brne	.-10     	; 0x576 <main+0x15c>
		delay_ms(1000) ;
		delay_ms(1000) ;
		delay_ms(1000) ;
		                              			
		if(image_count<image_all)								//轮流显示SD卡中的BMP图片
     580:	20 91 9c 0c 	lds	r18, 0x0C9C
     584:	30 91 9d 0c 	lds	r19, 0x0C9D
     588:	80 91 9e 0c 	lds	r24, 0x0C9E
     58c:	90 91 9f 0c 	lds	r25, 0x0C9F
     590:	28 17       	cp	r18, r24
     592:	39 07       	cpc	r19, r25
     594:	38 f4       	brcc	.+14     	; 0x5a4 <main+0x18a>
		    {
		      image_count ++ ;
     596:	2f 5f       	subi	r18, 0xFF	; 255
     598:	3f 4f       	sbci	r19, 0xFF	; 255
     59a:	30 93 9d 0c 	sts	0x0C9D, r19
     59e:	20 93 9c 0c 	sts	0x0C9C, r18
     5a2:	d7 cf       	rjmp	.-82     	; 0x552 <main+0x138>
		    }
		 else 
		    {
			  image_count = 1 ;
     5a4:	d0 93 9d 0c 	sts	0x0C9D, r29
     5a8:	c0 93 9c 0c 	sts	0x0C9C, r28
     5ac:	d2 cf       	rjmp	.-92     	; 0x552 <main+0x138>

000005ae <spiInit>:
// access routines
void spiInit()
{
#ifdef __AVR_ATmega128__
	// setup SPI I/O pins
	sbi(PORTB, 1);	// set SCK hi
     5ae:	c1 9a       	sbi	0x18, 1	; 24
	sbi(DDRB, 1);	// set SCK as output
     5b0:	b9 9a       	sbi	0x17, 1	; 23
	cbi(DDRB, 3);	// set MISO as input
     5b2:	bb 98       	cbi	0x17, 3	; 23
	sbi(DDRB, 2);	// set MOSI as output
     5b4:	ba 9a       	sbi	0x17, 2	; 23
	sbi(DDRB, 0);	// SS must be output for Master mode to work
     5b6:	b8 9a       	sbi	0x17, 0	; 23
	sbi(PORTB,0);   // set SS hi
     5b8:	c0 9a       	sbi	0x18, 0	; 24
	sbi(DDRB, 4);	// SS must be output for Master mode to work
#endif
	
	// setup SPI interface :
	// master mode
	sbi(SPCR, MSTR);
     5ba:	6c 9a       	sbi	0x0d, 4	; 13
	// clock = f/4
//	cbi(SPCR, SPR0);
//	cbi(SPCR, SPR1);
	// clock = f/16
	cbi(SPCR, SPR0);
     5bc:	68 98       	cbi	0x0d, 0	; 13
	sbi(SPCR, SPR1);
     5be:	69 9a       	sbi	0x0d, 1	; 13
	// select clock phase positive-going in middle of data
	cbi(SPCR, CPOL);
     5c0:	6b 98       	cbi	0x0d, 3	; 13
	// Data order MSB first
	cbi(SPCR,DORD);
     5c2:	6d 98       	cbi	0x0d, 5	; 13
	// enable SPI
	sbi(SPCR, SPE);
     5c4:	6e 9a       	sbi	0x0d, 6	; 13
	//outp((1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	//outp((1<<CPHA)|(1<<CPOL)|(1<<MSTR)|(1<<SPE)|(1<<SPR0)|(1<<SPR1), SPCR );
	//outp((1<<CPHA)|(1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	
	// clear status
	inb(SPSR);
     5c6:	8e b1       	in	r24, 0x0e	; 14
	spiTransferComplete = TRUE;
     5c8:	8f ef       	ldi	r24, 0xFF	; 255
     5ca:	80 93 aa 0c 	sts	0x0CAA, r24

	// enable SPI interrupt
	#ifdef SPI_USEINT
	sbi(SPCR, SPIE);
	#endif
}
     5ce:	08 95       	ret

000005d0 <spiSendByte>:
	// send a byte over SPI and ignore reply
	#ifdef SPI_USEINT
		while(!spiTransferComplete);
		spiTransferComplete = FALSE;
	#else
		while(!(inb(SPSR) & (1<<SPIF)));
     5d0:	77 9b       	sbis	0x0e, 7	; 14
     5d2:	fe cf       	rjmp	.-4      	; 0x5d0 <spiSendByte>
	#endif

	outb(SPDR, data);
     5d4:	8f b9       	out	0x0f, r24	; 15
}
     5d6:	08 95       	ret

000005d8 <spiTransferByte>:
	outb(SPDR, data);
	// wait for transfer to complete
	while(!spiTransferComplete);
	#else
	// send the given data
	outb(SPDR, data);
     5d8:	8f b9       	out	0x0f, r24	; 15
	// wait for transfer to complete
	while(!(inb(SPSR) & (1<<SPIF)));
     5da:	77 9b       	sbis	0x0e, 7	; 14
     5dc:	fe cf       	rjmp	.-4      	; 0x5da <spiTransferByte+0x2>
	#endif
	// return the received data
	return inb(SPDR);
     5de:	8f b1       	in	r24, 0x0f	; 15
}
     5e0:	08 95       	ret

000005e2 <spiTransferWord>:
	outb(SPDR, data);
	// wait for transfer to complete
	while(!spiTransferComplete);
	#else
	// send the given data
	outb(SPDR, data);
     5e2:	9f b9       	out	0x0f, r25	; 15
	// wait for transfer to complete
	while(!(inb(SPSR) & (1<<SPIF)));
     5e4:	77 9b       	sbis	0x0e, 7	; 14
     5e6:	fe cf       	rjmp	.-4      	; 0x5e4 <spiTransferWord+0x2>
	#endif
	// return the received data
	return inb(SPDR);
     5e8:	3f b1       	in	r19, 0x0f	; 15
	outb(SPDR, data);
	// wait for transfer to complete
	while(!spiTransferComplete);
	#else
	// send the given data
	outb(SPDR, data);
     5ea:	8f b9       	out	0x0f, r24	; 15
	// wait for transfer to complete
	while(!(inb(SPSR) & (1<<SPIF)));
     5ec:	77 9b       	sbis	0x0e, 7	; 14
     5ee:	fe cf       	rjmp	.-4      	; 0x5ec <spiTransferWord+0xa>
	#endif
	// return the received data
	return inb(SPDR);
     5f0:	2f b1       	in	r18, 0x0f	; 15
u16 spiTransferWord(u16 data)
{
	u16 rxData = 0;

	// send MS byte of given data
	rxData = (spiTransferByte((data>>8) & 0x00FF))<<8;
     5f2:	93 2f       	mov	r25, r19
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	28 2b       	or	r18, r24
     5fa:	39 2b       	or	r19, r25
	// send LS byte of given data
	rxData |= (spiTransferByte(data & 0x00FF));

	// return the received data
	return rxData;
}
     5fc:	c9 01       	movw	r24, r18
     5fe:	08 95       	ret

00000600 <mmcCommand>:
}
//***********************************************************************
//			单个SD卡命令传送
//***********************************************************************
u08 mmcCommand(u08 cmd, u32 arg)
{
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	7a 01       	movw	r14, r20
     60a:	8b 01       	movw	r16, r22
	u08 r1;
	u08 retry=0;
	// send command
	spiTransferByte(cmd | 0x40);
     60c:	80 64       	ori	r24, 0x40	; 64
     60e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
	spiTransferByte(arg>>24);
     612:	81 2f       	mov	r24, r17
     614:	99 27       	eor	r25, r25
     616:	aa 27       	eor	r26, r26
     618:	bb 27       	eor	r27, r27
     61a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
	spiTransferByte(arg>>16);
     61e:	c8 01       	movw	r24, r16
     620:	aa 27       	eor	r26, r26
     622:	bb 27       	eor	r27, r27
     624:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
	spiTransferByte(arg>>8);
     628:	bb 27       	eor	r27, r27
     62a:	a1 2f       	mov	r26, r17
     62c:	90 2f       	mov	r25, r16
     62e:	8f 2d       	mov	r24, r15
     630:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
	spiTransferByte(arg);
     634:	8e 2d       	mov	r24, r14
     636:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
	spiTransferByte(0x95);	// crc valid only for MMC_GO_IDLE_STATE
     63a:	85 e9       	ldi	r24, 0x95	; 149
     63c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
     640:	10 e0       	ldi	r17, 0x00	; 0
     642:	03 c0       	rjmp	.+6      	; 0x64a <mmcCommand+0x4a>
	// end command
	// wait for response
	// if more than 8 retries, card has timed-out
	// return the received 0xFF
	while((r1 = spiTransferByte(0xFF)) == 0xFF)
		if(retry++ > 8) break;
     644:	19 30       	cpi	r17, 0x09	; 9
     646:	31 f0       	breq	.+12     	; 0x654 <mmcCommand+0x54>
     648:	1f 5f       	subi	r17, 0xFF	; 255
	spiTransferByte(0x95);	// crc valid only for MMC_GO_IDLE_STATE
	// end command
	// wait for response
	// if more than 8 retries, card has timed-out
	// return the received 0xFF
	while((r1 = spiTransferByte(0xFF)) == 0xFF)
     64a:	8f ef       	ldi	r24, 0xFF	; 255
     64c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
     650:	8f 3f       	cpi	r24, 0xFF	; 255
     652:	c1 f3       	breq	.-16     	; 0x644 <mmcCommand+0x44>
		if(retry++ > 8) break;
	// return response
	return r1;
}
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	08 95       	ret

0000065e <mmcSendCommand>:
}
//***********************************************************************
//			SD卡命令传送
//***********************************************************************
u08 mmcSendCommand(u08 cmd, u32 arg)
{
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
	u08 r1;

	// assert chip select
	cbi(MMC_CS_PORT,MMC_CS_PIN);
     662:	05 e6       	ldi	r16, 0x65	; 101
     664:	10 e0       	ldi	r17, 0x00	; 0
     666:	f8 01       	movw	r30, r16
     668:	90 81       	ld	r25, Z
     66a:	97 7f       	andi	r25, 0xF7	; 247
     66c:	90 83       	st	Z, r25
	// issue the command
	r1 = mmcCommand(cmd, arg);
     66e:	0e 94 00 03 	call	0x600	; 0x600 <mmcCommand>
	// release chip select
	sbi(MMC_CS_PORT,MMC_CS_PIN);
     672:	f8 01       	movw	r30, r16
     674:	90 81       	ld	r25, Z
     676:	98 60       	ori	r25, 0x08	; 8
     678:	90 83       	st	Z, r25

	return r1;
}
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	08 95       	ret

00000680 <MMC_SD_ReadCapacity>:
//***********************************************************************
//			SD卡容量读取
//***********************************************************************

u32 MMC_SD_ReadCapacity()
{
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	df 93       	push	r29
     68a:	cf 93       	push	r28
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	60 97       	sbiw	r28, 0x10	; 16
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	de bf       	out	0x3e, r29	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	cd bf       	out	0x3d, r28	; 61
	u08 buffer[16];
	u32 Capacity;
	u16 retry =0;
	//uint8 retry=0;

	r1 = mmcSendCommand(9, 0);//写命令	//send command  //READ CSD
     69c:	89 e0       	ldi	r24, 0x09	; 9
     69e:	40 e0       	ldi	r20, 0x00	; 0
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	0e 94 2f 03 	call	0x65e	; 0x65e <mmcSendCommand>
	if(r1 != 0x00)
     6aa:	88 23       	and	r24, r24
     6ac:	29 f0       	breq	.+10     	; 0x6b8 <MMC_SD_ReadCapacity+0x38>
		return r1;
     6ae:	28 2f       	mov	r18, r24
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	80 c0       	rjmp	.+256    	; 0x7b8 <MMC_SD_ReadCapacity+0x138>

	cbi(MMC_CS_PORT,MMC_CS_PIN);
     6b8:	80 91 65 00 	lds	r24, 0x0065
     6bc:	87 7f       	andi	r24, 0xF7	; 247
     6be:	80 93 65 00 	sts	0x0065, r24
     6c2:	00 e0       	ldi	r16, 0x00	; 0
     6c4:	10 e0       	ldi	r17, 0x00	; 0
     6c6:	0d c0       	rjmp	.+26     	; 0x6e2 <MMC_SD_ReadCapacity+0x62>
	while(spiTransferByte(0xff) != 0xfe)if(retry++ > 0xfffe){sbi(MMC_CS_PORT,MMC_CS_PIN);return 1;}
     6c8:	01 50       	subi	r16, 0x01	; 1
     6ca:	10 40       	sbci	r17, 0x00	; 0
     6cc:	51 f4       	brne	.+20     	; 0x6e2 <MMC_SD_ReadCapacity+0x62>
     6ce:	80 91 65 00 	lds	r24, 0x0065
     6d2:	88 60       	ori	r24, 0x08	; 8
     6d4:	80 93 65 00 	sts	0x0065, r24
     6d8:	21 e0       	ldi	r18, 0x01	; 1
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	6b c0       	rjmp	.+214    	; 0x7b8 <MMC_SD_ReadCapacity+0x138>
     6e2:	8f ef       	ldi	r24, 0xFF	; 255
     6e4:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
     6e8:	8e 3f       	cpi	r24, 0xFE	; 254
     6ea:	71 f7       	brne	.-36     	; 0x6c8 <MMC_SD_ReadCapacity+0x48>
     6ec:	8e 01       	movw	r16, r28
     6ee:	0f 5f       	subi	r16, 0xFF	; 255
     6f0:	1f 4f       	sbci	r17, 0xFF	; 255

	
	for(i=0;i<16;i++)
     6f2:	b1 e1       	ldi	r27, 0x11	; 17
     6f4:	eb 2e       	mov	r14, r27
     6f6:	f1 2c       	mov	r15, r1
     6f8:	ec 0e       	add	r14, r28
     6fa:	fd 1e       	adc	r15, r29
	{
		buffer[i]=spiTransferByte(0xff);
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
     6fe:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
     702:	f8 01       	movw	r30, r16
     704:	81 93       	st	Z+, r24
     706:	8f 01       	movw	r16, r30

	cbi(MMC_CS_PORT,MMC_CS_PIN);
	while(spiTransferByte(0xff) != 0xfe)if(retry++ > 0xfffe){sbi(MMC_CS_PORT,MMC_CS_PIN);return 1;}

	
	for(i=0;i<16;i++)
     708:	ee 15       	cp	r30, r14
     70a:	ff 05       	cpc	r31, r15
     70c:	b9 f7       	brne	.-18     	; 0x6fc <MMC_SD_ReadCapacity+0x7c>
	{
		buffer[i]=spiTransferByte(0xff);
	}	

	spiTransferByte(0xff);
     70e:	8f ef       	ldi	r24, 0xFF	; 255
     710:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
	spiTransferByte(0xff);
     714:	8f ef       	ldi	r24, 0xFF	; 255
     716:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
	
	spiTransferByte(0xff);
     71a:	8f ef       	ldi	r24, 0xFF	; 255
     71c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
	
	sbi(MMC_CS_PORT,MMC_CS_PIN);
     720:	80 91 65 00 	lds	r24, 0x0065
     724:	88 60       	ori	r24, 0x08	; 8
     726:	80 93 65 00 	sts	0x0065, r24

	spiTransferByte(0xff);// extra 8 CLK
     72a:	8f ef       	ldi	r24, 0xFF	; 255
     72c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>

/*********************************/
//	C_SIZE
	i = buffer[6]&0x03;
     730:	ef 81       	ldd	r30, Y+7	; 0x07
	i<<=8;
	i += buffer[7];
     732:	98 85       	ldd	r25, Y+8	; 0x08
	i<<=2;
	i += ((buffer[8]&0xc0)>>6);
     734:	29 85       	ldd	r18, Y+9	; 0x09

/**********************************/
//  C_SIZE_MULT

	r1 = buffer[9]&0x03;
     736:	8a 85       	ldd	r24, Y+10	; 0x0a
     738:	83 70       	andi	r24, 0x03	; 3
	r1<<=1;
     73a:	88 0f       	add	r24, r24
	r1 += ((buffer[10]&0x80)>>7);
     73c:	4b 85       	ldd	r20, Y+11	; 0x0b
     73e:	44 1f       	adc	r20, r20
     740:	44 27       	eor	r20, r20
     742:	44 1f       	adc	r20, r20
     744:	4e 5f       	subi	r20, 0xFE	; 254


/**********************************/
// BLOCKNR

	r1+=2;
     746:	48 0f       	add	r20, r24
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	03 c0       	rjmp	.+6      	; 0x754 <MMC_SD_ReadCapacity+0xd4>

	temp = 1;
	while(r1)
	{
		temp*=2;
     74e:	66 0f       	add	r22, r22
     750:	77 1f       	adc	r23, r23
		r1--;
     752:	41 50       	subi	r20, 0x01	; 1
// BLOCKNR

	r1+=2;

	temp = 1;
	while(r1)
     754:	44 23       	and	r20, r20
     756:	d9 f7       	brne	.-10     	; 0x74e <MMC_SD_ReadCapacity+0xce>
	Capacity = ((u32)(i+1))*((u32)temp);

/////////////////////////
// READ_BL_LEN

	i = buffer[5]&0x0f;
     758:	8e 81       	ldd	r24, Y+6	; 0x06
     75a:	48 2f       	mov	r20, r24
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	4f 70       	andi	r20, 0x0F	; 15
     760:	50 70       	andi	r21, 0x00	; 0
     762:	01 e0       	ldi	r16, 0x01	; 1
     764:	10 e0       	ldi	r17, 0x00	; 0
     766:	04 c0       	rjmp	.+8      	; 0x770 <MMC_SD_ReadCapacity+0xf0>
//BLOCK_LEN

	temp = 1;
	while(i)
	{
		temp*=2;
     768:	00 0f       	add	r16, r16
     76a:	11 1f       	adc	r17, r17
		i--;
     76c:	41 50       	subi	r20, 0x01	; 1
     76e:	50 40       	sbci	r21, 0x00	; 0

/*************************/
//BLOCK_LEN

	temp = 1;
	while(i)
     770:	41 15       	cp	r20, r1
     772:	51 05       	cpc	r21, r1
     774:	c9 f7       	brne	.-14     	; 0x768 <MMC_SD_ReadCapacity+0xe8>

	spiTransferByte(0xff);// extra 8 CLK

/*********************************/
//	C_SIZE
	i = buffer[6]&0x03;
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	e3 70       	andi	r30, 0x03	; 3
     77a:	f0 70       	andi	r31, 0x00	; 0
	i<<=8;
     77c:	fe 2f       	mov	r31, r30
     77e:	ee 27       	eor	r30, r30
	i += buffer[7];
     780:	e9 0f       	add	r30, r25
     782:	f1 1d       	adc	r31, r1
	{
		temp*=2;
		r1--;
	}
	
	Capacity = ((u32)(i+1))*((u32)temp);
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	22 95       	swap	r18
     78a:	26 95       	lsr	r18
     78c:	26 95       	lsr	r18
     78e:	23 70       	andi	r18, 0x03	; 3
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	2f 5f       	subi	r18, 0xFF	; 255
     794:	3f 4f       	sbci	r19, 0xFF	; 255
     796:	ee 0f       	add	r30, r30
     798:	ff 1f       	adc	r31, r31
     79a:	ee 0f       	add	r30, r30
     79c:	ff 1f       	adc	r31, r31
     79e:	2e 0f       	add	r18, r30
     7a0:	3f 1f       	adc	r19, r31
     7a2:	40 e0       	ldi	r20, 0x00	; 0
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	0e 94 1e 12 	call	0x243c	; 0x243c <__mulsi3>
//	BLOCK_LEN = 2
/**********************************************/

//The final result
	
	Capacity *= (u32)temp;	 
     7aa:	98 01       	movw	r18, r16
     7ac:	40 e0       	ldi	r20, 0x00	; 0
     7ae:	50 e0       	ldi	r21, 0x00	; 0
     7b0:	0e 94 1e 12 	call	0x243c	; 0x243c <__mulsi3>
     7b4:	9b 01       	movw	r18, r22
     7b6:	ac 01       	movw	r20, r24
	return Capacity;		
}
     7b8:	b9 01       	movw	r22, r18
     7ba:	ca 01       	movw	r24, r20
     7bc:	60 96       	adiw	r28, 0x10	; 16
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	cf 91       	pop	r28
     7ca:	df 91       	pop	r29
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	08 95       	ret

000007d6 <mmcWrite>:
}
//***********************************************************************
//			写SD卡一个扇区
//***********************************************************************
u08 mmcWrite(u32 sector, u08* buffer)
{
     7d6:	ef 92       	push	r14
     7d8:	ff 92       	push	r15
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	8b 01       	movw	r16, r22
     7e4:	9c 01       	movw	r18, r24
     7e6:	7a 01       	movw	r14, r20
	u08 r1;
	u16 i;

	// assert chip select
	cbi(MMC_CS_PORT,MMC_CS_PIN);
     7e8:	80 91 65 00 	lds	r24, 0x0065
     7ec:	87 7f       	andi	r24, 0xF7	; 247
     7ee:	80 93 65 00 	sts	0x0065, r24
	// issue command
	r1 = mmcCommand(MMC_WRITE_BLOCK, sector<<9);
     7f2:	89 e0       	ldi	r24, 0x09	; 9
     7f4:	00 0f       	add	r16, r16
     7f6:	11 1f       	adc	r17, r17
     7f8:	22 1f       	adc	r18, r18
     7fa:	33 1f       	adc	r19, r19
     7fc:	8a 95       	dec	r24
     7fe:	d1 f7       	brne	.-12     	; 0x7f4 <mmcWrite+0x1e>
     800:	88 e1       	ldi	r24, 0x18	; 24
     802:	b9 01       	movw	r22, r18
     804:	a8 01       	movw	r20, r16
     806:	0e 94 00 03 	call	0x600	; 0x600 <mmcCommand>
	#ifdef MMC_DEBUG
	rprintf("MMC Write Block R1=0x%x\r\n", r1);
	#endif
	// check for valid response
	if(r1 != 0x00)
     80a:	88 23       	and	r24, r24
     80c:	11 f0       	breq	.+4      	; 0x812 <mmcWrite+0x3c>
     80e:	98 2f       	mov	r25, r24
     810:	2a c0       	rjmp	.+84     	; 0x866 <mmcWrite+0x90>
		return r1;
	// send dummy
	spiTransferByte(0xFF);
     812:	8f ef       	ldi	r24, 0xFF	; 255
     814:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
	// send data start token
	spiTransferByte(MMC_STARTBLOCK_WRITE);
     818:	8e ef       	ldi	r24, 0xFE	; 254
     81a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
     81e:	c0 e0       	ldi	r28, 0x00	; 0
     820:	d0 e0       	ldi	r29, 0x00	; 0
	// write data
	for(i=0; i<0x200; i++)
	{
		spiTransferByte(*buffer++);
     822:	f7 01       	movw	r30, r14
     824:	81 91       	ld	r24, Z+
     826:	7f 01       	movw	r14, r30
     828:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
	// send dummy
	spiTransferByte(0xFF);
	// send data start token
	spiTransferByte(MMC_STARTBLOCK_WRITE);
	// write data
	for(i=0; i<0x200; i++)
     82c:	21 96       	adiw	r28, 0x01	; 1
     82e:	f2 e0       	ldi	r31, 0x02	; 2
     830:	c0 30       	cpi	r28, 0x00	; 0
     832:	df 07       	cpc	r29, r31
     834:	b1 f7       	brne	.-20     	; 0x822 <mmcWrite+0x4c>
	{
		spiTransferByte(*buffer++);
	}
	// write 16-bit CRC (dummy values)
	spiTransferByte(0xFF);
     836:	8f ef       	ldi	r24, 0xFF	; 255
     838:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
	spiTransferByte(0xFF);
     83c:	8f ef       	ldi	r24, 0xFF	; 255
     83e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
	// read data response token
	r1 = spiTransferByte(0xFF);
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
     848:	98 2f       	mov	r25, r24
	if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
     84a:	8f 71       	andi	r24, 0x1F	; 31
     84c:	85 30       	cpi	r24, 0x05	; 5
     84e:	59 f4       	brne	.+22     	; 0x866 <mmcWrite+0x90>
		return r1;
	#ifdef MMC_DEBUG
	rprintf("Data Response Token=0x%x\r\n", r1);
	#endif
	// wait until card not busy
	while(!spiTransferByte(0xFF));
     850:	8f ef       	ldi	r24, 0xFF	; 255
     852:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
     856:	88 23       	and	r24, r24
     858:	d9 f3       	breq	.-10     	; 0x850 <mmcWrite+0x7a>
	// release chip select
	sbi(MMC_CS_PORT,MMC_CS_PIN);
     85a:	80 91 65 00 	lds	r24, 0x0065
     85e:	88 60       	ori	r24, 0x08	; 8
     860:	80 93 65 00 	sts	0x0065, r24
     864:	90 e0       	ldi	r25, 0x00	; 0
	// return success
	return 0;
}
     866:	89 2f       	mov	r24, r25
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	08 95       	ret

00000876 <mmcRead>:
}
//***********************************************************************
//			读SD卡一个扇区
//***********************************************************************
u08 mmcRead(u32 sector, u08* buffer)
{
     876:	cf 92       	push	r12
     878:	df 92       	push	r13
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	7b 01       	movw	r14, r22
     888:	8c 01       	movw	r16, r24
     88a:	6a 01       	movw	r12, r20
	u08 r1;
	u16 i;

	// assert chip select
	cbi(MMC_CS_PORT,MMC_CS_PIN);
     88c:	80 91 65 00 	lds	r24, 0x0065
     890:	87 7f       	andi	r24, 0xF7	; 247
     892:	80 93 65 00 	sts	0x0065, r24
     896:	c0 e0       	ldi	r28, 0x00	; 0
     898:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=0;i<10;i++) spiTransferByte(0xFF);
     89a:	8f ef       	ldi	r24, 0xFF	; 255
     89c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
     8a0:	21 96       	adiw	r28, 0x01	; 1
     8a2:	ca 30       	cpi	r28, 0x0A	; 10
     8a4:	d1 05       	cpc	r29, r1
     8a6:	c9 f7       	brne	.-14     	; 0x89a <mmcRead+0x24>
	// issue command
	r1 = mmcCommand(MMC_READ_SINGLE_BLOCK, sector<<9);
     8a8:	99 e0       	ldi	r25, 0x09	; 9
     8aa:	ee 0c       	add	r14, r14
     8ac:	ff 1c       	adc	r15, r15
     8ae:	00 1f       	adc	r16, r16
     8b0:	11 1f       	adc	r17, r17
     8b2:	9a 95       	dec	r25
     8b4:	d1 f7       	brne	.-12     	; 0x8aa <mmcRead+0x34>
     8b6:	81 e1       	ldi	r24, 0x11	; 17
     8b8:	b8 01       	movw	r22, r16
     8ba:	a7 01       	movw	r20, r14
     8bc:	0e 94 00 03 	call	0x600	; 0x600 <mmcCommand>
     8c0:	18 2f       	mov	r17, r24
	#ifdef MMC_DEBUG
	rprintf("MMC Read Block R1=0x%x\r\n", r1);
	#endif
	// check for valid response
	if(r1 != 0x00)
     8c2:	88 23       	and	r24, r24
     8c4:	e9 f4       	brne	.+58     	; 0x900 <mmcRead+0x8a>
		return r1;
	// wait for block start
	while(spiTransferByte(0xFF) != MMC_STARTBLOCK_READ);
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
     8cc:	8e 3f       	cpi	r24, 0xFE	; 254
     8ce:	d9 f7       	brne	.-10     	; 0x8c6 <mmcRead+0x50>
     8d0:	c0 e0       	ldi	r28, 0x00	; 0
     8d2:	d0 e0       	ldi	r29, 0x00	; 0
	// read in data
	for(i=0; i<0x200; i++)
	{
		*buffer++ =spiTransferByte(0xFF);
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
     8da:	f6 01       	movw	r30, r12
     8dc:	81 93       	st	Z+, r24
     8de:	6f 01       	movw	r12, r30
	if(r1 != 0x00)
		return r1;
	// wait for block start
	while(spiTransferByte(0xFF) != MMC_STARTBLOCK_READ);
	// read in data
	for(i=0; i<0x200; i++)
     8e0:	21 96       	adiw	r28, 0x01	; 1
     8e2:	f2 e0       	ldi	r31, 0x02	; 2
     8e4:	c0 30       	cpi	r28, 0x00	; 0
     8e6:	df 07       	cpc	r29, r31
     8e8:	a9 f7       	brne	.-22     	; 0x8d4 <mmcRead+0x5e>
	{
		*buffer++ =spiTransferByte(0xFF);
	}
	// read 16-bit CRC
	spiTransferByte(0xFF);
     8ea:	8f ef       	ldi	r24, 0xFF	; 255
     8ec:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
	spiTransferByte(0xFF);
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
	// release chip select
	sbi(MMC_CS_PORT,MMC_CS_PIN);
     8f6:	80 91 65 00 	lds	r24, 0x0065
     8fa:	88 60       	ori	r24, 0x08	; 8
     8fc:	80 93 65 00 	sts	0x0065, r24
	// return success
	return 0;
}
     900:	81 2f       	mov	r24, r17
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	df 90       	pop	r13
     910:	cf 90       	pop	r12
     912:	08 95       	ret

00000914 <mmcReset>:
}
//***********************************************************************
//			SD卡初始化
//***********************************************************************
u08 mmcReset(void)
{
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	00 e0       	ldi	r16, 0x00	; 0
     91a:	10 e0       	ldi	r17, 0x00	; 0

	retry = 0;
	do
	{
		// send dummy bytes with CS high before accessing
		for(i=0;i<10;i++) spiTransferByte(0xFF);
     91c:	8f ef       	ldi	r24, 0xFF	; 255
     91e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <spiTransferByte>
     922:	1f 5f       	subi	r17, 0xFF	; 255
     924:	1a 30       	cpi	r17, 0x0A	; 10
     926:	d1 f7       	brne	.-12     	; 0x91c <mmcReset+0x8>
		// resetting card, go to SPI mode
		r1 = mmcSendCommand(MMC_GO_IDLE_STATE, 0);
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	0e 94 2f 03 	call	0x65e	; 0x65e <mmcSendCommand>
		#ifdef MMC_DEBUG
		rprintf("MMC_GO_IDLE_STATE: R1=0x%x\r\n", r1);
		#endif
		// do retry counter
		retry++;
     936:	0f 5f       	subi	r16, 0xFF	; 255
		if(retry>10) return -1;
     938:	0b 30       	cpi	r16, 0x0B	; 11
     93a:	f9 f0       	breq	.+62     	; 0x97a <mmcReset+0x66>
	} while(r1 != 0x01);
     93c:	81 30       	cpi	r24, 0x01	; 1
     93e:	69 f7       	brne	.-38     	; 0x91a <mmcReset+0x6>
     940:	10 e0       	ldi	r17, 0x00	; 0

	retry = 0;
	do
	{
		// initializing card for operation
		r1 = mmcSendCommand(MMC_SEND_OP_COND, 0);
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	0e 94 2f 03 	call	0x65e	; 0x65e <mmcSendCommand>
		#ifdef MMC_DEBUG
		rprintf("MMC_SEND_OP_COND: R1=0x%x\r\n", r1);
		#endif
		// do retry counter
		retry++;
     950:	1f 5f       	subi	r17, 0xFF	; 255
		if(retry>100) return -1;
     952:	15 36       	cpi	r17, 0x65	; 101
     954:	91 f0       	breq	.+36     	; 0x97a <mmcReset+0x66>
	} while(r1);
     956:	88 23       	and	r24, r24
     958:	a1 f7       	brne	.-24     	; 0x942 <mmcReset+0x2e>
		
	// turn off CRC checking to simplify communication
	r1 = mmcSendCommand(MMC_CRC_ON_OFF, 0);
     95a:	8b e3       	ldi	r24, 0x3B	; 59
     95c:	40 e0       	ldi	r20, 0x00	; 0
     95e:	50 e0       	ldi	r21, 0x00	; 0
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	0e 94 2f 03 	call	0x65e	; 0x65e <mmcSendCommand>
	#ifdef MMC_DEBUG
	rprintf("MMC_CRC_ON_OFF: R1=0x%x\r\n", r1);
	#endif

	// set block length to 512 bytes
	r1 = mmcSendCommand(MMC_SET_BLOCKLEN, 512);
     968:	80 e1       	ldi	r24, 0x10	; 16
     96a:	40 e0       	ldi	r20, 0x00	; 0
     96c:	52 e0       	ldi	r21, 0x02	; 2
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	0e 94 2f 03 	call	0x65e	; 0x65e <mmcSendCommand>
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	01 c0       	rjmp	.+2      	; 0x97c <mmcReset+0x68>
	#ifdef MMC_DEBUG
	rprintf("MMC_SET_BLOCKLEN: R1=0x%x\r\n", r1);
	#endif

	// return success
	return 0;
     97a:	8f ef       	ldi	r24, 0xFF	; 255
}
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	08 95       	ret

00000982 <mmcInit>:
//***********************************************************************

void mmcInit(void)
{
	// initialize SPI interface
	spiInit();
     982:	0e 94 d7 02 	call	0x5ae	; 0x5ae <spiInit>
	// release chip select
	sbi(MMC_CS_DDR, MMC_CS_PIN);
     986:	e4 e6       	ldi	r30, 0x64	; 100
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	80 81       	ld	r24, Z
     98c:	88 60       	ori	r24, 0x08	; 8
     98e:	80 83       	st	Z, r24
	sbi(MMC_CS_PORT,MMC_CS_PIN);
     990:	e5 e6       	ldi	r30, 0x65	; 101
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	80 81       	ld	r24, Z
     996:	88 60       	ori	r24, 0x08	; 8
     998:	80 83       	st	Z, r24
}
     99a:	08 95       	ret

0000099c <FAT_LoadPartCluster>:
}

//读一个簇中的一个扇区
//read one sector of one cluster, parameter part indicate which sector
unsigned char FAT_LoadPartCluster(unsigned long cluster,unsigned part,BYTE * buffer)
{
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	7a 01       	movw	r14, r20
     9aa:	69 01       	movw	r12, r18
	DWORD sector;
	sector=FirstDataSector+(DWORD)(cluster-2)*(DWORD)SectorsPerClust;//calculate the actual sector number
	if(FAT_ReadSector(sector+part,buffer))return 1;
     9ac:	62 50       	subi	r22, 0x02	; 2
     9ae:	70 40       	sbci	r23, 0x00	; 0
     9b0:	80 40       	sbci	r24, 0x00	; 0
     9b2:	90 40       	sbci	r25, 0x00	; 0
     9b4:	20 91 b3 0c 	lds	r18, 0x0CB3
     9b8:	30 91 b4 0c 	lds	r19, 0x0CB4
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	50 e0       	ldi	r21, 0x00	; 0
     9c0:	0e 94 1e 12 	call	0x243c	; 0x243c <__mulsi3>
     9c4:	00 e0       	ldi	r16, 0x00	; 0
     9c6:	10 e0       	ldi	r17, 0x00	; 0
     9c8:	e6 0e       	add	r14, r22
     9ca:	f7 1e       	adc	r15, r23
     9cc:	08 1f       	adc	r16, r24
     9ce:	19 1f       	adc	r17, r25
     9d0:	60 91 b5 0c 	lds	r22, 0x0CB5
     9d4:	70 91 b6 0c 	lds	r23, 0x0CB6
     9d8:	80 91 b7 0c 	lds	r24, 0x0CB7
     9dc:	90 91 b8 0c 	lds	r25, 0x0CB8
     9e0:	6e 0d       	add	r22, r14
     9e2:	7f 1d       	adc	r23, r15
     9e4:	80 1f       	adc	r24, r16
     9e6:	91 1f       	adc	r25, r17
     9e8:	e0 91 a2 01 	lds	r30, 0x01A2
     9ec:	f0 91 a3 01 	lds	r31, 0x01A3
     9f0:	a6 01       	movw	r20, r12
     9f2:	09 95       	icall
     9f4:	81 11       	cpse	r24, r1
     9f6:	81 e0       	ldi	r24, 0x01	; 1
	else return 0;
}
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	ef 90       	pop	r14
     a00:	df 90       	pop	r13
     a02:	cf 90       	pop	r12
     a04:	08 95       	ret

00000a06 <FAT_NextCluster>:

//读下一簇簇号
//Return the cluster number of next cluster of file
//Suitable for system which has limited RAM
unsigned long FAT_NextCluster(unsigned long cluster)
{
     a06:	cf 92       	push	r12
     a08:	df 92       	push	r13
     a0a:	ef 92       	push	r14
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	df 93       	push	r29
     a14:	cf 93       	push	r28
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	c0 50       	subi	r28, 0x00	; 0
     a1c:	d2 40       	sbci	r29, 0x02	; 2
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	f8 94       	cli
     a22:	de bf       	out	0x3e, r29	; 62
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	cd bf       	out	0x3d, r28	; 61
     a28:	7b 01       	movw	r14, r22
     a2a:	8c 01       	movw	r16, r24
	BYTE buffer[512];
	DWORD sector;
	DWORD offset;
	if(FAT32_Enable)offset = cluster/128;
     a2c:	80 91 cc 0c 	lds	r24, 0x0CCC
     a30:	88 23       	and	r24, r24
     a32:	51 f0       	breq	.+20     	; 0xa48 <FAT_NextCluster+0x42>
     a34:	a8 01       	movw	r20, r16
     a36:	97 01       	movw	r18, r14
     a38:	67 e0       	ldi	r22, 0x07	; 7
     a3a:	56 95       	lsr	r21
     a3c:	47 95       	ror	r20
     a3e:	37 95       	ror	r19
     a40:	27 95       	ror	r18
     a42:	6a 95       	dec	r22
     a44:	d1 f7       	brne	.-12     	; 0xa3a <FAT_NextCluster+0x34>
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <FAT_NextCluster+0x4a>
	else offset = cluster/256;
     a48:	55 27       	eor	r21, r21
     a4a:	41 2f       	mov	r20, r17
     a4c:	30 2f       	mov	r19, r16
     a4e:	2f 2d       	mov	r18, r15
	if(cluster<2)return 0x0ffffff8;
     a50:	82 e0       	ldi	r24, 0x02	; 2
     a52:	e8 16       	cp	r14, r24
     a54:	f1 04       	cpc	r15, r1
     a56:	01 05       	cpc	r16, r1
     a58:	11 05       	cpc	r17, r1
     a5a:	08 f4       	brcc	.+2      	; 0xa5e <FAT_NextCluster+0x58>
     a5c:	47 c0       	rjmp	.+142    	; 0xaec <FAT_NextCluster+0xe6>
	sector=FirstFATSector+offset;//calculate the actual sector
	if(FAT_ReadSector(sector,buffer))return 0x0ffffff8;//read fat table / return 0xfff8 when error occured
     a5e:	80 91 b9 0c 	lds	r24, 0x0CB9
     a62:	90 91 ba 0c 	lds	r25, 0x0CBA
     a66:	a0 91 bb 0c 	lds	r26, 0x0CBB
     a6a:	b0 91 bc 0c 	lds	r27, 0x0CBC
     a6e:	28 0f       	add	r18, r24
     a70:	39 1f       	adc	r19, r25
     a72:	4a 1f       	adc	r20, r26
     a74:	5b 1f       	adc	r21, r27
     a76:	e0 91 a2 01 	lds	r30, 0x01A2
     a7a:	f0 91 a3 01 	lds	r31, 0x01A3
     a7e:	ca 01       	movw	r24, r20
     a80:	b9 01       	movw	r22, r18
     a82:	6e 01       	movw	r12, r28
     a84:	08 94       	sec
     a86:	c1 1c       	adc	r12, r1
     a88:	d1 1c       	adc	r13, r1
     a8a:	a6 01       	movw	r20, r12
     a8c:	09 95       	icall
     a8e:	88 23       	and	r24, r24
     a90:	69 f5       	brne	.+90     	; 0xaec <FAT_NextCluster+0xe6>

	if(FAT32_Enable)
     a92:	80 91 cc 0c 	lds	r24, 0x0CCC
     a96:	88 23       	and	r24, r24
     a98:	a9 f0       	breq	.+42     	; 0xac4 <FAT_NextCluster+0xbe>
	{
		offset=cluster%128;//find the position
		sector=((unsigned long *)buffer)[offset];	
     a9a:	8f e7       	ldi	r24, 0x7F	; 127
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	e8 22       	and	r14, r24
     aa4:	f9 22       	and	r15, r25
     aa6:	0a 23       	and	r16, r26
     aa8:	1b 23       	and	r17, r27
     aaa:	c7 01       	movw	r24, r14
     aac:	88 0f       	add	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	c8 0e       	add	r12, r24
     ab6:	d9 1e       	adc	r13, r25
     ab8:	d6 01       	movw	r26, r12
     aba:	2d 91       	ld	r18, X+
     abc:	3d 91       	ld	r19, X+
     abe:	4d 91       	ld	r20, X+
     ac0:	5c 91       	ld	r21, X
     ac2:	18 c0       	rjmp	.+48     	; 0xaf4 <FAT_NextCluster+0xee>
	}
	else
	{
		offset=cluster%256;//find the position
		sector=((unsigned int *)buffer)[offset];
     ac4:	8f ef       	ldi	r24, 0xFF	; 255
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	e8 22       	and	r14, r24
     ace:	f9 22       	and	r15, r25
     ad0:	0a 23       	and	r16, r26
     ad2:	1b 23       	and	r17, r27
     ad4:	c7 01       	movw	r24, r14
     ad6:	88 0f       	add	r24, r24
     ad8:	99 1f       	adc	r25, r25
     ada:	c8 0e       	add	r12, r24
     adc:	d9 1e       	adc	r13, r25
     ade:	d6 01       	movw	r26, r12
     ae0:	8d 91       	ld	r24, X+
     ae2:	9c 91       	ld	r25, X
     ae4:	9c 01       	movw	r18, r24
     ae6:	40 e0       	ldi	r20, 0x00	; 0
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	04 c0       	rjmp	.+8      	; 0xaf4 <FAT_NextCluster+0xee>
     aec:	28 ef       	ldi	r18, 0xF8	; 248
     aee:	3f ef       	ldi	r19, 0xFF	; 255
     af0:	4f ef       	ldi	r20, 0xFF	; 255
     af2:	5f e0       	ldi	r21, 0x0F	; 15
	}
	return (unsigned long)sector;//return the cluste number
}
     af4:	b9 01       	movw	r22, r18
     af6:	ca 01       	movw	r24, r20
     af8:	c0 50       	subi	r28, 0x00	; 0
     afa:	de 4f       	sbci	r29, 0xFE	; 254
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	f8 94       	cli
     b00:	de bf       	out	0x3e, r29	; 62
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	cd bf       	out	0x3d, r28	; 61
     b06:	cf 91       	pop	r28
     b08:	df 91       	pop	r29
     b0a:	1f 91       	pop	r17
     b0c:	0f 91       	pop	r16
     b0e:	ff 90       	pop	r15
     b10:	ef 90       	pop	r14
     b12:	df 90       	pop	r13
     b14:	cf 90       	pop	r12
     b16:	08 95       	ret

00000b18 <CopyDirentruyItem>:
}
#endif

//复制记录项信息  //copy item
void CopyDirentruyItem(struct direntry *Desti,struct direntry *Source)
{
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	9c 01       	movw	r18, r24
     b1e:	eb 01       	movw	r28, r22
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e0       	ldi	r21, 0x00	; 0
	BYTE i;
	for(i=0;i<8;i++)Desti->deName[i] = Source->deName[i];
     b24:	f9 01       	movw	r30, r18
     b26:	e4 0f       	add	r30, r20
     b28:	f5 1f       	adc	r31, r21
     b2a:	de 01       	movw	r26, r28
     b2c:	a4 0f       	add	r26, r20
     b2e:	b5 1f       	adc	r27, r21
     b30:	8c 91       	ld	r24, X
     b32:	80 83       	st	Z, r24
     b34:	4f 5f       	subi	r20, 0xFF	; 255
     b36:	5f 4f       	sbci	r21, 0xFF	; 255
     b38:	48 30       	cpi	r20, 0x08	; 8
     b3a:	51 05       	cpc	r21, r1
     b3c:	99 f7       	brne	.-26     	; 0xb24 <CopyDirentruyItem+0xc>
	for(i=0;i<3;i++)Desti->deExtension[i] = Source->deExtension[i];
     b3e:	88 85       	ldd	r24, Y+8	; 0x08
     b40:	f9 01       	movw	r30, r18
     b42:	80 87       	std	Z+8, r24	; 0x08
     b44:	89 85       	ldd	r24, Y+9	; 0x09
     b46:	81 87       	std	Z+9, r24	; 0x09
     b48:	8a 85       	ldd	r24, Y+10	; 0x0a
     b4a:	82 87       	std	Z+10, r24	; 0x0a
	Desti->deAttributes = Source->deAttributes;
     b4c:	8b 85       	ldd	r24, Y+11	; 0x0b
     b4e:	83 87       	std	Z+11, r24	; 0x0b
	Desti->deLowerCase = Source->deLowerCase;
     b50:	8c 85       	ldd	r24, Y+12	; 0x0c
     b52:	84 87       	std	Z+12, r24	; 0x0c
	Desti->deCHundredth = Source->deCHundredth;
     b54:	8d 85       	ldd	r24, Y+13	; 0x0d
     b56:	85 87       	std	Z+13, r24	; 0x0d
	for(i=0;i<2;i++)Desti->deCTime[i] = Source->deCTime[i];
     b58:	8e 85       	ldd	r24, Y+14	; 0x0e
     b5a:	86 87       	std	Z+14, r24	; 0x0e
     b5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b5e:	87 87       	std	Z+15, r24	; 0x0f
	for(i=0;i<2;i++)Desti->deCDate[i] = Source->deCDate[i];
     b60:	88 89       	ldd	r24, Y+16	; 0x10
     b62:	80 8b       	std	Z+16, r24	; 0x10
     b64:	89 89       	ldd	r24, Y+17	; 0x11
     b66:	81 8b       	std	Z+17, r24	; 0x11
	for(i=0;i<2;i++)Desti->deADate[i] = Source->deADate[i];
     b68:	8a 89       	ldd	r24, Y+18	; 0x12
     b6a:	82 8b       	std	Z+18, r24	; 0x12
     b6c:	8b 89       	ldd	r24, Y+19	; 0x13
     b6e:	83 8b       	std	Z+19, r24	; 0x13
	Desti->deHighClust = Source->deHighClust;
     b70:	8c 89       	ldd	r24, Y+20	; 0x14
     b72:	9d 89       	ldd	r25, Y+21	; 0x15
     b74:	95 8b       	std	Z+21, r25	; 0x15
     b76:	84 8b       	std	Z+20, r24	; 0x14
	for(i=0;i<2;i++)Desti->deMTime[i] = Source->deMTime[i];
     b78:	8e 89       	ldd	r24, Y+22	; 0x16
     b7a:	86 8b       	std	Z+22, r24	; 0x16
     b7c:	8f 89       	ldd	r24, Y+23	; 0x17
     b7e:	87 8b       	std	Z+23, r24	; 0x17
	for(i=0;i<2;i++)Desti->deMDate[i] = Source->deMDate[i];
     b80:	88 8d       	ldd	r24, Y+24	; 0x18
     b82:	80 8f       	std	Z+24, r24	; 0x18
     b84:	89 8d       	ldd	r24, Y+25	; 0x19
     b86:	81 8f       	std	Z+25, r24	; 0x19
	Desti->deStartCluster = Source->deStartCluster;
     b88:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b8a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b8c:	93 8f       	std	Z+27, r25	; 0x1b
     b8e:	82 8f       	std	Z+26, r24	; 0x1a
	Desti->deFileSize = Source->deFileSize;
     b90:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b92:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b94:	ae 8d       	ldd	r26, Y+30	; 0x1e
     b96:	bf 8d       	ldd	r27, Y+31	; 0x1f
     b98:	84 8f       	std	Z+28, r24	; 0x1c
     b9a:	95 8f       	std	Z+29, r25	; 0x1d
     b9c:	a6 8f       	std	Z+30, r26	; 0x1e
     b9e:	b7 8f       	std	Z+31, r27	; 0x1f
}
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	08 95       	ret

00000ba6 <WriteFolderCluster>:
}

#else

void WriteFolderCluster(WORD addr,DWORD cluster)
{
     ba6:	9c 01       	movw	r18, r24
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     ba8:	e1 99       	sbic	0x1c, 1	; 28
     baa:	fe cf       	rjmp	.-4      	; 0xba8 <WriteFolderCluster+0x2>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     bac:	3f bb       	out	0x1f, r19	; 31
     bae:	2e bb       	out	0x1e, r18	; 30
#if FAT_DEBUG
	printf_P(PSTR("\r\nWrite EEPROM address:%d with value:%ld"),addr,cluster);
#endif
	eeprom_write_byte(addr,cluster>>24);
     bb0:	87 2f       	mov	r24, r23
     bb2:	99 27       	eor	r25, r25
     bb4:	aa 27       	eor	r26, r26
     bb6:	bb 27       	eor	r27, r27
#endif
    EEDR = __value;
     bb8:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	e2 9a       	sbi	0x1c, 2	; 28
     bc0:	e1 9a       	sbi	0x1c, 1	; 28
     bc2:	0f be       	out	0x3f, r0	; 63
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     bc4:	e1 99       	sbic	0x1c, 1	; 28
     bc6:	fe cf       	rjmp	.-4      	; 0xbc4 <WriteFolderCluster+0x1e>
	eeprom_write_byte(addr+1,cluster>>16);
     bc8:	2f 5f       	subi	r18, 0xFF	; 255
     bca:	3f 4f       	sbci	r19, 0xFF	; 255
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     bcc:	3f bb       	out	0x1f, r19	; 31
     bce:	2e bb       	out	0x1e, r18	; 30
     bd0:	21 50       	subi	r18, 0x01	; 1
     bd2:	30 40       	sbci	r19, 0x00	; 0
     bd4:	cb 01       	movw	r24, r22
     bd6:	aa 27       	eor	r26, r26
     bd8:	bb 27       	eor	r27, r27
#endif
    EEDR = __value;
     bda:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	e2 9a       	sbi	0x1c, 2	; 28
     be2:	e1 9a       	sbi	0x1c, 1	; 28
     be4:	0f be       	out	0x3f, r0	; 63
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     be6:	e1 99       	sbic	0x1c, 1	; 28
     be8:	fe cf       	rjmp	.-4      	; 0xbe6 <WriteFolderCluster+0x40>
	eeprom_write_byte(addr+2,cluster>>8);
     bea:	2e 5f       	subi	r18, 0xFE	; 254
     bec:	3f 4f       	sbci	r19, 0xFF	; 255
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     bee:	3f bb       	out	0x1f, r19	; 31
     bf0:	2e bb       	out	0x1e, r18	; 30
     bf2:	22 50       	subi	r18, 0x02	; 2
     bf4:	30 40       	sbci	r19, 0x00	; 0
     bf6:	bb 27       	eor	r27, r27
     bf8:	a7 2f       	mov	r26, r23
     bfa:	96 2f       	mov	r25, r22
     bfc:	85 2f       	mov	r24, r21
#endif
    EEDR = __value;
     bfe:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	e2 9a       	sbi	0x1c, 2	; 28
     c06:	e1 9a       	sbi	0x1c, 1	; 28
     c08:	0f be       	out	0x3f, r0	; 63
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     c0a:	e1 99       	sbic	0x1c, 1	; 28
     c0c:	fe cf       	rjmp	.-4      	; 0xc0a <WriteFolderCluster+0x64>
	eeprom_write_byte(addr+3,cluster>>0);
     c0e:	2d 5f       	subi	r18, 0xFD	; 253
     c10:	3f 4f       	sbci	r19, 0xFF	; 255
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     c12:	3f bb       	out	0x1f, r19	; 31
     c14:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
     c16:	4d bb       	out	0x1d, r20	; 29

    __asm__ __volatile__ (
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	e2 9a       	sbi	0x1c, 2	; 28
     c1e:	e1 9a       	sbi	0x1c, 1	; 28
     c20:	0f be       	out	0x3f, r0	; 63
}
     c22:	08 95       	ret

00000c24 <GetFolderCluster>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c24:	e1 99       	sbic	0x1c, 1	; 28
     c26:	fe cf       	rjmp	.-4      	; 0xc24 <GetFolderCluster>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     c28:	9f bb       	out	0x1f, r25	; 31
     c2a:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     c2c:	e0 9a       	sbi	0x1c, 0	; 28
     c2e:	2d b3       	in	r18, 0x1d	; 29
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c30:	e1 99       	sbic	0x1c, 1	; 28
     c32:	fe cf       	rjmp	.-4      	; 0xc30 <GetFolderCluster+0xc>
DWORD GetFolderCluster(WORD addr)
{
	DWORD temp;
	temp = eeprom_read_byte(addr);
	temp <<= 8;
	temp += eeprom_read_byte(addr+1);
     c34:	01 96       	adiw	r24, 0x01	; 1
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     c36:	9f bb       	out	0x1f, r25	; 31
     c38:	8e bb       	out	0x1e, r24	; 30
     c3a:	01 97       	sbiw	r24, 0x01	; 1
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     c3c:	e0 9a       	sbi	0x1c, 0	; 28
     c3e:	7d b3       	in	r23, 0x1d	; 29
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c40:	e1 99       	sbic	0x1c, 1	; 28
     c42:	fe cf       	rjmp	.-4      	; 0xc40 <GetFolderCluster+0x1c>
	temp <<= 8;
	temp += eeprom_read_byte(addr+2);
     c44:	02 96       	adiw	r24, 0x02	; 2
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     c46:	9f bb       	out	0x1f, r25	; 31
     c48:	8e bb       	out	0x1e, r24	; 30
     c4a:	02 97       	sbiw	r24, 0x02	; 2
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     c4c:	e0 9a       	sbi	0x1c, 0	; 28
     c4e:	6d b3       	in	r22, 0x1d	; 29
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c50:	e1 99       	sbic	0x1c, 1	; 28
     c52:	fe cf       	rjmp	.-4      	; 0xc50 <GetFolderCluster+0x2c>
	temp <<= 8;
	temp += eeprom_read_byte(addr+3);
     c54:	03 96       	adiw	r24, 0x03	; 3
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     c56:	9f bb       	out	0x1f, r25	; 31
     c58:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     c5a:	e0 9a       	sbi	0x1c, 0	; 28
     c5c:	8d b3       	in	r24, 0x1d	; 29
}

DWORD GetFolderCluster(WORD addr)
{
	DWORD temp;
	temp = eeprom_read_byte(addr);
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	50 e0       	ldi	r21, 0x00	; 0
	temp <<= 8;
     c64:	54 2f       	mov	r21, r20
     c66:	43 2f       	mov	r20, r19
     c68:	32 2f       	mov	r19, r18
     c6a:	22 27       	eor	r18, r18
	temp += eeprom_read_byte(addr+1);
     c6c:	27 0f       	add	r18, r23
     c6e:	31 1d       	adc	r19, r1
     c70:	41 1d       	adc	r20, r1
     c72:	51 1d       	adc	r21, r1
	temp <<= 8;
     c74:	54 2f       	mov	r21, r20
     c76:	43 2f       	mov	r20, r19
     c78:	32 2f       	mov	r19, r18
     c7a:	22 27       	eor	r18, r18
	temp += eeprom_read_byte(addr+2);
     c7c:	26 0f       	add	r18, r22
     c7e:	31 1d       	adc	r19, r1
     c80:	41 1d       	adc	r20, r1
     c82:	51 1d       	adc	r21, r1
	temp <<= 8;
     c84:	54 2f       	mov	r21, r20
     c86:	43 2f       	mov	r20, r19
     c88:	32 2f       	mov	r19, r18
     c8a:	22 27       	eor	r18, r18
     c8c:	28 0f       	add	r18, r24
     c8e:	31 1d       	adc	r19, r1
     c90:	41 1d       	adc	r20, r1
     c92:	51 1d       	adc	r21, r1
	temp += eeprom_read_byte(addr+3);
#if FAT_DEBUG
	printf_P(PSTR("\r\nRead EEPROM address: %d value is: %ld"),addr,temp);
#endif
	return temp;
}
     c94:	b9 01       	movw	r22, r18
     c96:	ca 01       	movw	r24, r20
     c98:	08 95       	ret

00000c9a <Search>:
}



BYTE Search(/*BYTE *dirWORD *music_record_addr,*/struct direntry *MusicInfo,WORD *Count,BYTE *type)//当COUNT为零时，有它带回这个目录下总共有多少图片
{                                                            //不为零时有MusicInfo带回第Count图片的详细文件信息
     c9a:	2f 92       	push	r2
     c9c:	3f 92       	push	r3
     c9e:	4f 92       	push	r4
     ca0:	5f 92       	push	r5
     ca2:	6f 92       	push	r6
     ca4:	7f 92       	push	r7
     ca6:	8f 92       	push	r8
     ca8:	9f 92       	push	r9
     caa:	af 92       	push	r10
     cac:	bf 92       	push	r11
     cae:	cf 92       	push	r12
     cb0:	df 92       	push	r13
     cb2:	ef 92       	push	r14
     cb4:	ff 92       	push	r15
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
     cc2:	29 97       	sbiw	r28, 0x09	; 9
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	9d 83       	std	Y+5, r25	; 0x05
     cd0:	8c 83       	std	Y+4, r24	; 0x04
     cd2:	1b 01       	movw	r2, r22
     cd4:	fa 01       	movw	r30, r20
	//cluster = FAT_OpenDir(dir);
	//if(cluster == 1)return 1;
	
	BYTE file_type[3] ;
	
	switch(*type)
     cd6:	e0 81       	ld	r30, Z
     cd8:	e1 30       	cpi	r30, 0x01	; 1
     cda:	19 f0       	breq	.+6      	; 0xce2 <Search+0x48>
     cdc:	e2 30       	cpi	r30, 0x02	; 2
     cde:	51 f4       	brne	.+20     	; 0xcf4 <Search+0x5a>
     ce0:	05 c0       	rjmp	.+10     	; 0xcec <Search+0x52>
     ce2:	20 e5       	ldi	r18, 0x50	; 80
     ce4:	29 83       	std	Y+1, r18	; 0x01
     ce6:	bd e4       	ldi	r27, 0x4D	; 77
     ce8:	4b 2e       	mov	r4, r27
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <Search+0x5a>
     cec:	3e e4       	ldi	r19, 0x4E	; 78
     cee:	39 83       	std	Y+1, r19	; 0x01
     cf0:	a9 e4       	ldi	r26, 0x49	; 73
     cf2:	4a 2e       	mov	r4, r26
     cf4:	66 24       	eor	r6, r6
     cf6:	77 24       	eor	r7, r7
     cf8:	1b 82       	std	Y+3, r1	; 0x03
     cfa:	1a 82       	std	Y+2, r1	; 0x02
	
	
	WORD addr = RECORD_ADDR_START;
	while(1)
	{
		cluster = GetFolderCluster(addr);
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	9b 81       	ldd	r25, Y+3	; 0x03
     d00:	0e 94 12 06 	call	0xc24	; 0xc24 <GetFolderCluster>
		addr += 4;
     d04:	ea 81       	ldd	r30, Y+2	; 0x02
     d06:	fb 81       	ldd	r31, Y+3	; 0x03
     d08:	34 96       	adiw	r30, 0x04	; 4
     d0a:	fb 83       	std	Y+3, r31	; 0x03
     d0c:	ea 83       	std	Y+2, r30	; 0x02
		if(cluster == 0xffffffff) break;
     d0e:	6f 3f       	cpi	r22, 0xFF	; 255
     d10:	ff ef       	ldi	r31, 0xFF	; 255
     d12:	7f 07       	cpc	r23, r31
     d14:	ff ef       	ldi	r31, 0xFF	; 255
     d16:	8f 07       	cpc	r24, r31
     d18:	ff ef       	ldi	r31, 0xFF	; 255
     d1a:	9f 07       	cpc	r25, r31
     d1c:	09 f4       	brne	.+2      	; 0xd20 <Search+0x86>
     d1e:	23 c1       	rjmp	.+582    	; 0xf66 <Search+0x2cc>
		
		else
		{
			//*music_record_addr = addr - 4;	/* record in which record found the right file */
			if(cluster==0 && FAT32_Enable==0)// 根目录，FAT16文件系统
     d20:	61 15       	cp	r22, r1
     d22:	71 05       	cpc	r23, r1
     d24:	81 05       	cpc	r24, r1
     d26:	91 05       	cpc	r25, r1
     d28:	09 f0       	breq	.+2      	; 0xd2c <Search+0x92>
     d2a:	71 c0       	rjmp	.+226    	; 0xe0e <Search+0x174>
     d2c:	80 91 cc 0c 	lds	r24, 0x0CCC
     d30:	88 23       	and	r24, r24
     d32:	21 f0       	breq	.+8      	; 0xd3c <Search+0xa2>
     d34:	cc 24       	eor	r12, r12
     d36:	dd 24       	eor	r13, r13
     d38:	76 01       	movw	r14, r12
     d3a:	6b c0       	rjmp	.+214    	; 0xe12 <Search+0x178>
			{
			
			
				buffer=malloc(512);//动态分配空间512字节
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	0e 94 19 11 	call	0x2232	; 0x2232 <malloc>
     d44:	8c 01       	movw	r16, r24
				if(buffer==0)return 1;//if failed
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	09 f4       	brne	.+2      	; 0xd4c <Search+0xb2>
     d4a:	17 c1       	rjmp	.+558    	; 0xf7a <Search+0x2e0>
     d4c:	ff 24       	eor	r15, r15
				
				
				for(cnt=0;cnt<RootDirSectors;cnt++)
				{
					if(FAT_ReadSector(FirstDirSector+cnt,buffer)){free(buffer);return 1;}
					for(offset=0;offset<512;offset+=32)
     d4e:	c1 2c       	mov	r12, r1
     d50:	f2 e0       	ldi	r31, 0x02	; 2
     d52:	df 2e       	mov	r13, r31
     d54:	c8 0e       	add	r12, r24
     d56:	d9 1e       	adc	r13, r25
     d58:	44 c0       	rjmp	.+136    	; 0xde2 <Search+0x148>
				if(buffer==0)return 1;//if failed
				
				
				for(cnt=0;cnt<RootDirSectors;cnt++)
				{
					if(FAT_ReadSector(FirstDirSector+cnt,buffer)){free(buffer);return 1;}
     d5a:	80 91 ab 0c 	lds	r24, 0x0CAB
     d5e:	90 91 ac 0c 	lds	r25, 0x0CAC
     d62:	a0 91 ad 0c 	lds	r26, 0x0CAD
     d66:	b0 91 ae 0c 	lds	r27, 0x0CAE
     d6a:	28 0f       	add	r18, r24
     d6c:	39 1f       	adc	r19, r25
     d6e:	4a 1f       	adc	r20, r26
     d70:	5b 1f       	adc	r21, r27
     d72:	e0 91 a2 01 	lds	r30, 0x01A2
     d76:	f0 91 a3 01 	lds	r31, 0x01A3
     d7a:	ca 01       	movw	r24, r20
     d7c:	b9 01       	movw	r22, r18
     d7e:	a8 01       	movw	r20, r16
     d80:	09 95       	icall
     d82:	88 23       	and	r24, r24
     d84:	09 f0       	breq	.+2      	; 0xd88 <Search+0xee>
     d86:	7d c0       	rjmp	.+250    	; 0xe82 <Search+0x1e8>
     d88:	58 01       	movw	r10, r16
					for(offset=0;offset<512;offset+=32)
					{
						item=(struct direntry *)(&buffer[offset]);//pointer convert
						//find a valid item and display it
						if((item->deName[0] != '.') && (item->deName[0] != 0x00) && (item->deName[0] != 0xe5) && (item->deAttributes != 0x0f))
     d8a:	f5 01       	movw	r30, r10
     d8c:	80 81       	ld	r24, Z
     d8e:	8e 32       	cpi	r24, 0x2E	; 46
     d90:	01 f1       	breq	.+64     	; 0xdd2 <Search+0x138>
     d92:	88 23       	and	r24, r24
     d94:	f1 f0       	breq	.+60     	; 0xdd2 <Search+0x138>
     d96:	85 3e       	cpi	r24, 0xE5	; 229
     d98:	e1 f0       	breq	.+56     	; 0xdd2 <Search+0x138>
     d9a:	83 85       	ldd	r24, Z+11	; 0x0b
     d9c:	8f 30       	cpi	r24, 0x0F	; 15
     d9e:	c9 f0       	breq	.+50     	; 0xdd2 <Search+0x138>
						{
						
							if((item->deExtension[0] == file_type[0])&&(item->deExtension[1] == file_type[1])&&(item->deExtension[2] == file_type[2]))
     da0:	80 85       	ldd	r24, Z+8	; 0x08
     da2:	82 34       	cpi	r24, 0x42	; 66
     da4:	b1 f4       	brne	.+44     	; 0xdd2 <Search+0x138>
     da6:	81 85       	ldd	r24, Z+9	; 0x09
     da8:	84 15       	cp	r24, r4
     daa:	99 f4       	brne	.+38     	; 0xdd2 <Search+0x138>
     dac:	82 85       	ldd	r24, Z+10	; 0x0a
     dae:	f9 81       	ldd	r31, Y+1	; 0x01
     db0:	8f 17       	cp	r24, r31
     db2:	79 f4       	brne	.+30     	; 0xdd2 <Search+0x138>
							{
								
								CopyDirentruyItem(MusicInfo,item);
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	9d 81       	ldd	r25, Y+5	; 0x05
     db8:	b5 01       	movw	r22, r10
     dba:	0e 94 8c 05 	call	0xb18	; 0xb18 <CopyDirentruyItem>
								
								i++;
     dbe:	08 94       	sec
     dc0:	61 1c       	adc	r6, r1
     dc2:	71 1c       	adc	r7, r1
								if(i==*Count){free(buffer);return 0;}
     dc4:	f1 01       	movw	r30, r2
     dc6:	80 81       	ld	r24, Z
     dc8:	91 81       	ldd	r25, Z+1	; 0x01
     dca:	68 16       	cp	r6, r24
     dcc:	79 06       	cpc	r7, r25
     dce:	09 f4       	brne	.+2      	; 0xdd2 <Search+0x138>
     dd0:	83 c0       	rjmp	.+262    	; 0xed8 <Search+0x23e>
     dd2:	20 e2       	ldi	r18, 0x20	; 32
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	a2 0e       	add	r10, r18
     dd8:	b3 1e       	adc	r11, r19
				
				
				for(cnt=0;cnt<RootDirSectors;cnt++)
				{
					if(FAT_ReadSector(FirstDirSector+cnt,buffer)){free(buffer);return 1;}
					for(offset=0;offset<512;offset+=32)
     dda:	ac 14       	cp	r10, r12
     ddc:	bd 04       	cpc	r11, r13
     dde:	a9 f6       	brne	.-86     	; 0xd8a <Search+0xf0>
			
				buffer=malloc(512);//动态分配空间512字节
				if(buffer==0)return 1;//if failed
				
				
				for(cnt=0;cnt<RootDirSectors;cnt++)
     de0:	f3 94       	inc	r15
     de2:	2f 2d       	mov	r18, r15
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	80 91 cf 0c 	lds	r24, 0x0CCF
     dee:	90 91 d0 0c 	lds	r25, 0x0CD0
     df2:	a0 91 d1 0c 	lds	r26, 0x0CD1
     df6:	b0 91 d2 0c 	lds	r27, 0x0CD2
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	08 f4       	brcc	.+2      	; 0xe06 <Search+0x16c>
     e04:	aa cf       	rjmp	.-172    	; 0xd5a <Search+0xc0>
								if(i==*Count){free(buffer);return 0;}
							}							 
						}
					}
				}
				free(buffer);//release释放空间
     e06:	c8 01       	movw	r24, r16
     e08:	0e 94 c6 11 	call	0x238c	; 0x238c <free>
     e0c:	77 cf       	rjmp	.-274    	; 0xcfc <Search+0x62>
		if(cluster == 0xffffffff) break;
		
		else
		{
			//*music_record_addr = addr - 4;	/* record in which record found the right file */
			if(cluster==0 && FAT32_Enable==0)// 根目录，FAT16文件系统
     e0e:	6b 01       	movw	r12, r22
     e10:	7c 01       	movw	r14, r24
			else//other folders
			{
				tempclust=cluster;
				while(1)
				{
					sector=FirstDataSector+(DWORD)(tempclust-2)*(DWORD)SectorsPerClust;//calculate the actual sector number
     e12:	c7 01       	movw	r24, r14
     e14:	b6 01       	movw	r22, r12
     e16:	62 50       	subi	r22, 0x02	; 2
     e18:	70 40       	sbci	r23, 0x00	; 0
     e1a:	80 40       	sbci	r24, 0x00	; 0
     e1c:	90 40       	sbci	r25, 0x00	; 0
     e1e:	20 91 b3 0c 	lds	r18, 0x0CB3
     e22:	30 91 b4 0c 	lds	r19, 0x0CB4
     e26:	40 e0       	ldi	r20, 0x00	; 0
     e28:	50 e0       	ldi	r21, 0x00	; 0
     e2a:	0e 94 1e 12 	call	0x243c	; 0x243c <__mulsi3>
     e2e:	4b 01       	movw	r8, r22
     e30:	5c 01       	movw	r10, r24
     e32:	80 91 b5 0c 	lds	r24, 0x0CB5
     e36:	90 91 b6 0c 	lds	r25, 0x0CB6
     e3a:	a0 91 b7 0c 	lds	r26, 0x0CB7
     e3e:	b0 91 b8 0c 	lds	r27, 0x0CB8
     e42:	88 0e       	add	r8, r24
     e44:	99 1e       	adc	r9, r25
     e46:	aa 1e       	adc	r10, r26
     e48:	bb 1e       	adc	r11, r27
					buffer=malloc(512);//apply memory
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	92 e0       	ldi	r25, 0x02	; 2
     e4e:	0e 94 19 11 	call	0x2232	; 0x2232 <malloc>
     e52:	8c 01       	movw	r16, r24
					if(buffer==0)return 1;//if failed
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	09 f4       	brne	.+2      	; 0xe5a <Search+0x1c0>
     e58:	90 c0       	rjmp	.+288    	; 0xf7a <Search+0x2e0>
     e5a:	55 24       	eor	r5, r5
					for(cnt=0;cnt<SectorsPerClust;cnt++)
					{
						if(FAT_ReadSector(sector+cnt,buffer)){free(buffer);return 1;}
						for(offset=0;offset<512;offset+=32)
     e5c:	80 50       	subi	r24, 0x00	; 0
     e5e:	9e 4f       	sbci	r25, 0xFE	; 254
     e60:	9f 83       	std	Y+7, r25	; 0x07
     e62:	8e 83       	std	Y+6, r24	; 0x06
     e64:	49 c0       	rjmp	.+146    	; 0xef8 <Search+0x25e>
					sector=FirstDataSector+(DWORD)(tempclust-2)*(DWORD)SectorsPerClust;//calculate the actual sector number
					buffer=malloc(512);//apply memory
					if(buffer==0)return 1;//if failed
					for(cnt=0;cnt<SectorsPerClust;cnt++)
					{
						if(FAT_ReadSector(sector+cnt,buffer)){free(buffer);return 1;}
     e66:	c5 01       	movw	r24, r10
     e68:	b4 01       	movw	r22, r8
     e6a:	65 0d       	add	r22, r5
     e6c:	71 1d       	adc	r23, r1
     e6e:	81 1d       	adc	r24, r1
     e70:	91 1d       	adc	r25, r1
     e72:	e0 91 a2 01 	lds	r30, 0x01A2
     e76:	f0 91 a3 01 	lds	r31, 0x01A3
     e7a:	a8 01       	movw	r20, r16
     e7c:	09 95       	icall
     e7e:	88 23       	and	r24, r24
     e80:	21 f0       	breq	.+8      	; 0xe8a <Search+0x1f0>
     e82:	c8 01       	movw	r24, r16
     e84:	0e 94 c6 11 	call	0x238c	; 0x238c <free>
     e88:	78 c0       	rjmp	.+240    	; 0xf7a <Search+0x2e0>
     e8a:	19 87       	std	Y+9, r17	; 0x09
     e8c:	08 87       	std	Y+8, r16	; 0x08
						for(offset=0;offset<512;offset+=32)
						{
							item=(struct direntry *)(&buffer[offset]);
							if((item->deName[0] != '.') && (item->deName[0] != 0x00) && (item->deName[0] != 0xe5) && (item->deAttributes != 0x0f))
     e8e:	e8 85       	ldd	r30, Y+8	; 0x08
     e90:	f9 85       	ldd	r31, Y+9	; 0x09
     e92:	80 81       	ld	r24, Z
     e94:	8e 32       	cpi	r24, 0x2E	; 46
     e96:	21 f1       	breq	.+72     	; 0xee0 <Search+0x246>
     e98:	88 23       	and	r24, r24
     e9a:	11 f1       	breq	.+68     	; 0xee0 <Search+0x246>
     e9c:	85 3e       	cpi	r24, 0xE5	; 229
     e9e:	01 f1       	breq	.+64     	; 0xee0 <Search+0x246>
     ea0:	83 85       	ldd	r24, Z+11	; 0x0b
     ea2:	8f 30       	cpi	r24, 0x0F	; 15
     ea4:	e9 f0       	breq	.+58     	; 0xee0 <Search+0x246>
							{		
                               		
								if((item->deExtension[0] == file_type[0])&&(item->deExtension[1] == file_type[1])&&(item->deExtension[2] == file_type[2]))
     ea6:	80 85       	ldd	r24, Z+8	; 0x08
     ea8:	82 34       	cpi	r24, 0x42	; 66
     eaa:	d1 f4       	brne	.+52     	; 0xee0 <Search+0x246>
     eac:	81 85       	ldd	r24, Z+9	; 0x09
     eae:	84 15       	cp	r24, r4
     eb0:	b9 f4       	brne	.+46     	; 0xee0 <Search+0x246>
     eb2:	82 85       	ldd	r24, Z+10	; 0x0a
     eb4:	f9 81       	ldd	r31, Y+1	; 0x01
     eb6:	8f 17       	cp	r24, r31
     eb8:	99 f4       	brne	.+38     	; 0xee0 <Search+0x246>
								{
								    
									CopyDirentruyItem(MusicInfo,item);
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
     ebc:	9d 81       	ldd	r25, Y+5	; 0x05
     ebe:	68 85       	ldd	r22, Y+8	; 0x08
     ec0:	79 85       	ldd	r23, Y+9	; 0x09
     ec2:	0e 94 8c 05 	call	0xb18	; 0xb18 <CopyDirentruyItem>
									
									i++;
     ec6:	08 94       	sec
     ec8:	61 1c       	adc	r6, r1
     eca:	71 1c       	adc	r7, r1
									if(i==*Count){free(buffer);return 0;}
     ecc:	f1 01       	movw	r30, r2
     ece:	80 81       	ld	r24, Z
     ed0:	91 81       	ldd	r25, Z+1	; 0x01
     ed2:	68 16       	cp	r6, r24
     ed4:	79 06       	cpc	r7, r25
     ed6:	21 f4       	brne	.+8      	; 0xee0 <Search+0x246>
     ed8:	c8 01       	movw	r24, r16
     eda:	0e 94 c6 11 	call	0x238c	; 0x238c <free>
     ede:	4b c0       	rjmp	.+150    	; 0xf76 <Search+0x2dc>
     ee0:	28 85       	ldd	r18, Y+8	; 0x08
     ee2:	39 85       	ldd	r19, Y+9	; 0x09
     ee4:	20 5e       	subi	r18, 0xE0	; 224
     ee6:	3f 4f       	sbci	r19, 0xFF	; 255
     ee8:	39 87       	std	Y+9, r19	; 0x09
     eea:	28 87       	std	Y+8, r18	; 0x08
					buffer=malloc(512);//apply memory
					if(buffer==0)return 1;//if failed
					for(cnt=0;cnt<SectorsPerClust;cnt++)
					{
						if(FAT_ReadSector(sector+cnt,buffer)){free(buffer);return 1;}
						for(offset=0;offset<512;offset+=32)
     eec:	8e 81       	ldd	r24, Y+6	; 0x06
     eee:	9f 81       	ldd	r25, Y+7	; 0x07
     ef0:	28 17       	cp	r18, r24
     ef2:	39 07       	cpc	r19, r25
     ef4:	61 f6       	brne	.-104    	; 0xe8e <Search+0x1f4>
				while(1)
				{
					sector=FirstDataSector+(DWORD)(tempclust-2)*(DWORD)SectorsPerClust;//calculate the actual sector number
					buffer=malloc(512);//apply memory
					if(buffer==0)return 1;//if failed
					for(cnt=0;cnt<SectorsPerClust;cnt++)
     ef6:	53 94       	inc	r5
     ef8:	25 2d       	mov	r18, r5
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	80 91 b3 0c 	lds	r24, 0x0CB3
     f00:	90 91 b4 0c 	lds	r25, 0x0CB4
     f04:	28 17       	cp	r18, r24
     f06:	39 07       	cpc	r19, r25
     f08:	08 f4       	brcc	.+2      	; 0xf0c <Search+0x272>
     f0a:	ad cf       	rjmp	.-166    	; 0xe66 <Search+0x1cc>
									if(i==*Count){free(buffer);return 0;}
								}
							}
						}
					}
					free(buffer);//release
     f0c:	c8 01       	movw	r24, r16
     f0e:	0e 94 c6 11 	call	0x238c	; 0x238c <free>
					tempclust=FAT_NextCluster(tempclust);//next cluster
     f12:	c7 01       	movw	r24, r14
     f14:	b6 01       	movw	r22, r12
     f16:	0e 94 03 05 	call	0xa06	; 0xa06 <FAT_NextCluster>
     f1a:	6b 01       	movw	r12, r22
     f1c:	7c 01       	movw	r14, r24
					if(tempclust == 0x0fffffff || tempclust == 0x0ffffff8 || (FAT32_Enable == 0 && tempclust == 0xffff))break;
     f1e:	9f ef       	ldi	r25, 0xFF	; 255
     f20:	c9 16       	cp	r12, r25
     f22:	9f ef       	ldi	r25, 0xFF	; 255
     f24:	d9 06       	cpc	r13, r25
     f26:	9f ef       	ldi	r25, 0xFF	; 255
     f28:	e9 06       	cpc	r14, r25
     f2a:	9f e0       	ldi	r25, 0x0F	; 15
     f2c:	f9 06       	cpc	r15, r25
     f2e:	09 f4       	brne	.+2      	; 0xf32 <Search+0x298>
     f30:	e5 ce       	rjmp	.-566    	; 0xcfc <Search+0x62>
     f32:	e8 ef       	ldi	r30, 0xF8	; 248
     f34:	ce 16       	cp	r12, r30
     f36:	ef ef       	ldi	r30, 0xFF	; 255
     f38:	de 06       	cpc	r13, r30
     f3a:	ef ef       	ldi	r30, 0xFF	; 255
     f3c:	ee 06       	cpc	r14, r30
     f3e:	ef e0       	ldi	r30, 0x0F	; 15
     f40:	fe 06       	cpc	r15, r30
     f42:	09 f4       	brne	.+2      	; 0xf46 <Search+0x2ac>
     f44:	db ce       	rjmp	.-586    	; 0xcfc <Search+0x62>
     f46:	80 91 cc 0c 	lds	r24, 0x0CCC
     f4a:	88 23       	and	r24, r24
     f4c:	09 f0       	breq	.+2      	; 0xf50 <Search+0x2b6>
     f4e:	61 cf       	rjmp	.-318    	; 0xe12 <Search+0x178>
     f50:	ff ef       	ldi	r31, 0xFF	; 255
     f52:	cf 16       	cp	r12, r31
     f54:	ff ef       	ldi	r31, 0xFF	; 255
     f56:	df 06       	cpc	r13, r31
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	ef 06       	cpc	r14, r31
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	ff 06       	cpc	r15, r31
     f60:	09 f0       	breq	.+2      	; 0xf64 <Search+0x2ca>
     f62:	57 cf       	rjmp	.-338    	; 0xe12 <Search+0x178>
     f64:	cb ce       	rjmp	.-618    	; 0xcfc <Search+0x62>
				}
			}
		}
	}
	if(*Count==0)*Count=i;
     f66:	f1 01       	movw	r30, r2
     f68:	80 81       	ld	r24, Z
     f6a:	91 81       	ldd	r25, Z+1	; 0x01
     f6c:	89 2b       	or	r24, r25
     f6e:	19 f4       	brne	.+6      	; 0xf76 <Search+0x2dc>
     f70:	f1 01       	movw	r30, r2
     f72:	71 82       	std	Z+1, r7	; 0x01
     f74:	60 82       	st	Z, r6
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <Search+0x2e2>
     f7a:	81 e0       	ldi	r24, 0x01	; 1
	GUI_sprintf_chartohex(130,300,*type,0xffff,0x0000) ;
	GUI_sprintf_chartohex(160,300,i,0xffff,0x0000) ;
	GUI_sprintf_chartohex(190,300,*Count,0xffff,0x0000) ;
	while(1) ;*/
	return 0;	
}
     f7c:	29 96       	adiw	r28, 0x09	; 9
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	ff 90       	pop	r15
     f92:	ef 90       	pop	r14
     f94:	df 90       	pop	r13
     f96:	cf 90       	pop	r12
     f98:	bf 90       	pop	r11
     f9a:	af 90       	pop	r10
     f9c:	9f 90       	pop	r9
     f9e:	8f 90       	pop	r8
     fa0:	7f 90       	pop	r7
     fa2:	6f 90       	pop	r6
     fa4:	5f 90       	pop	r5
     fa6:	4f 90       	pop	r4
     fa8:	3f 90       	pop	r3
     faa:	2f 90       	pop	r2
     fac:	08 95       	ret

00000fae <SearchFolder>:
#endif
	return temp;
}

BYTE SearchFolder(DWORD cluster,WORD *addr)
{
     fae:	2f 92       	push	r2
     fb0:	3f 92       	push	r3
     fb2:	4f 92       	push	r4
     fb4:	5f 92       	push	r5
     fb6:	7f 92       	push	r7
     fb8:	8f 92       	push	r8
     fba:	9f 92       	push	r9
     fbc:	af 92       	push	r10
     fbe:	bf 92       	push	r11
     fc0:	cf 92       	push	r12
     fc2:	df 92       	push	r13
     fc4:	ef 92       	push	r14
     fc6:	ff 92       	push	r15
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	2a 01       	movw	r4, r20
	//unsigned char j;//long name buffer offset;
//	unsigned char *p;//long name buffer pointer
	struct direntry *item = 0;
	//struct winentry *we =0;
	
	if(cluster==0 && FAT32_Enable==0)// root directory
     fd2:	61 15       	cp	r22, r1
     fd4:	71 05       	cpc	r23, r1
     fd6:	81 05       	cpc	r24, r1
     fd8:	91 05       	cpc	r25, r1
     fda:	09 f0       	breq	.+2      	; 0xfde <SearchFolder+0x30>
     fdc:	74 c0       	rjmp	.+232    	; 0x10c6 <SearchFolder+0x118>
     fde:	80 91 cc 0c 	lds	r24, 0x0CCC
     fe2:	88 23       	and	r24, r24
     fe4:	21 f0       	breq	.+8      	; 0xfee <SearchFolder+0x40>
     fe6:	cc 24       	eor	r12, r12
     fe8:	dd 24       	eor	r13, r13
     fea:	76 01       	movw	r14, r12
     fec:	6e c0       	rjmp	.+220    	; 0x10ca <SearchFolder+0x11c>
	{
		buffer=malloc(512);//apply memory
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	92 e0       	ldi	r25, 0x02	; 2
     ff2:	0e 94 19 11 	call	0x2232	; 0x2232 <malloc>
     ff6:	8c 01       	movw	r16, r24
		if(buffer==0)return 1;//if failed
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	09 f4       	brne	.+2      	; 0xffe <SearchFolder+0x50>
     ffc:	07 c1       	rjmp	.+526    	; 0x120c <__stack+0x10d>
     ffe:	ff 24       	eor	r15, r15
		for(cnt=0;cnt<RootDirSectors;cnt++)
		{
			if(FAT_ReadSector(FirstDirSector+cnt,buffer)){free(buffer);return 1;}
			for(offset=0;offset<512;offset+=32)
    1000:	c1 2c       	mov	r12, r1
    1002:	f2 e0       	ldi	r31, 0x02	; 2
    1004:	df 2e       	mov	r13, r31
    1006:	c8 0e       	add	r12, r24
    1008:	d9 1e       	adc	r13, r25
    100a:	47 c0       	rjmp	.+142    	; 0x109a <SearchFolder+0xec>
	{
		buffer=malloc(512);//apply memory
		if(buffer==0)return 1;//if failed
		for(cnt=0;cnt<RootDirSectors;cnt++)
		{
			if(FAT_ReadSector(FirstDirSector+cnt,buffer)){free(buffer);return 1;}
    100c:	80 91 ab 0c 	lds	r24, 0x0CAB
    1010:	90 91 ac 0c 	lds	r25, 0x0CAC
    1014:	a0 91 ad 0c 	lds	r26, 0x0CAD
    1018:	b0 91 ae 0c 	lds	r27, 0x0CAE
    101c:	28 0f       	add	r18, r24
    101e:	39 1f       	adc	r19, r25
    1020:	4a 1f       	adc	r20, r26
    1022:	5b 1f       	adc	r21, r27
    1024:	e0 91 a2 01 	lds	r30, 0x01A2
    1028:	f0 91 a3 01 	lds	r31, 0x01A3
    102c:	ca 01       	movw	r24, r20
    102e:	b9 01       	movw	r22, r18
    1030:	a8 01       	movw	r20, r16
    1032:	09 95       	icall
    1034:	88 23       	and	r24, r24
    1036:	09 f0       	breq	.+2      	; 0x103a <SearchFolder+0x8c>
    1038:	81 c0       	rjmp	.+258    	; 0x113c <__stack+0x3d>
    103a:	e8 01       	movw	r28, r16
			for(offset=0;offset<512;offset+=32)
			{
				item=(struct direntry *)(&buffer[offset]);//pointer convert
				//find a valid item and display it
				if((item->deName[0] != '.') && (item->deName[0] != 0x00) && (item->deName[0] != 0xe5))
    103c:	88 81       	ld	r24, Y
    103e:	8e 32       	cpi	r24, 0x2E	; 46
    1040:	39 f1       	breq	.+78     	; 0x1090 <SearchFolder+0xe2>
    1042:	88 23       	and	r24, r24
    1044:	29 f1       	breq	.+74     	; 0x1090 <SearchFolder+0xe2>
    1046:	85 3e       	cpi	r24, 0xE5	; 229
    1048:	19 f1       	breq	.+70     	; 0x1090 <SearchFolder+0xe2>
				{
					if(item->deAttributes & ATTR_DIRECTORY )
    104a:	8b 85       	ldd	r24, Y+11	; 0x0b
    104c:	84 ff       	sbrs	r24, 4
    104e:	20 c0       	rjmp	.+64     	; 0x1090 <SearchFolder+0xe2>
					{
						#if FAT_DEBUG
							printf_P(PSTR("\r\nFound a folder!"));
						#endif
						if(*addr==RECORD_ADDR_END)return 0;
    1050:	f2 01       	movw	r30, r4
    1052:	20 81       	ld	r18, Z
    1054:	31 81       	ldd	r19, Z+1	; 0x01
    1056:	f2 e0       	ldi	r31, 0x02	; 2
    1058:	20 30       	cpi	r18, 0x00	; 0
    105a:	3f 07       	cpc	r19, r31
    105c:	09 f4       	brne	.+2      	; 0x1060 <SearchFolder+0xb2>
    105e:	d8 c0       	rjmp	.+432    	; 0x1210 <__stack+0x111>
						else
						{
							WriteFolderCluster(*addr,item->deStartCluster+(((unsigned long)item->deHighClust)<<16));
    1060:	4c 89       	ldd	r20, Y+20	; 0x14
    1062:	5d 89       	ldd	r21, Y+21	; 0x15
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	ba 01       	movw	r22, r20
    106a:	55 27       	eor	r21, r21
    106c:	44 27       	eor	r20, r20
    106e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1070:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1072:	a0 e0       	ldi	r26, 0x00	; 0
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	48 0f       	add	r20, r24
    1078:	59 1f       	adc	r21, r25
    107a:	6a 1f       	adc	r22, r26
    107c:	7b 1f       	adc	r23, r27
    107e:	c9 01       	movw	r24, r18
    1080:	0e 94 d3 05 	call	0xba6	; 0xba6 <WriteFolderCluster>
							*addr+=4;
    1084:	f2 01       	movw	r30, r4
    1086:	80 81       	ld	r24, Z
    1088:	91 81       	ldd	r25, Z+1	; 0x01
    108a:	04 96       	adiw	r24, 0x04	; 4
    108c:	91 83       	std	Z+1, r25	; 0x01
    108e:	80 83       	st	Z, r24
    1090:	a0 96       	adiw	r28, 0x20	; 32
		buffer=malloc(512);//apply memory
		if(buffer==0)return 1;//if failed
		for(cnt=0;cnt<RootDirSectors;cnt++)
		{
			if(FAT_ReadSector(FirstDirSector+cnt,buffer)){free(buffer);return 1;}
			for(offset=0;offset<512;offset+=32)
    1092:	cc 15       	cp	r28, r12
    1094:	dd 05       	cpc	r29, r13
    1096:	91 f6       	brne	.-92     	; 0x103c <SearchFolder+0x8e>
	
	if(cluster==0 && FAT32_Enable==0)// root directory
	{
		buffer=malloc(512);//apply memory
		if(buffer==0)return 1;//if failed
		for(cnt=0;cnt<RootDirSectors;cnt++)
    1098:	f3 94       	inc	r15
    109a:	2f 2d       	mov	r18, r15
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	80 91 cf 0c 	lds	r24, 0x0CCF
    10a6:	90 91 d0 0c 	lds	r25, 0x0CD0
    10aa:	a0 91 d1 0c 	lds	r26, 0x0CD1
    10ae:	b0 91 d2 0c 	lds	r27, 0x0CD2
    10b2:	28 17       	cp	r18, r24
    10b4:	39 07       	cpc	r19, r25
    10b6:	4a 07       	cpc	r20, r26
    10b8:	5b 07       	cpc	r21, r27
    10ba:	08 f4       	brcc	.+2      	; 0x10be <SearchFolder+0x110>
    10bc:	a7 cf       	rjmp	.-178    	; 0x100c <SearchFolder+0x5e>
						}
					}
				}
			}
		}
		free(buffer);//release
    10be:	c8 01       	movw	r24, r16
    10c0:	0e 94 c6 11 	call	0x238c	; 0x238c <free>
    10c4:	a5 c0       	rjmp	.+330    	; 0x1210 <__stack+0x111>
	//unsigned char j;//long name buffer offset;
//	unsigned char *p;//long name buffer pointer
	struct direntry *item = 0;
	//struct winentry *we =0;
	
	if(cluster==0 && FAT32_Enable==0)// root directory
    10c6:	6b 01       	movw	r12, r22
    10c8:	7c 01       	movw	r14, r24
	else//other folders
	{
		tempclust=cluster;
		while(1)
		{
			sector=FirstDataSector+(DWORD)(tempclust-2)*(DWORD)SectorsPerClust;//calculate the actual sector number
    10ca:	c7 01       	movw	r24, r14
    10cc:	b6 01       	movw	r22, r12
    10ce:	62 50       	subi	r22, 0x02	; 2
    10d0:	70 40       	sbci	r23, 0x00	; 0
    10d2:	80 40       	sbci	r24, 0x00	; 0
    10d4:	90 40       	sbci	r25, 0x00	; 0
    10d6:	20 91 b3 0c 	lds	r18, 0x0CB3
    10da:	30 91 b4 0c 	lds	r19, 0x0CB4
    10de:	40 e0       	ldi	r20, 0x00	; 0
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	0e 94 1e 12 	call	0x243c	; 0x243c <__mulsi3>
    10e6:	4b 01       	movw	r8, r22
    10e8:	5c 01       	movw	r10, r24
    10ea:	80 91 b5 0c 	lds	r24, 0x0CB5
    10ee:	90 91 b6 0c 	lds	r25, 0x0CB6
    10f2:	a0 91 b7 0c 	lds	r26, 0x0CB7
    10f6:	b0 91 b8 0c 	lds	r27, 0x0CB8
    10fa:	88 0e       	add	r8, r24
    10fc:	99 1e       	adc	r9, r25
    10fe:	aa 1e       	adc	r10, r26
    1100:	bb 1e       	adc	r11, r27
			buffer=malloc(512);//apply memory
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	92 e0       	ldi	r25, 0x02	; 2
    1106:	0e 94 19 11 	call	0x2232	; 0x2232 <malloc>
    110a:	8c 01       	movw	r16, r24
			if(buffer==0)return 1;//if failed
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	09 f4       	brne	.+2      	; 0x1112 <__stack+0x13>
    1110:	7d c0       	rjmp	.+250    	; 0x120c <__stack+0x10d>
    1112:	77 24       	eor	r7, r7
			for(cnt=0;cnt<SectorsPerClust;cnt++)
			{
				if(FAT_ReadSector(sector+cnt,buffer)){free(buffer);return 1;}
				for(offset=0;offset<512;offset+=32)
    1114:	21 2c       	mov	r2, r1
    1116:	92 e0       	ldi	r25, 0x02	; 2
    1118:	39 2e       	mov	r3, r25
    111a:	20 0e       	add	r2, r16
    111c:	31 1e       	adc	r3, r17
    111e:	42 c0       	rjmp	.+132    	; 0x11a4 <__stack+0xa5>
			sector=FirstDataSector+(DWORD)(tempclust-2)*(DWORD)SectorsPerClust;//calculate the actual sector number
			buffer=malloc(512);//apply memory
			if(buffer==0)return 1;//if failed
			for(cnt=0;cnt<SectorsPerClust;cnt++)
			{
				if(FAT_ReadSector(sector+cnt,buffer)){free(buffer);return 1;}
    1120:	c5 01       	movw	r24, r10
    1122:	b4 01       	movw	r22, r8
    1124:	67 0d       	add	r22, r7
    1126:	71 1d       	adc	r23, r1
    1128:	81 1d       	adc	r24, r1
    112a:	91 1d       	adc	r25, r1
    112c:	e0 91 a2 01 	lds	r30, 0x01A2
    1130:	f0 91 a3 01 	lds	r31, 0x01A3
    1134:	a8 01       	movw	r20, r16
    1136:	09 95       	icall
    1138:	88 23       	and	r24, r24
    113a:	21 f0       	breq	.+8      	; 0x1144 <__stack+0x45>
    113c:	c8 01       	movw	r24, r16
    113e:	0e 94 c6 11 	call	0x238c	; 0x238c <free>
    1142:	64 c0       	rjmp	.+200    	; 0x120c <__stack+0x10d>
    1144:	e8 01       	movw	r28, r16
				for(offset=0;offset<512;offset+=32)
				{
					item=(struct direntry *)(&buffer[offset]);
					if((item->deName[0] != '.') && (item->deName[0] != 0x00) && (item->deName[0] != 0xe5))
    1146:	88 81       	ld	r24, Y
    1148:	8e 32       	cpi	r24, 0x2E	; 46
    114a:	39 f1       	breq	.+78     	; 0x119a <__stack+0x9b>
    114c:	88 23       	and	r24, r24
    114e:	29 f1       	breq	.+74     	; 0x119a <__stack+0x9b>
    1150:	85 3e       	cpi	r24, 0xE5	; 229
    1152:	19 f1       	breq	.+70     	; 0x119a <__stack+0x9b>
					{				
						if(item->deAttributes & ATTR_DIRECTORY )
    1154:	8b 85       	ldd	r24, Y+11	; 0x0b
    1156:	84 ff       	sbrs	r24, 4
    1158:	20 c0       	rjmp	.+64     	; 0x119a <__stack+0x9b>
						{
							#if FAT_DEBUG
								printf_P(PSTR("\r\nFound a folder!"));
							#endif
							if(*addr==RECORD_ADDR_END)return 0;
    115a:	f2 01       	movw	r30, r4
    115c:	20 81       	ld	r18, Z
    115e:	31 81       	ldd	r19, Z+1	; 0x01
    1160:	f2 e0       	ldi	r31, 0x02	; 2
    1162:	20 30       	cpi	r18, 0x00	; 0
    1164:	3f 07       	cpc	r19, r31
    1166:	09 f4       	brne	.+2      	; 0x116a <__stack+0x6b>
    1168:	53 c0       	rjmp	.+166    	; 0x1210 <__stack+0x111>
							else
							{
								WriteFolderCluster(*addr,item->deStartCluster+(((unsigned long)item->deHighClust)<<16));
    116a:	4c 89       	ldd	r20, Y+20	; 0x14
    116c:	5d 89       	ldd	r21, Y+21	; 0x15
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	ba 01       	movw	r22, r20
    1174:	55 27       	eor	r21, r21
    1176:	44 27       	eor	r20, r20
    1178:	8a 8d       	ldd	r24, Y+26	; 0x1a
    117a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    117c:	a0 e0       	ldi	r26, 0x00	; 0
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	48 0f       	add	r20, r24
    1182:	59 1f       	adc	r21, r25
    1184:	6a 1f       	adc	r22, r26
    1186:	7b 1f       	adc	r23, r27
    1188:	c9 01       	movw	r24, r18
    118a:	0e 94 d3 05 	call	0xba6	; 0xba6 <WriteFolderCluster>
								*addr+=4;
    118e:	f2 01       	movw	r30, r4
    1190:	80 81       	ld	r24, Z
    1192:	91 81       	ldd	r25, Z+1	; 0x01
    1194:	04 96       	adiw	r24, 0x04	; 4
    1196:	91 83       	std	Z+1, r25	; 0x01
    1198:	80 83       	st	Z, r24
    119a:	a0 96       	adiw	r28, 0x20	; 32
			buffer=malloc(512);//apply memory
			if(buffer==0)return 1;//if failed
			for(cnt=0;cnt<SectorsPerClust;cnt++)
			{
				if(FAT_ReadSector(sector+cnt,buffer)){free(buffer);return 1;}
				for(offset=0;offset<512;offset+=32)
    119c:	c2 15       	cp	r28, r2
    119e:	d3 05       	cpc	r29, r3
    11a0:	91 f6       	brne	.-92     	; 0x1146 <__stack+0x47>
		while(1)
		{
			sector=FirstDataSector+(DWORD)(tempclust-2)*(DWORD)SectorsPerClust;//calculate the actual sector number
			buffer=malloc(512);//apply memory
			if(buffer==0)return 1;//if failed
			for(cnt=0;cnt<SectorsPerClust;cnt++)
    11a2:	73 94       	inc	r7
    11a4:	27 2d       	mov	r18, r7
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	80 91 b3 0c 	lds	r24, 0x0CB3
    11ac:	90 91 b4 0c 	lds	r25, 0x0CB4
    11b0:	28 17       	cp	r18, r24
    11b2:	39 07       	cpc	r19, r25
    11b4:	08 f4       	brcc	.+2      	; 0x11b8 <__stack+0xb9>
    11b6:	b4 cf       	rjmp	.-152    	; 0x1120 <__stack+0x21>
							}
						}
					}
				}
			}
			free(buffer);//release
    11b8:	c8 01       	movw	r24, r16
    11ba:	0e 94 c6 11 	call	0x238c	; 0x238c <free>
			tempclust=FAT_NextCluster(tempclust);//next cluster
    11be:	c7 01       	movw	r24, r14
    11c0:	b6 01       	movw	r22, r12
    11c2:	0e 94 03 05 	call	0xa06	; 0xa06 <FAT_NextCluster>
    11c6:	6b 01       	movw	r12, r22
    11c8:	7c 01       	movw	r14, r24
			if(tempclust == 0x0fffffff || tempclust == 0x0ffffff8 || (FAT32_Enable == 0 && tempclust == 0xffff))break;
    11ca:	6f 3f       	cpi	r22, 0xFF	; 255
    11cc:	ff ef       	ldi	r31, 0xFF	; 255
    11ce:	7f 07       	cpc	r23, r31
    11d0:	ff ef       	ldi	r31, 0xFF	; 255
    11d2:	8f 07       	cpc	r24, r31
    11d4:	ff e0       	ldi	r31, 0x0F	; 15
    11d6:	9f 07       	cpc	r25, r31
    11d8:	d9 f0       	breq	.+54     	; 0x1210 <__stack+0x111>
    11da:	88 ef       	ldi	r24, 0xF8	; 248
    11dc:	c8 16       	cp	r12, r24
    11de:	8f ef       	ldi	r24, 0xFF	; 255
    11e0:	d8 06       	cpc	r13, r24
    11e2:	8f ef       	ldi	r24, 0xFF	; 255
    11e4:	e8 06       	cpc	r14, r24
    11e6:	8f e0       	ldi	r24, 0x0F	; 15
    11e8:	f8 06       	cpc	r15, r24
    11ea:	91 f0       	breq	.+36     	; 0x1210 <__stack+0x111>
    11ec:	80 91 cc 0c 	lds	r24, 0x0CCC
    11f0:	88 23       	and	r24, r24
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <__stack+0xf7>
    11f4:	6a cf       	rjmp	.-300    	; 0x10ca <SearchFolder+0x11c>
    11f6:	ef ef       	ldi	r30, 0xFF	; 255
    11f8:	ce 16       	cp	r12, r30
    11fa:	ef ef       	ldi	r30, 0xFF	; 255
    11fc:	de 06       	cpc	r13, r30
    11fe:	e0 e0       	ldi	r30, 0x00	; 0
    1200:	ee 06       	cpc	r14, r30
    1202:	e0 e0       	ldi	r30, 0x00	; 0
    1204:	fe 06       	cpc	r15, r30
    1206:	09 f0       	breq	.+2      	; 0x120a <__stack+0x10b>
    1208:	60 cf       	rjmp	.-320    	; 0x10ca <SearchFolder+0x11c>
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <__stack+0x111>
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	01 c0       	rjmp	.+2      	; 0x1212 <__stack+0x113>
    1210:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 0;		
}
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16
    121a:	ff 90       	pop	r15
    121c:	ef 90       	pop	r14
    121e:	df 90       	pop	r13
    1220:	cf 90       	pop	r12
    1222:	bf 90       	pop	r11
    1224:	af 90       	pop	r10
    1226:	9f 90       	pop	r9
    1228:	8f 90       	pop	r8
    122a:	7f 90       	pop	r7
    122c:	5f 90       	pop	r5
    122e:	4f 90       	pop	r4
    1230:	3f 90       	pop	r3
    1232:	2f 90       	pop	r2
    1234:	08 95       	ret

00001236 <SearchInit>:



BYTE SearchInit()
{	
    1236:	ef 92       	push	r14
    1238:	ff 92       	push	r15
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <SearchInit+0xe>
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
	
#if FAT_DEBUG
	printf_P(PSTR("\r\nSearchInit"));
#endif

	if(FAT32_Enable)
    1248:	80 91 cc 0c 	lds	r24, 0x0CCC
    124c:	88 23       	and	r24, r24
    124e:	59 f0       	breq	.+22     	; 0x1266 <SearchInit+0x30>
		WriteFolderCluster(addr,FirstDirClust);
    1250:	40 91 d5 0c 	lds	r20, 0x0CD5
    1254:	50 91 d6 0c 	lds	r21, 0x0CD6
    1258:	60 91 d7 0c 	lds	r22, 0x0CD7
    125c:	70 91 d8 0c 	lds	r23, 0x0CD8
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	06 c0       	rjmp	.+12     	; 0x1272 <SearchInit+0x3c>
	else 
		WriteFolderCluster(RECORD_ADDR_START,0);
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	0e 94 d3 05 	call	0xba6	; 0xba6 <WriteFolderCluster>
	
	addr += 4;
	
	WriteFolderCluster(addr, 0xffffffff);
    1276:	84 e0       	ldi	r24, 0x04	; 4
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	4f ef       	ldi	r20, 0xFF	; 255
    127c:	5f ef       	ldi	r21, 0xFF	; 255
    127e:	6f ef       	ldi	r22, 0xFF	; 255
    1280:	7f ef       	ldi	r23, 0xFF	; 255
    1282:	0e 94 d3 05 	call	0xba6	; 0xba6 <WriteFolderCluster>
	temp_addr = addr;
    1286:	84 e0       	ldi	r24, 0x04	; 4
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	9a 83       	std	Y+2, r25	; 0x02
    128c:	89 83       	std	Y+1, r24	; 0x01
    128e:	00 e0       	ldi	r16, 0x00	; 0
    1290:	10 e0       	ldi	r17, 0x00	; 0
	{
		cluster = GetFolderCluster(addr);
		if(cluster == 0xffffffff)return 0;
		else
		{
			if(SearchFolder(cluster,&temp_addr))
    1292:	7e 01       	movw	r14, r28
    1294:	08 94       	sec
    1296:	e1 1c       	adc	r14, r1
    1298:	f1 1c       	adc	r15, r1
	WriteFolderCluster(addr, 0xffffffff);
	temp_addr = addr;
	addr = RECORD_ADDR_START;
	while(1)
	{
		cluster = GetFolderCluster(addr);
    129a:	c8 01       	movw	r24, r16
    129c:	0e 94 12 06 	call	0xc24	; 0xc24 <GetFolderCluster>
		if(cluster == 0xffffffff)return 0;
    12a0:	6f 3f       	cpi	r22, 0xFF	; 255
    12a2:	2f ef       	ldi	r18, 0xFF	; 255
    12a4:	72 07       	cpc	r23, r18
    12a6:	2f ef       	ldi	r18, 0xFF	; 255
    12a8:	82 07       	cpc	r24, r18
    12aa:	2f ef       	ldi	r18, 0xFF	; 255
    12ac:	92 07       	cpc	r25, r18
    12ae:	29 f1       	breq	.+74     	; 0x12fa <SearchInit+0xc4>
		else
		{
			if(SearchFolder(cluster,&temp_addr))
    12b0:	a7 01       	movw	r20, r14
    12b2:	0e 94 d7 07 	call	0xfae	; 0xfae <SearchFolder>
				#endif
			}
			#if FAT_DEBUG
				printf_P(PSTR("\r\nSearch one folder, write the end flag if the the value is not the right value"));
			#endif
			if(GetFolderCluster(temp_addr) != 0xffffffff)
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ba:	0e 94 12 06 	call	0xc24	; 0xc24 <GetFolderCluster>
    12be:	6f 5f       	subi	r22, 0xFF	; 255
    12c0:	7f 4f       	sbci	r23, 0xFF	; 255
    12c2:	8f 4f       	sbci	r24, 0xFF	; 255
    12c4:	9f 4f       	sbci	r25, 0xFF	; 255
    12c6:	41 f0       	breq	.+16     	; 0x12d8 <SearchInit+0xa2>
				WriteFolderCluster(temp_addr,0XFFFFFFFF);
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	9a 81       	ldd	r25, Y+2	; 0x02
    12cc:	4f ef       	ldi	r20, 0xFF	; 255
    12ce:	5f ef       	ldi	r21, 0xFF	; 255
    12d0:	6f ef       	ldi	r22, 0xFF	; 255
    12d2:	7f ef       	ldi	r23, 0xFF	; 255
    12d4:	0e 94 d3 05 	call	0xba6	; 0xba6 <WriteFolderCluster>
			if(temp_addr == RECORD_ADDR_END)
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	9a 81       	ldd	r25, Y+2	; 0x02
    12dc:	80 50       	subi	r24, 0x00	; 0
    12de:	92 40       	sbci	r25, 0x02	; 2
    12e0:	49 f4       	brne	.+18     	; 0x12f4 <SearchInit+0xbe>
			{
				#if FAT_DEBUG
					printf_P(PSTR("\r\nWARNING: EEPROM is full, no more space!"));
				#endif
				WriteFolderCluster(temp_addr - 4,0XFFFFFFFF);
    12e2:	8c ef       	ldi	r24, 0xFC	; 252
    12e4:	91 e0       	ldi	r25, 0x01	; 1
    12e6:	4f ef       	ldi	r20, 0xFF	; 255
    12e8:	5f ef       	ldi	r21, 0xFF	; 255
    12ea:	6f ef       	ldi	r22, 0xFF	; 255
    12ec:	7f ef       	ldi	r23, 0xFF	; 255
    12ee:	0e 94 d3 05 	call	0xba6	; 0xba6 <WriteFolderCluster>
    12f2:	03 c0       	rjmp	.+6      	; 0x12fa <SearchInit+0xc4>
				break;
			}
		}
		addr+=4;
    12f4:	0c 5f       	subi	r16, 0xFC	; 252
    12f6:	1f 4f       	sbci	r17, 0xFF	; 255
    12f8:	d0 cf       	rjmp	.-96     	; 0x129a <SearchInit+0x64>
	}
	#if FAT_DEBUG
		printf_P(PSTR("\r\nSearch Completed!"));
	#endif
}
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	ff 90       	pop	r15
    130a:	ef 90       	pop	r14
    130c:	08 95       	ret

0000130e <SD_SizeDisplay>:

struct FileInfoStruct FileInfo;//temporarily buffer for file information

//读取SD卡容量并处理显示函数
void SD_SizeDisplay(DWORD Capacity)
{
    130e:	cf 92       	push	r12
    1310:	df 92       	push	r13
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	7b 01       	movw	r14, r22
    131c:	8c 01       	movw	r16, r24
	static	unsigned int SizeQ,SizeB,SizeS,SizeG;
	DWORD Size;
    DisplayString("SD Size:",0,8,0xf800);  //显示SD卡容量
    131e:	84 e8       	ldi	r24, 0x84	; 132
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	48 e0       	ldi	r20, 0x08	; 8
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	38 ef       	ldi	r19, 0xF8	; 248
    132e:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DisplayString>
	Size=Capacity/1024/1024;
    1332:	a4 e1       	ldi	r26, 0x14	; 20
    1334:	16 95       	lsr	r17
    1336:	07 95       	ror	r16
    1338:	f7 94       	ror	r15
    133a:	e7 94       	ror	r14
    133c:	aa 95       	dec	r26
    133e:	d1 f7       	brne	.-12     	; 0x1334 <SD_SizeDisplay+0x26>
	SizeQ=Size/1000;
    1340:	c8 01       	movw	r24, r16
    1342:	b7 01       	movw	r22, r14
    1344:	28 ee       	ldi	r18, 0xE8	; 232
    1346:	33 e0       	ldi	r19, 0x03	; 3
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	0e 94 51 12 	call	0x24a2	; 0x24a2 <__udivmodsi4>
    1350:	69 01       	movw	r12, r18
    1352:	30 93 a7 0c 	sts	0x0CA7, r19
    1356:	20 93 a6 0c 	sts	0x0CA6, r18
	SizeB=(Size%1000)/100;
    135a:	c8 01       	movw	r24, r16
    135c:	b7 01       	movw	r22, r14
    135e:	28 ee       	ldi	r18, 0xE8	; 232
    1360:	33 e0       	ldi	r19, 0x03	; 3
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	0e 94 51 12 	call	0x24a2	; 0x24a2 <__udivmodsi4>
    136a:	16 2f       	mov	r17, r22
    136c:	07 2f       	mov	r16, r23
    136e:	f8 2e       	mov	r15, r24
    1370:	e9 2e       	mov	r14, r25
    1372:	24 e6       	ldi	r18, 0x64	; 100
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	0e 94 51 12 	call	0x24a2	; 0x24a2 <__udivmodsi4>
    137e:	30 93 a5 0c 	sts	0x0CA5, r19
    1382:	20 93 a4 0c 	sts	0x0CA4, r18
	SizeS=(Size%1000)%100/10;
    1386:	61 2f       	mov	r22, r17
    1388:	70 2f       	mov	r23, r16
    138a:	8f 2d       	mov	r24, r15
    138c:	9e 2d       	mov	r25, r14
    138e:	24 e6       	ldi	r18, 0x64	; 100
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	0e 94 51 12 	call	0x24a2	; 0x24a2 <__udivmodsi4>
    139a:	16 2f       	mov	r17, r22
    139c:	07 2f       	mov	r16, r23
    139e:	f8 2e       	mov	r15, r24
    13a0:	e9 2e       	mov	r14, r25
    13a2:	2a e0       	ldi	r18, 0x0A	; 10
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e0       	ldi	r20, 0x00	; 0
    13a8:	50 e0       	ldi	r21, 0x00	; 0
    13aa:	0e 94 51 12 	call	0x24a2	; 0x24a2 <__udivmodsi4>
    13ae:	30 93 a3 0c 	sts	0x0CA3, r19
    13b2:	20 93 a2 0c 	sts	0x0CA2, r18
	SizeG=(Size%1000)%100%10;
    13b6:	61 2f       	mov	r22, r17
    13b8:	70 2f       	mov	r23, r16
    13ba:	8f 2d       	mov	r24, r15
    13bc:	9e 2d       	mov	r25, r14
    13be:	2a e0       	ldi	r18, 0x0A	; 10
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e0       	ldi	r20, 0x00	; 0
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	0e 94 51 12 	call	0x24a2	; 0x24a2 <__udivmodsi4>
    13ca:	70 93 a1 0c 	sts	0x0CA1, r23
    13ce:	60 93 a0 0c 	sts	0x0CA0, r22
    DisplayChar(SizeQ+'0',8,8,0x0eee);
    13d2:	c6 01       	movw	r24, r12
    13d4:	c0 96       	adiw	r24, 0x30	; 48
    13d6:	68 e0       	ldi	r22, 0x08	; 8
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	48 e0       	ldi	r20, 0x08	; 8
    13dc:	50 e0       	ldi	r21, 0x00	; 0
    13de:	2e ee       	ldi	r18, 0xEE	; 238
    13e0:	3e e0       	ldi	r19, 0x0E	; 14
    13e2:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <DisplayChar>
	DisplayChar(SizeB+'0',9,8,0x0eee);
    13e6:	80 91 a4 0c 	lds	r24, 0x0CA4
    13ea:	90 91 a5 0c 	lds	r25, 0x0CA5
    13ee:	c0 96       	adiw	r24, 0x30	; 48
    13f0:	69 e0       	ldi	r22, 0x09	; 9
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	48 e0       	ldi	r20, 0x08	; 8
    13f6:	50 e0       	ldi	r21, 0x00	; 0
    13f8:	2e ee       	ldi	r18, 0xEE	; 238
    13fa:	3e e0       	ldi	r19, 0x0E	; 14
    13fc:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <DisplayChar>
	DisplayChar(SizeS+'0',10,8,0x0eee);
    1400:	80 91 a2 0c 	lds	r24, 0x0CA2
    1404:	90 91 a3 0c 	lds	r25, 0x0CA3
    1408:	c0 96       	adiw	r24, 0x30	; 48
    140a:	6a e0       	ldi	r22, 0x0A	; 10
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	48 e0       	ldi	r20, 0x08	; 8
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	2e ee       	ldi	r18, 0xEE	; 238
    1414:	3e e0       	ldi	r19, 0x0E	; 14
    1416:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <DisplayChar>
	DisplayChar(SizeG+'0',11,8,0x0eee);
    141a:	80 91 a0 0c 	lds	r24, 0x0CA0
    141e:	90 91 a1 0c 	lds	r25, 0x0CA1
    1422:	c0 96       	adiw	r24, 0x30	; 48
    1424:	6b e0       	ldi	r22, 0x0B	; 11
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	48 e0       	ldi	r20, 0x08	; 8
    142a:	50 e0       	ldi	r21, 0x00	; 0
    142c:	2e ee       	ldi	r18, 0xEE	; 238
    142e:	3e e0       	ldi	r19, 0x0E	; 14
    1430:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <DisplayChar>
	DisplayString("MB",13,8,0xf800);  		//显示SD卡容量
    1434:	8d e8       	ldi	r24, 0x8D	; 141
    1436:	91 e0       	ldi	r25, 0x01	; 1
    1438:	6d e0       	ldi	r22, 0x0D	; 13
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	48 e0       	ldi	r20, 0x08	; 8
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	38 ef       	ldi	r19, 0xF8	; 248
    1444:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DisplayString>
	DisplayString("BMP Num:",0,9,0xf800);  	//BMP图片数量，最大显示99张，可以更改算法
    1448:	80 e9       	ldi	r24, 0x90	; 144
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	49 e0       	ldi	r20, 0x09	; 9
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	38 ef       	ldi	r19, 0xF8	; 248
    1458:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DisplayString>
	DisplayString("Finding.",8,9,0xffff);  	//BMP图片数量，最大显示99张，可以更改算法
    145c:	89 e9       	ldi	r24, 0x99	; 153
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	68 e0       	ldi	r22, 0x08	; 8
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	49 e0       	ldi	r20, 0x09	; 9
    1466:	50 e0       	ldi	r21, 0x00	; 0
    1468:	2f ef       	ldi	r18, 0xFF	; 255
    146a:	3f ef       	ldi	r19, 0xFF	; 255
    146c:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DisplayString>
}
    1470:	1f 91       	pop	r17
    1472:	0f 91       	pop	r16
    1474:	ff 90       	pop	r15
    1476:	ef 90       	pop	r14
    1478:	df 90       	pop	r13
    147a:	cf 90       	pop	r12
    147c:	08 95       	ret

0000147e <FAT_Init>:

//FAT初始化，不含SD的初始化，用之前应先调用sd的初始化
unsigned char FAT_Init()//Initialize of FAT  need initialize SD first
{
    147e:	8f 92       	push	r8
    1480:	9f 92       	push	r9
    1482:	af 92       	push	r10
    1484:	bf 92       	push	r11
    1486:	cf 92       	push	r12
    1488:	df 92       	push	r13
    148a:	ef 92       	push	r14
    148c:	ff 92       	push	r15
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	c0 50       	subi	r28, 0x00	; 0
    149c:	d2 40       	sbci	r29, 0x02	; 2
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
	BYTE buffer[512];
	DWORD hidsec=0;
	DWORD Capacity,CapacityDisp;


	Capacity = MMC_SD_ReadCapacity();
    14a8:	0e 94 40 03 	call	0x680	; 0x680 <MMC_SD_ReadCapacity>
    14ac:	7b 01       	movw	r14, r22
    14ae:	8c 01       	movw	r16, r24
	SD_SizeDisplay(Capacity);
    14b0:	0e 94 87 09 	call	0x130e	; 0x130e <SD_SizeDisplay>

	if(Capacity<0xff)return 1;
    14b4:	8f ef       	ldi	r24, 0xFF	; 255
    14b6:	e8 16       	cp	r14, r24
    14b8:	f1 04       	cpc	r15, r1
    14ba:	01 05       	cpc	r16, r1
    14bc:	11 05       	cpc	r17, r1
    14be:	08 f4       	brcc	.+2      	; 0x14c2 <FAT_Init+0x44>
    14c0:	d5 c0       	rjmp	.+426    	; 0x166c <FAT_Init+0x1ee>


	if(FAT_ReadSector(0,buffer))return 1;
    14c2:	e0 91 a2 01 	lds	r30, 0x01A2
    14c6:	f0 91 a3 01 	lds	r31, 0x01A3
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	4e 01       	movw	r8, r28
    14d4:	08 94       	sec
    14d6:	81 1c       	adc	r8, r1
    14d8:	91 1c       	adc	r9, r1
    14da:	a4 01       	movw	r20, r8
    14dc:	09 95       	icall
    14de:	88 23       	and	r24, r24
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <FAT_Init+0x66>
    14e2:	c4 c0       	rjmp	.+392    	; 0x166c <FAT_Init+0x1ee>
	bs = (struct bootsector710 *)buffer;		
	pr = (struct partrecord *)((struct partsector *)buffer)->psPart;//first partition
	hidsec = pr->prStartLBA;//the hidden sectors
    14e4:	fe 01       	movw	r30, r28
    14e6:	e1 54       	subi	r30, 0x41	; 65
    14e8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ea:	a0 84       	ldd	r10, Z+8	; 0x08
    14ec:	b1 84       	ldd	r11, Z+9	; 0x09
    14ee:	c2 84       	ldd	r12, Z+10	; 0x0a
    14f0:	d3 84       	ldd	r13, Z+11	; 0x0b
	if(hidsec >= Capacity/512)
    14f2:	89 e0       	ldi	r24, 0x09	; 9
    14f4:	16 95       	lsr	r17
    14f6:	07 95       	ror	r16
    14f8:	f7 94       	ror	r15
    14fa:	e7 94       	ror	r14
    14fc:	8a 95       	dec	r24
    14fe:	d1 f7       	brne	.-12     	; 0x14f4 <FAT_Init+0x76>
    1500:	ae 14       	cp	r10, r14
    1502:	bf 04       	cpc	r11, r15
    1504:	c0 06       	cpc	r12, r16
    1506:	d1 06       	cpc	r13, r17
    1508:	f0 f4       	brcc	.+60     	; 0x1546 <FAT_Init+0xc8>
	{
		hidsec = 0;
	}
	else 
	{
		if(FAT_ReadSector(pr->prStartLBA,buffer))return 1;//read the bpb sector
    150a:	e0 91 a2 01 	lds	r30, 0x01A2
    150e:	f0 91 a3 01 	lds	r31, 0x01A3
    1512:	c6 01       	movw	r24, r12
    1514:	b5 01       	movw	r22, r10
    1516:	a4 01       	movw	r20, r8
    1518:	09 95       	icall
    151a:	88 23       	and	r24, r24
    151c:	09 f0       	breq	.+2      	; 0x1520 <FAT_Init+0xa2>
    151e:	a6 c0       	rjmp	.+332    	; 0x166c <FAT_Init+0x1ee>
		bs = (struct bootsector710 *)buffer;
		if(bs->bsJump[0]!=0xE9 && bs->bsJump[0]!=0xEB)
    1520:	d4 01       	movw	r26, r8
    1522:	8c 91       	ld	r24, X
    1524:	89 3e       	cpi	r24, 0xE9	; 233
    1526:	91 f0       	breq	.+36     	; 0x154c <FAT_Init+0xce>
    1528:	8b 3e       	cpi	r24, 0xEB	; 235
    152a:	81 f0       	breq	.+32     	; 0x154c <FAT_Init+0xce>
		{
			hidsec = 0;
			if(FAT_ReadSector(0,buffer))return 1;//read the bpb sector
    152c:	e0 91 a2 01 	lds	r30, 0x01A2
    1530:	f0 91 a3 01 	lds	r31, 0x01A3
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	a4 01       	movw	r20, r8
    153e:	09 95       	icall
    1540:	88 23       	and	r24, r24
    1542:	09 f0       	breq	.+2      	; 0x1546 <FAT_Init+0xc8>
    1544:	93 c0       	rjmp	.+294    	; 0x166c <FAT_Init+0x1ee>
    1546:	aa 24       	eor	r10, r10
    1548:	bb 24       	eor	r11, r11
    154a:	65 01       	movw	r12, r10
			bs = (struct bootsector710 *)buffer;	
		}
	}

	if(bs->bsJump[0]!=0xE9 && bs->bsJump[0]!=0xEB)//对付没有bootsect的sd卡	//dead with the card which has no bootsect
    154c:	f4 01       	movw	r30, r8
    154e:	80 81       	ld	r24, Z
    1550:	89 3e       	cpi	r24, 0xE9	; 233
    1552:	19 f0       	breq	.+6      	; 0x155a <FAT_Init+0xdc>
    1554:	8b 3e       	cpi	r24, 0xEB	; 235
    1556:	09 f0       	breq	.+2      	; 0x155a <FAT_Init+0xdc>
    1558:	89 c0       	rjmp	.+274    	; 0x166c <FAT_Init+0x1ee>
		return 1;
	}
	
	
	
	bpb = (struct bpb710 *)bs->bsBPB;
    155a:	f4 01       	movw	r30, r8
    155c:	3b 96       	adiw	r30, 0x0b	; 11

	
	if(bpb->bpbFATsecs)						//判断文件系统类型，不支持FAT12,支持FAT16和FAT32
    155e:	83 85       	ldd	r24, Z+11	; 0x0b
    1560:	94 85       	ldd	r25, Z+12	; 0x0c
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	59 f0       	breq	.+22     	; 0x157c <FAT_Init+0xfe>
	{
		FAT32_Enable=0;						//FAT16
    1566:	10 92 cc 0c 	sts	0x0CCC, r1
		FATsectors		= bpb->bpbFATsecs;	//FAT占用的扇区数	
    156a:	90 93 ce 0c 	sts	0x0CCE, r25
    156e:	80 93 cd 0c 	sts	0x0CCD, r24
		FirstDirClust = 2;
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	a0 e0       	ldi	r26, 0x00	; 0
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	0d c0       	rjmp	.+26     	; 0x1596 <FAT_Init+0x118>
	}
	else
	{
		FAT32_Enable=1;						 //FAT32
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	80 93 cc 0c 	sts	0x0CCC, r24
		FATsectors		= bpb->bpbBigFATsecs;//FAT占用的扇区数	//the sectors number occupied by one fat talbe
    1582:	81 8d       	ldd	r24, Z+25	; 0x19
    1584:	92 8d       	ldd	r25, Z+26	; 0x1a
    1586:	90 93 ce 0c 	sts	0x0CCE, r25
    158a:	80 93 cd 0c 	sts	0x0CCD, r24
		FirstDirClust = bpb->bpbRootClust;
    158e:	81 a1       	ldd	r24, Z+33	; 0x21
    1590:	92 a1       	ldd	r25, Z+34	; 0x22
    1592:	a3 a1       	ldd	r26, Z+35	; 0x23
    1594:	b4 a1       	ldd	r27, Z+36	; 0x24
    1596:	80 93 d5 0c 	sts	0x0CD5, r24
    159a:	90 93 d6 0c 	sts	0x0CD6, r25
    159e:	a0 93 d7 0c 	sts	0x0CD7, r26
    15a2:	b0 93 d8 0c 	sts	0x0CD8, r27
	}

	BytesPerSector	= bpb->bpbBytesPerSec;	//每扇区字节数
    15a6:	d4 01       	movw	r26, r8
    15a8:	1b 96       	adiw	r26, 0x0b	; 11
    15aa:	8d 91       	ld	r24, X+
    15ac:	9c 91       	ld	r25, X
    15ae:	1c 97       	sbiw	r26, 0x0c	; 12
    15b0:	90 93 d4 0c 	sts	0x0CD4, r25
    15b4:	80 93 d3 0c 	sts	0x0CD3, r24
	
	SectorsPerClust	= (BYTE)bpb->bpbSecPerClust;//每簇扇区数
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	80 93 b3 0c 	sts	0x0CB3, r24
    15be:	10 92 b4 0c 	sts	0x0CB4, r1
	
	FirstFATSector	= bpb->bpbResSectors+hidsec;//第一个FAT表扇区
    15c2:	e3 80       	ldd	r14, Z+3	; 0x03
    15c4:	f4 80       	ldd	r15, Z+4	; 0x04
    15c6:	00 e0       	ldi	r16, 0x00	; 0
    15c8:	10 e0       	ldi	r17, 0x00	; 0
    15ca:	ea 0c       	add	r14, r10
    15cc:	fb 1c       	adc	r15, r11
    15ce:	0c 1d       	adc	r16, r12
    15d0:	1d 1d       	adc	r17, r13
    15d2:	e0 92 b9 0c 	sts	0x0CB9, r14
    15d6:	f0 92 ba 0c 	sts	0x0CBA, r15
    15da:	00 93 bb 0c 	sts	0x0CBB, r16
    15de:	10 93 bc 0c 	sts	0x0CBC, r17
	RootDirCount	= bpb->bpbRootDirEnts;//根目录项数
    15e2:	26 81       	ldd	r18, Z+6	; 0x06
    15e4:	37 81       	ldd	r19, Z+7	; 0x07
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	20 93 af 0c 	sts	0x0CAF, r18
    15ee:	30 93 b0 0c 	sts	0x0CB0, r19
    15f2:	40 93 b1 0c 	sts	0x0CB1, r20
    15f6:	50 93 b2 0c 	sts	0x0CB2, r21
	RootDirSectors	= (RootDirCount*32)>>9;//根目录占用的扇区数
    15fa:	b4 e0       	ldi	r27, 0x04	; 4
    15fc:	56 95       	lsr	r21
    15fe:	47 95       	ror	r20
    1600:	37 95       	ror	r19
    1602:	27 95       	ror	r18
    1604:	ba 95       	dec	r27
    1606:	d1 f7       	brne	.-12     	; 0x15fc <FAT_Init+0x17e>
    1608:	20 93 cf 0c 	sts	0x0CCF, r18
    160c:	30 93 d0 0c 	sts	0x0CD0, r19
    1610:	40 93 d1 0c 	sts	0x0CD1, r20
    1614:	50 93 d2 0c 	sts	0x0CD2, r21
	FirstDirSector	= FirstFATSector+bpb->bpbFATs*FATsectors;//第一个目录扇区
    1618:	85 81       	ldd	r24, Z+5	; 0x05
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	60 91 cd 0c 	lds	r22, 0x0CCD
    1620:	70 91 ce 0c 	lds	r23, 0x0CCE
    1624:	fc 01       	movw	r30, r24
    1626:	e6 9f       	mul	r30, r22
    1628:	c0 01       	movw	r24, r0
    162a:	e7 9f       	mul	r30, r23
    162c:	90 0d       	add	r25, r0
    162e:	f6 9f       	mul	r31, r22
    1630:	90 0d       	add	r25, r0
    1632:	11 24       	eor	r1, r1
    1634:	a0 e0       	ldi	r26, 0x00	; 0
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	8e 0d       	add	r24, r14
    163a:	9f 1d       	adc	r25, r15
    163c:	a0 1f       	adc	r26, r16
    163e:	b1 1f       	adc	r27, r17
    1640:	80 93 ab 0c 	sts	0x0CAB, r24
    1644:	90 93 ac 0c 	sts	0x0CAC, r25
    1648:	a0 93 ad 0c 	sts	0x0CAD, r26
    164c:	b0 93 ae 0c 	sts	0x0CAE, r27
	FirstDataSector	= FirstDirSector+RootDirSectors;//第一个数据扇区
    1650:	82 0f       	add	r24, r18
    1652:	93 1f       	adc	r25, r19
    1654:	a4 1f       	adc	r26, r20
    1656:	b5 1f       	adc	r27, r21
    1658:	80 93 b5 0c 	sts	0x0CB5, r24
    165c:	90 93 b6 0c 	sts	0x0CB6, r25
    1660:	a0 93 b7 0c 	sts	0x0CB7, r26
    1664:	b0 93 b8 0c 	sts	0x0CB8, r27
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	01 c0       	rjmp	.+2      	; 0x166e <FAT_Init+0x1f0>
	return 0;
    166c:	81 e0       	ldi	r24, 0x01	; 1
}
    166e:	c0 50       	subi	r28, 0x00	; 0
    1670:	de 4f       	sbci	r29, 0xFE	; 254
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	ff 90       	pop	r15
    1686:	ef 90       	pop	r14
    1688:	df 90       	pop	r13
    168a:	cf 90       	pop	r12
    168c:	bf 90       	pop	r11
    168e:	af 90       	pop	r10
    1690:	9f 90       	pop	r9
    1692:	8f 90       	pop	r8
    1694:	08 95       	ret

00001696 <McuInit>:
//	  IO口初始化
//***********************************************************************

void McuInit()
{
	LCD_Data=0xFF;                     //各相关IO口初始化
    1696:	8f ef       	ldi	r24, 0xFF	; 255
    1698:	8b bb       	out	0x1b, r24	; 27
	DDR_Data=0xFF;
    169a:	8a bb       	out	0x1a, r24	; 26

	PORTF=0xFF;
    169c:	80 93 62 00 	sts	0x0062, r24
	DDRF=0xFF;
    16a0:	80 93 61 00 	sts	0x0061, r24

	PORTG=0x0F;                        
    16a4:	e5 e6       	ldi	r30, 0x65	; 101
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	9f e0       	ldi	r25, 0x0F	; 15
    16aa:	90 83       	st	Z, r25
	DDRG=0x0F;
    16ac:	90 93 64 00 	sts	0x0064, r25

	PORTD=0xFF;
    16b0:	82 bb       	out	0x12, r24	; 18
	DDRD=0xFF;
    16b2:	81 bb       	out	0x11, r24	; 17
  	
	D_LE1;                             //关掉数码管，以免显示乱码，因为共用PA口                   
    16b4:	94 9a       	sbi	0x12, 4	; 18
    W_LE1;                     
    16b6:	95 9a       	sbi	0x12, 5	; 18
    LCD_Data=0xFF;                      //关所有数码管            
    16b8:	8b bb       	out	0x1b, r24	; 27
    W_LE0; 
    16ba:	95 98       	cbi	0x12, 5	; 18

    PORTB=0xFF;
    16bc:	88 bb       	out	0x18, r24	; 24
	DDRB=0xFF;
    16be:	87 bb       	out	0x17, r24	; 23

	LCD_BL0;
    16c0:	80 81       	ld	r24, Z
    16c2:	8b 7f       	andi	r24, 0xFB	; 251
    16c4:	80 83       	st	Z, r24


}
    16c6:	08 95       	ret

000016c8 <LCD_WR_REG>:
//	   写寻址寄存器地址，厂家规定0x22
//***********************************************************************

void LCD_WR_REG(uchar index)           
{
	LCD_RS0;                            //根据控制器datasheet，RS为0时，为写寄存器地址
    16c8:	e2 e6       	ldi	r30, 0x62	; 98
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	90 81       	ld	r25, Z
    16ce:	9d 7f       	andi	r25, 0xFD	; 253
    16d0:	90 83       	st	Z, r25
	LCD_EC0;
    16d2:	90 81       	ld	r25, Z
    16d4:	97 7f       	andi	r25, 0xF7	; 247
    16d6:	90 83       	st	Z, r25
	LCD_Data = 0x00;
    16d8:	1b ba       	out	0x1b, r1	; 27
	LCD_WR0;
    16da:	90 81       	ld	r25, Z
    16dc:	9b 7f       	andi	r25, 0xFB	; 251
    16de:	90 83       	st	Z, r25
	LCD_WR1;
    16e0:	90 81       	ld	r25, Z
    16e2:	94 60       	ori	r25, 0x04	; 4
    16e4:	90 83       	st	Z, r25
	LCD_Data = index;
    16e6:	8b bb       	out	0x1b, r24	; 27
	LCD_WR0;
    16e8:	80 81       	ld	r24, Z
    16ea:	8b 7f       	andi	r24, 0xFB	; 251
    16ec:	80 83       	st	Z, r24
	LCD_WR1;
    16ee:	80 81       	ld	r24, Z
    16f0:	84 60       	ori	r24, 0x04	; 4
    16f2:	80 83       	st	Z, r24
	LCD_EC1;
    16f4:	80 81       	ld	r24, Z
    16f6:	88 60       	ori	r24, 0x08	; 8
    16f8:	80 83       	st	Z, r24
	LCD_RS0;
    16fa:	80 81       	ld	r24, Z
    16fc:	8d 7f       	andi	r24, 0xFD	; 253
    16fe:	80 83       	st	Z, r24
}
    1700:	08 95       	ret

00001702 <LCD_RD_REG16>:

unsigned int LCD_RD_REG16(uchar index)
{
	unsigned int pd;

	LCD_RS0;
    1702:	a2 e6       	ldi	r26, 0x62	; 98
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	9c 91       	ld	r25, X
    1708:	9d 7f       	andi	r25, 0xFD	; 253
    170a:	9c 93       	st	X, r25
	LCD_EC0;
    170c:	9c 91       	ld	r25, X
    170e:	97 7f       	andi	r25, 0xF7	; 247
    1710:	9c 93       	st	X, r25
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1712:	44 e0       	ldi	r20, 0x04	; 4
    1714:	94 2f       	mov	r25, r20
    1716:	9a 95       	dec	r25
    1718:	f1 f7       	brne	.-4      	; 0x1716 <LCD_RD_REG16+0x14>
	
	delay_us(2);
	
	LCD_Data = 0x00;
    171a:	1b ba       	out	0x1b, r1	; 27
    171c:	94 2f       	mov	r25, r20
    171e:	9a 95       	dec	r25
    1720:	f1 f7       	brne	.-4      	; 0x171e <LCD_RD_REG16+0x1c>
	delay_us(2);

	LCD_WR0;
    1722:	9c 91       	ld	r25, X
    1724:	9b 7f       	andi	r25, 0xFB	; 251
    1726:	9c 93       	st	X, r25
    1728:	94 2f       	mov	r25, r20
    172a:	9a 95       	dec	r25
    172c:	f1 f7       	brne	.-4      	; 0x172a <LCD_RD_REG16+0x28>
	delay_us(2);

	LCD_WR1;
    172e:	9c 91       	ld	r25, X
    1730:	94 60       	ori	r25, 0x04	; 4
    1732:	9c 93       	st	X, r25
    1734:	94 2f       	mov	r25, r20
    1736:	9a 95       	dec	r25
    1738:	f1 f7       	brne	.-4      	; 0x1736 <LCD_RD_REG16+0x34>
	delay_us(2);

	LCD_Data = index;
    173a:	8b bb       	out	0x1b, r24	; 27
    173c:	84 2f       	mov	r24, r20
    173e:	8a 95       	dec	r24
    1740:	f1 f7       	brne	.-4      	; 0x173e <LCD_RD_REG16+0x3c>
	delay_us(2);

	LCD_WR0;
    1742:	8c 91       	ld	r24, X
    1744:	8b 7f       	andi	r24, 0xFB	; 251
    1746:	8c 93       	st	X, r24
    1748:	84 2f       	mov	r24, r20
    174a:	8a 95       	dec	r24
    174c:	f1 f7       	brne	.-4      	; 0x174a <LCD_RD_REG16+0x48>
	delay_us(2);

	LCD_WR1;
    174e:	8c 91       	ld	r24, X
    1750:	84 60       	ori	r24, 0x04	; 4
    1752:	8c 93       	st	X, r24
    1754:	84 2f       	mov	r24, r20
    1756:	8a 95       	dec	r24
    1758:	f1 f7       	brne	.-4      	; 0x1756 <LCD_RD_REG16+0x54>
	delay_us(2);

	LCD_RS1;
    175a:	8c 91       	ld	r24, X
    175c:	82 60       	ori	r24, 0x02	; 2
    175e:	8c 93       	st	X, r24
    1760:	84 2f       	mov	r24, r20
    1762:	8a 95       	dec	r24
    1764:	f1 f7       	brne	.-4      	; 0x1762 <LCD_RD_REG16+0x60>
	delay_us(2);

	LCD_Data = 0xFF;
    1766:	9f ef       	ldi	r25, 0xFF	; 255
    1768:	9b bb       	out	0x1b, r25	; 27
    176a:	84 2f       	mov	r24, r20
    176c:	8a 95       	dec	r24
    176e:	f1 f7       	brne	.-4      	; 0x176c <LCD_RD_REG16+0x6a>
	delay_us(2);

	LCD_RD0;
    1770:	e5 e6       	ldi	r30, 0x65	; 101
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	8f 7e       	andi	r24, 0xEF	; 239
    1778:	80 83       	st	Z, r24
    177a:	84 2f       	mov	r24, r20
    177c:	8a 95       	dec	r24
    177e:	f1 f7       	brne	.-4      	; 0x177c <LCD_RD_REG16+0x7a>
	delay_us(2);

    //DDR_IN;  //数据输入
	delay_us(2);

	LCD_RD1;
    1780:	84 2f       	mov	r24, r20
    1782:	8a 95       	dec	r24
    1784:	f1 f7       	brne	.-4      	; 0x1782 <LCD_RD_REG16+0x80>
    1786:	80 81       	ld	r24, Z
    1788:	80 61       	ori	r24, 0x10	; 16
    178a:	80 83       	st	Z, r24
	pd = LCD_Data;
    178c:	2b b3       	in	r18, 0x1b	; 27
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	84 2f       	mov	r24, r20
    1792:	8a 95       	dec	r24
    1794:	f1 f7       	brne	.-4      	; 0x1792 <LCD_RD_REG16+0x90>
	delay_us(2);

	LCD_Data = 0xFF;
    1796:	9b bb       	out	0x1b, r25	; 27
	LCD_RD0;
    1798:	80 81       	ld	r24, Z
    179a:	8f 7e       	andi	r24, 0xEF	; 239
    179c:	80 83       	st	Z, r24
    179e:	4a 95       	dec	r20
    17a0:	f1 f7       	brne	.-4      	; 0x179e <LCD_RD_REG16+0x9c>
	delay_us(2);

	LCD_RD1;
    17a2:	80 81       	ld	r24, Z
    17a4:	80 61       	ori	r24, 0x10	; 16
    17a6:	80 83       	st	Z, r24
	pd = pd + LCD_Data*256;
    17a8:	4b b3       	in	r20, 0x1b	; 27
	LCD_EC1;
    17aa:	8c 91       	ld	r24, X
    17ac:	88 60       	ori	r24, 0x08	; 8
    17ae:	8c 93       	st	X, r24
	LCD_RS0;
    17b0:	8c 91       	ld	r24, X
    17b2:	8d 7f       	andi	r24, 0xFD	; 253
    17b4:	8c 93       	st	X, r24
    17b6:	94 2f       	mov	r25, r20
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	28 0f       	add	r18, r24
    17bc:	39 1f       	adc	r19, r25
	return pd;
}
    17be:	c9 01       	movw	r24, r18
    17c0:	08 95       	ret

000017c2 <LCD_WR_CMD>:
//	   写控制命令，index为寄存器地址，val为控制命令，16位长度
//***********************************************************************

void LCD_WR_CMD(uchar index,uint val)
{
	LCD_RS0;
    17c2:	e2 e6       	ldi	r30, 0x62	; 98
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	90 81       	ld	r25, Z
    17c8:	9d 7f       	andi	r25, 0xFD	; 253
    17ca:	90 83       	st	Z, r25
	LCD_EC0;
    17cc:	90 81       	ld	r25, Z
    17ce:	97 7f       	andi	r25, 0xF7	; 247
    17d0:	90 83       	st	Z, r25
	LCD_Data = 0x00;
    17d2:	1b ba       	out	0x1b, r1	; 27
	LCD_WR0;
    17d4:	90 81       	ld	r25, Z
    17d6:	9b 7f       	andi	r25, 0xFB	; 251
    17d8:	90 83       	st	Z, r25
	LCD_WR1;
    17da:	90 81       	ld	r25, Z
    17dc:	94 60       	ori	r25, 0x04	; 4
    17de:	90 83       	st	Z, r25
	LCD_Data = index;
    17e0:	8b bb       	out	0x1b, r24	; 27
	LCD_WR0;
    17e2:	80 81       	ld	r24, Z
    17e4:	8b 7f       	andi	r24, 0xFB	; 251
    17e6:	80 83       	st	Z, r24
	LCD_WR1;
    17e8:	80 81       	ld	r24, Z
    17ea:	84 60       	ori	r24, 0x04	; 4
    17ec:	80 83       	st	Z, r24
	LCD_EC1;
    17ee:	80 81       	ld	r24, Z
    17f0:	88 60       	ori	r24, 0x08	; 8
    17f2:	80 83       	st	Z, r24
	LCD_RS0;
    17f4:	80 81       	ld	r24, Z
    17f6:	8d 7f       	andi	r24, 0xFD	; 253
    17f8:	80 83       	st	Z, r24

	LCD_RS1;                             //根据控制器datasheet，RS为1时，为写控制命令或者数据到GRAM
    17fa:	80 81       	ld	r24, Z
    17fc:	82 60       	ori	r24, 0x02	; 2
    17fe:	80 83       	st	Z, r24
	LCD_EC0;
    1800:	80 81       	ld	r24, Z
    1802:	87 7f       	andi	r24, 0xF7	; 247
    1804:	80 83       	st	Z, r24
	LCD_Data = (uchar)(val>>8);
    1806:	7b bb       	out	0x1b, r23	; 27
	LCD_WR0;
    1808:	80 81       	ld	r24, Z
    180a:	8b 7f       	andi	r24, 0xFB	; 251
    180c:	80 83       	st	Z, r24
	LCD_WR1;
    180e:	80 81       	ld	r24, Z
    1810:	84 60       	ori	r24, 0x04	; 4
    1812:	80 83       	st	Z, r24
	LCD_EC1;
    1814:	80 81       	ld	r24, Z
    1816:	88 60       	ori	r24, 0x08	; 8
    1818:	80 83       	st	Z, r24
	LCD_RS0;
    181a:	80 81       	ld	r24, Z
    181c:	8d 7f       	andi	r24, 0xFD	; 253
    181e:	80 83       	st	Z, r24
	LCD_RS1;
    1820:	80 81       	ld	r24, Z
    1822:	82 60       	ori	r24, 0x02	; 2
    1824:	80 83       	st	Z, r24
	LCD_EC0;
    1826:	80 81       	ld	r24, Z
    1828:	87 7f       	andi	r24, 0xF7	; 247
    182a:	80 83       	st	Z, r24
	LCD_Data = (uchar)val;
    182c:	6b bb       	out	0x1b, r22	; 27
	LCD_WR0;
    182e:	80 81       	ld	r24, Z
    1830:	8b 7f       	andi	r24, 0xFB	; 251
    1832:	80 83       	st	Z, r24
	LCD_WR1;
    1834:	80 81       	ld	r24, Z
    1836:	84 60       	ori	r24, 0x04	; 4
    1838:	80 83       	st	Z, r24
	LCD_EC1;
    183a:	80 81       	ld	r24, Z
    183c:	88 60       	ori	r24, 0x08	; 8
    183e:	80 83       	st	Z, r24
	LCD_RS0;
    1840:	80 81       	ld	r24, Z
    1842:	8d 7f       	andi	r24, 0xFD	; 253
    1844:	80 83       	st	Z, r24
}
    1846:	08 95       	ret

00001848 <LCD_WR_Data>:

void LCD_WR_Data(uint val)
{


	LCD_Data = (uchar)(val>>8);
    1848:	9b bb       	out	0x1b, r25	; 27
	LCD_WR0;
    184a:	e2 e6       	ldi	r30, 0x62	; 98
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	90 81       	ld	r25, Z
    1850:	9b 7f       	andi	r25, 0xFB	; 251
    1852:	90 83       	st	Z, r25
	LCD_WR1;
    1854:	90 81       	ld	r25, Z
    1856:	94 60       	ori	r25, 0x04	; 4
    1858:	90 83       	st	Z, r25
	//LCD_RS1;
	LCD_Data = (uchar)val;
    185a:	8b bb       	out	0x1b, r24	; 27
	LCD_WR0;
    185c:	80 81       	ld	r24, Z
    185e:	8b 7f       	andi	r24, 0xFB	; 251
    1860:	80 83       	st	Z, r24
	LCD_WR1;
    1862:	80 81       	ld	r24, Z
    1864:	84 60       	ori	r24, 0x04	; 4
    1866:	80 83       	st	Z, r24

}
    1868:	08 95       	ret

0000186a <LCD_WR_DataP>:
//	   向GRAM存储器写数据，用来显示，定义为8位指针调用
//***********************************************************************
void LCD_WR_DataP(uint val)
{

	LCD_Data = (uchar)val;
    186a:	8b bb       	out	0x1b, r24	; 27
	LCD_WR0;
    186c:	e2 e6       	ldi	r30, 0x62	; 98
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	8b 7f       	andi	r24, 0xFB	; 251
    1874:	80 83       	st	Z, r24
	LCD_WR1;
    1876:	80 81       	ld	r24, Z
    1878:	84 60       	ori	r24, 0x04	; 4
    187a:	80 83       	st	Z, r24
}
    187c:	08 95       	ret

0000187e <LCD_Init>:


void LCD_Init()
{
    187e:	0f 93       	push	r16
    1880:	1f 93       	push	r17
	LCD_RST0;                      //复位有效，至少2ms
    1882:	97 98       	cbi	0x12, 7	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1884:	00 e0       	ldi	r16, 0x00	; 0
    1886:	18 e4       	ldi	r17, 0x48	; 72
    1888:	c8 01       	movw	r24, r16
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <LCD_Init+0xc>
	delay_ms(10);
	LCD_RST1;                      //复位结束
    188e:	97 9a       	sbi	0x12, 7	; 18
    1890:	c8 01       	movw	r24, r16
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <LCD_Init+0x14>
	delay_ms(10);

    LCD_WR_CMD(0x00,0x0001);		//启动晶振，必须有至少10ms的延时，保证稳定
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	61 e0       	ldi	r22, 0x01	; 1
    189a:	70 e0       	ldi	r23, 0x00	; 0
    189c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    18a0:	c8 01       	movw	r24, r16
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <LCD_Init+0x24>
    delay_ms(10);
    LCD_WR_CMD(0x03,0x0030);        //设置数据扫描方向，由左至右，水平扫描
    18a6:	83 e0       	ldi	r24, 0x03	; 3
    18a8:	60 e3       	ldi	r22, 0x30	; 48
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    //LCD_WR_CMD(0x03,0x0230);      //HWM=1为高速数据模式
    LCD_WR_CMD(0x01,0x011D);
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	6d e1       	ldi	r22, 0x1D	; 29
    18b4:	71 e0       	ldi	r23, 0x01	; 1
    18b6:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    //delay_us(1000);
    LCD_WR_CMD(0x0a,0x0106); 
    18ba:	8a e0       	ldi	r24, 0x0A	; 10
    18bc:	66 e0       	ldi	r22, 0x06	; 6
    18be:	71 e0       	ldi	r23, 0x01	; 1
    18c0:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    //delay_us(1000);
    LCD_WR_CMD(0x07,0x0037);        //非8位模式,开显示
    18c4:	87 e0       	ldi	r24, 0x07	; 7
    18c6:	67 e3       	ldi	r22, 0x37	; 55
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>

    LCD_WR_CMD(0x08,0x0707);        //光栅周期数为7，若为0，则无显示，是为了保证足够的时间让光栅回到行左边
    18ce:	88 e0       	ldi	r24, 0x08	; 8
    18d0:	67 e0       	ldi	r22, 0x07	; 7
    18d2:	77 e0       	ldi	r23, 0x07	; 7
    18d4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    LCD_WR_CMD(0x0c,0x01);
    18d8:	8c e0       	ldi	r24, 0x0C	; 12
    18da:	61 e0       	ldi	r22, 0x01	; 1
    18dc:	70 e0       	ldi	r23, 0x00	; 0
    18de:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    LCD_WR_CMD(0x02,0x0400);        //驱动波形控制指令
    18e2:	82 e0       	ldi	r24, 0x02	; 2
    18e4:	60 e0       	ldi	r22, 0x00	; 0
    18e6:	74 e0       	ldi	r23, 0x04	; 4
    18e8:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    //delay_us(1000);
    LCD_WR_CMD(0x0a,0x0107);        //门驱动和电源控制IC指令，后面要紧跟需要的指令
    18ec:	8a e0       	ldi	r24, 0x0A	; 10
    18ee:	67 e0       	ldi	r22, 0x07	; 7
    18f0:	71 e0       	ldi	r23, 0x01	; 1
    18f2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
 //   delay_us(1000);

    LCD_WR_CMD(0x12,0x0001);        //VciOUT = 3V × 0.83 = 2.49V
    18f6:	82 e1       	ldi	r24, 0x12	; 18
    18f8:	61 e0       	ldi	r22, 0x01	; 1
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    // only 100(=VCI), 000(.92 VCI),001(.83),010(.73VCI) is valid. other is inhibited
  //  delay_us(1000);
    LCD_WR_CMD(0x0a,0x0101); 
    1900:	8a e0       	ldi	r24, 0x0A	; 10
    1902:	61 e0       	ldi	r22, 0x01	; 1
    1904:	71 e0       	ldi	r23, 0x01	; 1
    1906:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
   // delay_us(1000);
   
   // LCD_WR_CMD(0x13,0x404);
   // delay_us(1);LCD_WR_CMD(0x0a,0x0101); delay_us(1);

    LCD_WR_CMD(0x11,0x0505);   //CAD=0
    190a:	81 e1       	ldi	r24, 0x11	; 17
    190c:	65 e0       	ldi	r22, 0x05	; 5
    190e:	75 e0       	ldi	r23, 0x05	; 5
    1910:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
   // delay_us(1);LCD_WR_CMD(0x0a,0x0101); delay_us(1);



    LCD_WR_CMD(0x14,0x2c0f); // last 4 bit must be 1!!! vcomg = 1, 
    1914:	84 e1       	ldi	r24, 0x14	; 20
    1916:	6f e0       	ldi	r22, 0x0F	; 15
    1918:	7c e2       	ldi	r23, 0x2C	; 44
    191a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    191e:	12 e0       	ldi	r17, 0x02	; 2
    1920:	81 2f       	mov	r24, r17
    1922:	8a 95       	dec	r24
    1924:	f1 f7       	brne	.-4      	; 0x1922 <LCD_Init+0xa4>
    // VDV4-0 == 09-0e,10-12 // other is inhibited.!!! 
    delay_us(1);
    LCD_WR_CMD(0x0a,0x0102); 
    1926:	8a e0       	ldi	r24, 0x0A	; 10
    1928:	62 e0       	ldi	r22, 0x02	; 2
    192a:	71 e0       	ldi	r23, 0x01	; 1
    192c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
   // delay_us(1);

    LCD_WR_CMD(0x10,0x1a10);// if Vci > 3.0V, use 0x1a10.
    1930:	80 e1       	ldi	r24, 0x10	; 16
    1932:	60 e1       	ldi	r22, 0x10	; 16
    1934:	7a e1       	ldi	r23, 0x1A	; 26
    1936:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    193a:	81 2f       	mov	r24, r17
    193c:	8a 95       	dec	r24
    193e:	f1 f7       	brne	.-4      	; 0x193c <LCD_Init+0xbe>
    delay_us(1);
    LCD_WR_CMD(0x0a,0x0100); 
    1940:	8a e0       	ldi	r24, 0x0A	; 10
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	71 e0       	ldi	r23, 0x01	; 1
    1946:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
  //  delay_us(1);

    LCD_WR_CMD(0x13,0x0616); //////////!!!!!!!!!!!!! VERY IMPORTANT!!!
    194a:	83 e1       	ldi	r24, 0x13	; 19
    194c:	66 e1       	ldi	r22, 0x16	; 22
    194e:	76 e0       	ldi	r23, 0x06	; 6
    1950:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    1954:	81 2f       	mov	r24, r17
    1956:	8a 95       	dec	r24
    1958:	f1 f7       	brne	.-4      	; 0x1956 <LCD_Init+0xd8>
    //set VRH3-0 to fit REG1out= 3 to DDVDH-0.5
    delay_us(1);
    LCD_WR_CMD(0x0a,0x0101); 
    195a:	8a e0       	ldi	r24, 0x0A	; 10
    195c:	61 e0       	ldi	r22, 0x01	; 1
    195e:	71 e0       	ldi	r23, 0x01	; 1
    1960:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
  //  delay_ms(1);

    LCD_WR_CMD(0x30,0x0003);
    1964:	80 e3       	ldi	r24, 0x30	; 48
    1966:	63 e0       	ldi	r22, 0x03	; 3
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    LCD_WR_CMD(0x31,0x0404);
    196e:	81 e3       	ldi	r24, 0x31	; 49
    1970:	64 e0       	ldi	r22, 0x04	; 4
    1972:	74 e0       	ldi	r23, 0x04	; 4
    1974:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    LCD_WR_CMD(0x32,0x0303);
    1978:	82 e3       	ldi	r24, 0x32	; 50
    197a:	63 e0       	ldi	r22, 0x03	; 3
    197c:	73 e0       	ldi	r23, 0x03	; 3
    197e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    LCD_WR_CMD(0x33,0x0406);
    1982:	83 e3       	ldi	r24, 0x33	; 51
    1984:	66 e0       	ldi	r22, 0x06	; 6
    1986:	74 e0       	ldi	r23, 0x04	; 4
    1988:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    LCD_WR_CMD(0x34,0x0404);
    198c:	84 e3       	ldi	r24, 0x34	; 52
    198e:	64 e0       	ldi	r22, 0x04	; 4
    1990:	74 e0       	ldi	r23, 0x04	; 4
    1992:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    LCD_WR_CMD(0x35,0x0303);
    1996:	85 e3       	ldi	r24, 0x35	; 53
    1998:	63 e0       	ldi	r22, 0x03	; 3
    199a:	73 e0       	ldi	r23, 0x03	; 3
    199c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    LCD_WR_CMD(0x36,0x0407);
    19a0:	86 e3       	ldi	r24, 0x36	; 54
    19a2:	67 e0       	ldi	r22, 0x07	; 7
    19a4:	74 e0       	ldi	r23, 0x04	; 4
    19a6:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    LCD_WR_CMD(0x37,0x0604);
    19aa:	87 e3       	ldi	r24, 0x37	; 55
    19ac:	64 e0       	ldi	r22, 0x04	; 4
    19ae:	76 e0       	ldi	r23, 0x06	; 6
    19b0:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    19b4:	81 2f       	mov	r24, r17
    19b6:	8a 95       	dec	r24
    19b8:	f1 f7       	brne	.-4      	; 0x19b6 <LCD_Init+0x138>
    delay_us(1);
  //  LCD_WR_CMD(0x0a,0x0100);
   // delay_ms(1); 
    
    //*********** SAP, AP set****************	
    LCD_WR_CMD(0x10,0x1a10);//BT2-0 Ok,and...
    19ba:	80 e1       	ldi	r24, 0x10	; 16
    19bc:	60 e1       	ldi	r22, 0x10	; 16
    19be:	7a e1       	ldi	r23, 0x1A	; 26
    19c0:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    19c4:	1a 95       	dec	r17
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <LCD_Init+0x146>
    delay_us(1);
    LCD_WR_CMD(0x0a,0x0100); 
    19c8:	8a e0       	ldi	r24, 0x0A	; 10
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	71 e0       	ldi	r23, 0x01	; 1
    19ce:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
  //  delay_us(100);	
	//*********** PON  set********************
	LCD_WR_CMD(0x13,0x0616); //////////
    19d2:	83 e1       	ldi	r24, 0x13	; 19
    19d4:	66 e1       	ldi	r22, 0x16	; 22
    19d6:	76 e0       	ldi	r23, 0x06	; 6
    19d8:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
    19dc:	85 ef       	ldi	r24, 0xF5	; 245
    19de:	8a 95       	dec	r24
    19e0:	f1 f7       	brne	.-4      	; 0x19de <LCD_Init+0x160>
   // LCD_WR_CMD(0x07,0x0037);
 //   delay_us(1);
  // LCD_WR_CMD(0x0a,0x0100); 
    delay_us(100); 
     
}
    19e2:	1f 91       	pop	r17
    19e4:	0f 91       	pop	r16
    19e6:	08 95       	ret

000019e8 <LCD_clear>:
//	   清屏子程序
//***********************************************************************


void LCD_clear(uint p)
{
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	8c 01       	movw	r16, r24
	uint num;
	
	LCD_WR_CMD(0x44,127*256+0);
    19ee:	84 e4       	ldi	r24, 0x44	; 68
    19f0:	60 e0       	ldi	r22, 0x00	; 0
    19f2:	7f e7       	ldi	r23, 0x7F	; 127
    19f4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
	LCD_WR_CMD(0x45,239*256+80);
    19f8:	85 e4       	ldi	r24, 0x45	; 69
    19fa:	60 e5       	ldi	r22, 0x50	; 80
    19fc:	7f ee       	ldi	r23, 0xEF	; 239
    19fe:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
	LCD_WR_CMD(0x21,80*256+0);	
    1a02:	81 e2       	ldi	r24, 0x21	; 33
    1a04:	60 e0       	ldi	r22, 0x00	; 0
    1a06:	70 e5       	ldi	r23, 0x50	; 80
    1a08:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
	LCD_WR_REG(0x22);
    1a0c:	82 e2       	ldi	r24, 0x22	; 34
    1a0e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LCD_WR_REG>
	LCD_EC0;
    1a12:	80 91 62 00 	lds	r24, 0x0062
    1a16:	87 7f       	andi	r24, 0xF7	; 247
    1a18:	80 93 62 00 	sts	0x0062, r24
	LCD_RS1;
    1a1c:	80 91 62 00 	lds	r24, 0x0062
    1a20:	82 60       	ori	r24, 0x02	; 2
    1a22:	80 93 62 00 	sts	0x0062, r24

void LCD_WR_Data(uint val)
{


	LCD_Data = (uchar)(val>>8);
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e5       	ldi	r19, 0x50	; 80
    1a2a:	1b bb       	out	0x1b, r17	; 27
	LCD_WR0;
    1a2c:	80 91 62 00 	lds	r24, 0x0062
    1a30:	8b 7f       	andi	r24, 0xFB	; 251
    1a32:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
    1a36:	80 91 62 00 	lds	r24, 0x0062
    1a3a:	84 60       	ori	r24, 0x04	; 4
    1a3c:	80 93 62 00 	sts	0x0062, r24
	//LCD_RS1;
	LCD_Data = (uchar)val;
    1a40:	0b bb       	out	0x1b, r16	; 27
	LCD_WR0;
    1a42:	80 91 62 00 	lds	r24, 0x0062
    1a46:	8b 7f       	andi	r24, 0xFB	; 251
    1a48:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
    1a4c:	80 91 62 00 	lds	r24, 0x0062
    1a50:	84 60       	ori	r24, 0x04	; 4
    1a52:	80 93 62 00 	sts	0x0062, r24
	LCD_WR_CMD(0x45,239*256+80);
	LCD_WR_CMD(0x21,80*256+0);	
	LCD_WR_REG(0x22);
	LCD_EC0;
	LCD_RS1;
	for(num=160*128;num>0;num--)
    1a56:	21 50       	subi	r18, 0x01	; 1
    1a58:	30 40       	sbci	r19, 0x00	; 0
    1a5a:	39 f7       	brne	.-50     	; 0x1a2a <LCD_clear+0x42>
	{
		LCD_WR_Data(p);
	}
	LCD_WR_CMD(0x44,95*256+0);
    1a5c:	84 e4       	ldi	r24, 0x44	; 68
    1a5e:	60 e0       	ldi	r22, 0x00	; 0
    1a60:	7f e5       	ldi	r23, 0x5F	; 95
    1a62:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
	LCD_WR_CMD(0x45,79*256+16);
    1a66:	85 e4       	ldi	r24, 0x45	; 69
    1a68:	60 e1       	ldi	r22, 0x10	; 16
    1a6a:	7f e4       	ldi	r23, 0x4F	; 79
    1a6c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
	LCD_WR_CMD(0x21,16*256+0);	
    1a70:	81 e2       	ldi	r24, 0x21	; 33
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	70 e1       	ldi	r23, 0x10	; 16
    1a76:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
	LCD_WR_REG(0x22);
    1a7a:	82 e2       	ldi	r24, 0x22	; 34
    1a7c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LCD_WR_REG>
	LCD_EC0;
    1a80:	80 91 62 00 	lds	r24, 0x0062
    1a84:	87 7f       	andi	r24, 0xF7	; 247
    1a86:	80 93 62 00 	sts	0x0062, r24
	LCD_RS1;
    1a8a:	80 91 62 00 	lds	r24, 0x0062
    1a8e:	82 60       	ori	r24, 0x02	; 2
    1a90:	80 93 62 00 	sts	0x0062, r24
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	38 e1       	ldi	r19, 0x18	; 24

void LCD_WR_Data(uint val)
{


	LCD_Data = (uchar)(val>>8);
    1a98:	1b bb       	out	0x1b, r17	; 27
	LCD_WR0;
    1a9a:	80 91 62 00 	lds	r24, 0x0062
    1a9e:	8b 7f       	andi	r24, 0xFB	; 251
    1aa0:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
    1aa4:	80 91 62 00 	lds	r24, 0x0062
    1aa8:	84 60       	ori	r24, 0x04	; 4
    1aaa:	80 93 62 00 	sts	0x0062, r24
	//LCD_RS1;
	LCD_Data = (uchar)val;
    1aae:	0b bb       	out	0x1b, r16	; 27
	LCD_WR0;
    1ab0:	80 91 62 00 	lds	r24, 0x0062
    1ab4:	8b 7f       	andi	r24, 0xFB	; 251
    1ab6:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
    1aba:	80 91 62 00 	lds	r24, 0x0062
    1abe:	84 60       	ori	r24, 0x04	; 4
    1ac0:	80 93 62 00 	sts	0x0062, r24
	LCD_WR_CMD(0x45,79*256+16);
	LCD_WR_CMD(0x21,16*256+0);	
	LCD_WR_REG(0x22);
	LCD_EC0;
	LCD_RS1;
	for(num=64*96;num>0;num--)
    1ac4:	21 50       	subi	r18, 0x01	; 1
    1ac6:	30 40       	sbci	r19, 0x00	; 0
    1ac8:	39 f7       	brne	.-50     	; 0x1a98 <LCD_clear+0xb0>
	{
		LCD_WR_Data(p);
	}
	LCD_EC1;
    1aca:	80 91 62 00 	lds	r24, 0x0062
    1ace:	88 60       	ori	r24, 0x08	; 8
    1ad0:	80 93 62 00 	sts	0x0062, r24
}
    1ad4:	1f 91       	pop	r17
    1ad6:	0f 91       	pop	r16
    1ad8:	08 95       	ret

00001ada <DisplayChar>:
//     y:显示位置第几行,整屏是160/16==10行
//     char_color:字体颜色
//***********************************************************************

void DisplayChar(uchar casc,uchar postion_x,uchar postion_y,uint char_color)
{
    1ada:	9f 92       	push	r9
    1adc:	af 92       	push	r10
    1ade:	bf 92       	push	r11
    1ae0:	cf 92       	push	r12
    1ae2:	df 92       	push	r13
    1ae4:	ef 92       	push	r14
    1ae6:	ff 92       	push	r15
    1ae8:	0f 93       	push	r16
    1aea:	1f 93       	push	r17
    1aec:	b8 2e       	mov	r11, r24
    1aee:	c6 2e       	mov	r12, r22
    1af0:	04 2f       	mov	r16, r20
    1af2:	92 2e       	mov	r9, r18
    1af4:	a3 2e       	mov	r10, r19

	uchar i,j,b;
	uchar *p;
	
	LCD_WR_CMD(0x44,(postion_x*8+7)*256+(postion_x*8));	            //x end point
    1af6:	dd 24       	eor	r13, r13
    1af8:	88 e0       	ldi	r24, 0x08	; 8
    1afa:	98 e0       	ldi	r25, 0x08	; 8
    1afc:	c8 9e       	mul	r12, r24
    1afe:	b0 01       	movw	r22, r0
    1b00:	c9 9e       	mul	r12, r25
    1b02:	70 0d       	add	r23, r0
    1b04:	d8 9e       	mul	r13, r24
    1b06:	70 0d       	add	r23, r0
    1b08:	11 24       	eor	r1, r1
    1b0a:	60 50       	subi	r22, 0x00	; 0
    1b0c:	79 4f       	sbci	r23, 0xF9	; 249
    1b0e:	84 e4       	ldi	r24, 0x44	; 68
    1b10:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
	LCD_WR_CMD(0x45,(postion_y*16+15+80)*256+(postion_y*16+80));	//y end point
    1b14:	10 e0       	ldi	r17, 0x00	; 0
    1b16:	55 e0       	ldi	r21, 0x05	; 5
    1b18:	e5 2e       	mov	r14, r21
    1b1a:	f1 2c       	mov	r15, r1
    1b1c:	e0 0e       	add	r14, r16
    1b1e:	f1 1e       	adc	r15, r17
    1b20:	10 2f       	mov	r17, r16
    1b22:	00 27       	eor	r16, r16
    1b24:	0e 0d       	add	r16, r14
    1b26:	1f 1d       	adc	r17, r15
    1b28:	00 51       	subi	r16, 0x10	; 16
    1b2a:	1a 4f       	sbci	r17, 0xFA	; 250
    1b2c:	34 e0       	ldi	r19, 0x04	; 4
    1b2e:	00 0f       	add	r16, r16
    1b30:	11 1f       	adc	r17, r17
    1b32:	3a 95       	dec	r19
    1b34:	e1 f7       	brne	.-8      	; 0x1b2e <DisplayChar+0x54>
    1b36:	85 e4       	ldi	r24, 0x45	; 69
    1b38:	b8 01       	movw	r22, r16
    1b3a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
	LCD_WR_CMD(0x21,(postion_y*16+80)*256+(postion_x*8));	
    1b3e:	fe 2c       	mov	r15, r14
    1b40:	ee 24       	eor	r14, r14
    1b42:	ff 0c       	add	r15, r15
    1b44:	ec 0c       	add	r14, r12
    1b46:	fd 1c       	adc	r15, r13
    1b48:	93 e0       	ldi	r25, 0x03	; 3
    1b4a:	ee 0c       	add	r14, r14
    1b4c:	ff 1c       	adc	r15, r15
    1b4e:	9a 95       	dec	r25
    1b50:	e1 f7       	brne	.-8      	; 0x1b4a <DisplayChar+0x70>
    1b52:	81 e2       	ldi	r24, 0x21	; 33
    1b54:	b7 01       	movw	r22, r14
    1b56:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
	LCD_WR_REG(0x22);
    1b5a:	82 e2       	ldi	r24, 0x22	; 34
    1b5c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LCD_WR_REG>
	LCD_EC0;
    1b60:	80 91 62 00 	lds	r24, 0x0062
    1b64:	87 7f       	andi	r24, 0xF7	; 247
    1b66:	80 93 62 00 	sts	0x0062, r24
	LCD_RS1;
    1b6a:	80 91 62 00 	lds	r24, 0x0062
    1b6e:	82 60       	ori	r24, 0x02	; 2
    1b70:	80 93 62 00 	sts	0x0062, r24
	p=ascii;
	p+=casc*16;
    1b74:	2b 2d       	mov	r18, r11
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	84 e0       	ldi	r24, 0x04	; 4
    1b7a:	22 0f       	add	r18, r18
    1b7c:	33 1f       	adc	r19, r19
    1b7e:	8a 95       	dec	r24
    1b80:	e1 f7       	brne	.-8      	; 0x1b7a <DisplayChar+0xa0>
    1b82:	2a 55       	subi	r18, 0x5A	; 90
    1b84:	3e 4f       	sbci	r19, 0xFE	; 254

void LCD_WR_Data(uint val)
{


	LCD_Data = (uchar)(val>>8);
    1b86:	40 e0       	ldi	r20, 0x00	; 0
    1b88:	50 e0       	ldi	r21, 0x00	; 0
	LCD_RS1;
	p=ascii;
	p+=casc*16;
	for(j=0;j<16;j++)
	{
		b=*(p+j);
    1b8a:	f9 01       	movw	r30, r18
    1b8c:	e4 0f       	add	r30, r20
    1b8e:	f5 1f       	adc	r31, r21
    1b90:	e0 81       	ld	r30, Z
    1b92:	90 e0       	ldi	r25, 0x00	; 0
		for(i=0;i<8;i++)
		{
			if(b&0x80)
    1b94:	e7 ff       	sbrs	r30, 7
    1b96:	0d c0       	rjmp	.+26     	; 0x1bb2 <DisplayChar+0xd8>

void LCD_WR_Data(uint val)
{


	LCD_Data = (uchar)(val>>8);
    1b98:	ab ba       	out	0x1b, r10	; 27
	LCD_WR0;
    1b9a:	80 91 62 00 	lds	r24, 0x0062
    1b9e:	8b 7f       	andi	r24, 0xFB	; 251
    1ba0:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
    1ba4:	80 91 62 00 	lds	r24, 0x0062
    1ba8:	84 60       	ori	r24, 0x04	; 4
    1baa:	80 93 62 00 	sts	0x0062, r24
	//LCD_RS1;
	LCD_Data = (uchar)val;
    1bae:	9b ba       	out	0x1b, r9	; 27
    1bb0:	0c c0       	rjmp	.+24     	; 0x1bca <DisplayChar+0xf0>

void LCD_WR_Data(uint val)
{


	LCD_Data = (uchar)(val>>8);
    1bb2:	1b ba       	out	0x1b, r1	; 27
	LCD_WR0;
    1bb4:	80 91 62 00 	lds	r24, 0x0062
    1bb8:	8b 7f       	andi	r24, 0xFB	; 251
    1bba:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
    1bbe:	80 91 62 00 	lds	r24, 0x0062
    1bc2:	84 60       	ori	r24, 0x04	; 4
    1bc4:	80 93 62 00 	sts	0x0062, r24
	//LCD_RS1;
	LCD_Data = (uchar)val;
    1bc8:	1b ba       	out	0x1b, r1	; 27
	LCD_WR0;
    1bca:	80 91 62 00 	lds	r24, 0x0062
    1bce:	8b 7f       	andi	r24, 0xFB	; 251
    1bd0:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
    1bd4:	80 91 62 00 	lds	r24, 0x0062
    1bd8:	84 60       	ori	r24, 0x04	; 4
    1bda:	80 93 62 00 	sts	0x0062, r24
	p=ascii;
	p+=casc*16;
	for(j=0;j<16;j++)
	{
		b=*(p+j);
		for(i=0;i<8;i++)
    1bde:	9f 5f       	subi	r25, 0xFF	; 255
    1be0:	98 30       	cpi	r25, 0x08	; 8
    1be2:	11 f0       	breq	.+4      	; 0x1be8 <DisplayChar+0x10e>
			}
			else
			{
				LCD_WR_Data(0x0000);       				//背景颜色
			}
			b=b<<1;
    1be4:	ee 0f       	add	r30, r30
    1be6:	d6 cf       	rjmp	.-84     	; 0x1b94 <DisplayChar+0xba>
    1be8:	4f 5f       	subi	r20, 0xFF	; 255
    1bea:	5f 4f       	sbci	r21, 0xFF	; 255
	LCD_WR_REG(0x22);
	LCD_EC0;
	LCD_RS1;
	p=ascii;
	p+=casc*16;
	for(j=0;j<16;j++)
    1bec:	40 31       	cpi	r20, 0x10	; 16
    1bee:	51 05       	cpc	r21, r1
    1bf0:	61 f6       	brne	.-104    	; 0x1b8a <DisplayChar+0xb0>
			}
			b=b<<1;
			
		}	
	}
	LCD_EC1;
    1bf2:	80 91 62 00 	lds	r24, 0x0062
    1bf6:	88 60       	ori	r24, 0x08	; 8
    1bf8:	80 93 62 00 	sts	0x0062, r24
}
    1bfc:	1f 91       	pop	r17
    1bfe:	0f 91       	pop	r16
    1c00:	ff 90       	pop	r15
    1c02:	ef 90       	pop	r14
    1c04:	df 90       	pop	r13
    1c06:	cf 90       	pop	r12
    1c08:	bf 90       	pop	r11
    1c0a:	af 90       	pop	r10
    1c0c:	9f 90       	pop	r9
    1c0e:	08 95       	ret

00001c10 <DisplayGB2312>:
//         y:显示位置第几行
//		  color:字体颜色
//***********************************************************************

void DisplayGB2312(uchar gb,uchar postion_x,uchar postion_y,uint gb_color)
{
    1c10:	9f 92       	push	r9
    1c12:	af 92       	push	r10
    1c14:	bf 92       	push	r11
    1c16:	cf 92       	push	r12
    1c18:	df 92       	push	r13
    1c1a:	ef 92       	push	r14
    1c1c:	ff 92       	push	r15
    1c1e:	0f 93       	push	r16
    1c20:	1f 93       	push	r17
    1c22:	b8 2e       	mov	r11, r24
    1c24:	c6 2e       	mov	r12, r22
    1c26:	04 2f       	mov	r16, r20
    1c28:	92 2e       	mov	r9, r18
    1c2a:	a3 2e       	mov	r10, r19

	uchar i,j,b;
	uchar *p;
	
	LCD_WR_CMD(0x44,(postion_x*16+15)*256+(postion_x*16));	        //x end point
    1c2c:	dd 24       	eor	r13, r13
    1c2e:	80 e1       	ldi	r24, 0x10	; 16
    1c30:	90 e1       	ldi	r25, 0x10	; 16
    1c32:	c8 9e       	mul	r12, r24
    1c34:	b0 01       	movw	r22, r0
    1c36:	c9 9e       	mul	r12, r25
    1c38:	70 0d       	add	r23, r0
    1c3a:	d8 9e       	mul	r13, r24
    1c3c:	70 0d       	add	r23, r0
    1c3e:	11 24       	eor	r1, r1
    1c40:	60 50       	subi	r22, 0x00	; 0
    1c42:	71 4f       	sbci	r23, 0xF1	; 241
    1c44:	84 e4       	ldi	r24, 0x44	; 68
    1c46:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
	LCD_WR_CMD(0x45,(postion_y*16+15+80)*256+(postion_y*16+80));	//y end point
    1c4a:	10 e0       	ldi	r17, 0x00	; 0
    1c4c:	b5 e0       	ldi	r27, 0x05	; 5
    1c4e:	eb 2e       	mov	r14, r27
    1c50:	f1 2c       	mov	r15, r1
    1c52:	e0 0e       	add	r14, r16
    1c54:	f1 1e       	adc	r15, r17
    1c56:	10 2f       	mov	r17, r16
    1c58:	00 27       	eor	r16, r16
    1c5a:	0e 0d       	add	r16, r14
    1c5c:	1f 1d       	adc	r17, r15
    1c5e:	00 51       	subi	r16, 0x10	; 16
    1c60:	1a 4f       	sbci	r17, 0xFA	; 250
    1c62:	f4 e0       	ldi	r31, 0x04	; 4
    1c64:	00 0f       	add	r16, r16
    1c66:	11 1f       	adc	r17, r17
    1c68:	fa 95       	dec	r31
    1c6a:	e1 f7       	brne	.-8      	; 0x1c64 <DisplayGB2312+0x54>
    1c6c:	85 e4       	ldi	r24, 0x45	; 69
    1c6e:	b8 01       	movw	r22, r16
    1c70:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
	LCD_WR_CMD(0x21,(postion_y*16+80)*256+(postion_x*16));	
    1c74:	fe 2c       	mov	r15, r14
    1c76:	ee 24       	eor	r14, r14
    1c78:	ec 0c       	add	r14, r12
    1c7a:	fd 1c       	adc	r15, r13
    1c7c:	74 e0       	ldi	r23, 0x04	; 4
    1c7e:	ee 0c       	add	r14, r14
    1c80:	ff 1c       	adc	r15, r15
    1c82:	7a 95       	dec	r23
    1c84:	e1 f7       	brne	.-8      	; 0x1c7e <DisplayGB2312+0x6e>
    1c86:	81 e2       	ldi	r24, 0x21	; 33
    1c88:	b7 01       	movw	r22, r14
    1c8a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
	LCD_WR_REG(0x22);
    1c8e:	82 e2       	ldi	r24, 0x22	; 34
    1c90:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LCD_WR_REG>
	LCD_EC0;
    1c94:	80 91 62 00 	lds	r24, 0x0062
    1c98:	87 7f       	andi	r24, 0xF7	; 247
    1c9a:	80 93 62 00 	sts	0x0062, r24
	LCD_RS1;
    1c9e:	80 91 62 00 	lds	r24, 0x0062
    1ca2:	82 60       	ori	r24, 0x02	; 2
    1ca4:	80 93 62 00 	sts	0x0062, r24
	p=GB2312;
	p+=gb*32;
    1ca8:	2b 2d       	mov	r18, r11
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	65 e0       	ldi	r22, 0x05	; 5
    1cae:	22 0f       	add	r18, r18
    1cb0:	33 1f       	adc	r19, r19
    1cb2:	6a 95       	dec	r22
    1cb4:	e1 f7       	brne	.-8      	; 0x1cae <DisplayGB2312+0x9e>
    1cb6:	2a 55       	subi	r18, 0x5A	; 90
    1cb8:	36 4f       	sbci	r19, 0xF6	; 246

void LCD_WR_Data(uint val)
{


	LCD_Data = (uchar)(val>>8);
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
	LCD_RS1;
	p=GB2312;
	p+=gb*32;
	for(j=0;j<32;j++)
	{
		b=*(p+j);
    1cbe:	f9 01       	movw	r30, r18
    1cc0:	e4 0f       	add	r30, r20
    1cc2:	f5 1f       	adc	r31, r21
    1cc4:	e0 81       	ld	r30, Z
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
		for(i=0;i<8;i++)
		{
			if(b&0x80)
    1cc8:	e7 ff       	sbrs	r30, 7
    1cca:	0d c0       	rjmp	.+26     	; 0x1ce6 <DisplayGB2312+0xd6>

void LCD_WR_Data(uint val)
{


	LCD_Data = (uchar)(val>>8);
    1ccc:	ab ba       	out	0x1b, r10	; 27
	LCD_WR0;
    1cce:	80 91 62 00 	lds	r24, 0x0062
    1cd2:	8b 7f       	andi	r24, 0xFB	; 251
    1cd4:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
    1cd8:	80 91 62 00 	lds	r24, 0x0062
    1cdc:	84 60       	ori	r24, 0x04	; 4
    1cde:	80 93 62 00 	sts	0x0062, r24
	//LCD_RS1;
	LCD_Data = (uchar)val;
    1ce2:	9b ba       	out	0x1b, r9	; 27
    1ce4:	0c c0       	rjmp	.+24     	; 0x1cfe <DisplayGB2312+0xee>

void LCD_WR_Data(uint val)
{


	LCD_Data = (uchar)(val>>8);
    1ce6:	1b ba       	out	0x1b, r1	; 27
	LCD_WR0;
    1ce8:	80 91 62 00 	lds	r24, 0x0062
    1cec:	8b 7f       	andi	r24, 0xFB	; 251
    1cee:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
    1cf2:	80 91 62 00 	lds	r24, 0x0062
    1cf6:	84 60       	ori	r24, 0x04	; 4
    1cf8:	80 93 62 00 	sts	0x0062, r24
	//LCD_RS1;
	LCD_Data = (uchar)val;
    1cfc:	1b ba       	out	0x1b, r1	; 27
	LCD_WR0;
    1cfe:	80 91 62 00 	lds	r24, 0x0062
    1d02:	8b 7f       	andi	r24, 0xFB	; 251
    1d04:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
    1d08:	80 91 62 00 	lds	r24, 0x0062
    1d0c:	84 60       	ori	r24, 0x04	; 4
    1d0e:	80 93 62 00 	sts	0x0062, r24
	p=GB2312;
	p+=gb*32;
	for(j=0;j<32;j++)
	{
		b=*(p+j);
		for(i=0;i<8;i++)
    1d12:	9f 5f       	subi	r25, 0xFF	; 255
    1d14:	98 30       	cpi	r25, 0x08	; 8
    1d16:	11 f0       	breq	.+4      	; 0x1d1c <DisplayGB2312+0x10c>
			}
			else
			{
				LCD_WR_Data(0x0000);         //背景颜色
			}
			b=b<<1;
    1d18:	ee 0f       	add	r30, r30
    1d1a:	d6 cf       	rjmp	.-84     	; 0x1cc8 <DisplayGB2312+0xb8>
    1d1c:	4f 5f       	subi	r20, 0xFF	; 255
    1d1e:	5f 4f       	sbci	r21, 0xFF	; 255
	LCD_WR_REG(0x22);
	LCD_EC0;
	LCD_RS1;
	p=GB2312;
	p+=gb*32;
	for(j=0;j<32;j++)
    1d20:	40 32       	cpi	r20, 0x20	; 32
    1d22:	51 05       	cpc	r21, r1
    1d24:	61 f6       	brne	.-104    	; 0x1cbe <DisplayGB2312+0xae>
			}
			b=b<<1;
			
		}	
	}
	LCD_EC1;
    1d26:	80 91 62 00 	lds	r24, 0x0062
    1d2a:	88 60       	ori	r24, 0x08	; 8
    1d2c:	80 93 62 00 	sts	0x0062, r24
}
    1d30:	1f 91       	pop	r17
    1d32:	0f 91       	pop	r16
    1d34:	ff 90       	pop	r15
    1d36:	ef 90       	pop	r14
    1d38:	df 90       	pop	r13
    1d3a:	cf 90       	pop	r12
    1d3c:	bf 90       	pop	r11
    1d3e:	af 90       	pop	r10
    1d40:	9f 90       	pop	r9
    1d42:	08 95       	ret

00001d44 <DisplayString>:
//         x:显示位置第几列
//         y:显示位置第几行
//***********************************************************************

void DisplayString(uchar *s,uchar x,uchar y,uint s_color)                      //英文字符串显示.
{
    1d44:	ef 92       	push	r14
    1d46:	ff 92       	push	r15
    1d48:	0f 93       	push	r16
    1d4a:	1f 93       	push	r17
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	ec 01       	movw	r28, r24
    1d52:	16 2f       	mov	r17, r22
    1d54:	04 2f       	mov	r16, r20
    1d56:	79 01       	movw	r14, r18
    1d58:	10 c0       	rjmp	.+32     	; 0x1d7a <DisplayString+0x36>
	while (*s) 
	{ 
		DisplayChar(*s,x,y,s_color);
    1d5a:	61 2f       	mov	r22, r17
    1d5c:	40 2f       	mov	r20, r16
    1d5e:	97 01       	movw	r18, r14
    1d60:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <DisplayChar>
		if(++x>=16)
    1d64:	1f 5f       	subi	r17, 0xFF	; 255
    1d66:	10 31       	cpi	r17, 0x10	; 16
    1d68:	38 f0       	brcs	.+14     	; 0x1d78 <DisplayString+0x34>
		{
			x=0;
			if(++y>=10)
    1d6a:	0f 5f       	subi	r16, 0xFF	; 255
    1d6c:	0a 30       	cpi	r16, 0x0A	; 10
    1d6e:	18 f0       	brcs	.+6      	; 0x1d76 <DisplayString+0x32>
    1d70:	10 e0       	ldi	r17, 0x00	; 0
    1d72:	00 e0       	ldi	r16, 0x00	; 0
    1d74:	01 c0       	rjmp	.+2      	; 0x1d78 <DisplayString+0x34>
    1d76:	10 e0       	ldi	r17, 0x00	; 0
			{
				y=0;
			}
		}
		s++;
    1d78:	21 96       	adiw	r28, 0x01	; 1
//         y:显示位置第几行
//***********************************************************************

void DisplayString(uchar *s,uchar x,uchar y,uint s_color)                      //英文字符串显示.
{
	while (*s) 
    1d7a:	88 81       	ld	r24, Y
    1d7c:	88 23       	and	r24, r24
    1d7e:	69 f7       	brne	.-38     	; 0x1d5a <DisplayString+0x16>
				y=0;
			}
		}
		s++;
    }
}
    1d80:	df 91       	pop	r29
    1d82:	cf 91       	pop	r28
    1d84:	1f 91       	pop	r17
    1d86:	0f 91       	pop	r16
    1d88:	ff 90       	pop	r15
    1d8a:	ef 90       	pop	r14
    1d8c:	08 95       	ret

00001d8e <GUIback>:
//***********************************************************************
//          打点绘图背景颜色函数，可先调用,相当于清屏函数
//***********************************************************************

void GUIback(uint back_color)                 //背景函数
  {
    1d8e:	0f 93       	push	r16
    1d90:	1f 93       	push	r17
    1d92:	8c 01       	movw	r16, r24
  	uint num;
	LCD_WR_CMD(0x44,127*256+0);              //水平显示区域
    1d94:	84 e4       	ldi	r24, 0x44	; 68
    1d96:	60 e0       	ldi	r22, 0x00	; 0
    1d98:	7f e7       	ldi	r23, 0x7F	; 127
    1d9a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
	LCD_WR_CMD(0x45,239*256+80);			 //垂直显示区域
    1d9e:	85 e4       	ldi	r24, 0x45	; 69
    1da0:	60 e5       	ldi	r22, 0x50	; 80
    1da2:	7f ee       	ldi	r23, 0xEF	; 239
    1da4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
	LCD_WR_CMD(0x21,80*256);				 //显示RAM起始位置，大屏起始点为0x5000
    1da8:	81 e2       	ldi	r24, 0x21	; 33
    1daa:	60 e0       	ldi	r22, 0x00	; 0
    1dac:	70 e5       	ldi	r23, 0x50	; 80
    1dae:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
	LCD_WR_REG(0x22);                     	 //执行写数据到GRAM操作
    1db2:	82 e2       	ldi	r24, 0x22	; 34
    1db4:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LCD_WR_REG>
    LCD_EC0;
    1db8:	80 91 62 00 	lds	r24, 0x0062
    1dbc:	87 7f       	andi	r24, 0xF7	; 247
    1dbe:	80 93 62 00 	sts	0x0062, r24
	LCD_RS1;
    1dc2:	80 91 62 00 	lds	r24, 0x0062
    1dc6:	82 60       	ori	r24, 0x02	; 2
    1dc8:	80 93 62 00 	sts	0x0062, r24

void LCD_WR_Data(uint val)
{


	LCD_Data = (uchar)(val>>8);
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e5       	ldi	r19, 0x50	; 80
    1dd0:	1b bb       	out	0x1b, r17	; 27
	LCD_WR0;
    1dd2:	80 91 62 00 	lds	r24, 0x0062
    1dd6:	8b 7f       	andi	r24, 0xFB	; 251
    1dd8:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
    1ddc:	80 91 62 00 	lds	r24, 0x0062
    1de0:	84 60       	ori	r24, 0x04	; 4
    1de2:	80 93 62 00 	sts	0x0062, r24
	//LCD_RS1;
	LCD_Data = (uchar)val;
    1de6:	0b bb       	out	0x1b, r16	; 27
	LCD_WR0;
    1de8:	80 91 62 00 	lds	r24, 0x0062
    1dec:	8b 7f       	andi	r24, 0xFB	; 251
    1dee:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
    1df2:	80 91 62 00 	lds	r24, 0x0062
    1df6:	84 60       	ori	r24, 0x04	; 4
    1df8:	80 93 62 00 	sts	0x0062, r24
	LCD_WR_CMD(0x45,239*256+80);			 //垂直显示区域
	LCD_WR_CMD(0x21,80*256);				 //显示RAM起始位置，大屏起始点为0x5000
	LCD_WR_REG(0x22);                     	 //执行写数据到GRAM操作
    LCD_EC0;
	LCD_RS1;
	for(num=160*128;num>0;num--)
    1dfc:	21 50       	subi	r18, 0x01	; 1
    1dfe:	30 40       	sbci	r19, 0x00	; 0
    1e00:	39 f7       	brne	.-50     	; 0x1dd0 <GUIback+0x42>
	{
		LCD_WR_Data(back_color);
	}
	LCD_EC1;
    1e02:	80 91 62 00 	lds	r24, 0x0062
    1e06:	88 60       	ori	r24, 0x08	; 8
    1e08:	80 93 62 00 	sts	0x0062, r24
  }
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	08 95       	ret

00001e12 <GUIpoint>:
//***********************************************************************
//         大屏GUI打点函数，（x,y）为坐标
//***********************************************************************

void GUIpoint(uchar x,uchar y,uint point_color)                      //打点函数
{
    1e12:	df 92       	push	r13
    1e14:	ef 92       	push	r14
    1e16:	ff 92       	push	r15
    1e18:	0f 93       	push	r16
    1e1a:	1f 93       	push	r17
    1e1c:	f8 2e       	mov	r15, r24
    1e1e:	06 2f       	mov	r16, r22
    1e20:	d4 2e       	mov	r13, r20
    1e22:	e5 2e       	mov	r14, r21
	
	LCD_WR_CMD(0x44,127*256+0);              //水平显示区域
    1e24:	84 e4       	ldi	r24, 0x44	; 68
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	7f e7       	ldi	r23, 0x7F	; 127
    1e2a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
	LCD_WR_CMD(0x45,239*256+80);			 //垂直显示区域
    1e2e:	85 e4       	ldi	r24, 0x45	; 69
    1e30:	60 e5       	ldi	r22, 0x50	; 80
    1e32:	7f ee       	ldi	r23, 0xEF	; 239
    1e34:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
	LCD_WR_CMD(0x21,(y+80)*256+x);			 //显示RAM起始位置，大屏起始点为0x5000
    1e38:	10 e0       	ldi	r17, 0x00	; 0
    1e3a:	00 5b       	subi	r16, 0xB0	; 176
    1e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3e:	10 2f       	mov	r17, r16
    1e40:	00 27       	eor	r16, r16
    1e42:	0f 0d       	add	r16, r15
    1e44:	11 1d       	adc	r17, r1
    1e46:	81 e2       	ldi	r24, 0x21	; 33
    1e48:	b8 01       	movw	r22, r16
    1e4a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LCD_WR_CMD>
	LCD_WR_REG(0x22);                     	 //执行写数据到GRAM操作
    1e4e:	82 e2       	ldi	r24, 0x22	; 34
    1e50:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LCD_WR_REG>
	LCD_EC0;
    1e54:	e2 e6       	ldi	r30, 0x62	; 98
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	87 7f       	andi	r24, 0xF7	; 247
    1e5c:	80 83       	st	Z, r24
	LCD_RS1;
    1e5e:	80 81       	ld	r24, Z
    1e60:	82 60       	ori	r24, 0x02	; 2
    1e62:	80 83       	st	Z, r24

void LCD_WR_Data(uint val)
{


	LCD_Data = (uchar)(val>>8);
    1e64:	eb ba       	out	0x1b, r14	; 27
	LCD_WR0;
    1e66:	80 81       	ld	r24, Z
    1e68:	8b 7f       	andi	r24, 0xFB	; 251
    1e6a:	80 83       	st	Z, r24
	LCD_WR1;
    1e6c:	80 81       	ld	r24, Z
    1e6e:	84 60       	ori	r24, 0x04	; 4
    1e70:	80 83       	st	Z, r24
	//LCD_RS1;
	LCD_Data = (uchar)val;
    1e72:	db ba       	out	0x1b, r13	; 27
	LCD_WR0;
    1e74:	80 81       	ld	r24, Z
    1e76:	8b 7f       	andi	r24, 0xFB	; 251
    1e78:	80 83       	st	Z, r24
	LCD_WR1;
    1e7a:	80 81       	ld	r24, Z
    1e7c:	84 60       	ori	r24, 0x04	; 4
    1e7e:	80 83       	st	Z, r24
	LCD_EC0;
	LCD_RS1;
	
	LCD_WR_Data(point_color);               //打点颜色	
	
	LCD_EC1;	
    1e80:	80 81       	ld	r24, Z
    1e82:	88 60       	ori	r24, 0x08	; 8
    1e84:	80 83       	st	Z, r24
}
    1e86:	1f 91       	pop	r17
    1e88:	0f 91       	pop	r16
    1e8a:	ff 90       	pop	r15
    1e8c:	ef 90       	pop	r14
    1e8e:	df 90       	pop	r13
    1e90:	08 95       	ret

00001e92 <GUIline>:
//         大屏GUI画线函数，（x0,y0）为起始坐标,（x1,y1）为终点坐标
//		   line_color 线的颜色
//***********************************************************************

void GUIline(uchar x0,uchar y0,uchar x1,uchar y1,uint line_color)   //画线函数
{
    1e92:	2f 92       	push	r2
    1e94:	3f 92       	push	r3
    1e96:	4f 92       	push	r4
    1e98:	5f 92       	push	r5
    1e9a:	6f 92       	push	r6
    1e9c:	7f 92       	push	r7
    1e9e:	8f 92       	push	r8
    1ea0:	9f 92       	push	r9
    1ea2:	af 92       	push	r10
    1ea4:	bf 92       	push	r11
    1ea6:	cf 92       	push	r12
    1ea8:	df 92       	push	r13
    1eaa:	ef 92       	push	r14
    1eac:	ff 92       	push	r15
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <GUIline+0x26>
    1eb8:	00 d0       	rcall	.+0      	; 0x1eba <GUIline+0x28>
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	28 2e       	mov	r2, r24
    1ec0:	36 2e       	mov	r3, r22
    1ec2:	1a 83       	std	Y+2, r17	; 0x02
    1ec4:	09 83       	std	Y+1, r16	; 0x01
  	int temp; 
    int dx,dy;               	//定义起点到终点的横、纵坐标增加值 
    int s1,s2,status,i; 
    int Dx,Dy,sub; 
	
	dx = x1 - x0; 
    1ec6:	84 2f       	mov	r24, r20
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	82 19       	sub	r24, r2
    1ecc:	91 09       	sbc	r25, r1
    if(dx >= 0)                 //X的方向是增加的 
    1ece:	97 ff       	sbrs	r25, 7
    1ed0:	04 c0       	rjmp	.+8      	; 0x1eda <GUIline+0x48>
    1ed2:	66 24       	eor	r6, r6
    1ed4:	6a 94       	dec	r6
    1ed6:	76 2c       	mov	r7, r6
    1ed8:	03 c0       	rjmp	.+6      	; 0x1ee0 <GUIline+0x4e>
    1eda:	51 e0       	ldi	r21, 0x01	; 1
    1edc:	65 2e       	mov	r6, r21
    1ede:	71 2c       	mov	r7, r1
        s1 = 1; 
    else                     	//X的方向是降低的 
        s1 = -1;      
    dy = y1 - y0;                 //判断Y的方向是增加还是降到的 
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	23 19       	sub	r18, r3
    1ee4:	31 09       	sbc	r19, r1
    if(dy >= 0) 
    1ee6:	37 ff       	sbrs	r19, 7
    1ee8:	04 c0       	rjmp	.+8      	; 0x1ef2 <GUIline+0x60>
    1eea:	88 24       	eor	r8, r8
    1eec:	8a 94       	dec	r8
    1eee:	98 2c       	mov	r9, r8
    1ef0:	03 c0       	rjmp	.+6      	; 0x1ef8 <GUIline+0x66>
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	84 2e       	mov	r8, r20
    1ef6:	91 2c       	mov	r9, r1
        s2 = 1; 
    else 
        s2 =- 1; 
   
    Dx = abs(x1-x0);             //计算横、纵标志增加值的绝对值 
    1ef8:	9c 83       	std	Y+4, r25	; 0x04
    1efa:	8b 83       	std	Y+3, r24	; 0x03
    1efc:	97 ff       	sbrs	r25, 7
    1efe:	05 c0       	rjmp	.+10     	; 0x1f0a <GUIline+0x78>
    1f00:	90 95       	com	r25
    1f02:	81 95       	neg	r24
    1f04:	9f 4f       	sbci	r25, 0xFF	; 255
    1f06:	9c 83       	std	Y+4, r25	; 0x04
    1f08:	8b 83       	std	Y+3, r24	; 0x03
    Dy = abs(y1-y0); 
    1f0a:	a9 01       	movw	r20, r18
    1f0c:	37 ff       	sbrs	r19, 7
    1f0e:	03 c0       	rjmp	.+6      	; 0x1f16 <GUIline+0x84>
    1f10:	50 95       	com	r21
    1f12:	41 95       	neg	r20
    1f14:	5f 4f       	sbci	r21, 0xFF	; 255
        
    if(Dy > Dx)                               
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	84 17       	cp	r24, r20
    1f1c:	95 07       	cpc	r25, r21
    1f1e:	1c f0       	brlt	.+6      	; 0x1f26 <GUIline+0x94>
    1f20:	aa 24       	eor	r10, r10
    1f22:	bb 24       	eor	r11, r11
    1f24:	08 c0       	rjmp	.+16     	; 0x1f36 <GUIline+0xa4>
    1f26:	ca 01       	movw	r24, r20
    1f28:	4b 81       	ldd	r20, Y+3	; 0x03
    1f2a:	5c 81       	ldd	r21, Y+4	; 0x04
    1f2c:	9c 83       	std	Y+4, r25	; 0x04
    1f2e:	8b 83       	std	Y+3, r24	; 0x03
    1f30:	21 e0       	ldi	r18, 0x01	; 1
    1f32:	a2 2e       	mov	r10, r18
    1f34:	b1 2c       	mov	r11, r1
    }  
    else 
        status = 0; 

/*********Bresenham算法画任意两点间的直线********/  
    sub = Dy + Dy - Dx;                 //第1次判断下个点的位置 
    1f36:	2a 01       	movw	r4, r20
    1f38:	44 0c       	add	r4, r4
    1f3a:	55 1c       	adc	r5, r5
    1f3c:	82 01       	movw	r16, r4
    1f3e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f40:	fc 81       	ldd	r31, Y+4	; 0x04
    1f42:	0e 1b       	sub	r16, r30
    1f44:	1f 0b       	sbc	r17, r31
    1f46:	cc 24       	eor	r12, r12
    1f48:	dd 24       	eor	r13, r13
        {  
            if(status == 1)               //在靠近Y轴区，x值加1 
                x0 += s1;  
            else                     //在靠近X轴区，y值加1                
                y0 += s2;  
            sub -= (Dx + Dx);                 //判断下下个点的位置  
    1f4a:	7f 01       	movw	r14, r30
    1f4c:	f0 94       	com	r15
    1f4e:	e1 94       	neg	r14
    1f50:	f1 08       	sbc	r15, r1
    1f52:	f3 94       	inc	r15
    1f54:	ee 1a       	sub	r14, r30
    1f56:	ff 0a       	sbc	r15, r31
    1f58:	1d c0       	rjmp	.+58     	; 0x1f94 <GUIline+0x102>

/*********Bresenham算法画任意两点间的直线********/  
    sub = Dy + Dy - Dx;                 //第1次判断下个点的位置 
    for(i = 0;i < Dx;i ++) 
    {  
        GUIpoint(x0,y0,line_color);           //画点  
    1f5a:	82 2d       	mov	r24, r2
    1f5c:	63 2d       	mov	r22, r3
    1f5e:	49 81       	ldd	r20, Y+1	; 0x01
    1f60:	5a 81       	ldd	r21, Y+2	; 0x02
    1f62:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GUIpoint>
        if(sub >= 0)                                
    1f66:	17 fd       	sbrc	r17, 7
    1f68:	09 c0       	rjmp	.+18     	; 0x1f7c <GUIline+0xea>
        {  
            if(status == 1)               //在靠近Y轴区，x值加1 
    1f6a:	f1 e0       	ldi	r31, 0x01	; 1
    1f6c:	af 16       	cp	r10, r31
    1f6e:	b1 04       	cpc	r11, r1
    1f70:	11 f4       	brne	.+4      	; 0x1f76 <GUIline+0xe4>
                x0 += s1;  
    1f72:	26 0c       	add	r2, r6
    1f74:	01 c0       	rjmp	.+2      	; 0x1f78 <GUIline+0xe6>
            else                     //在靠近X轴区，y值加1                
                y0 += s2;  
    1f76:	38 0c       	add	r3, r8
            sub -= (Dx + Dx);                 //判断下下个点的位置  
    1f78:	0e 0d       	add	r16, r14
    1f7a:	1f 1d       	adc	r17, r15
        }  
        if(status == 1) 
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	a8 16       	cp	r10, r24
    1f80:	b1 04       	cpc	r11, r1
    1f82:	11 f4       	brne	.+4      	; 0x1f88 <GUIline+0xf6>
            y0 += s2;  
    1f84:	38 0c       	add	r3, r8
    1f86:	01 c0       	rjmp	.+2      	; 0x1f8a <GUIline+0xf8>
        else        
            x0 += s1;  
    1f88:	26 0c       	add	r2, r6
        sub += Dy + Dy;  
    1f8a:	04 0d       	add	r16, r4
    1f8c:	15 1d       	adc	r17, r5
    else 
        status = 0; 

/*********Bresenham算法画任意两点间的直线********/  
    sub = Dy + Dy - Dx;                 //第1次判断下个点的位置 
    for(i = 0;i < Dx;i ++) 
    1f8e:	08 94       	sec
    1f90:	c1 1c       	adc	r12, r1
    1f92:	d1 1c       	adc	r13, r1
    1f94:	eb 81       	ldd	r30, Y+3	; 0x03
    1f96:	fc 81       	ldd	r31, Y+4	; 0x04
    1f98:	ce 16       	cp	r12, r30
    1f9a:	df 06       	cpc	r13, r31
    1f9c:	f4 f2       	brlt	.-68     	; 0x1f5a <GUIline+0xc8>
        else        
            x0 += s1;  
        sub += Dy + Dy;  
         
    }  
} 
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	1f 91       	pop	r17
    1fac:	0f 91       	pop	r16
    1fae:	ff 90       	pop	r15
    1fb0:	ef 90       	pop	r14
    1fb2:	df 90       	pop	r13
    1fb4:	cf 90       	pop	r12
    1fb6:	bf 90       	pop	r11
    1fb8:	af 90       	pop	r10
    1fba:	9f 90       	pop	r9
    1fbc:	8f 90       	pop	r8
    1fbe:	7f 90       	pop	r7
    1fc0:	6f 90       	pop	r6
    1fc2:	5f 90       	pop	r5
    1fc4:	4f 90       	pop	r4
    1fc6:	3f 90       	pop	r3
    1fc8:	2f 90       	pop	r2
    1fca:	08 95       	ret

00001fcc <GUIfull>:
*           y1      	终止点纵坐标 
*          full_color      	显示颜色 
* 出口参数：无 
****************************************************************************/ 
void GUIfull(uchar x0,uchar y0,uchar x1,uchar y1,uint full_colour) 
{ 
    1fcc:	df 92       	push	r13
    1fce:	ef 92       	push	r14
    1fd0:	ff 92       	push	r15
    1fd2:	0f 93       	push	r16
    1fd4:	1f 93       	push	r17
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	d8 2e       	mov	r13, r24
    1fdc:	e4 2e       	mov	r14, r20
    1fde:	f2 2e       	mov	r15, r18
    1fe0:	e8 01       	movw	r28, r16
    1fe2:	06 2f       	mov	r16, r22
    1fe4:	09 c0       	rjmp	.+18     	; 0x1ff8 <GUIfull+0x2c>
    unsigned char i,j; 
for(j = y0;j <= y1;j ++) 
    for(i = x0;i <= x1;i ++) 
    GUIpoint(i,j,full_colour); 
    1fe6:	81 2f       	mov	r24, r17
    1fe8:	60 2f       	mov	r22, r16
    1fea:	ae 01       	movw	r20, r28
    1fec:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GUIpoint>
****************************************************************************/ 
void GUIfull(uchar x0,uchar y0,uchar x1,uchar y1,uint full_colour) 
{ 
    unsigned char i,j; 
for(j = y0;j <= y1;j ++) 
    for(i = x0;i <= x1;i ++) 
    1ff0:	1f 5f       	subi	r17, 0xFF	; 255
    1ff2:	e1 16       	cp	r14, r17
    1ff4:	c0 f7       	brcc	.-16     	; 0x1fe6 <GUIfull+0x1a>
* 出口参数：无 
****************************************************************************/ 
void GUIfull(uchar x0,uchar y0,uchar x1,uchar y1,uint full_colour) 
{ 
    unsigned char i,j; 
for(j = y0;j <= y1;j ++) 
    1ff6:	0f 5f       	subi	r16, 0xFF	; 255
    1ff8:	f0 16       	cp	r15, r16
    1ffa:	10 f0       	brcs	.+4      	; 0x2000 <GUIfull+0x34>
    1ffc:	1d 2d       	mov	r17, r13
    1ffe:	f9 cf       	rjmp	.-14     	; 0x1ff2 <GUIfull+0x26>
    for(i = x0;i <= x1;i ++) 
    GUIpoint(i,j,full_colour); 
} 
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	1f 91       	pop	r17
    2006:	0f 91       	pop	r16
    2008:	ff 90       	pop	r15
    200a:	ef 90       	pop	r14
    200c:	df 90       	pop	r13
    200e:	08 95       	ret

00002010 <plotC>:
*           y    		指定线起点所在列的位置 
*          yc_color 	显示颜色,根据彩色代码设定 
* 出口参数：无 
****************************************************************************/ 
void plotC(uchar x,uchar y,uchar xc,int yc,uint yc_colour) 
{ 
    2010:	9f 92       	push	r9
    2012:	af 92       	push	r10
    2014:	bf 92       	push	r11
    2016:	cf 92       	push	r12
    2018:	df 92       	push	r13
    201a:	ef 92       	push	r14
    201c:	ff 92       	push	r15
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	c8 2e       	mov	r12, r24
    2024:	b6 2e       	mov	r11, r22
    2026:	f4 2e       	mov	r15, r20
    2028:	e2 2e       	mov	r14, r18
    GUIpoint(xc+x,yc+y,yc_colour); 
    202a:	d4 2e       	mov	r13, r20
    202c:	d8 0e       	add	r13, r24
    202e:	92 2e       	mov	r9, r18
    2030:	96 0e       	add	r9, r22
    2032:	8d 2d       	mov	r24, r13
    2034:	69 2d       	mov	r22, r9
    2036:	a8 01       	movw	r20, r16
    2038:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GUIpoint>
    GUIpoint(xc+x,yc-y,yc_colour); 
    203c:	ae 2c       	mov	r10, r14
    203e:	ab 18       	sub	r10, r11
    2040:	8d 2d       	mov	r24, r13
    2042:	6a 2d       	mov	r22, r10
    2044:	a8 01       	movw	r20, r16
    2046:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GUIpoint>
    GUIpoint(xc-x,yc+y,yc_colour); 
    204a:	df 2c       	mov	r13, r15
    204c:	dc 18       	sub	r13, r12
    204e:	8d 2d       	mov	r24, r13
    2050:	69 2d       	mov	r22, r9
    2052:	a8 01       	movw	r20, r16
    2054:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GUIpoint>
    GUIpoint(xc-x,yc-y,yc_colour); 
    2058:	8d 2d       	mov	r24, r13
    205a:	6a 2d       	mov	r22, r10
    205c:	a8 01       	movw	r20, r16
    205e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GUIpoint>
    GUIpoint(xc+y,yc+x,yc_colour); 
    2062:	df 2c       	mov	r13, r15
    2064:	db 0c       	add	r13, r11
    2066:	ae 2c       	mov	r10, r14
    2068:	ac 0c       	add	r10, r12
    206a:	8d 2d       	mov	r24, r13
    206c:	6a 2d       	mov	r22, r10
    206e:	a8 01       	movw	r20, r16
    2070:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GUIpoint>
    GUIpoint(xc+y,yc-x,yc_colour); 
    2074:	ec 18       	sub	r14, r12
    2076:	8d 2d       	mov	r24, r13
    2078:	6e 2d       	mov	r22, r14
    207a:	a8 01       	movw	r20, r16
    207c:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GUIpoint>
    GUIpoint(xc-y,yc+x,yc_colour); 
    2080:	fb 18       	sub	r15, r11
    2082:	8f 2d       	mov	r24, r15
    2084:	6a 2d       	mov	r22, r10
    2086:	a8 01       	movw	r20, r16
    2088:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GUIpoint>
    GUIpoint(xc-y,yc-x,yc_colour); 
    208c:	8f 2d       	mov	r24, r15
    208e:	6e 2d       	mov	r22, r14
    2090:	a8 01       	movw	r20, r16
    2092:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GUIpoint>
} 
    2096:	1f 91       	pop	r17
    2098:	0f 91       	pop	r16
    209a:	ff 90       	pop	r15
    209c:	ef 90       	pop	r14
    209e:	df 90       	pop	r13
    20a0:	cf 90       	pop	r12
    20a2:	bf 90       	pop	r11
    20a4:	af 90       	pop	r10
    20a6:	9f 90       	pop	r9
    20a8:	08 95       	ret

000020aa <GUIcircle>:
*           r 				半径 
*          circle_color     显示颜色 
* 出口参数：无 
****************************************************************************/ 
void GUIcircle(uchar xc,uchar yc,uchar r,uint circle_colour) 
{ 
    20aa:	6f 92       	push	r6
    20ac:	7f 92       	push	r7
    20ae:	8f 92       	push	r8
    20b0:	9f 92       	push	r9
    20b2:	af 92       	push	r10
    20b4:	bf 92       	push	r11
    20b6:	cf 92       	push	r12
    20b8:	df 92       	push	r13
    20ba:	ef 92       	push	r14
    20bc:	ff 92       	push	r15
    20be:	0f 93       	push	r16
    20c0:	1f 93       	push	r17
    20c2:	cf 93       	push	r28
    20c4:	df 93       	push	r29
    20c6:	68 2e       	mov	r6, r24
    20c8:	76 2e       	mov	r7, r22
    20ca:	49 01       	movw	r8, r18
    int x,y,d; 
    y = r; 
    20cc:	e4 2e       	mov	r14, r20
    20ce:	ff 24       	eor	r15, r15
    d = 3 - (r + r); 
    20d0:	cc 27       	eor	r28, r28
    20d2:	dd 27       	eor	r29, r29
    20d4:	ce 19       	sub	r28, r14
    20d6:	df 09       	sbc	r29, r15
    20d8:	ce 19       	sub	r28, r14
    20da:	df 09       	sbc	r29, r15
    20dc:	23 96       	adiw	r28, 0x03	; 3
    20de:	cc 24       	eor	r12, r12
    20e0:	dd 24       	eor	r13, r13
    20e2:	66 e0       	ldi	r22, 0x06	; 6
    20e4:	a6 2e       	mov	r10, r22
    20e6:	b1 2c       	mov	r11, r1
    x = 0; 
    while(x <= y) 
    { 
        plotC(x,y,xc,yc,circle_colour); 
    20e8:	8c 2d       	mov	r24, r12
    20ea:	6e 2d       	mov	r22, r14
    20ec:	46 2d       	mov	r20, r6
    20ee:	27 2d       	mov	r18, r7
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	84 01       	movw	r16, r8
    20f4:	0e 94 08 10 	call	0x2010	; 0x2010 <plotC>
        if(d < 0) 
    20f8:	d7 ff       	sbrs	r29, 7
    20fa:	03 c0       	rjmp	.+6      	; 0x2102 <GUIcircle+0x58>
            d += (x + x + x + x) + 6; 
    20fc:	ca 0d       	add	r28, r10
    20fe:	db 1d       	adc	r29, r11
    2100:	0f c0       	rjmp	.+30     	; 0x2120 <GUIcircle+0x76>
        else 
        { 
            d+=((x - y) + (x - y) + (x - y) + (x - y)) + 10; 
    2102:	c6 01       	movw	r24, r12
    2104:	8e 19       	sub	r24, r14
    2106:	9f 09       	sbc	r25, r15
    2108:	2a 96       	adiw	r28, 0x0a	; 10
    210a:	c8 0f       	add	r28, r24
    210c:	d9 1f       	adc	r29, r25
    210e:	c8 0f       	add	r28, r24
    2110:	d9 1f       	adc	r29, r25
    2112:	c8 0f       	add	r28, r24
    2114:	d9 1f       	adc	r29, r25
    2116:	c8 0f       	add	r28, r24
    2118:	d9 1f       	adc	r29, r25
            y = y - 1; 
    211a:	08 94       	sec
    211c:	e1 08       	sbc	r14, r1
    211e:	f1 08       	sbc	r15, r1
        } 
        x = x + 1; 
    2120:	08 94       	sec
    2122:	c1 1c       	adc	r12, r1
    2124:	d1 1c       	adc	r13, r1
    2126:	84 e0       	ldi	r24, 0x04	; 4
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	a8 0e       	add	r10, r24
    212c:	b9 1e       	adc	r11, r25
{ 
    int x,y,d; 
    y = r; 
    d = 3 - (r + r); 
    x = 0; 
    while(x <= y) 
    212e:	ec 14       	cp	r14, r12
    2130:	fd 04       	cpc	r15, r13
    2132:	d4 f6       	brge	.-76     	; 0x20e8 <GUIcircle+0x3e>
            d+=((x - y) + (x - y) + (x - y) + (x - y)) + 10; 
            y = y - 1; 
        } 
        x = x + 1; 
    } 
}
    2134:	df 91       	pop	r29
    2136:	cf 91       	pop	r28
    2138:	1f 91       	pop	r17
    213a:	0f 91       	pop	r16
    213c:	ff 90       	pop	r15
    213e:	ef 90       	pop	r14
    2140:	df 90       	pop	r13
    2142:	cf 90       	pop	r12
    2144:	bf 90       	pop	r11
    2146:	af 90       	pop	r10
    2148:	9f 90       	pop	r9
    214a:	8f 90       	pop	r8
    214c:	7f 90       	pop	r7
    214e:	6f 90       	pop	r6
    2150:	08 95       	ret

00002152 <GUI_sprintf_nu>:
/*********************************************
//显示数字函数
//(x，y)点的坐标量，nu数字值,color颜色,b_color背景颜色
**********************************************/
void  GUI_sprintf_nu(uint x, uint y,uint nu, uint color)
{  
    2152:	98 2f       	mov	r25, r24
    2154:	56 2f       	mov	r21, r22
    2156:	84 2f       	mov	r24, r20
  DisplayChar(nu+'0',x,y,color);
    2158:	80 5d       	subi	r24, 0xD0	; 208
    215a:	69 2f       	mov	r22, r25
    215c:	45 2f       	mov	r20, r21
    215e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <DisplayChar>
}
    2162:	08 95       	ret

00002164 <GUI_sprintf_chartobit>:
/**********************************************************
//写入二进制字符
//(x，y)开始点的坐标量，color 线的颜色，
************************************************************/
void  GUI_sprintf_chartobit(uint x, uint y,uint bin_data, uint color)
{  
    2164:	8f 92       	push	r8
    2166:	9f 92       	push	r9
    2168:	af 92       	push	r10
    216a:	bf 92       	push	r11
    216c:	cf 92       	push	r12
    216e:	df 92       	push	r13
    2170:	ef 92       	push	r14
    2172:	ff 92       	push	r15
    2174:	0f 93       	push	r16
    2176:	1f 93       	push	r17
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	5c 01       	movw	r10, r24
    217e:	7b 01       	movw	r14, r22
    2180:	6a 01       	movw	r12, r20
    2182:	89 01       	movw	r16, r18
    2184:	c0 e0       	ldi	r28, 0x00	; 0
    2186:	d0 e0       	ldi	r29, 0x00	; 0
  uint i ;
  for(i=0;i<8;i++)
    {
	  if((bin_data&(0x80>>i))==(0x80>>i))
    2188:	70 e8       	ldi	r23, 0x80	; 128
    218a:	87 2e       	mov	r8, r23
    218c:	91 2c       	mov	r9, r1
/**********************************************************
//写入二进制字符
//(x，y)开始点的坐标量，color 线的颜色，
************************************************************/
void  GUI_sprintf_chartobit(uint x, uint y,uint bin_data, uint color)
{  
    218e:	ae 01       	movw	r20, r28
    2190:	4a 0d       	add	r20, r10
    2192:	5b 1d       	adc	r21, r11
  uint i ;
  for(i=0;i<8;i++)
    {
	  if((bin_data&(0x80>>i))==(0x80>>i))
    2194:	94 01       	movw	r18, r8
    2196:	0c 2e       	mov	r0, r28
    2198:	02 c0       	rjmp	.+4      	; 0x219e <GUI_sprintf_chartobit+0x3a>
    219a:	35 95       	asr	r19
    219c:	27 95       	ror	r18
    219e:	0a 94       	dec	r0
    21a0:	e2 f7       	brpl	.-8      	; 0x219a <GUI_sprintf_chartobit+0x36>
    21a2:	c9 01       	movw	r24, r18
    21a4:	8c 21       	and	r24, r12
    21a6:	9d 21       	and	r25, r13
    21a8:	82 17       	cp	r24, r18
    21aa:	93 07       	cpc	r25, r19
    21ac:	29 f4       	brne	.+10     	; 0x21b8 <GUI_sprintf_chartobit+0x54>
	    {
		  GUI_sprintf_nu(x,y,1,color) ;
    21ae:	ca 01       	movw	r24, r20
    21b0:	b7 01       	movw	r22, r14
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	50 e0       	ldi	r21, 0x00	; 0
    21b6:	04 c0       	rjmp	.+8      	; 0x21c0 <GUI_sprintf_chartobit+0x5c>
		}
	  else 
	    {
		  GUI_sprintf_nu(x,y,0,color) ;
    21b8:	ca 01       	movw	r24, r20
    21ba:	b7 01       	movw	r22, r14
    21bc:	40 e0       	ldi	r20, 0x00	; 0
    21be:	50 e0       	ldi	r21, 0x00	; 0
    21c0:	98 01       	movw	r18, r16
    21c2:	0e 94 a9 10 	call	0x2152	; 0x2152 <GUI_sprintf_nu>
//(x，y)开始点的坐标量，color 线的颜色，
************************************************************/
void  GUI_sprintf_chartobit(uint x, uint y,uint bin_data, uint color)
{  
  uint i ;
  for(i=0;i<8;i++)
    21c6:	21 96       	adiw	r28, 0x01	; 1
    21c8:	c8 30       	cpi	r28, 0x08	; 8
    21ca:	d1 05       	cpc	r29, r1
    21cc:	01 f7       	brne	.-64     	; 0x218e <GUI_sprintf_chartobit+0x2a>
		}
		
	  x+=1 ;
	}
 
}
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	ff 90       	pop	r15
    21d8:	ef 90       	pop	r14
    21da:	df 90       	pop	r13
    21dc:	cf 90       	pop	r12
    21de:	bf 90       	pop	r11
    21e0:	af 90       	pop	r10
    21e2:	9f 90       	pop	r9
    21e4:	8f 90       	pop	r8
    21e6:	08 95       	ret

000021e8 <GUI_sprintf_chartohex>:
/**********************************************************
//写入十六进制字符
//(x，y)开始点的坐标量，color 线的颜色，
************************************************************/
void  GUI_sprintf_chartohex(uint x, uint y,uint hex_data, uint color)
{  
    21e8:	af 92       	push	r10
    21ea:	bf 92       	push	r11
    21ec:	cf 92       	push	r12
    21ee:	df 92       	push	r13
    21f0:	ef 92       	push	r14
    21f2:	ff 92       	push	r15
    21f4:	0f 93       	push	r16
    21f6:	1f 93       	push	r17
    21f8:	7c 01       	movw	r14, r24
    21fa:	6b 01       	movw	r12, r22
    21fc:	8a 01       	movw	r16, r20
    21fe:	59 01       	movw	r10, r18
  uint i ;

		  GUI_sprintf_nu(x,y,hex_data>>4,color) ;
    2200:	e4 e0       	ldi	r30, 0x04	; 4
    2202:	56 95       	lsr	r21
    2204:	47 95       	ror	r20
    2206:	ea 95       	dec	r30
    2208:	e1 f7       	brne	.-8      	; 0x2202 <GUI_sprintf_chartohex+0x1a>
    220a:	0e 94 a9 10 	call	0x2152	; 0x2152 <GUI_sprintf_nu>
		  x+=1 ;
		  GUI_sprintf_nu(x,y,hex_data&0x0f,color) ;
    220e:	0f 70       	andi	r16, 0x0F	; 15
    2210:	10 70       	andi	r17, 0x00	; 0
    2212:	c7 01       	movw	r24, r14
    2214:	01 96       	adiw	r24, 0x01	; 1
    2216:	b6 01       	movw	r22, r12
    2218:	a8 01       	movw	r20, r16
    221a:	95 01       	movw	r18, r10
    221c:	0e 94 a9 10 	call	0x2152	; 0x2152 <GUI_sprintf_nu>

 
}
    2220:	1f 91       	pop	r17
    2222:	0f 91       	pop	r16
    2224:	ff 90       	pop	r15
    2226:	ef 90       	pop	r14
    2228:	df 90       	pop	r13
    222a:	cf 90       	pop	r12
    222c:	bf 90       	pop	r11
    222e:	af 90       	pop	r10
    2230:	08 95       	ret

00002232 <malloc>:
    2232:	cf 93       	push	r28
    2234:	df 93       	push	r29
    2236:	bc 01       	movw	r22, r24
    2238:	82 30       	cpi	r24, 0x02	; 2
    223a:	91 05       	cpc	r25, r1
    223c:	10 f4       	brcc	.+4      	; 0x2242 <malloc+0x10>
    223e:	62 e0       	ldi	r22, 0x02	; 2
    2240:	70 e0       	ldi	r23, 0x00	; 0
    2242:	a0 91 db 0c 	lds	r26, 0x0CDB
    2246:	b0 91 dc 0c 	lds	r27, 0x0CDC
    224a:	ed 01       	movw	r28, r26
    224c:	e0 e0       	ldi	r30, 0x00	; 0
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	40 e0       	ldi	r20, 0x00	; 0
    2252:	50 e0       	ldi	r21, 0x00	; 0
    2254:	21 c0       	rjmp	.+66     	; 0x2298 <malloc+0x66>
    2256:	88 81       	ld	r24, Y
    2258:	99 81       	ldd	r25, Y+1	; 0x01
    225a:	86 17       	cp	r24, r22
    225c:	97 07       	cpc	r25, r23
    225e:	69 f4       	brne	.+26     	; 0x227a <malloc+0x48>
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	9b 81       	ldd	r25, Y+3	; 0x03
    2264:	30 97       	sbiw	r30, 0x00	; 0
    2266:	19 f0       	breq	.+6      	; 0x226e <malloc+0x3c>
    2268:	93 83       	std	Z+3, r25	; 0x03
    226a:	82 83       	std	Z+2, r24	; 0x02
    226c:	04 c0       	rjmp	.+8      	; 0x2276 <malloc+0x44>
    226e:	90 93 dc 0c 	sts	0x0CDC, r25
    2272:	80 93 db 0c 	sts	0x0CDB, r24
    2276:	fe 01       	movw	r30, r28
    2278:	34 c0       	rjmp	.+104    	; 0x22e2 <malloc+0xb0>
    227a:	68 17       	cp	r22, r24
    227c:	79 07       	cpc	r23, r25
    227e:	38 f4       	brcc	.+14     	; 0x228e <malloc+0x5c>
    2280:	41 15       	cp	r20, r1
    2282:	51 05       	cpc	r21, r1
    2284:	19 f0       	breq	.+6      	; 0x228c <malloc+0x5a>
    2286:	84 17       	cp	r24, r20
    2288:	95 07       	cpc	r25, r21
    228a:	08 f4       	brcc	.+2      	; 0x228e <malloc+0x5c>
    228c:	ac 01       	movw	r20, r24
    228e:	fe 01       	movw	r30, r28
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	9b 81       	ldd	r25, Y+3	; 0x03
    2294:	9c 01       	movw	r18, r24
    2296:	e9 01       	movw	r28, r18
    2298:	20 97       	sbiw	r28, 0x00	; 0
    229a:	e9 f6       	brne	.-70     	; 0x2256 <malloc+0x24>
    229c:	41 15       	cp	r20, r1
    229e:	51 05       	cpc	r21, r1
    22a0:	a9 f1       	breq	.+106    	; 0x230c <malloc+0xda>
    22a2:	ca 01       	movw	r24, r20
    22a4:	86 1b       	sub	r24, r22
    22a6:	97 0b       	sbc	r25, r23
    22a8:	04 97       	sbiw	r24, 0x04	; 4
    22aa:	08 f4       	brcc	.+2      	; 0x22ae <malloc+0x7c>
    22ac:	ba 01       	movw	r22, r20
    22ae:	e0 e0       	ldi	r30, 0x00	; 0
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	2a c0       	rjmp	.+84     	; 0x2308 <malloc+0xd6>
    22b4:	8d 91       	ld	r24, X+
    22b6:	9c 91       	ld	r25, X
    22b8:	11 97       	sbiw	r26, 0x01	; 1
    22ba:	84 17       	cp	r24, r20
    22bc:	95 07       	cpc	r25, r21
    22be:	f9 f4       	brne	.+62     	; 0x22fe <malloc+0xcc>
    22c0:	64 17       	cp	r22, r20
    22c2:	75 07       	cpc	r23, r21
    22c4:	81 f4       	brne	.+32     	; 0x22e6 <malloc+0xb4>
    22c6:	12 96       	adiw	r26, 0x02	; 2
    22c8:	8d 91       	ld	r24, X+
    22ca:	9c 91       	ld	r25, X
    22cc:	13 97       	sbiw	r26, 0x03	; 3
    22ce:	30 97       	sbiw	r30, 0x00	; 0
    22d0:	19 f0       	breq	.+6      	; 0x22d8 <malloc+0xa6>
    22d2:	93 83       	std	Z+3, r25	; 0x03
    22d4:	82 83       	std	Z+2, r24	; 0x02
    22d6:	04 c0       	rjmp	.+8      	; 0x22e0 <malloc+0xae>
    22d8:	90 93 dc 0c 	sts	0x0CDC, r25
    22dc:	80 93 db 0c 	sts	0x0CDB, r24
    22e0:	fd 01       	movw	r30, r26
    22e2:	32 96       	adiw	r30, 0x02	; 2
    22e4:	4f c0       	rjmp	.+158    	; 0x2384 <malloc+0x152>
    22e6:	ca 01       	movw	r24, r20
    22e8:	86 1b       	sub	r24, r22
    22ea:	97 0b       	sbc	r25, r23
    22ec:	fd 01       	movw	r30, r26
    22ee:	e8 0f       	add	r30, r24
    22f0:	f9 1f       	adc	r31, r25
    22f2:	61 93       	st	Z+, r22
    22f4:	71 93       	st	Z+, r23
    22f6:	02 97       	sbiw	r24, 0x02	; 2
    22f8:	8d 93       	st	X+, r24
    22fa:	9c 93       	st	X, r25
    22fc:	43 c0       	rjmp	.+134    	; 0x2384 <malloc+0x152>
    22fe:	fd 01       	movw	r30, r26
    2300:	82 81       	ldd	r24, Z+2	; 0x02
    2302:	93 81       	ldd	r25, Z+3	; 0x03
    2304:	9c 01       	movw	r18, r24
    2306:	d9 01       	movw	r26, r18
    2308:	10 97       	sbiw	r26, 0x00	; 0
    230a:	a1 f6       	brne	.-88     	; 0x22b4 <malloc+0x82>
    230c:	80 91 d9 0c 	lds	r24, 0x0CD9
    2310:	90 91 da 0c 	lds	r25, 0x0CDA
    2314:	89 2b       	or	r24, r25
    2316:	41 f4       	brne	.+16     	; 0x2328 <malloc+0xf6>
    2318:	80 91 98 0c 	lds	r24, 0x0C98
    231c:	90 91 99 0c 	lds	r25, 0x0C99
    2320:	90 93 da 0c 	sts	0x0CDA, r25
    2324:	80 93 d9 0c 	sts	0x0CD9, r24
    2328:	40 91 9a 0c 	lds	r20, 0x0C9A
    232c:	50 91 9b 0c 	lds	r21, 0x0C9B
    2330:	41 15       	cp	r20, r1
    2332:	51 05       	cpc	r21, r1
    2334:	41 f4       	brne	.+16     	; 0x2346 <malloc+0x114>
    2336:	4d b7       	in	r20, 0x3d	; 61
    2338:	5e b7       	in	r21, 0x3e	; 62
    233a:	80 91 96 0c 	lds	r24, 0x0C96
    233e:	90 91 97 0c 	lds	r25, 0x0C97
    2342:	48 1b       	sub	r20, r24
    2344:	59 0b       	sbc	r21, r25
    2346:	20 91 d9 0c 	lds	r18, 0x0CD9
    234a:	30 91 da 0c 	lds	r19, 0x0CDA
    234e:	24 17       	cp	r18, r20
    2350:	35 07       	cpc	r19, r21
    2352:	b0 f4       	brcc	.+44     	; 0x2380 <malloc+0x14e>
    2354:	ca 01       	movw	r24, r20
    2356:	82 1b       	sub	r24, r18
    2358:	93 0b       	sbc	r25, r19
    235a:	86 17       	cp	r24, r22
    235c:	97 07       	cpc	r25, r23
    235e:	80 f0       	brcs	.+32     	; 0x2380 <malloc+0x14e>
    2360:	ab 01       	movw	r20, r22
    2362:	4e 5f       	subi	r20, 0xFE	; 254
    2364:	5f 4f       	sbci	r21, 0xFF	; 255
    2366:	84 17       	cp	r24, r20
    2368:	95 07       	cpc	r25, r21
    236a:	50 f0       	brcs	.+20     	; 0x2380 <malloc+0x14e>
    236c:	42 0f       	add	r20, r18
    236e:	53 1f       	adc	r21, r19
    2370:	50 93 da 0c 	sts	0x0CDA, r21
    2374:	40 93 d9 0c 	sts	0x0CD9, r20
    2378:	f9 01       	movw	r30, r18
    237a:	61 93       	st	Z+, r22
    237c:	71 93       	st	Z+, r23
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <malloc+0x152>
    2380:	e0 e0       	ldi	r30, 0x00	; 0
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	cf 01       	movw	r24, r30
    2386:	df 91       	pop	r29
    2388:	cf 91       	pop	r28
    238a:	08 95       	ret

0000238c <free>:
    238c:	cf 93       	push	r28
    238e:	df 93       	push	r29
    2390:	00 97       	sbiw	r24, 0x00	; 0
    2392:	09 f4       	brne	.+2      	; 0x2396 <free+0xa>
    2394:	50 c0       	rjmp	.+160    	; 0x2436 <free+0xaa>
    2396:	ec 01       	movw	r28, r24
    2398:	22 97       	sbiw	r28, 0x02	; 2
    239a:	1b 82       	std	Y+3, r1	; 0x03
    239c:	1a 82       	std	Y+2, r1	; 0x02
    239e:	a0 91 db 0c 	lds	r26, 0x0CDB
    23a2:	b0 91 dc 0c 	lds	r27, 0x0CDC
    23a6:	10 97       	sbiw	r26, 0x00	; 0
    23a8:	09 f1       	breq	.+66     	; 0x23ec <free+0x60>
    23aa:	40 e0       	ldi	r20, 0x00	; 0
    23ac:	50 e0       	ldi	r21, 0x00	; 0
    23ae:	ac 17       	cp	r26, r28
    23b0:	bd 07       	cpc	r27, r29
    23b2:	08 f1       	brcs	.+66     	; 0x23f6 <free+0x6a>
    23b4:	bb 83       	std	Y+3, r27	; 0x03
    23b6:	aa 83       	std	Y+2, r26	; 0x02
    23b8:	fe 01       	movw	r30, r28
    23ba:	21 91       	ld	r18, Z+
    23bc:	31 91       	ld	r19, Z+
    23be:	e2 0f       	add	r30, r18
    23c0:	f3 1f       	adc	r31, r19
    23c2:	ae 17       	cp	r26, r30
    23c4:	bf 07       	cpc	r27, r31
    23c6:	79 f4       	brne	.+30     	; 0x23e6 <free+0x5a>
    23c8:	8d 91       	ld	r24, X+
    23ca:	9c 91       	ld	r25, X
    23cc:	11 97       	sbiw	r26, 0x01	; 1
    23ce:	28 0f       	add	r18, r24
    23d0:	39 1f       	adc	r19, r25
    23d2:	2e 5f       	subi	r18, 0xFE	; 254
    23d4:	3f 4f       	sbci	r19, 0xFF	; 255
    23d6:	39 83       	std	Y+1, r19	; 0x01
    23d8:	28 83       	st	Y, r18
    23da:	12 96       	adiw	r26, 0x02	; 2
    23dc:	8d 91       	ld	r24, X+
    23de:	9c 91       	ld	r25, X
    23e0:	13 97       	sbiw	r26, 0x03	; 3
    23e2:	9b 83       	std	Y+3, r25	; 0x03
    23e4:	8a 83       	std	Y+2, r24	; 0x02
    23e6:	41 15       	cp	r20, r1
    23e8:	51 05       	cpc	r21, r1
    23ea:	71 f4       	brne	.+28     	; 0x2408 <free+0x7c>
    23ec:	d0 93 dc 0c 	sts	0x0CDC, r29
    23f0:	c0 93 db 0c 	sts	0x0CDB, r28
    23f4:	20 c0       	rjmp	.+64     	; 0x2436 <free+0xaa>
    23f6:	12 96       	adiw	r26, 0x02	; 2
    23f8:	8d 91       	ld	r24, X+
    23fa:	9c 91       	ld	r25, X
    23fc:	13 97       	sbiw	r26, 0x03	; 3
    23fe:	ad 01       	movw	r20, r26
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	11 f0       	breq	.+4      	; 0x2408 <free+0x7c>
    2404:	dc 01       	movw	r26, r24
    2406:	d3 cf       	rjmp	.-90     	; 0x23ae <free+0x22>
    2408:	fa 01       	movw	r30, r20
    240a:	d3 83       	std	Z+3, r29	; 0x03
    240c:	c2 83       	std	Z+2, r28	; 0x02
    240e:	21 91       	ld	r18, Z+
    2410:	31 91       	ld	r19, Z+
    2412:	e2 0f       	add	r30, r18
    2414:	f3 1f       	adc	r31, r19
    2416:	ce 17       	cp	r28, r30
    2418:	df 07       	cpc	r29, r31
    241a:	69 f4       	brne	.+26     	; 0x2436 <free+0xaa>
    241c:	88 81       	ld	r24, Y
    241e:	99 81       	ldd	r25, Y+1	; 0x01
    2420:	28 0f       	add	r18, r24
    2422:	39 1f       	adc	r19, r25
    2424:	2e 5f       	subi	r18, 0xFE	; 254
    2426:	3f 4f       	sbci	r19, 0xFF	; 255
    2428:	fa 01       	movw	r30, r20
    242a:	31 83       	std	Z+1, r19	; 0x01
    242c:	20 83       	st	Z, r18
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	9b 81       	ldd	r25, Y+3	; 0x03
    2432:	93 83       	std	Z+3, r25	; 0x03
    2434:	82 83       	std	Z+2, r24	; 0x02
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	08 95       	ret

0000243c <__mulsi3>:
    243c:	62 9f       	mul	r22, r18
    243e:	d0 01       	movw	r26, r0
    2440:	73 9f       	mul	r23, r19
    2442:	f0 01       	movw	r30, r0
    2444:	82 9f       	mul	r24, r18
    2446:	e0 0d       	add	r30, r0
    2448:	f1 1d       	adc	r31, r1
    244a:	64 9f       	mul	r22, r20
    244c:	e0 0d       	add	r30, r0
    244e:	f1 1d       	adc	r31, r1
    2450:	92 9f       	mul	r25, r18
    2452:	f0 0d       	add	r31, r0
    2454:	83 9f       	mul	r24, r19
    2456:	f0 0d       	add	r31, r0
    2458:	74 9f       	mul	r23, r20
    245a:	f0 0d       	add	r31, r0
    245c:	65 9f       	mul	r22, r21
    245e:	f0 0d       	add	r31, r0
    2460:	99 27       	eor	r25, r25
    2462:	72 9f       	mul	r23, r18
    2464:	b0 0d       	add	r27, r0
    2466:	e1 1d       	adc	r30, r1
    2468:	f9 1f       	adc	r31, r25
    246a:	63 9f       	mul	r22, r19
    246c:	b0 0d       	add	r27, r0
    246e:	e1 1d       	adc	r30, r1
    2470:	f9 1f       	adc	r31, r25
    2472:	bd 01       	movw	r22, r26
    2474:	cf 01       	movw	r24, r30
    2476:	11 24       	eor	r1, r1
    2478:	08 95       	ret

0000247a <__udivmodhi4>:
    247a:	aa 1b       	sub	r26, r26
    247c:	bb 1b       	sub	r27, r27
    247e:	51 e1       	ldi	r21, 0x11	; 17
    2480:	07 c0       	rjmp	.+14     	; 0x2490 <__udivmodhi4_ep>

00002482 <__udivmodhi4_loop>:
    2482:	aa 1f       	adc	r26, r26
    2484:	bb 1f       	adc	r27, r27
    2486:	a6 17       	cp	r26, r22
    2488:	b7 07       	cpc	r27, r23
    248a:	10 f0       	brcs	.+4      	; 0x2490 <__udivmodhi4_ep>
    248c:	a6 1b       	sub	r26, r22
    248e:	b7 0b       	sbc	r27, r23

00002490 <__udivmodhi4_ep>:
    2490:	88 1f       	adc	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	5a 95       	dec	r21
    2496:	a9 f7       	brne	.-22     	; 0x2482 <__udivmodhi4_loop>
    2498:	80 95       	com	r24
    249a:	90 95       	com	r25
    249c:	bc 01       	movw	r22, r24
    249e:	cd 01       	movw	r24, r26
    24a0:	08 95       	ret

000024a2 <__udivmodsi4>:
    24a2:	a1 e2       	ldi	r26, 0x21	; 33
    24a4:	1a 2e       	mov	r1, r26
    24a6:	aa 1b       	sub	r26, r26
    24a8:	bb 1b       	sub	r27, r27
    24aa:	fd 01       	movw	r30, r26
    24ac:	0d c0       	rjmp	.+26     	; 0x24c8 <__udivmodsi4_ep>

000024ae <__udivmodsi4_loop>:
    24ae:	aa 1f       	adc	r26, r26
    24b0:	bb 1f       	adc	r27, r27
    24b2:	ee 1f       	adc	r30, r30
    24b4:	ff 1f       	adc	r31, r31
    24b6:	a2 17       	cp	r26, r18
    24b8:	b3 07       	cpc	r27, r19
    24ba:	e4 07       	cpc	r30, r20
    24bc:	f5 07       	cpc	r31, r21
    24be:	20 f0       	brcs	.+8      	; 0x24c8 <__udivmodsi4_ep>
    24c0:	a2 1b       	sub	r26, r18
    24c2:	b3 0b       	sbc	r27, r19
    24c4:	e4 0b       	sbc	r30, r20
    24c6:	f5 0b       	sbc	r31, r21

000024c8 <__udivmodsi4_ep>:
    24c8:	66 1f       	adc	r22, r22
    24ca:	77 1f       	adc	r23, r23
    24cc:	88 1f       	adc	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	1a 94       	dec	r1
    24d2:	69 f7       	brne	.-38     	; 0x24ae <__udivmodsi4_loop>
    24d4:	60 95       	com	r22
    24d6:	70 95       	com	r23
    24d8:	80 95       	com	r24
    24da:	90 95       	com	r25
    24dc:	9b 01       	movw	r18, r22
    24de:	ac 01       	movw	r20, r24
    24e0:	bd 01       	movw	r22, r26
    24e2:	cf 01       	movw	r24, r30
    24e4:	08 95       	ret

000024e6 <_exit>:
    24e6:	f8 94       	cli

000024e8 <__stop_program>:
    24e8:	ff cf       	rjmp	.-2      	; 0x24e8 <__stop_program>
