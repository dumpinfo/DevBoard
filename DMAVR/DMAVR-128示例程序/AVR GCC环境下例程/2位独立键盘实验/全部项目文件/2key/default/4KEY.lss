
4KEY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000190  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800110  00800110  00000234  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000005e  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000228  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000199  00000000  00000000  000004da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026b  00000000  00000000  00000673  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  000008e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000011e  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000098  00000000  00000000  00000a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000ae6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e9       	ldi	r30, 0x90	; 144
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 31       	cpi	r26, 0x11	; 17
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  c6:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <system_init>:
//			IO端口初始化
//***********************************************************************

void system_init()
{
    Data_IO=0xFF;             //数据口为输出
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8b bb       	out	0x1b, r24	; 27
    Data_DDR=0xFF;
  d2:	8a bb       	out	0x1a, r24	; 26

    PORTD=0xFF;               //74HC573的控制口，设置为输出
  d4:	82 bb       	out	0x12, r24	; 18
    DDRD=0xFF;
  d6:	81 bb       	out	0x11, r24	; 17
}
  d8:	08 95       	ret

000000da <Display_Key>:
//			IO端口初始化
//***********************************************************************

void system_init()
{
    Data_IO=0xFF;             //数据口为输出
  da:	9f ef       	ldi	r25, 0xFF	; 255
  dc:	9b bb       	out	0x1b, r25	; 27
    Data_DDR=0xFF;
  de:	9a bb       	out	0x1a, r25	; 26

    PORTD=0xFF;               //74HC573的控制口，设置为输出
  e0:	92 bb       	out	0x12, r25	; 18
    DDRD=0xFF;
  e2:	91 bb       	out	0x11, r25	; 17
    D_LE1;                    //控制数码管段数据的74HC573的LE管脚置高
    W_LE1;                    //控制数码管位的74HC573的LE管脚置高
    Data_IO=0x00;               //设置要显示的位，也就是哪一个数码管亮，这里是八个一起显示
    W_LE0;                    //锁存位数据，下面送上段数据以后，就显示出来了
	j=(j<<1);
    Data_IO=table[num];         //送要显示的数据，就是段数据，如显示0送的是0x3f
  e4:	e8 2f       	mov	r30, r24
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	e0 50       	subi	r30, 0x00	; 0
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	e0 81       	ld	r30, Z
  ee:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f0:	43 e3       	ldi	r20, 0x33	; 51
  f2:	57 e0       	ldi	r21, 0x07	; 7
	 uchar i,j;
	 system_init();
   j=0x01;                    //此数据用来控制位选
  for(i=0;i<8;i++)
  {
    D_LE1;                    //控制数码管段数据的74HC573的LE管脚置高
  f4:	94 9a       	sbi	0x12, 4	; 18
    W_LE1;                    //控制数码管位的74HC573的LE管脚置高
  f6:	95 9a       	sbi	0x12, 5	; 18
    Data_IO=0x00;               //设置要显示的位，也就是哪一个数码管亮，这里是八个一起显示
  f8:	1b ba       	out	0x1b, r1	; 27
    W_LE0;                    //锁存位数据，下面送上段数据以后，就显示出来了
  fa:	95 98       	cbi	0x12, 5	; 18
	j=(j<<1);
    Data_IO=table[num];         //送要显示的数据，就是段数据，如显示0送的是0x3f
  fc:	eb bb       	out	0x1b, r30	; 27
    D_LE0;                    //锁存段数据，数码管亮一个时间片刻
  fe:	94 98       	cbi	0x12, 4	; 18
 100:	ca 01       	movw	r24, r20
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <Display_Key+0x28>
void Display_Key(uchar num)
{
	 uchar i,j;
	 system_init();
   j=0x01;                    //此数据用来控制位选
  for(i=0;i<8;i++)
 106:	2f 5f       	subi	r18, 0xFF	; 255
 108:	28 30       	cpi	r18, 0x08	; 8
 10a:	a1 f7       	brne	.-24     	; 0xf4 <Display_Key+0x1a>
    D_LE0;                    //锁存段数据，数码管亮一个时间片刻
    delay_ms(1);              //显示一个时间片刻，会影响亮度和闪烁性

  }

}
 10c:	08 95       	ret

0000010e <keyboardscan>:
//**********************************************************************

uchar keyboardscan() 
{
  uchar statevalue,key_checkin,key_check;
  key_io=0xf0;                    //在IO口由输出方式变为输入方式时要延迟一个周期
 10e:	80 ef       	ldi	r24, 0xF0	; 240
 110:	85 bb       	out	0x15, r24	; 21
  key_io=0xf0;                    //采取写两次的方法延时
 112:	85 bb       	out	0x15, r24	; 21
  key_checkin=key_ior;            //读取IO口状态，判断是否有键按下
 114:	83 b3       	in	r24, 0x13	; 19
  if(key_checkin!=0xf0)           //IO口值发生变化则表示有键按下
 116:	80 3f       	cpi	r24, 0xF0	; 240
 118:	99 f0       	breq	.+38     	; 0x140 <keyboardscan+0x32>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e9       	ldi	r25, 0x90	; 144
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <keyboardscan+0x10>
  {
    delay_ms(20);                 //键盘消抖，延时20MS
    key_checkin=key_ior;
 122:	83 b3       	in	r24, 0x13	; 19
    if(key_checkin!=0xf0)
 124:	80 3f       	cpi	r24, 0xF0	; 240
 126:	81 f0       	breq	.+32     	; 0x148 <keyboardscan+0x3a>
    {
     
     key_check=key_ior;
 128:	83 b3       	in	r24, 0x13	; 19
     switch (key_check)
 12a:	80 3d       	cpi	r24, 0xD0	; 208
 12c:	19 f0       	breq	.+6      	; 0x134 <keyboardscan+0x26>
 12e:	80 3e       	cpi	r24, 0xE0	; 224
 130:	59 f4       	brne	.+22     	; 0x148 <keyboardscan+0x3a>
 132:	02 c0       	rjmp	.+4      	; 0x138 <keyboardscan+0x2a>
     {
     case 0xd0:key=2;break;
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	01 c0       	rjmp	.+2      	; 0x13a <keyboardscan+0x2c>
     case 0xe0:key=1;break;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 10 01 	sts	0x0110, r24
 13e:	04 c0       	rjmp	.+8      	; 0x148 <keyboardscan+0x3a>
    }
  }
  else
  {
  statevalue=0xff;                      //无按键时返回值
  key=statevalue;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	80 93 10 01 	sts	0x0110, r24
 146:	08 95       	ret
  return(key);
  }
}
 148:	08 95       	ret

0000014a <main>:
//			主程序
//*************************************************************************

void main()

{         
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
     
	  uint key_store;
	  DDRC=0x0f;                        //PC口上拉电阻使能
 14e:	8f e0       	ldi	r24, 0x0F	; 15
 150:	84 bb       	out	0x14, r24	; 20
      PORTC=0xf0;                       //PC高四位输入低四位输出
 152:	80 ef       	ldi	r24, 0xF0	; 240
 154:	85 bb       	out	0x15, r24	; 21


while(1)
  {

 keyboardscan();                         //键盘扫描，看是否有按键按下
 156:	0e 94 87 00 	call	0x10e	; 0x10e <keyboardscan>
    if(key!=0xff)                        //如果有按键按下，则显示该按键键值0~15
 15a:	80 91 10 01 	lds	r24, 0x0110
 15e:	8f 3f       	cpi	r24, 0xFF	; 255
 160:	89 f0       	breq	.+34     	; 0x184 <main+0x3a>
      {
	      { switch(key)
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	19 f0       	breq	.+6      	; 0x16c <main+0x22>
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	b1 f7       	brne	.-20     	; 0x156 <main+0xc>
 16a:	06 c0       	rjmp	.+12     	; 0x178 <main+0x2e>
		   { case 1: Display_Key(0x01);key_store=0x01;break;   //给不同的键赋键值
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 172:	c1 e0       	ldi	r28, 0x01	; 1
 174:	d0 e0       	ldi	r29, 0x00	; 0
 176:	ef cf       	rjmp	.-34     	; 0x156 <main+0xc>
		     case 2: Display_Key(0x02);key_store=0x02;break;
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 17e:	c2 e0       	ldi	r28, 0x02	; 2
 180:	d0 e0       	ldi	r29, 0x00	; 0
 182:	e9 cf       	rjmp	.-46     	; 0x156 <main+0xc>
          }
	
       }
     else
	 {
	 Display_Key(key_store);              //没有按键的时候显示上次的键值
 184:	8c 2f       	mov	r24, r28
 186:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 18a:	e5 cf       	rjmp	.-54     	; 0x156 <main+0xc>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
