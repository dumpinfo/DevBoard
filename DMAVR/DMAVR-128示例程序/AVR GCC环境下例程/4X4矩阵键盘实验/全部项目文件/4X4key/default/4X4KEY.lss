
4X4KEY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000334  000003c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000334  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800110  00800110  000003d8  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000005e  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000229  00000000  00000000  00000456  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000019b  00000000  00000000  0000067f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bd  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000122  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000148  00000000  00000000  00000d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000e92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 31       	cpi	r26, 0x11	; 17
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  c6:	0c 94 98 01 	jmp	0x330	; 0x330 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <system_init>:
//			IO端口初始化
//***********************************************************************

void system_init()
{
    Data_IO=0xFF;             //数据口为输出
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8b bb       	out	0x1b, r24	; 27
    Data_DDR=0xFF;
  d2:	8a bb       	out	0x1a, r24	; 26

    PORTD=0xFF;               //74HC573的控制口，设置为输出
  d4:	82 bb       	out	0x12, r24	; 18
    DDRD=0xFF;
  d6:	81 bb       	out	0x11, r24	; 17
}
  d8:	08 95       	ret

000000da <Display_Key>:
//			IO端口初始化
//***********************************************************************

void system_init()
{
    Data_IO=0xFF;             //数据口为输出
  da:	9f ef       	ldi	r25, 0xFF	; 255
  dc:	9b bb       	out	0x1b, r25	; 27
    Data_DDR=0xFF;
  de:	9a bb       	out	0x1a, r25	; 26

    PORTD=0xFF;               //74HC573的控制口，设置为输出
  e0:	92 bb       	out	0x12, r25	; 18
    DDRD=0xFF;
  e2:	91 bb       	out	0x11, r25	; 17
    D_LE1;                    //控制数码管段数据的74HC573的LE管脚置高
    W_LE1;                    //控制数码管位的74HC573的LE管脚置高
    Data_IO=0x00;               //设置要显示的位，也就是哪一个数码管亮，这里是八个一起显示
    W_LE0;                    //锁存位数据，下面送上段数据以后，就显示出来了
	j=(j<<1);
    Data_IO=table[num];         //送要显示的数据，就是段数据，如显示0送的是0x3f
  e4:	e8 2f       	mov	r30, r24
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	e0 50       	subi	r30, 0x00	; 0
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	e0 81       	ld	r30, Z
  ee:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f0:	43 e3       	ldi	r20, 0x33	; 51
  f2:	57 e0       	ldi	r21, 0x07	; 7
	 uchar i,j;
	 system_init();
   j=0x01;                    //此数据用来控制位选
  for(i=0;i<8;i++)
  {
    D_LE1;                    //控制数码管段数据的74HC573的LE管脚置高
  f4:	94 9a       	sbi	0x12, 4	; 18
    W_LE1;                    //控制数码管位的74HC573的LE管脚置高
  f6:	95 9a       	sbi	0x12, 5	; 18
    Data_IO=0x00;               //设置要显示的位，也就是哪一个数码管亮，这里是八个一起显示
  f8:	1b ba       	out	0x1b, r1	; 27
    W_LE0;                    //锁存位数据，下面送上段数据以后，就显示出来了
  fa:	95 98       	cbi	0x12, 5	; 18
	j=(j<<1);
    Data_IO=table[num];         //送要显示的数据，就是段数据，如显示0送的是0x3f
  fc:	eb bb       	out	0x1b, r30	; 27
    D_LE0;                    //锁存段数据，数码管亮一个时间片刻
  fe:	94 98       	cbi	0x12, 4	; 18
 100:	ca 01       	movw	r24, r20
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <Display_Key+0x28>
void Display_Key(uchar num)
{
	 uchar i,j;
	 system_init();
   j=0x01;                    //此数据用来控制位选
  for(i=0;i<8;i++)
 106:	2f 5f       	subi	r18, 0xFF	; 255
 108:	28 30       	cpi	r18, 0x08	; 8
 10a:	a1 f7       	brne	.-24     	; 0xf4 <Display_Key+0x1a>
    D_LE0;                    //锁存段数据，数码管亮一个时间片刻
    delay_ms(1);              //显示一个时间片刻，会影响亮度和闪烁性

  }

}
 10c:	08 95       	ret

0000010e <keyboardscan>:
//	键盘扫描子程序，采用逐键扫描的方式
//**********************************************************************
uchar keyboardscan(void) 
{
  uchar statevalue,key_checkin,key_check;
  key_io=0xf0;                    //在IO口由输出方式变为输入方式时要延迟一个周期
 10e:	80 ef       	ldi	r24, 0xF0	; 240
 110:	85 bb       	out	0x15, r24	; 21
  key_io=0xf0;                    //采取写两次的方法延时
 112:	85 bb       	out	0x15, r24	; 21
  key_checkin=key_ior;            //读取IO口状态，判断是否有键按下
 114:	83 b3       	in	r24, 0x13	; 19
  if(key_checkin!=0xf0)           //IO口值发生变化则表示有键按下
 116:	80 3f       	cpi	r24, 0xF0	; 240
 118:	09 f4       	brne	.+2      	; 0x11c <keyboardscan+0xe>
 11a:	6a c0       	rjmp	.+212    	; 0x1f0 <keyboardscan+0xe2>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e9       	ldi	r25, 0x90	; 144
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <keyboardscan+0x12>
  {
    delay_ms(20);                 //键盘消抖，延时20MS
    key_checkin=key_ior;
 124:	83 b3       	in	r24, 0x13	; 19
    if(key_checkin!=0xf0)
 126:	80 3f       	cpi	r24, 0xF0	; 240
 128:	09 f4       	brne	.+2      	; 0x12c <keyboardscan+0x1e>
 12a:	66 c0       	rjmp	.+204    	; 0x1f8 <keyboardscan+0xea>
    {
     key_io=0xfe;                 //逐行扫描开始
 12c:	8e ef       	ldi	r24, 0xFE	; 254
 12e:	85 bb       	out	0x15, r24	; 21
     key_io=0xfe;                 //写两次延时，下同
 130:	85 bb       	out	0x15, r24	; 21
     key_check=key_ior;
 132:	83 b3       	in	r24, 0x13	; 19
     switch (key_check)           //根据读到的IO口值判断按键的按下情况
 134:	8e 3b       	cpi	r24, 0xBE	; 190
 136:	69 f0       	breq	.+26     	; 0x152 <keyboardscan+0x44>
 138:	8f 3b       	cpi	r24, 0xBF	; 191
 13a:	18 f4       	brcc	.+6      	; 0x142 <keyboardscan+0x34>
 13c:	8e 37       	cpi	r24, 0x7E	; 126
 13e:	71 f4       	brne	.+28     	; 0x15c <keyboardscan+0x4e>
 140:	0a c0       	rjmp	.+20     	; 0x156 <keyboardscan+0x48>
 142:	8e 3d       	cpi	r24, 0xDE	; 222
 144:	21 f0       	breq	.+8      	; 0x14e <keyboardscan+0x40>
 146:	8e 3e       	cpi	r24, 0xEE	; 238
 148:	49 f4       	brne	.+18     	; 0x15c <keyboardscan+0x4e>
     {
     case 0xee:key=15;break;
 14a:	8f e0       	ldi	r24, 0x0F	; 15
 14c:	05 c0       	rjmp	.+10     	; 0x158 <keyboardscan+0x4a>
     case 0xde:key=11;break;
 14e:	8b e0       	ldi	r24, 0x0B	; 11
 150:	03 c0       	rjmp	.+6      	; 0x158 <keyboardscan+0x4a>
     case 0xbe:key=8;break;
 152:	88 e0       	ldi	r24, 0x08	; 8
 154:	01 c0       	rjmp	.+2      	; 0x158 <keyboardscan+0x4a>
     case 0x7e:key=4;break;
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	80 93 10 01 	sts	0x0110, r24
     }
     
     key_io=0xfd;
 15c:	8d ef       	ldi	r24, 0xFD	; 253
 15e:	85 bb       	out	0x15, r24	; 21
     key_io=0xfd;
 160:	85 bb       	out	0x15, r24	; 21
     key_check=key_ior;
 162:	83 b3       	in	r24, 0x13	; 19
     switch (key_check)
 164:	8d 3b       	cpi	r24, 0xBD	; 189
 166:	69 f0       	breq	.+26     	; 0x182 <keyboardscan+0x74>
 168:	8e 3b       	cpi	r24, 0xBE	; 190
 16a:	18 f4       	brcc	.+6      	; 0x172 <keyboardscan+0x64>
 16c:	8d 37       	cpi	r24, 0x7D	; 125
 16e:	71 f4       	brne	.+28     	; 0x18c <keyboardscan+0x7e>
 170:	0a c0       	rjmp	.+20     	; 0x186 <keyboardscan+0x78>
 172:	8d 3d       	cpi	r24, 0xDD	; 221
 174:	21 f0       	breq	.+8      	; 0x17e <keyboardscan+0x70>
 176:	8d 3e       	cpi	r24, 0xED	; 237
 178:	49 f4       	brne	.+18     	; 0x18c <keyboardscan+0x7e>
     {
     case 0xed:key=14;break;
 17a:	8e e0       	ldi	r24, 0x0E	; 14
 17c:	05 c0       	rjmp	.+10     	; 0x188 <keyboardscan+0x7a>
     case 0xdd:key=10;break;
 17e:	8a e0       	ldi	r24, 0x0A	; 10
 180:	03 c0       	rjmp	.+6      	; 0x188 <keyboardscan+0x7a>
     case 0xbd:key=7;break;
 182:	87 e0       	ldi	r24, 0x07	; 7
 184:	01 c0       	rjmp	.+2      	; 0x188 <keyboardscan+0x7a>
     case 0x7d:key=3;break;
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	80 93 10 01 	sts	0x0110, r24
     }
     
     key_io=0xfb;
 18c:	8b ef       	ldi	r24, 0xFB	; 251
 18e:	85 bb       	out	0x15, r24	; 21
     key_io=0xfb;
 190:	85 bb       	out	0x15, r24	; 21
    key_check=key_ior;
 192:	83 b3       	in	r24, 0x13	; 19
     switch (key_check)
 194:	8b 3b       	cpi	r24, 0xBB	; 187
 196:	71 f0       	breq	.+28     	; 0x1b4 <keyboardscan+0xa6>
 198:	8c 3b       	cpi	r24, 0xBC	; 188
 19a:	18 f4       	brcc	.+6      	; 0x1a2 <keyboardscan+0x94>
 19c:	8b 37       	cpi	r24, 0x7B	; 123
 19e:	79 f4       	brne	.+30     	; 0x1be <keyboardscan+0xb0>
 1a0:	0b c0       	rjmp	.+22     	; 0x1b8 <keyboardscan+0xaa>
 1a2:	8b 3d       	cpi	r24, 0xDB	; 219
 1a4:	21 f0       	breq	.+8      	; 0x1ae <keyboardscan+0xa0>
 1a6:	8b 3e       	cpi	r24, 0xEB	; 235
 1a8:	51 f4       	brne	.+20     	; 0x1be <keyboardscan+0xb0>
     {
     case 0xeb:key=13;break;
 1aa:	8d e0       	ldi	r24, 0x0D	; 13
 1ac:	06 c0       	rjmp	.+12     	; 0x1ba <keyboardscan+0xac>
     case 0xdb:key=0;break;
 1ae:	10 92 10 01 	sts	0x0110, r1
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <keyboardscan+0xb0>
     case 0xbb:key=6;break;
 1b4:	86 e0       	ldi	r24, 0x06	; 6
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <keyboardscan+0xac>
     case 0x7b:key=2;break;
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	80 93 10 01 	sts	0x0110, r24
     }
     
      key_io=0xf7;
 1be:	87 ef       	ldi	r24, 0xF7	; 247
 1c0:	85 bb       	out	0x15, r24	; 21
      key_io=0xf7;
 1c2:	85 bb       	out	0x15, r24	; 21
     key_check=key_ior;
 1c4:	83 b3       	in	r24, 0x13	; 19
     switch (key_check)
 1c6:	87 3b       	cpi	r24, 0xB7	; 183
 1c8:	69 f0       	breq	.+26     	; 0x1e4 <keyboardscan+0xd6>
 1ca:	88 3b       	cpi	r24, 0xB8	; 184
 1cc:	18 f4       	brcc	.+6      	; 0x1d4 <keyboardscan+0xc6>
 1ce:	87 37       	cpi	r24, 0x77	; 119
 1d0:	99 f4       	brne	.+38     	; 0x1f8 <keyboardscan+0xea>
 1d2:	0a c0       	rjmp	.+20     	; 0x1e8 <keyboardscan+0xda>
 1d4:	87 3d       	cpi	r24, 0xD7	; 215
 1d6:	21 f0       	breq	.+8      	; 0x1e0 <keyboardscan+0xd2>
 1d8:	87 3e       	cpi	r24, 0xE7	; 231
 1da:	71 f4       	brne	.+28     	; 0x1f8 <keyboardscan+0xea>
     {
     case 0xe7:key=12;break;
 1dc:	8c e0       	ldi	r24, 0x0C	; 12
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <keyboardscan+0xdc>
     case 0xd7:key=9;break;
 1e0:	89 e0       	ldi	r24, 0x09	; 9
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <keyboardscan+0xdc>
     case 0xb7:key=5;break;
 1e4:	85 e0       	ldi	r24, 0x05	; 5
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <keyboardscan+0xdc>
     case 0x77:key=1;break;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 10 01 	sts	0x0110, r24
 1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <keyboardscan+0xea>
    }
  }
  else
  {
  statevalue=0xff;                      //无按键时返回值
  key=statevalue;
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	80 93 10 01 	sts	0x0110, r24
 1f6:	08 95       	ret
  return(key);
  }
}
 1f8:	08 95       	ret

000001fa <main>:
//			主程序
//*************************************************************************

void main()

{         
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
	  uint key_store=0x01;
	  DDRC=0x0f;                        //PC口上拉电阻使能
 1fe:	8f e0       	ldi	r24, 0x0F	; 15
 200:	84 bb       	out	0x14, r24	; 20
      PORTC=0xf0;                       //PC高四位输入低四位输出
 202:	80 ef       	ldi	r24, 0xF0	; 240
 204:	85 bb       	out	0x15, r24	; 21
 206:	c1 e0       	ldi	r28, 0x01	; 1
 208:	d0 e0       	ldi	r29, 0x00	; 0


while(1)
  {

  keyboardscan();                         //键盘扫描，看是否有按键按下
 20a:	0e 94 87 00 	call	0x10e	; 0x10e <keyboardscan>
    if(key!=0xff)                        //如果有按键按下，则显示该按键键值0~15
 20e:	80 91 10 01 	lds	r24, 0x0110
 212:	8f 3f       	cpi	r24, 0xFF	; 255
 214:	09 f4       	brne	.+2      	; 0x218 <main+0x1e>
 216:	88 c0       	rjmp	.+272    	; 0x328 <main+0x12e>
      {
	      { switch(key)
 218:	87 30       	cpi	r24, 0x07	; 7
 21a:	09 f4       	brne	.+2      	; 0x21e <main+0x24>
 21c:	49 c0       	rjmp	.+146    	; 0x2b0 <main+0xb6>
 21e:	88 30       	cpi	r24, 0x08	; 8
 220:	70 f4       	brcc	.+28     	; 0x23e <main+0x44>
 222:	83 30       	cpi	r24, 0x03	; 3
 224:	69 f1       	breq	.+90     	; 0x280 <main+0x86>
 226:	84 30       	cpi	r24, 0x04	; 4
 228:	28 f4       	brcc	.+10     	; 0x234 <main+0x3a>
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	f9 f0       	breq	.+62     	; 0x26c <main+0x72>
 22e:	82 30       	cpi	r24, 0x02	; 2
 230:	08 f5       	brcc	.+66     	; 0x274 <main+0x7a>
 232:	50 c0       	rjmp	.+160    	; 0x2d4 <main+0xda>
 234:	85 30       	cpi	r24, 0x05	; 5
 236:	81 f1       	breq	.+96     	; 0x298 <main+0x9e>
 238:	86 30       	cpi	r24, 0x06	; 6
 23a:	a0 f5       	brcc	.+104    	; 0x2a4 <main+0xaa>
 23c:	27 c0       	rjmp	.+78     	; 0x28c <main+0x92>
 23e:	8b 30       	cpi	r24, 0x0B	; 11
 240:	09 f4       	brne	.+2      	; 0x244 <main+0x4a>
 242:	54 c0       	rjmp	.+168    	; 0x2ec <main+0xf2>
 244:	8c 30       	cpi	r24, 0x0C	; 12
 246:	30 f4       	brcc	.+12     	; 0x254 <main+0x5a>
 248:	89 30       	cpi	r24, 0x09	; 9
 24a:	f1 f1       	breq	.+124    	; 0x2c8 <main+0xce>
 24c:	8a 30       	cpi	r24, 0x0A	; 10
 24e:	08 f0       	brcs	.+2      	; 0x252 <main+0x58>
 250:	47 c0       	rjmp	.+142    	; 0x2e0 <main+0xe6>
 252:	34 c0       	rjmp	.+104    	; 0x2bc <main+0xc2>
 254:	8d 30       	cpi	r24, 0x0D	; 13
 256:	09 f4       	brne	.+2      	; 0x25a <main+0x60>
 258:	55 c0       	rjmp	.+170    	; 0x304 <main+0x10a>
 25a:	8d 30       	cpi	r24, 0x0D	; 13
 25c:	08 f4       	brcc	.+2      	; 0x260 <main+0x66>
 25e:	4c c0       	rjmp	.+152    	; 0x2f8 <main+0xfe>
 260:	8e 30       	cpi	r24, 0x0E	; 14
 262:	09 f4       	brne	.+2      	; 0x266 <main+0x6c>
 264:	55 c0       	rjmp	.+170    	; 0x310 <main+0x116>
 266:	8f 30       	cpi	r24, 0x0F	; 15
 268:	81 f6       	brne	.-96     	; 0x20a <main+0x10>
 26a:	58 c0       	rjmp	.+176    	; 0x31c <main+0x122>
		   {  
		     case 1: Display_Key(0x01);key_store=0x01;break;   //根据键值显示到数码管上
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 272:	c9 cf       	rjmp	.-110    	; 0x206 <main+0xc>
		     case 2: Display_Key(0x02);key_store=0x02;break;
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 27a:	c2 e0       	ldi	r28, 0x02	; 2
 27c:	d0 e0       	ldi	r29, 0x00	; 0
 27e:	c5 cf       	rjmp	.-118    	; 0x20a <main+0x10>
		     case 3: Display_Key(0x03);key_store=0x03;break;
 280:	83 e0       	ldi	r24, 0x03	; 3
 282:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 286:	c3 e0       	ldi	r28, 0x03	; 3
 288:	d0 e0       	ldi	r29, 0x00	; 0
 28a:	bf cf       	rjmp	.-130    	; 0x20a <main+0x10>
		     case 4: Display_Key(0x04);key_store=0x04;break;
 28c:	84 e0       	ldi	r24, 0x04	; 4
 28e:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 292:	c4 e0       	ldi	r28, 0x04	; 4
 294:	d0 e0       	ldi	r29, 0x00	; 0
 296:	b9 cf       	rjmp	.-142    	; 0x20a <main+0x10>
		     case 5: Display_Key(0x05);key_store=0x05;break;
 298:	85 e0       	ldi	r24, 0x05	; 5
 29a:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 29e:	c5 e0       	ldi	r28, 0x05	; 5
 2a0:	d0 e0       	ldi	r29, 0x00	; 0
 2a2:	b3 cf       	rjmp	.-154    	; 0x20a <main+0x10>
		     case 6: Display_Key(0x06);key_store=0x06;break;
 2a4:	86 e0       	ldi	r24, 0x06	; 6
 2a6:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 2aa:	c6 e0       	ldi	r28, 0x06	; 6
 2ac:	d0 e0       	ldi	r29, 0x00	; 0
 2ae:	ad cf       	rjmp	.-166    	; 0x20a <main+0x10>
		     case 7: Display_Key(0x07);key_store=0x07;break;
 2b0:	87 e0       	ldi	r24, 0x07	; 7
 2b2:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 2b6:	c7 e0       	ldi	r28, 0x07	; 7
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
 2ba:	a7 cf       	rjmp	.-178    	; 0x20a <main+0x10>
		     case 8: Display_Key(0x08);key_store=0x08;break;
 2bc:	88 e0       	ldi	r24, 0x08	; 8
 2be:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 2c2:	c8 e0       	ldi	r28, 0x08	; 8
 2c4:	d0 e0       	ldi	r29, 0x00	; 0
 2c6:	a1 cf       	rjmp	.-190    	; 0x20a <main+0x10>
		     case 9: Display_Key(0x09);key_store=0x09;break;
 2c8:	89 e0       	ldi	r24, 0x09	; 9
 2ca:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 2ce:	c9 e0       	ldi	r28, 0x09	; 9
 2d0:	d0 e0       	ldi	r29, 0x00	; 0
 2d2:	9b cf       	rjmp	.-202    	; 0x20a <main+0x10>
		     case 0: Display_Key(0x00);key_store=0x00;break;
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 2da:	c0 e0       	ldi	r28, 0x00	; 0
 2dc:	d0 e0       	ldi	r29, 0x00	; 0
 2de:	95 cf       	rjmp	.-214    	; 0x20a <main+0x10>
		     case 10: Display_Key(0x0a);key_store=0x0a;break;
 2e0:	8a e0       	ldi	r24, 0x0A	; 10
 2e2:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 2e6:	ca e0       	ldi	r28, 0x0A	; 10
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
 2ea:	8f cf       	rjmp	.-226    	; 0x20a <main+0x10>
		     case 11: Display_Key(0x0b);key_store=0x0b;break;
 2ec:	8b e0       	ldi	r24, 0x0B	; 11
 2ee:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 2f2:	cb e0       	ldi	r28, 0x0B	; 11
 2f4:	d0 e0       	ldi	r29, 0x00	; 0
 2f6:	89 cf       	rjmp	.-238    	; 0x20a <main+0x10>
		     case 12: Display_Key(0x0c);key_store=0x0c;break;
 2f8:	8c e0       	ldi	r24, 0x0C	; 12
 2fa:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 2fe:	cc e0       	ldi	r28, 0x0C	; 12
 300:	d0 e0       	ldi	r29, 0x00	; 0
 302:	83 cf       	rjmp	.-250    	; 0x20a <main+0x10>
		     case 13: Display_Key(0x0d);key_store=0x0d;break;
 304:	8d e0       	ldi	r24, 0x0D	; 13
 306:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 30a:	cd e0       	ldi	r28, 0x0D	; 13
 30c:	d0 e0       	ldi	r29, 0x00	; 0
 30e:	7d cf       	rjmp	.-262    	; 0x20a <main+0x10>
	         case 14: Display_Key(0x0e);key_store=0x0e;break;
 310:	8e e0       	ldi	r24, 0x0E	; 14
 312:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 316:	ce e0       	ldi	r28, 0x0E	; 14
 318:	d0 e0       	ldi	r29, 0x00	; 0
 31a:	77 cf       	rjmp	.-274    	; 0x20a <main+0x10>
             case 15: Display_Key(0x0f);key_store=0x0f;break;
 31c:	8f e0       	ldi	r24, 0x0F	; 15
 31e:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 322:	cf e0       	ldi	r28, 0x0F	; 15
 324:	d0 e0       	ldi	r29, 0x00	; 0
 326:	71 cf       	rjmp	.-286    	; 0x20a <main+0x10>
          }
	
       }
  else
	 {
	 Display_Key(key_store);              //没有按键的时候显示上次的键值
 328:	8c 2f       	mov	r24, r28
 32a:	0e 94 6d 00 	call	0xda	; 0xda <Display_Key>
 32e:	6d cf       	rjmp	.-294    	; 0x20a <main+0x10>

00000330 <_exit>:
 330:	f8 94       	cli

00000332 <__stop_program>:
 332:	ff cf       	rjmp	.-2      	; 0x332 <__stop_program>
