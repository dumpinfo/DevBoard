
LCD1602.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000003ee  00000462  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000090  00000000  00000000  0000049a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000087f  00000000  00000000  0000052a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000019b  00000000  00000000  00000da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000060d  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000127  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000365  00000000  00000000  0000170b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000108  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ee       	ldi	r30, 0xEE	; 238
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 95 01 	call	0x32a	; 0x32a <main>
  b6:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <system_init>:
//			初始化子程序
//*************************************************************************
void system_init()
{

	Data_IO = 0xFF;				        //电平设置
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	8b bb       	out	0x1b, r24	; 27
	Data_DDR = 0xFF;				        //方向输出
  c2:	8a bb       	out	0x1a, r24	; 26
	PORTF = 0xFF;                       //电平设置
  c4:	80 93 62 00 	sts	0x0062, r24
	DDRF = 0xFF;                        //方向输出
  c8:	80 93 61 00 	sts	0x0061, r24
    PORTD=0xFF;
  cc:	82 bb       	out	0x12, r24	; 18
	DDRD=0xFF;
  ce:	81 bb       	out	0x11, r24	; 17
	D_LE1;                             //关掉数码管，以免显示乱码                   
  d0:	94 9a       	sbi	0x12, 4	; 18
    W_LE1;                     
  d2:	95 9a       	sbi	0x12, 5	; 18
    Data_IO=0xFF;                      //关数码管            
  d4:	8b bb       	out	0x1b, r24	; 27
    W_LE0; 
  d6:	95 98       	cbi	0x12, 5	; 18
}
  d8:	08 95       	ret

000000da <LCD_write_com>:
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
  da:	e2 e6       	ldi	r30, 0x62	; 98
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	90 81       	ld	r25, Z
  e0:	9d 7f       	andi	r25, 0xFD	; 253
  e2:	90 83       	st	Z, r25
	RW_CLR;
  e4:	90 81       	ld	r25, Z
  e6:	9b 7f       	andi	r25, 0xFB	; 251
  e8:	90 83       	st	Z, r25
	EN_SET;
  ea:	90 81       	ld	r25, Z
  ec:	98 60       	ori	r25, 0x08	; 8
  ee:	90 83       	st	Z, r25
	Data_IO = com;
  f0:	8b bb       	out	0x1b, r24	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	94 e2       	ldi	r25, 0x24	; 36
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_write_com+0x1c>
	delay_ms(5);
	EN_CLR;
  fa:	80 81       	ld	r24, Z
  fc:	87 7f       	andi	r24, 0xF7	; 247
  fe:	80 83       	st	Z, r24
}
 100:	08 95       	ret

00000102 <LCD_write_data>:
//	显示屏数据写入函数
//***********************************************************************

void LCD_write_data(unsigned char data) 
{
	RS_SET;
 102:	e2 e6       	ldi	r30, 0x62	; 98
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	90 81       	ld	r25, Z
 108:	92 60       	ori	r25, 0x02	; 2
 10a:	90 83       	st	Z, r25
	RW_CLR;
 10c:	90 81       	ld	r25, Z
 10e:	9b 7f       	andi	r25, 0xFB	; 251
 110:	90 83       	st	Z, r25
	EN_SET;
 112:	90 81       	ld	r25, Z
 114:	98 60       	ori	r25, 0x08	; 8
 116:	90 83       	st	Z, r25
	Data_IO = data;
 118:	8b bb       	out	0x1b, r24	; 27
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	94 e2       	ldi	r25, 0x24	; 36
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_write_data+0x1c>
	delay_ms(5);
	EN_CLR;
 122:	80 81       	ld	r24, Z
 124:	87 7f       	andi	r24, 0xF7	; 247
 126:	80 83       	st	Z, r24
}
 128:	08 95       	ret

0000012a <LCD_clear>:
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 12a:	e2 e6       	ldi	r30, 0x62	; 98
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	80 83       	st	Z, r24
	RW_CLR;
 134:	80 81       	ld	r24, Z
 136:	8b 7f       	andi	r24, 0xFB	; 251
 138:	80 83       	st	Z, r24
	EN_SET;
 13a:	80 81       	ld	r24, Z
 13c:	88 60       	ori	r24, 0x08	; 8
 13e:	80 83       	st	Z, r24
	Data_IO = com;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	8b bb       	out	0x1b, r24	; 27
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	34 e2       	ldi	r19, 0x24	; 36
 148:	c9 01       	movw	r24, r18
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_clear+0x20>
	delay_ms(5);
	EN_CLR;
 14e:	80 81       	ld	r24, Z
 150:	87 7f       	andi	r24, 0xF7	; 247
 152:	80 83       	st	Z, r24
 154:	c9 01       	movw	r24, r18
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_clear+0x2c>

void LCD_clear(void) 
{
	LCD_write_com(0x01);
	delay_ms(5);
}
 15a:	08 95       	ret

0000015c <LCD_write_str>:
//***********************************************************************
//	显示屏字符串写入函数
//***********************************************************************

void LCD_write_str(unsigned char x,unsigned char y,unsigned char *s) 
{
 15c:	98 2f       	mov	r25, r24
 15e:	fa 01       	movw	r30, r20
	
    if (y == 0) 
 160:	66 23       	and	r22, r22
 162:	11 f4       	brne	.+4      	; 0x168 <LCD_write_str+0xc>
    {
    	LCD_write_com(0x80 + x);
 164:	90 58       	subi	r25, 0x80	; 128
 166:	01 c0       	rjmp	.+2      	; 0x16a <LCD_write_str+0xe>
    }
    else 
    {
    	LCD_write_com(0xC0 + x);
 168:	90 54       	subi	r25, 0x40	; 64
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 16a:	80 91 62 00 	lds	r24, 0x0062
 16e:	8d 7f       	andi	r24, 0xFD	; 253
 170:	80 93 62 00 	sts	0x0062, r24
	RW_CLR;
 174:	80 91 62 00 	lds	r24, 0x0062
 178:	8b 7f       	andi	r24, 0xFB	; 251
 17a:	80 93 62 00 	sts	0x0062, r24
	EN_SET;
 17e:	80 91 62 00 	lds	r24, 0x0062
 182:	88 60       	ori	r24, 0x08	; 8
 184:	80 93 62 00 	sts	0x0062, r24
	Data_IO = com;
 188:	9b bb       	out	0x1b, r25	; 27
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	94 e2       	ldi	r25, 0x24	; 36
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <LCD_write_str+0x32>
	delay_ms(5);
	EN_CLR;
 192:	80 91 62 00 	lds	r24, 0x0062
 196:	87 7f       	andi	r24, 0xF7	; 247
 198:	80 93 62 00 	sts	0x0062, r24
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	34 e2       	ldi	r19, 0x24	; 36
 1a0:	19 c0       	rjmp	.+50     	; 0x1d4 <LCD_write_str+0x78>
//	显示屏数据写入函数
//***********************************************************************

void LCD_write_data(unsigned char data) 
{
	RS_SET;
 1a2:	80 91 62 00 	lds	r24, 0x0062
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	80 93 62 00 	sts	0x0062, r24
	RW_CLR;
 1ac:	80 91 62 00 	lds	r24, 0x0062
 1b0:	8b 7f       	andi	r24, 0xFB	; 251
 1b2:	80 93 62 00 	sts	0x0062, r24
	EN_SET;
 1b6:	80 91 62 00 	lds	r24, 0x0062
 1ba:	88 60       	ori	r24, 0x08	; 8
 1bc:	80 93 62 00 	sts	0x0062, r24
	Data_IO = data;
 1c0:	9b bb       	out	0x1b, r25	; 27
 1c2:	c9 01       	movw	r24, r18
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCD_write_str+0x68>
	delay_ms(5);
	EN_CLR;
 1c8:	80 91 62 00 	lds	r24, 0x0062
 1cc:	87 7f       	andi	r24, 0xF7	; 247
 1ce:	80 93 62 00 	sts	0x0062, r24
    }
    
    while (*s) 
    {
    	LCD_write_data( *s);
    	s ++;
 1d2:	31 96       	adiw	r30, 0x01	; 1
    else 
    {
    	LCD_write_com(0xC0 + x);
    }
    
    while (*s) 
 1d4:	90 81       	ld	r25, Z
 1d6:	99 23       	and	r25, r25
 1d8:	21 f7       	brne	.-56     	; 0x1a2 <LCD_write_str+0x46>
    {
    	LCD_write_data( *s);
    	s ++;
    }
}
 1da:	08 95       	ret

000001dc <LCD_write_char>:
//***********************************************************************
//	显示屏单字符写入函数
//***********************************************************************

void LCD_write_char(unsigned char x,unsigned char y,unsigned char data) 
{
 1dc:	98 2f       	mov	r25, r24
	
    if (y == 0) 
 1de:	66 23       	and	r22, r22
 1e0:	11 f4       	brne	.+4      	; 0x1e6 <LCD_write_char+0xa>
    {
    	LCD_write_com(0x80 + x);
 1e2:	90 58       	subi	r25, 0x80	; 128
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <LCD_write_char+0xc>
    }
    else 
    {
    	LCD_write_com(0xC0 + x);
 1e6:	90 54       	subi	r25, 0x40	; 64
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 1e8:	80 91 62 00 	lds	r24, 0x0062
 1ec:	8d 7f       	andi	r24, 0xFD	; 253
 1ee:	80 93 62 00 	sts	0x0062, r24
	RW_CLR;
 1f2:	80 91 62 00 	lds	r24, 0x0062
 1f6:	8b 7f       	andi	r24, 0xFB	; 251
 1f8:	80 93 62 00 	sts	0x0062, r24
	EN_SET;
 1fc:	80 91 62 00 	lds	r24, 0x0062
 200:	88 60       	ori	r24, 0x08	; 8
 202:	80 93 62 00 	sts	0x0062, r24
	Data_IO = com;
 206:	9b bb       	out	0x1b, r25	; 27
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	94 e2       	ldi	r25, 0x24	; 36
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <LCD_write_char+0x30>
	delay_ms(5);
	EN_CLR;
 210:	80 91 62 00 	lds	r24, 0x0062
 214:	87 7f       	andi	r24, 0xF7	; 247
 216:	80 93 62 00 	sts	0x0062, r24
//	显示屏数据写入函数
//***********************************************************************

void LCD_write_data(unsigned char data) 
{
	RS_SET;
 21a:	80 91 62 00 	lds	r24, 0x0062
 21e:	82 60       	ori	r24, 0x02	; 2
 220:	80 93 62 00 	sts	0x0062, r24
	RW_CLR;
 224:	80 91 62 00 	lds	r24, 0x0062
 228:	8b 7f       	andi	r24, 0xFB	; 251
 22a:	80 93 62 00 	sts	0x0062, r24
	EN_SET;
 22e:	80 91 62 00 	lds	r24, 0x0062
 232:	88 60       	ori	r24, 0x08	; 8
 234:	80 93 62 00 	sts	0x0062, r24
	Data_IO = data;
 238:	4b bb       	out	0x1b, r20	; 27
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	94 e2       	ldi	r25, 0x24	; 36
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <LCD_write_char+0x62>
	delay_ms(5);
	EN_CLR;
 242:	80 91 62 00 	lds	r24, 0x0062
 246:	87 7f       	andi	r24, 0xF7	; 247
 248:	80 93 62 00 	sts	0x0062, r24
    {
    	LCD_write_com(0xC0 + x);
    }
    
    LCD_write_data( data);  
}
 24c:	08 95       	ret

0000024e <LCD_init>:
//	显示屏初始化函数
//***********************************************************************

void LCD_init(void) 
{
	DDRA = 0xFF;				        //I/O口方向设置
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	8a bb       	out	0x1a, r24	; 26
	DDRA |= (1 << PA5) | (1 << PA6) | (1 << PA7);
 252:	8a b3       	in	r24, 0x1a	; 26
 254:	80 6e       	ori	r24, 0xE0	; 224
 256:	8a bb       	out	0x1a, r24	; 26
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 258:	e2 e6       	ldi	r30, 0x62	; 98
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	8d 7f       	andi	r24, 0xFD	; 253
 260:	80 83       	st	Z, r24
	RW_CLR;
 262:	80 81       	ld	r24, Z
 264:	8b 7f       	andi	r24, 0xFB	; 251
 266:	80 83       	st	Z, r24
	EN_SET;
 268:	80 81       	ld	r24, Z
 26a:	88 60       	ori	r24, 0x08	; 8
 26c:	80 83       	st	Z, r24
	Data_IO = com;
 26e:	88 e3       	ldi	r24, 0x38	; 56
 270:	8b bb       	out	0x1b, r24	; 27
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	34 e2       	ldi	r19, 0x24	; 36
 276:	c9 01       	movw	r24, r18
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <LCD_init+0x2a>
	delay_ms(5);
	EN_CLR;
 27c:	80 81       	ld	r24, Z
 27e:	87 7f       	andi	r24, 0xF7	; 247
 280:	80 83       	st	Z, r24
 282:	c9 01       	movw	r24, r18
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <LCD_init+0x36>
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 288:	80 81       	ld	r24, Z
 28a:	8d 7f       	andi	r24, 0xFD	; 253
 28c:	80 83       	st	Z, r24
	RW_CLR;
 28e:	80 81       	ld	r24, Z
 290:	8b 7f       	andi	r24, 0xFB	; 251
 292:	80 83       	st	Z, r24
	EN_SET;
 294:	80 81       	ld	r24, Z
 296:	88 60       	ori	r24, 0x08	; 8
 298:	80 83       	st	Z, r24
	Data_IO = com;
 29a:	88 e0       	ldi	r24, 0x08	; 8
 29c:	8b bb       	out	0x1b, r24	; 27
 29e:	c9 01       	movw	r24, r18
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <LCD_init+0x52>
	delay_ms(5);
	EN_CLR;
 2a4:	80 81       	ld	r24, Z
 2a6:	87 7f       	andi	r24, 0xF7	; 247
 2a8:	80 83       	st	Z, r24
 2aa:	c9 01       	movw	r24, r18
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <LCD_init+0x5e>
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 2b0:	80 81       	ld	r24, Z
 2b2:	8d 7f       	andi	r24, 0xFD	; 253
 2b4:	80 83       	st	Z, r24
	RW_CLR;
 2b6:	80 81       	ld	r24, Z
 2b8:	8b 7f       	andi	r24, 0xFB	; 251
 2ba:	80 83       	st	Z, r24
	EN_SET;
 2bc:	80 81       	ld	r24, Z
 2be:	88 60       	ori	r24, 0x08	; 8
 2c0:	80 83       	st	Z, r24
	Data_IO = com;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	8b bb       	out	0x1b, r24	; 27
 2c6:	c9 01       	movw	r24, r18
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCD_init+0x7a>
	delay_ms(5);
	EN_CLR;
 2cc:	80 81       	ld	r24, Z
 2ce:	87 7f       	andi	r24, 0xF7	; 247
 2d0:	80 83       	st	Z, r24
 2d2:	c9 01       	movw	r24, r18
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_init+0x86>
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 2d8:	80 81       	ld	r24, Z
 2da:	8d 7f       	andi	r24, 0xFD	; 253
 2dc:	80 83       	st	Z, r24
	RW_CLR;
 2de:	80 81       	ld	r24, Z
 2e0:	8b 7f       	andi	r24, 0xFB	; 251
 2e2:	80 83       	st	Z, r24
	EN_SET;
 2e4:	80 81       	ld	r24, Z
 2e6:	88 60       	ori	r24, 0x08	; 8
 2e8:	80 83       	st	Z, r24
	Data_IO = com;
 2ea:	86 e0       	ldi	r24, 0x06	; 6
 2ec:	8b bb       	out	0x1b, r24	; 27
 2ee:	c9 01       	movw	r24, r18
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCD_init+0xa2>
	delay_ms(5);
	EN_CLR;
 2f4:	80 81       	ld	r24, Z
 2f6:	87 7f       	andi	r24, 0xF7	; 247
 2f8:	80 83       	st	Z, r24
 2fa:	c9 01       	movw	r24, r18
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCD_init+0xae>
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 300:	80 81       	ld	r24, Z
 302:	8d 7f       	andi	r24, 0xFD	; 253
 304:	80 83       	st	Z, r24
	RW_CLR;
 306:	80 81       	ld	r24, Z
 308:	8b 7f       	andi	r24, 0xFB	; 251
 30a:	80 83       	st	Z, r24
	EN_SET;
 30c:	80 81       	ld	r24, Z
 30e:	88 60       	ori	r24, 0x08	; 8
 310:	80 83       	st	Z, r24
	Data_IO = com;
 312:	8c e0       	ldi	r24, 0x0C	; 12
 314:	8b bb       	out	0x1b, r24	; 27
 316:	c9 01       	movw	r24, r18
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCD_init+0xca>
	delay_ms(5);
	EN_CLR;
 31c:	80 81       	ld	r24, Z
 31e:	87 7f       	andi	r24, 0xF7	; 247
 320:	80 83       	st	Z, r24
 322:	c9 01       	movw	r24, r18
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <LCD_init+0xd6>
	delay_ms(5);
    LCD_write_com(0x06);				//显示光标移动设置
	delay_ms(5);
	LCD_write_com(0x0C);				//显示开及光标设置
    delay_ms(5);
}
 328:	08 95       	ret

0000032a <main>:

//*************************************************************************
//			主程序
//*************************************************************************
void main(void) 
{
 32a:	cf 92       	push	r12
 32c:	df 92       	push	r13
 32e:	ef 92       	push	r14
 330:	ff 92       	push	r15
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	df 93       	push	r29

	unsigned char i;
	unsigned char *p;
    system_init();                                //系统初始化，设置IO口属性
 33a:	0e 94 5f 00 	call	0xbe	; 0xbe <system_init>
 33e:	88 ee       	ldi	r24, 0xE8	; 232
 340:	93 e0       	ldi	r25, 0x03	; 3
 342:	28 eb       	ldi	r18, 0xB8	; 184
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	f9 01       	movw	r30, r18
 348:	31 97       	sbiw	r30, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <main+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 34c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 34e:	d9 f7       	brne	.-10     	; 0x346 <main+0x1c>
	delay_ms(100);                                //延时100ms
	LCD_init();                                   //液晶参数初始化设置
 350:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_init>
void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
	RW_CLR;
	EN_SET;
	Data_IO = com;
 354:	01 e0       	ldi	r16, 0x01	; 1
 356:	c1 2c       	mov	r12, r1
 358:	94 e2       	ldi	r25, 0x24	; 36
 35a:	d9 2e       	mov	r13, r25
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 35c:	88 eb       	ldi	r24, 0xB8	; 184
 35e:	e8 2e       	mov	r14, r24
 360:	f1 2c       	mov	r15, r1
 362:	80 91 62 00 	lds	r24, 0x0062
 366:	8d 7f       	andi	r24, 0xFD	; 253
 368:	80 93 62 00 	sts	0x0062, r24
	RW_CLR;
 36c:	80 91 62 00 	lds	r24, 0x0062
 370:	8b 7f       	andi	r24, 0xFB	; 251
 372:	80 93 62 00 	sts	0x0062, r24
	EN_SET;
 376:	80 91 62 00 	lds	r24, 0x0062
 37a:	88 60       	ori	r24, 0x08	; 8
 37c:	80 93 62 00 	sts	0x0062, r24
	Data_IO = com;
 380:	0b bb       	out	0x1b, r16	; 27
 382:	c6 01       	movw	r24, r12
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <main+0x5a>
	delay_ms(5);
	EN_CLR;
 388:	80 91 62 00 	lds	r24, 0x0062
 38c:	87 7f       	andi	r24, 0xF7	; 247
 38e:	80 93 62 00 	sts	0x0062, r24
 392:	c6 01       	movw	r24, r12
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <main+0x6a>
 while (1) 
   {
		i = 1;
		p = "www.avrgcc.com";                    //字符串输出显示
		LCD_clear();
		LCD_write_str(0,0,"Welcome");
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	4f e0       	ldi	r20, 0x0F	; 15
 39e:	51 e0       	ldi	r21, 0x01	; 1
 3a0:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_write_str>
 3a4:	84 ec       	ldi	r24, 0xC4	; 196
 3a6:	99 e0       	ldi	r25, 0x09	; 9
 3a8:	f7 01       	movw	r30, r14
 3aa:	31 97       	sbiw	r30, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <main+0x80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3b0:	d9 f7       	brne	.-10     	; 0x3a8 <main+0x7e>
 3b2:	11 e0       	ldi	r17, 0x01	; 1
 3b4:	c0 e0       	ldi	r28, 0x00	; 0
 3b6:	d1 e0       	ldi	r29, 0x01	; 1
 3b8:	0d c0       	rjmp	.+26     	; 0x3d4 <main+0xaa>
		delay_ms(250);
		
		while (*p) {
			LCD_write_char(i,1,*p);          //单个字符输出显示
 3ba:	81 2f       	mov	r24, r17
 3bc:	61 e0       	ldi	r22, 0x01	; 1
 3be:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_write_char>
 3c2:	84 ec       	ldi	r24, 0xC4	; 196
 3c4:	99 e0       	ldi	r25, 0x09	; 9
 3c6:	f7 01       	movw	r30, r14
 3c8:	31 97       	sbiw	r30, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <main+0x9e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3ce:	d9 f7       	brne	.-10     	; 0x3c6 <main+0x9c>
			i ++;
 3d0:	1f 5f       	subi	r17, 0xFF	; 255
			p ++;
 3d2:	21 96       	adiw	r28, 0x01	; 1
		p = "www.avrgcc.com";                    //字符串输出显示
		LCD_clear();
		LCD_write_str(0,0,"Welcome");
		delay_ms(250);
		
		while (*p) {
 3d4:	48 81       	ld	r20, Y
 3d6:	44 23       	and	r20, r20
 3d8:	81 f7       	brne	.-32     	; 0x3ba <main+0x90>
 3da:	84 ec       	ldi	r24, 0xC4	; 196
 3dc:	99 e0       	ldi	r25, 0x09	; 9
 3de:	f7 01       	movw	r30, r14
 3e0:	31 97       	sbiw	r30, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <main+0xb6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3e6:	d9 f7       	brne	.-10     	; 0x3de <main+0xb4>
 3e8:	bc cf       	rjmp	.-136    	; 0x362 <main+0x38>

000003ea <_exit>:
 3ea:	f8 94       	cli

000003ec <__stop_program>:
 3ec:	ff cf       	rjmp	.-2      	; 0x3ec <__stop_program>
