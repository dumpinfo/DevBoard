
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800100  00800100  00000196  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005b  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000186  00000000  00000000  00000211  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000d5  00000000  00000000  00000397  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000018c  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000005f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ec  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000018  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e2       	ldi	r30, 0x22	; 34
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 30       	cpi	r26, 0x05	; 5
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  c6:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <system_init>:
//			初始化子程序
//*************************************************************************
void system_init()
{

	PORTB = 0x00;		         //电平设置
  ce:	18 ba       	out	0x18, r1	; 24
	DDRB = 0xFF;		         //方向输出
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	87 bb       	out	0x17, r24	; 23

}
  d4:	08 95       	ret

000000d6 <SPI_init>:
void SPI_init()
{
  SPCR=(1<<SPE)|(1<<MSTR);              //主机方式，SPI模式为0，SCK频率为Fosc/4
  d6:	80 e5       	ldi	r24, 0x50	; 80
  d8:	8d b9       	out	0x0d, r24	; 13
  
}
  da:	08 95       	ret

000000dc <main>:
//			初始化子程序
//*************************************************************************
void system_init()
{

	PORTB = 0x00;		         //电平设置
  dc:	18 ba       	out	0x18, r1	; 24
	DDRB = 0xFF;		         //方向输出
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	87 bb       	out	0x17, r24	; 23

}
void SPI_init()
{
  SPCR=(1<<SPE)|(1<<MSTR);              //主机方式，SPI模式为0，SCK频率为Fosc/4
  e2:	80 e5       	ldi	r24, 0x50	; 80
  e4:	8d b9       	out	0x0d, r24	; 13
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ea:	43 e3       	ldi	r20, 0x33	; 51
  ec:	57 e0       	ldi	r21, 0x07	; 7
  ee:	10 c0       	rjmp	.+32     	; 0x110 <main+0x34>
  SPI_init();                                  //SPI初始化
  while(1)
  {
    for(da_data=0x0000;da_data<0x0ffc;da_data++)
    {
      cs0;                                    //使能DAC
  f0:	c0 98       	cbi	0x18, 0	; 24
      da_data2=(da_data&0xff00);               //提取数据的高8位
      da_data2>>=8;                            //高8位移到低8位，便于赋值
      SPDR=da_data2;                           //写数据的高8位到SPI数据寄存器
  f2:	c9 01       	movw	r24, r18
  f4:	80 70       	andi	r24, 0x00	; 0
  f6:	9f b9       	out	0x0f, r25	; 15
      SPDR=da_data&&0x00ff;                    //写数据的低8位到SPI数据寄存器
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	21 15       	cp	r18, r1
  fc:	31 05       	cpc	r19, r1
  fe:	09 f0       	breq	.+2      	; 0x102 <main+0x26>
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	8f b9       	out	0x0f, r24	; 15
 104:	ca 01       	movw	r24, r20
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x2a>
      delay_ms(1);
      cs1;                                    //关闭使能
 10a:	c0 9a       	sbi	0x18, 0	; 24
 10c:	2f 5f       	subi	r18, 0xFF	; 255
 10e:	3f 4f       	sbci	r19, 0xFF	; 255
{ 
  system_init();                               //系统IO口初始化
  SPI_init();                                  //SPI初始化
  while(1)
  {
    for(da_data=0x0000;da_data<0x0ffc;da_data++)
 110:	8f e0       	ldi	r24, 0x0F	; 15
 112:	2c 3f       	cpi	r18, 0xFC	; 252
 114:	38 07       	cpc	r19, r24
 116:	61 f7       	brne	.-40     	; 0xf0 <main+0x14>
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 cf       	rjmp	.-14     	; 0x110 <main+0x34>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
