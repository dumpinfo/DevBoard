
TFT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000bf0  00800100  000024c8  0000255c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800cf0  00800cf0  0000314c  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  0000314c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002e4  00000000  00000000  000031ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000111b  00000000  00000000  00003490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000481  00000000  00000000  000045ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000133d  00000000  00000000  00004a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00005d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000347  00000000  00000000  00005f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c06  00000000  00000000  00006283  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00006e89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <LCD_WR_REG+0x36>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d0 e1       	ldi	r29, 0x10	; 16
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	1c e0       	ldi	r17, 0x0C	; 12
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	e8 ec       	ldi	r30, 0xC8	; 200
      be:	f4 e2       	ldi	r31, 0x24	; 36
      c0:	00 e0       	ldi	r16, 0x00	; 0
      c2:	0b bf       	out	0x3b, r16	; 59
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
      c6:	07 90       	elpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a0 3f       	cpi	r26, 0xF0	; 240
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
      d0:	1d e0       	ldi	r17, 0x0D	; 13
      d2:	a0 ef       	ldi	r26, 0xF0	; 240
      d4:	bc e0       	ldi	r27, 0x0C	; 12
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	a5 30       	cpi	r26, 0x05	; 5
      dc:	b1 07       	cpc	r27, r17
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <main>
      e4:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <TimeGet>:
//***********************************************************************
//         从DS1302中读取时钟数据并处理
//***********************************************************************
void TimeGet()
 {
    time_hour=((time_buf[4]&0x1F) >> 4)*10+(time_buf[4] & 0x0F);	//小时
      ec:	40 91 04 01 	lds	r20, 0x0104
      f0:	84 2f       	mov	r24, r20
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	8f 71       	andi	r24, 0x1F	; 31
      f6:	90 70       	andi	r25, 0x00	; 0
      f8:	95 95       	asr	r25
      fa:	87 95       	ror	r24
      fc:	95 95       	asr	r25
      fe:	87 95       	ror	r24
     100:	95 95       	asr	r25
     102:	87 95       	ror	r24
     104:	95 95       	asr	r25
     106:	87 95       	ror	r24
     108:	9c 01       	movw	r18, r24
     10a:	22 0f       	add	r18, r18
     10c:	33 1f       	adc	r19, r19
     10e:	22 0f       	add	r18, r18
     110:	33 1f       	adc	r19, r19
     112:	22 0f       	add	r18, r18
     114:	33 1f       	adc	r19, r19
     116:	88 0f       	add	r24, r24
     118:	99 1f       	adc	r25, r25
     11a:	28 0f       	add	r18, r24
     11c:	39 1f       	adc	r19, r25
     11e:	84 2f       	mov	r24, r20
     120:	8f 70       	andi	r24, 0x0F	; 15
     122:	82 0f       	add	r24, r18
     124:	80 93 01 0d 	sts	0x0D01, r24
	time_h=(time_buf[4] >> 4)&0x02;									//判断是上午还是下午
     128:	42 95       	swap	r20
     12a:	42 70       	andi	r20, 0x02	; 2
     12c:	40 93 f1 0c 	sts	0x0CF1, r20
	time_min=(time_buf[5] >> 4)*10+(time_buf[5] & 0x0F);			//分钟
     130:	20 91 05 01 	lds	r18, 0x0105
     134:	82 2f       	mov	r24, r18
     136:	82 95       	swap	r24
     138:	8f 70       	andi	r24, 0x0F	; 15
     13a:	3a e0       	ldi	r19, 0x0A	; 10
     13c:	83 9f       	mul	r24, r19
     13e:	c0 01       	movw	r24, r0
     140:	11 24       	eor	r1, r1
     142:	2f 70       	andi	r18, 0x0F	; 15
     144:	28 0f       	add	r18, r24
     146:	20 93 f7 0c 	sts	0x0CF7, r18
	time_sec=(time_buf[6] >> 4)*10+(time_buf[6] & 0x0F);			//秒
     14a:	20 91 06 01 	lds	r18, 0x0106
     14e:	82 2f       	mov	r24, r18
     150:	82 95       	swap	r24
     152:	8f 70       	andi	r24, 0x0F	; 15
     154:	83 9f       	mul	r24, r19
     156:	c0 01       	movw	r24, r0
     158:	11 24       	eor	r1, r1
     15a:	2f 70       	andi	r18, 0x0F	; 15
     15c:	28 0f       	add	r18, r24
     15e:	20 93 00 0d 	sts	0x0D00, r18
	data_yearq=(time_buf[0] >> 4);      		//年数据的千位
     162:	80 91 00 01 	lds	r24, 0x0100
     166:	98 2f       	mov	r25, r24
     168:	92 95       	swap	r25
     16a:	9f 70       	andi	r25, 0x0F	; 15
     16c:	90 93 f4 0c 	sts	0x0CF4, r25
	data_yearb=(time_buf[0] & 0x0F);    		//年数据的百位
     170:	8f 70       	andi	r24, 0x0F	; 15
     172:	80 93 fa 0c 	sts	0x0CFA, r24
	data_years=(time_buf[1] >> 4);      		//年数据的十位
     176:	80 91 01 01 	lds	r24, 0x0101
     17a:	98 2f       	mov	r25, r24
     17c:	92 95       	swap	r25
     17e:	9f 70       	andi	r25, 0x0F	; 15
     180:	90 93 f5 0c 	sts	0x0CF5, r25
	data_yearg=(time_buf[1] & 0x0F);            //年数据的个位
     184:	8f 70       	andi	r24, 0x0F	; 15
     186:	80 93 f3 0c 	sts	0x0CF3, r24
	data_months=(time_buf[2] >> 4);             //月数据的十位
     18a:	80 91 02 01 	lds	r24, 0x0102
     18e:	98 2f       	mov	r25, r24
     190:	92 95       	swap	r25
     192:	9f 70       	andi	r25, 0x0F	; 15
     194:	90 93 03 0d 	sts	0x0D03, r25
	data_monthg=(time_buf[2] & 0x0F);			//月数据的个位
     198:	8f 70       	andi	r24, 0x0F	; 15
     19a:	80 93 fb 0c 	sts	0x0CFB, r24
	data_days=(time_buf[3] >> 4);				//日数据的十位
     19e:	80 91 03 01 	lds	r24, 0x0103
     1a2:	98 2f       	mov	r25, r24
     1a4:	92 95       	swap	r25
     1a6:	9f 70       	andi	r25, 0x0F	; 15
     1a8:	90 93 fc 0c 	sts	0x0CFC, r25
	data_dayg=(time_buf[3] & 0x0F);				//日数据的个位
     1ac:	8f 70       	andi	r24, 0x0F	; 15
     1ae:	80 93 fe 0c 	sts	0x0CFE, r24
	week=(time_buf[7] & 0x0F);					//星期数据
     1b2:	80 91 07 01 	lds	r24, 0x0107
     1b6:	8f 70       	andi	r24, 0x0F	; 15
     1b8:	80 93 f2 0c 	sts	0x0CF2, r24
 }
     1bc:	08 95       	ret

000001be <DisplayData>:
//***********************************************************************
//         显示日期和星期
//***********************************************************************
void DisplayData()
 {
    DisplayChar(data_yearq+'0',0,9,0x0eee);
     1be:	80 91 f4 0c 	lds	r24, 0x0CF4
     1c2:	80 5d       	subi	r24, 0xD0	; 208
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	49 e0       	ldi	r20, 0x09	; 9
     1c8:	2e ee       	ldi	r18, 0xEE	; 238
     1ca:	3e e0       	ldi	r19, 0x0E	; 14
     1cc:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <DisplayChar>
	DisplayChar(data_yearb+'0',1,9,0x0eee);
     1d0:	80 91 fa 0c 	lds	r24, 0x0CFA
     1d4:	80 5d       	subi	r24, 0xD0	; 208
     1d6:	61 e0       	ldi	r22, 0x01	; 1
     1d8:	49 e0       	ldi	r20, 0x09	; 9
     1da:	2e ee       	ldi	r18, 0xEE	; 238
     1dc:	3e e0       	ldi	r19, 0x0E	; 14
     1de:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <DisplayChar>
	DisplayChar(data_years+'0',2,9,0x0eee);
     1e2:	80 91 f5 0c 	lds	r24, 0x0CF5
     1e6:	80 5d       	subi	r24, 0xD0	; 208
     1e8:	62 e0       	ldi	r22, 0x02	; 2
     1ea:	49 e0       	ldi	r20, 0x09	; 9
     1ec:	2e ee       	ldi	r18, 0xEE	; 238
     1ee:	3e e0       	ldi	r19, 0x0E	; 14
     1f0:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <DisplayChar>
	DisplayChar(data_yearg+'0',3,9,0x0eee);
     1f4:	80 91 f3 0c 	lds	r24, 0x0CF3
     1f8:	80 5d       	subi	r24, 0xD0	; 208
     1fa:	63 e0       	ldi	r22, 0x03	; 3
     1fc:	49 e0       	ldi	r20, 0x09	; 9
     1fe:	2e ee       	ldi	r18, 0xEE	; 238
     200:	3e e0       	ldi	r19, 0x0E	; 14
     202:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <DisplayChar>
    
	DisplayChar('/',4,9,0x0eee);  					// "/"符号
     206:	8f e2       	ldi	r24, 0x2F	; 47
     208:	64 e0       	ldi	r22, 0x04	; 4
     20a:	49 e0       	ldi	r20, 0x09	; 9
     20c:	2e ee       	ldi	r18, 0xEE	; 238
     20e:	3e e0       	ldi	r19, 0x0E	; 14
     210:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <DisplayChar>

	DisplayChar(data_months+'0',5,9,0x0eee);
     214:	80 91 03 0d 	lds	r24, 0x0D03
     218:	80 5d       	subi	r24, 0xD0	; 208
     21a:	65 e0       	ldi	r22, 0x05	; 5
     21c:	49 e0       	ldi	r20, 0x09	; 9
     21e:	2e ee       	ldi	r18, 0xEE	; 238
     220:	3e e0       	ldi	r19, 0x0E	; 14
     222:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <DisplayChar>
	DisplayChar(data_monthg+'0',6,9,0x0eee);
     226:	80 91 fb 0c 	lds	r24, 0x0CFB
     22a:	80 5d       	subi	r24, 0xD0	; 208
     22c:	66 e0       	ldi	r22, 0x06	; 6
     22e:	49 e0       	ldi	r20, 0x09	; 9
     230:	2e ee       	ldi	r18, 0xEE	; 238
     232:	3e e0       	ldi	r19, 0x0E	; 14
     234:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <DisplayChar>
	DisplayChar('/',7,9,0x0eee);  					// "/"符号
     238:	8f e2       	ldi	r24, 0x2F	; 47
     23a:	67 e0       	ldi	r22, 0x07	; 7
     23c:	49 e0       	ldi	r20, 0x09	; 9
     23e:	2e ee       	ldi	r18, 0xEE	; 238
     240:	3e e0       	ldi	r19, 0x0E	; 14
     242:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <DisplayChar>


	DisplayChar(data_days+'0',8,9,0x0eee);
     246:	80 91 fc 0c 	lds	r24, 0x0CFC
     24a:	80 5d       	subi	r24, 0xD0	; 208
     24c:	68 e0       	ldi	r22, 0x08	; 8
     24e:	49 e0       	ldi	r20, 0x09	; 9
     250:	2e ee       	ldi	r18, 0xEE	; 238
     252:	3e e0       	ldi	r19, 0x0E	; 14
     254:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <DisplayChar>
	DisplayChar(data_dayg+'0',9,9,0x0eee);
     258:	80 91 fe 0c 	lds	r24, 0x0CFE
     25c:	80 5d       	subi	r24, 0xD0	; 208
     25e:	69 e0       	ldi	r22, 0x09	; 9
     260:	49 e0       	ldi	r20, 0x09	; 9
     262:	2e ee       	ldi	r18, 0xEE	; 238
     264:	3e e0       	ldi	r19, 0x0E	; 14
     266:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <DisplayChar>
    
	DisplayGB2312(6,5,9,0x3fef);   					//星
     26a:	86 e0       	ldi	r24, 0x06	; 6
     26c:	65 e0       	ldi	r22, 0x05	; 5
     26e:	49 e0       	ldi	r20, 0x09	; 9
     270:	2f ee       	ldi	r18, 0xEF	; 239
     272:	3f e3       	ldi	r19, 0x3F	; 63
     274:	0e 94 82 07 	call	0xf04	; 0xf04 <DisplayGB2312>
	DisplayGB2312(7,6,9,0x3fef);   					//期
     278:	87 e0       	ldi	r24, 0x07	; 7
     27a:	66 e0       	ldi	r22, 0x06	; 6
     27c:	49 e0       	ldi	r20, 0x09	; 9
     27e:	2f ee       	ldi	r18, 0xEF	; 239
     280:	3f e3       	ldi	r19, 0x3F	; 63
     282:	0e 94 82 07 	call	0xf04	; 0xf04 <DisplayGB2312>
	DisplayGB2312(week+7,7,9,0x3fef);  			 	//星期几
     286:	80 91 f2 0c 	lds	r24, 0x0CF2
     28a:	89 5f       	subi	r24, 0xF9	; 249
     28c:	67 e0       	ldi	r22, 0x07	; 7
     28e:	49 e0       	ldi	r20, 0x09	; 9
     290:	2f ee       	ldi	r18, 0xEF	; 239
     292:	3f e3       	ldi	r19, 0x3F	; 63
     294:	0e 94 82 07 	call	0xf04	; 0xf04 <DisplayGB2312>
 }
     298:	08 95       	ret

0000029a <GUIclock>:
	 
//***********************************************************************
//         绘制时钟界面
//***********************************************************************                             
void GUIclock()
 {
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
	GUIcircle(64,64,60,0x00ff);
     29e:	80 e4       	ldi	r24, 0x40	; 64
     2a0:	60 e4       	ldi	r22, 0x40	; 64
     2a2:	4c e3       	ldi	r20, 0x3C	; 60
     2a4:	2f ef       	ldi	r18, 0xFF	; 255
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <GUIcircle>
	GUIfull(61,60,67,67,0xf800);    //时钟中心
     2ac:	8d e3       	ldi	r24, 0x3D	; 61
     2ae:	6c e3       	ldi	r22, 0x3C	; 60
     2b0:	43 e4       	ldi	r20, 0x43	; 67
     2b2:	23 e4       	ldi	r18, 0x43	; 67
     2b4:	00 e0       	ldi	r16, 0x00	; 0
     2b6:	18 ef       	ldi	r17, 0xF8	; 248
     2b8:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <GUIfull>
	GUIline(64,5,64,10,0x700); 		//12点钟方向
     2bc:	80 e4       	ldi	r24, 0x40	; 64
     2be:	65 e0       	ldi	r22, 0x05	; 5
     2c0:	40 e4       	ldi	r20, 0x40	; 64
     2c2:	2a e0       	ldi	r18, 0x0A	; 10
     2c4:	00 e0       	ldi	r16, 0x00	; 0
     2c6:	17 e0       	ldi	r17, 0x07	; 7
     2c8:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
	GUIline(63,5,63,10,0x700); 		//12点钟方向
     2cc:	8f e3       	ldi	r24, 0x3F	; 63
     2ce:	65 e0       	ldi	r22, 0x05	; 5
     2d0:	4f e3       	ldi	r20, 0x3F	; 63
     2d2:	2a e0       	ldi	r18, 0x0A	; 10
     2d4:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
	GUIline(65,5,65,10,0x700); 		//12点钟方向
     2d8:	81 e4       	ldi	r24, 0x41	; 65
     2da:	65 e0       	ldi	r22, 0x05	; 5
     2dc:	41 e4       	ldi	r20, 0x41	; 65
     2de:	2a e0       	ldi	r18, 0x0A	; 10
     2e0:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
	GUIline(95,12,92,15,0x700); 	//1点钟方向
     2e4:	8f e5       	ldi	r24, 0x5F	; 95
     2e6:	6c e0       	ldi	r22, 0x0C	; 12
     2e8:	4c e5       	ldi	r20, 0x5C	; 92
     2ea:	2f e0       	ldi	r18, 0x0F	; 15
     2ec:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
	GUIline(116,34,113,37,0x700); 	//2点钟方向
     2f0:	84 e7       	ldi	r24, 0x74	; 116
     2f2:	62 e2       	ldi	r22, 0x22	; 34
     2f4:	41 e7       	ldi	r20, 0x71	; 113
     2f6:	25 e2       	ldi	r18, 0x25	; 37
     2f8:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
	GUIline(123,64,118,64,0x700);  	//3点钟方向
     2fc:	8b e7       	ldi	r24, 0x7B	; 123
     2fe:	60 e4       	ldi	r22, 0x40	; 64
     300:	46 e7       	ldi	r20, 0x76	; 118
     302:	20 e4       	ldi	r18, 0x40	; 64
     304:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
	GUIline(123,63,118,63,0x700);  	//3点钟方向
     308:	8b e7       	ldi	r24, 0x7B	; 123
     30a:	6f e3       	ldi	r22, 0x3F	; 63
     30c:	46 e7       	ldi	r20, 0x76	; 118
     30e:	2f e3       	ldi	r18, 0x3F	; 63
     310:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
	GUIline(123,65,118,65,0x700);  	//3点钟方向
     314:	8b e7       	ldi	r24, 0x7B	; 123
     316:	61 e4       	ldi	r22, 0x41	; 65
     318:	46 e7       	ldi	r20, 0x76	; 118
     31a:	21 e4       	ldi	r18, 0x41	; 65
     31c:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
    GUIline(116,94,113,91,0x700); 	//4点钟方向
     320:	84 e7       	ldi	r24, 0x74	; 116
     322:	6e e5       	ldi	r22, 0x5E	; 94
     324:	41 e7       	ldi	r20, 0x71	; 113
     326:	2b e5       	ldi	r18, 0x5B	; 91
     328:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
	GUIline(95,116,92,113,0x700); 	//5点钟方向
     32c:	8f e5       	ldi	r24, 0x5F	; 95
     32e:	64 e7       	ldi	r22, 0x74	; 116
     330:	4c e5       	ldi	r20, 0x5C	; 92
     332:	21 e7       	ldi	r18, 0x71	; 113
     334:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
    GUIline(64,123,64,118,0x700);  	//6点钟方向
     338:	80 e4       	ldi	r24, 0x40	; 64
     33a:	6b e7       	ldi	r22, 0x7B	; 123
     33c:	40 e4       	ldi	r20, 0x40	; 64
     33e:	26 e7       	ldi	r18, 0x76	; 118
     340:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
	GUIline(63,123,63,118,0x700);  	//6点钟方向
     344:	8f e3       	ldi	r24, 0x3F	; 63
     346:	6b e7       	ldi	r22, 0x7B	; 123
     348:	4f e3       	ldi	r20, 0x3F	; 63
     34a:	26 e7       	ldi	r18, 0x76	; 118
     34c:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
	GUIline(65,123,65,118,0x700);  	//6点钟方向
     350:	81 e4       	ldi	r24, 0x41	; 65
     352:	6b e7       	ldi	r22, 0x7B	; 123
     354:	41 e4       	ldi	r20, 0x41	; 65
     356:	26 e7       	ldi	r18, 0x76	; 118
     358:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
 	GUIline(34,116,37,113,0x700); 	//7点钟方向
     35c:	82 e2       	ldi	r24, 0x22	; 34
     35e:	64 e7       	ldi	r22, 0x74	; 116
     360:	45 e2       	ldi	r20, 0x25	; 37
     362:	21 e7       	ldi	r18, 0x71	; 113
     364:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
	GUIline(12,93,15,90,0x700);    	//8点钟方向		
     368:	8c e0       	ldi	r24, 0x0C	; 12
     36a:	6d e5       	ldi	r22, 0x5D	; 93
     36c:	4f e0       	ldi	r20, 0x0F	; 15
     36e:	2a e5       	ldi	r18, 0x5A	; 90
     370:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
	GUIline(5,64,10,64,0x700);     	//9点钟方向
     374:	85 e0       	ldi	r24, 0x05	; 5
     376:	60 e4       	ldi	r22, 0x40	; 64
     378:	4a e0       	ldi	r20, 0x0A	; 10
     37a:	20 e4       	ldi	r18, 0x40	; 64
     37c:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
	GUIline(5,63,10,63,0x700);     	//9点钟方向
     380:	85 e0       	ldi	r24, 0x05	; 5
     382:	6f e3       	ldi	r22, 0x3F	; 63
     384:	4a e0       	ldi	r20, 0x0A	; 10
     386:	2f e3       	ldi	r18, 0x3F	; 63
     388:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
	GUIline(5,65,10,65,0x700);     	//9点钟方向
     38c:	85 e0       	ldi	r24, 0x05	; 5
     38e:	61 e4       	ldi	r22, 0x41	; 65
     390:	4a e0       	ldi	r20, 0x0A	; 10
     392:	21 e4       	ldi	r18, 0x41	; 65
     394:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
	GUIline(12,34,15,37,0x700); 	//10点钟方向
     398:	8c e0       	ldi	r24, 0x0C	; 12
     39a:	62 e2       	ldi	r22, 0x22	; 34
     39c:	4f e0       	ldi	r20, 0x0F	; 15
     39e:	25 e2       	ldi	r18, 0x25	; 37
     3a0:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
	GUIline(34,12,37,15,0x700); 	//11点钟方向
     3a4:	82 e2       	ldi	r24, 0x22	; 34
     3a6:	6c e0       	ldi	r22, 0x0C	; 12
     3a8:	45 e2       	ldi	r20, 0x25	; 37
     3aa:	2f e0       	ldi	r18, 0x0F	; 15
     3ac:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>

 } 
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	08 95       	ret

000003b6 <main>:
//***********************************************************************
//         主函数
//***********************************************************************

int main(void)
{
     3b6:	af 92       	push	r10
     3b8:	bf 92       	push	r11
     3ba:	cf 92       	push	r12
     3bc:	df 92       	push	r13
     3be:	ef 92       	push	r14
     3c0:	ff 92       	push	r15
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	28 ee       	ldi	r18, 0xE8	; 232
     3cc:	33 e0       	ldi	r19, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3ce:	48 eb       	ldi	r20, 0xB8	; 184
     3d0:	50 e0       	ldi	r21, 0x00	; 0
     3d2:	ca 01       	movw	r24, r20
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <main+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3d8:	21 50       	subi	r18, 0x01	; 1
     3da:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3dc:	d1 f7       	brne	.-12     	; 0x3d2 <main+0x1c>
  delay_ms(100);
  McuInit();
     3de:	0e 94 c7 04 	call	0x98e	; 0x98e <McuInit>
  LCD_RD1; 
     3e2:	80 91 65 00 	lds	r24, 0x0065
     3e6:	80 61       	ori	r24, 0x10	; 16
     3e8:	80 93 65 00 	sts	0x0065, r24
  LCD_Init();
     3ec:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_Init>
  LCD_clear(0);
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_clear>
  ds1302_init();                        						//DS1302初始化
     3f8:	0e 94 c2 04 	call	0x984	; 0x984 <ds1302_init>
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	98 e4       	ldi	r25, 0x48	; 72
     400:	01 97       	sbiw	r24, 0x01	; 1
     402:	f1 f7       	brne	.-4      	; 0x400 <main+0x4a>
  delay_ms(10);
 // ds1302_write_time();                 							//向DS1302写初始数据，如年月和时间等	 
  GUIclock();    												//画时钟界面框
     404:	0e 94 4d 01 	call	0x29a	; 0x29a <GUIclock>
     408:	28 e2       	ldi	r18, 0x28	; 40
     40a:	33 e2       	ldi	r19, 0x23	; 35
     40c:	c8 eb       	ldi	r28, 0xB8	; 184
     40e:	d0 e0       	ldi	r29, 0x00	; 0
     410:	21 15       	cp	r18, r1
     412:	31 05       	cpc	r19, r1
     414:	09 f0       	breq	.+2      	; 0x418 <main+0x62>
     416:	05 c2       	rjmp	.+1034   	; 0x822 <main+0x46c>
	
  while(1)
    {
	  
    delay_ms(900);
	ds1302_read_time();                							//读DS1302数据
     418:	0e 94 9d 04 	call	0x93a	; 0x93a <ds1302_read_time>
    GUIline(64,64,sxi,syi,0);  									//清除秒指针显示痕迹
     41c:	80 e4       	ldi	r24, 0x40	; 64
     41e:	60 e4       	ldi	r22, 0x40	; 64
     420:	40 91 f6 0c 	lds	r20, 0x0CF6
     424:	20 91 f9 0c 	lds	r18, 0x0CF9
     428:	00 e0       	ldi	r16, 0x00	; 0
     42a:	10 e0       	ldi	r17, 0x00	; 0
     42c:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
	TimeGet(); 
     430:	0e 94 76 00 	call	0xec	; 0xec <TimeGet>
	
  if(time_h==0x02)
     434:	80 91 f1 0c 	lds	r24, 0x0CF1
     438:	82 30       	cpi	r24, 0x02	; 2
     43a:	09 f4       	brne	.+2      	; 0x43e <main+0x88>
     43c:	f9 c1       	rjmp	.+1010   	; 0x830 <main+0x47a>
   {
	DisplayGB2312(16,3,5,0x079ff);  			 				//下
   }
  else
   {
	DisplayGB2312(15,3,5,0x79ff);  			 					//上
     43e:	8f e0       	ldi	r24, 0x0F	; 15
     440:	63 e0       	ldi	r22, 0x03	; 3
     442:	45 e0       	ldi	r20, 0x05	; 5
     444:	2f ef       	ldi	r18, 0xFF	; 255
     446:	39 e7       	ldi	r19, 0x79	; 121
     448:	0e 94 82 07 	call	0xf04	; 0xf04 <DisplayGB2312>
   }

	DisplayGB2312(17,4,5,0x79ff);  			 					//午
     44c:	81 e1       	ldi	r24, 0x11	; 17
     44e:	64 e0       	ldi	r22, 0x04	; 4
     450:	45 e0       	ldi	r20, 0x05	; 5
     452:	2f ef       	ldi	r18, 0xFF	; 255
     454:	39 e7       	ldi	r19, 0x79	; 121
     456:	0e 94 82 07 	call	0xf04	; 0xf04 <DisplayGB2312>
	
	DisplayData();
     45a:	0e 94 df 00 	call	0x1be	; 0x1be <DisplayData>

   if(time_sec==00)
     45e:	80 91 00 0d 	lds	r24, 0x0D00
     462:	88 23       	and	r24, r24
     464:	09 f0       	breq	.+2      	; 0x468 <main+0xb2>
     466:	6f c0       	rjmp	.+222    	; 0x546 <main+0x190>
	{
    hxi=64+cos(PI*0.5-PI*(time_hour)/6-PI*(time_min-1)/360)*30;  //小时根据分钟的变化轨迹横坐标计算公式
     468:	60 91 01 0d 	lds	r22, 0x0D01
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	88 27       	eor	r24, r24
     470:	77 fd       	sbrc	r23, 7
     472:	80 95       	com	r24
     474:	98 2f       	mov	r25, r24
     476:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__floatsisf>
     47a:	2a ed       	ldi	r18, 0xDA	; 218
     47c:	3f e0       	ldi	r19, 0x0F	; 15
     47e:	49 e4       	ldi	r20, 0x49	; 73
     480:	50 e4       	ldi	r21, 0x40	; 64
     482:	0e 94 16 0c 	call	0x182c	; 0x182c <__mulsf3>
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	40 ec       	ldi	r20, 0xC0	; 192
     48c:	50 ec       	ldi	r21, 0xC0	; 192
     48e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__divsf3>
     492:	2a ed       	ldi	r18, 0xDA	; 218
     494:	3f e0       	ldi	r19, 0x0F	; 15
     496:	49 ec       	ldi	r20, 0xC9	; 201
     498:	5f e3       	ldi	r21, 0x3F	; 63
     49a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__addsf3>
     49e:	7b 01       	movw	r14, r22
     4a0:	8c 01       	movw	r16, r24
     4a2:	60 91 f7 0c 	lds	r22, 0x0CF7
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	61 50       	subi	r22, 0x01	; 1
     4aa:	70 40       	sbci	r23, 0x00	; 0
     4ac:	88 27       	eor	r24, r24
     4ae:	77 fd       	sbrc	r23, 7
     4b0:	80 95       	com	r24
     4b2:	98 2f       	mov	r25, r24
     4b4:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__floatsisf>
     4b8:	2a ed       	ldi	r18, 0xDA	; 218
     4ba:	3f e0       	ldi	r19, 0x0F	; 15
     4bc:	49 e4       	ldi	r20, 0x49	; 73
     4be:	50 e4       	ldi	r21, 0x40	; 64
     4c0:	0e 94 16 0c 	call	0x182c	; 0x182c <__mulsf3>
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	44 eb       	ldi	r20, 0xB4	; 180
     4ca:	53 ec       	ldi	r21, 0xC3	; 195
     4cc:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__divsf3>
     4d0:	9b 01       	movw	r18, r22
     4d2:	ac 01       	movw	r20, r24
     4d4:	c8 01       	movw	r24, r16
     4d6:	b7 01       	movw	r22, r14
     4d8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__addsf3>
     4dc:	7b 01       	movw	r14, r22
     4de:	8c 01       	movw	r16, r24
     4e0:	c8 01       	movw	r24, r16
     4e2:	0e 94 ca 10 	call	0x2194	; 0x2194 <cos>
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	40 ef       	ldi	r20, 0xF0	; 240
     4ec:	51 e4       	ldi	r21, 0x41	; 65
     4ee:	0e 94 16 0c 	call	0x182c	; 0x182c <__mulsf3>
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	40 e8       	ldi	r20, 0x80	; 128
     4f8:	52 e4       	ldi	r21, 0x42	; 66
     4fa:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__addsf3>
     4fe:	0e 94 40 0a 	call	0x1480	; 0x1480 <__fixunssfsi>
     502:	5b 01       	movw	r10, r22
     504:	6c 01       	movw	r12, r24
     506:	60 93 04 0d 	sts	0x0D04, r22
    hyi=64-sin(PI*0.5-PI*(time_hour)/6-PI*(time_min-1)/360)*30;  //小时根据分钟的变化轨迹纵坐标计算公式
     50a:	b7 01       	movw	r22, r14
     50c:	c8 01       	movw	r24, r16
     50e:	0e 94 28 11 	call	0x2250	; 0x2250 <sin>
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	40 ef       	ldi	r20, 0xF0	; 240
     518:	51 ec       	ldi	r21, 0xC1	; 193
     51a:	0e 94 16 0c 	call	0x182c	; 0x182c <__mulsf3>
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	40 e8       	ldi	r20, 0x80	; 128
     524:	52 e4       	ldi	r21, 0x42	; 66
     526:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__addsf3>
     52a:	0e 94 40 0a 	call	0x1480	; 0x1480 <__fixunssfsi>
     52e:	8b 01       	movw	r16, r22
     530:	9c 01       	movw	r18, r24
     532:	60 93 ff 0c 	sts	0x0CFF, r22
	GUIline(64,64,hxi,hyi,0);  						             //小时指针在小时更新后清除前一痕迹
     536:	80 e4       	ldi	r24, 0x40	; 64
     538:	60 e4       	ldi	r22, 0x40	; 64
     53a:	4a 2d       	mov	r20, r10
     53c:	20 2f       	mov	r18, r16
     53e:	00 e0       	ldi	r16, 0x00	; 0
     540:	10 e0       	ldi	r17, 0x00	; 0
     542:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
    hyi=64-sin(PI*0.5-PI*(time_hour)/6-PI*time_min/360)*30;
	GUIline(64,64,hxi,hyi,0x2ee0);  				             //小时指针在分钟更新后显示新的位置
	}
   else
	{
    hxi=64+cos(PI*0.5-PI*(time_hour)/6-PI*time_min/360)*30;
     546:	60 91 01 0d 	lds	r22, 0x0D01
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	88 27       	eor	r24, r24
     54e:	77 fd       	sbrc	r23, 7
     550:	80 95       	com	r24
     552:	98 2f       	mov	r25, r24
     554:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__floatsisf>
     558:	2a ed       	ldi	r18, 0xDA	; 218
     55a:	3f e0       	ldi	r19, 0x0F	; 15
     55c:	49 e4       	ldi	r20, 0x49	; 73
     55e:	50 e4       	ldi	r21, 0x40	; 64
     560:	0e 94 16 0c 	call	0x182c	; 0x182c <__mulsf3>
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 ec       	ldi	r20, 0xC0	; 192
     56a:	50 ec       	ldi	r21, 0xC0	; 192
     56c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__divsf3>
     570:	2a ed       	ldi	r18, 0xDA	; 218
     572:	3f e0       	ldi	r19, 0x0F	; 15
     574:	49 ec       	ldi	r20, 0xC9	; 201
     576:	5f e3       	ldi	r21, 0x3F	; 63
     578:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__addsf3>
     57c:	7b 01       	movw	r14, r22
     57e:	8c 01       	movw	r16, r24
     580:	60 91 f7 0c 	lds	r22, 0x0CF7
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	88 27       	eor	r24, r24
     588:	77 fd       	sbrc	r23, 7
     58a:	80 95       	com	r24
     58c:	98 2f       	mov	r25, r24
     58e:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__floatsisf>
     592:	2a ed       	ldi	r18, 0xDA	; 218
     594:	3f e0       	ldi	r19, 0x0F	; 15
     596:	49 e4       	ldi	r20, 0x49	; 73
     598:	50 e4       	ldi	r21, 0x40	; 64
     59a:	0e 94 16 0c 	call	0x182c	; 0x182c <__mulsf3>
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	44 eb       	ldi	r20, 0xB4	; 180
     5a4:	53 ec       	ldi	r21, 0xC3	; 195
     5a6:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__divsf3>
     5aa:	9b 01       	movw	r18, r22
     5ac:	ac 01       	movw	r20, r24
     5ae:	c8 01       	movw	r24, r16
     5b0:	b7 01       	movw	r22, r14
     5b2:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__addsf3>
     5b6:	7b 01       	movw	r14, r22
     5b8:	8c 01       	movw	r16, r24
     5ba:	c8 01       	movw	r24, r16
     5bc:	0e 94 ca 10 	call	0x2194	; 0x2194 <cos>
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	40 ef       	ldi	r20, 0xF0	; 240
     5c6:	51 e4       	ldi	r21, 0x41	; 65
     5c8:	0e 94 16 0c 	call	0x182c	; 0x182c <__mulsf3>
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	40 e8       	ldi	r20, 0x80	; 128
     5d2:	52 e4       	ldi	r21, 0x42	; 66
     5d4:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__addsf3>
     5d8:	0e 94 40 0a 	call	0x1480	; 0x1480 <__fixunssfsi>
     5dc:	5b 01       	movw	r10, r22
     5de:	6c 01       	movw	r12, r24
     5e0:	60 93 04 0d 	sts	0x0D04, r22
    hyi=64-sin(PI*0.5-PI*(time_hour)/6-PI*time_min/360)*30;
     5e4:	b7 01       	movw	r22, r14
     5e6:	c8 01       	movw	r24, r16
     5e8:	0e 94 28 11 	call	0x2250	; 0x2250 <sin>
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	40 ef       	ldi	r20, 0xF0	; 240
     5f2:	51 ec       	ldi	r21, 0xC1	; 193
     5f4:	0e 94 16 0c 	call	0x182c	; 0x182c <__mulsf3>
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	40 e8       	ldi	r20, 0x80	; 128
     5fe:	52 e4       	ldi	r21, 0x42	; 66
     600:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__addsf3>
     604:	0e 94 40 0a 	call	0x1480	; 0x1480 <__fixunssfsi>
     608:	8b 01       	movw	r16, r22
     60a:	9c 01       	movw	r18, r24
     60c:	60 93 ff 0c 	sts	0x0CFF, r22
	GUIline(64,64,hxi,hyi,0x2ee0);  				            //小时指针在分钟不更新时显示原来位置
     610:	80 e4       	ldi	r24, 0x40	; 64
     612:	60 e4       	ldi	r22, 0x40	; 64
     614:	4a 2d       	mov	r20, r10
     616:	20 2f       	mov	r18, r16
     618:	00 ee       	ldi	r16, 0xE0	; 224
     61a:	1e e2       	ldi	r17, 0x2E	; 46
     61c:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
	}	


   if(time_sec==00)												//分钟指针在秒更新后清除前一痕迹
     620:	80 91 00 0d 	lds	r24, 0x0D00
     624:	88 23       	and	r24, r24
     626:	09 f0       	breq	.+2      	; 0x62a <main+0x274>
     628:	52 c0       	rjmp	.+164    	; 0x6ce <main+0x318>
	{
	mxi=64+cos(PI*0.5-PI*(time_min-1)/30)*40;				
     62a:	60 91 f7 0c 	lds	r22, 0x0CF7
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	61 50       	subi	r22, 0x01	; 1
     632:	70 40       	sbci	r23, 0x00	; 0
     634:	88 27       	eor	r24, r24
     636:	77 fd       	sbrc	r23, 7
     638:	80 95       	com	r24
     63a:	98 2f       	mov	r25, r24
     63c:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__floatsisf>
     640:	2a ed       	ldi	r18, 0xDA	; 218
     642:	3f e0       	ldi	r19, 0x0F	; 15
     644:	49 e4       	ldi	r20, 0x49	; 73
     646:	50 e4       	ldi	r21, 0x40	; 64
     648:	0e 94 16 0c 	call	0x182c	; 0x182c <__mulsf3>
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	40 ef       	ldi	r20, 0xF0	; 240
     652:	51 ec       	ldi	r21, 0xC1	; 193
     654:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__divsf3>
     658:	2a ed       	ldi	r18, 0xDA	; 218
     65a:	3f e0       	ldi	r19, 0x0F	; 15
     65c:	49 ec       	ldi	r20, 0xC9	; 201
     65e:	5f e3       	ldi	r21, 0x3F	; 63
     660:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__addsf3>
     664:	7b 01       	movw	r14, r22
     666:	8c 01       	movw	r16, r24
     668:	c8 01       	movw	r24, r16
     66a:	0e 94 ca 10 	call	0x2194	; 0x2194 <cos>
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	40 e2       	ldi	r20, 0x20	; 32
     674:	52 e4       	ldi	r21, 0x42	; 66
     676:	0e 94 16 0c 	call	0x182c	; 0x182c <__mulsf3>
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	40 e8       	ldi	r20, 0x80	; 128
     680:	52 e4       	ldi	r21, 0x42	; 66
     682:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__addsf3>
     686:	0e 94 40 0a 	call	0x1480	; 0x1480 <__fixunssfsi>
     68a:	5b 01       	movw	r10, r22
     68c:	6c 01       	movw	r12, r24
     68e:	60 93 f8 0c 	sts	0x0CF8, r22
    myi=64-sin(PI*0.5-PI*(time_min-1)/30)*40;
     692:	b7 01       	movw	r22, r14
     694:	c8 01       	movw	r24, r16
     696:	0e 94 28 11 	call	0x2250	; 0x2250 <sin>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	40 e2       	ldi	r20, 0x20	; 32
     6a0:	52 ec       	ldi	r21, 0xC2	; 194
     6a2:	0e 94 16 0c 	call	0x182c	; 0x182c <__mulsf3>
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	40 e8       	ldi	r20, 0x80	; 128
     6ac:	52 e4       	ldi	r21, 0x42	; 66
     6ae:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__addsf3>
     6b2:	0e 94 40 0a 	call	0x1480	; 0x1480 <__fixunssfsi>
     6b6:	8b 01       	movw	r16, r22
     6b8:	9c 01       	movw	r18, r24
     6ba:	60 93 fd 0c 	sts	0x0CFD, r22
	GUIline(64,64,mxi,myi,0);  									
     6be:	80 e4       	ldi	r24, 0x40	; 64
     6c0:	60 e4       	ldi	r22, 0x40	; 64
     6c2:	4a 2d       	mov	r20, r10
     6c4:	20 2f       	mov	r18, r16
     6c6:	00 e0       	ldi	r16, 0x00	; 0
     6c8:	10 e0       	ldi	r17, 0x00	; 0
     6ca:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
    myi=64-sin(PI*0.5-PI*time_min/30)*40;
	GUIline(64,64,mxi,myi,0x2e0);  								//分钟指针在秒更新后显示新的位置
	}
  else
 	{
    mxi=64+cos(PI*0.5-PI*time_min/30)*40;						//分钟的变化轨迹横坐标计算公式
     6ce:	60 91 f7 0c 	lds	r22, 0x0CF7
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	88 27       	eor	r24, r24
     6d6:	77 fd       	sbrc	r23, 7
     6d8:	80 95       	com	r24
     6da:	98 2f       	mov	r25, r24
     6dc:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__floatsisf>
     6e0:	2a ed       	ldi	r18, 0xDA	; 218
     6e2:	3f e0       	ldi	r19, 0x0F	; 15
     6e4:	49 e4       	ldi	r20, 0x49	; 73
     6e6:	50 e4       	ldi	r21, 0x40	; 64
     6e8:	0e 94 16 0c 	call	0x182c	; 0x182c <__mulsf3>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	40 ef       	ldi	r20, 0xF0	; 240
     6f2:	51 ec       	ldi	r21, 0xC1	; 193
     6f4:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__divsf3>
     6f8:	2a ed       	ldi	r18, 0xDA	; 218
     6fa:	3f e0       	ldi	r19, 0x0F	; 15
     6fc:	49 ec       	ldi	r20, 0xC9	; 201
     6fe:	5f e3       	ldi	r21, 0x3F	; 63
     700:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__addsf3>
     704:	7b 01       	movw	r14, r22
     706:	8c 01       	movw	r16, r24
     708:	c8 01       	movw	r24, r16
     70a:	0e 94 ca 10 	call	0x2194	; 0x2194 <cos>
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	40 e2       	ldi	r20, 0x20	; 32
     714:	52 e4       	ldi	r21, 0x42	; 66
     716:	0e 94 16 0c 	call	0x182c	; 0x182c <__mulsf3>
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	40 e8       	ldi	r20, 0x80	; 128
     720:	52 e4       	ldi	r21, 0x42	; 66
     722:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__addsf3>
     726:	0e 94 40 0a 	call	0x1480	; 0x1480 <__fixunssfsi>
     72a:	5b 01       	movw	r10, r22
     72c:	6c 01       	movw	r12, r24
     72e:	60 93 f8 0c 	sts	0x0CF8, r22
    myi=64-sin(PI*0.5-PI*time_min/30)*40;						//分钟的变化轨迹纵坐标计算公式
     732:	b7 01       	movw	r22, r14
     734:	c8 01       	movw	r24, r16
     736:	0e 94 28 11 	call	0x2250	; 0x2250 <sin>
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	40 e2       	ldi	r20, 0x20	; 32
     740:	52 ec       	ldi	r21, 0xC2	; 194
     742:	0e 94 16 0c 	call	0x182c	; 0x182c <__mulsf3>
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	40 e8       	ldi	r20, 0x80	; 128
     74c:	52 e4       	ldi	r21, 0x42	; 66
     74e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__addsf3>
     752:	0e 94 40 0a 	call	0x1480	; 0x1480 <__fixunssfsi>
     756:	8b 01       	movw	r16, r22
     758:	9c 01       	movw	r18, r24
     75a:	60 93 fd 0c 	sts	0x0CFD, r22
	GUIline(64,64,mxi,myi,0x2e0);  								//分钟指针在秒不更新时显示原来的位置
     75e:	80 e4       	ldi	r24, 0x40	; 64
     760:	60 e4       	ldi	r22, 0x40	; 64
     762:	4a 2d       	mov	r20, r10
     764:	20 2f       	mov	r18, r16
     766:	00 ee       	ldi	r16, 0xE0	; 224
     768:	12 e0       	ldi	r17, 0x02	; 2
     76a:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
  	}

	sxi=64+cos(PI*0.5-PI*time_sec/30)*50;						//秒指针的变化轨迹横坐标计算公式
     76e:	60 91 00 0d 	lds	r22, 0x0D00
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	88 27       	eor	r24, r24
     776:	77 fd       	sbrc	r23, 7
     778:	80 95       	com	r24
     77a:	98 2f       	mov	r25, r24
     77c:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__floatsisf>
     780:	2a ed       	ldi	r18, 0xDA	; 218
     782:	3f e0       	ldi	r19, 0x0F	; 15
     784:	49 e4       	ldi	r20, 0x49	; 73
     786:	50 e4       	ldi	r21, 0x40	; 64
     788:	0e 94 16 0c 	call	0x182c	; 0x182c <__mulsf3>
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	40 ef       	ldi	r20, 0xF0	; 240
     792:	51 ec       	ldi	r21, 0xC1	; 193
     794:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__divsf3>
     798:	2a ed       	ldi	r18, 0xDA	; 218
     79a:	3f e0       	ldi	r19, 0x0F	; 15
     79c:	49 ec       	ldi	r20, 0xC9	; 201
     79e:	5f e3       	ldi	r21, 0x3F	; 63
     7a0:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__addsf3>
     7a4:	7b 01       	movw	r14, r22
     7a6:	8c 01       	movw	r16, r24
     7a8:	c8 01       	movw	r24, r16
     7aa:	0e 94 ca 10 	call	0x2194	; 0x2194 <cos>
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	48 e4       	ldi	r20, 0x48	; 72
     7b4:	52 e4       	ldi	r21, 0x42	; 66
     7b6:	0e 94 16 0c 	call	0x182c	; 0x182c <__mulsf3>
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	40 e8       	ldi	r20, 0x80	; 128
     7c0:	52 e4       	ldi	r21, 0x42	; 66
     7c2:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__addsf3>
     7c6:	0e 94 40 0a 	call	0x1480	; 0x1480 <__fixunssfsi>
     7ca:	5b 01       	movw	r10, r22
     7cc:	6c 01       	movw	r12, r24
     7ce:	60 93 f6 0c 	sts	0x0CF6, r22
    syi=64-sin(PI*0.5-PI*time_sec/30)*50;						//秒指针的变化轨迹纵坐标计算公式
     7d2:	b7 01       	movw	r22, r14
     7d4:	c8 01       	movw	r24, r16
     7d6:	0e 94 28 11 	call	0x2250	; 0x2250 <sin>
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	48 e4       	ldi	r20, 0x48	; 72
     7e0:	52 ec       	ldi	r21, 0xC2	; 194
     7e2:	0e 94 16 0c 	call	0x182c	; 0x182c <__mulsf3>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e8       	ldi	r20, 0x80	; 128
     7ec:	52 e4       	ldi	r21, 0x42	; 66
     7ee:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__addsf3>
     7f2:	0e 94 40 0a 	call	0x1480	; 0x1480 <__fixunssfsi>
     7f6:	8b 01       	movw	r16, r22
     7f8:	9c 01       	movw	r18, r24
     7fa:	60 93 f9 0c 	sts	0x0CF9, r22
	
	GUIline(64,64,sxi,syi,0xffe0);  							//显示秒指针位置
     7fe:	80 e4       	ldi	r24, 0x40	; 64
     800:	60 e4       	ldi	r22, 0x40	; 64
     802:	4a 2d       	mov	r20, r10
     804:	20 2f       	mov	r18, r16
     806:	00 ee       	ldi	r16, 0xE0	; 224
     808:	1f ef       	ldi	r17, 0xFF	; 255
     80a:	0e 94 cf 08 	call	0x119e	; 0x119e <GUIline>
    GUIfull(61,60,67,67,0xf800);   								//显示时钟中心      
     80e:	8d e3       	ldi	r24, 0x3D	; 61
     810:	6c e3       	ldi	r22, 0x3C	; 60
     812:	43 e4       	ldi	r20, 0x43	; 67
     814:	23 e4       	ldi	r18, 0x43	; 67
     816:	00 e0       	ldi	r16, 0x00	; 0
     818:	18 ef       	ldi	r17, 0xF8	; 248
     81a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <GUIfull>
     81e:	28 e2       	ldi	r18, 0x28	; 40
     820:	33 e2       	ldi	r19, 0x23	; 35
     822:	ce 01       	movw	r24, r28
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <main+0x46e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     828:	21 50       	subi	r18, 0x01	; 1
     82a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     82c:	d1 f7       	brne	.-12     	; 0x822 <main+0x46c>
     82e:	f4 cd       	rjmp	.-1048   	; 0x418 <main+0x62>
    GUIline(64,64,sxi,syi,0);  									//清除秒指针显示痕迹
	TimeGet(); 
	
  if(time_h==0x02)
   {
	DisplayGB2312(16,3,5,0x079ff);  			 				//下
     830:	80 e1       	ldi	r24, 0x10	; 16
     832:	63 e0       	ldi	r22, 0x03	; 3
     834:	45 e0       	ldi	r20, 0x05	; 5
     836:	2f ef       	ldi	r18, 0xFF	; 255
     838:	39 e7       	ldi	r19, 0x79	; 121
     83a:	0e 94 82 07 	call	0xf04	; 0xf04 <DisplayGB2312>
     83e:	06 ce       	rjmp	.-1012   	; 0x44c <main+0x96>

00000840 <ds1302_write_byte>:
//***********************************************************************
void ds1302_write_byte(unsigned char addr, unsigned char d) 
{

	unsigned char i;
	RST_SET;					//启动DS1302总线
     840:	1f 9a       	sbi	0x03, 7	; 3
	
	                                                //写入目标地址：addr
	IO_OUT;
     842:	16 9a       	sbi	0x02, 6	; 2
	addr = addr & 0xFE;                            //最低位置零
     844:	8e 7f       	andi	r24, 0xFE	; 254
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	07 c0       	rjmp	.+14     	; 0x858 <ds1302_write_byte+0x18>
	for (i = 0; i < 8; i ++) {
		if (addr & 0x01) {
			IO_SET;
     84a:	1e 9a       	sbi	0x03, 6	; 3
			}
		else {
			IO_CLR;
			}
		SCK_SET;
     84c:	1d 9a       	sbi	0x03, 5	; 3
		SCK_CLR;
     84e:	1d 98       	cbi	0x03, 5	; 3
	RST_SET;					//启动DS1302总线
	
	                                                //写入目标地址：addr
	IO_OUT;
	addr = addr & 0xFE;                            //最低位置零
	for (i = 0; i < 8; i ++) {
     850:	9f 5f       	subi	r25, 0xFF	; 255
     852:	98 30       	cpi	r25, 0x08	; 8
     854:	49 f0       	breq	.+18     	; 0x868 <ds1302_write_byte+0x28>
		else {
			IO_CLR;
			}
		SCK_SET;
		SCK_CLR;
		addr = addr >> 1;
     856:	86 95       	lsr	r24
	
	                                                //写入目标地址：addr
	IO_OUT;
	addr = addr & 0xFE;                            //最低位置零
	for (i = 0; i < 8; i ++) {
		if (addr & 0x01) {
     858:	80 fd       	sbrc	r24, 0
     85a:	f7 cf       	rjmp	.-18     	; 0x84a <ds1302_write_byte+0xa>
			IO_SET;
			}
		else {
			IO_CLR;
     85c:	1e 98       	cbi	0x03, 6	; 3
			}
		SCK_SET;
     85e:	1d 9a       	sbi	0x03, 5	; 3
		SCK_CLR;
     860:	1d 98       	cbi	0x03, 5	; 3
	RST_SET;					//启动DS1302总线
	
	                                                //写入目标地址：addr
	IO_OUT;
	addr = addr & 0xFE;                            //最低位置零
	for (i = 0; i < 8; i ++) {
     862:	9f 5f       	subi	r25, 0xFF	; 255
     864:	98 30       	cpi	r25, 0x08	; 8
     866:	b9 f7       	brne	.-18     	; 0x856 <ds1302_write_byte+0x16>
		SCK_CLR;
		addr = addr >> 1;
		}
	
	                                              //写入数据：d
	IO_OUT;
     868:	16 9a       	sbi	0x02, 6	; 2
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	07 c0       	rjmp	.+14     	; 0x87c <ds1302_write_byte+0x3c>
	for (i = 0; i < 8; i ++) {
		if (d & 0x01) {
			IO_SET;
     86e:	1e 9a       	sbi	0x03, 6	; 3
			}
		else {
			IO_CLR;
			}
		SCK_SET;
     870:	1d 9a       	sbi	0x03, 5	; 3
		SCK_CLR;
     872:	1d 98       	cbi	0x03, 5	; 3
		addr = addr >> 1;
		}
	
	                                              //写入数据：d
	IO_OUT;
	for (i = 0; i < 8; i ++) {
     874:	8f 5f       	subi	r24, 0xFF	; 255
     876:	88 30       	cpi	r24, 0x08	; 8
     878:	49 f0       	breq	.+18     	; 0x88c <ds1302_write_byte+0x4c>
		else {
			IO_CLR;
			}
		SCK_SET;
		SCK_CLR;
		d = d >> 1;
     87a:	66 95       	lsr	r22
		}
	
	                                              //写入数据：d
	IO_OUT;
	for (i = 0; i < 8; i ++) {
		if (d & 0x01) {
     87c:	60 fd       	sbrc	r22, 0
     87e:	f7 cf       	rjmp	.-18     	; 0x86e <ds1302_write_byte+0x2e>
			IO_SET;
			}
		else {
			IO_CLR;
     880:	1e 98       	cbi	0x03, 6	; 3
			}
		SCK_SET;
     882:	1d 9a       	sbi	0x03, 5	; 3
		SCK_CLR;
     884:	1d 98       	cbi	0x03, 5	; 3
		addr = addr >> 1;
		}
	
	                                              //写入数据：d
	IO_OUT;
	for (i = 0; i < 8; i ++) {
     886:	8f 5f       	subi	r24, 0xFF	; 255
     888:	88 30       	cpi	r24, 0x08	; 8
     88a:	b9 f7       	brne	.-18     	; 0x87a <ds1302_write_byte+0x3a>
			}
		SCK_SET;
		SCK_CLR;
		d = d >> 1;
		}
	RST_CLR;					//停止DS1302总线
     88c:	1f 98       	cbi	0x03, 7	; 3
}
     88e:	08 95       	ret

00000890 <ds1302_read_byte>:
unsigned char ds1302_read_byte(unsigned char addr)
 {

	unsigned char i;
	unsigned char temp;
	RST_SET;					//启动DS1302总线
     890:	1f 9a       	sbi	0x03, 7	; 3

	                                                //写入目标地址：addr
	IO_OUT;
     892:	16 9a       	sbi	0x02, 6	; 2
	addr = addr | 0x01;                             //最低位置高
     894:	81 60       	ori	r24, 0x01	; 1
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	07 c0       	rjmp	.+14     	; 0x8a8 <ds1302_read_byte+0x18>
	for (i = 0; i < 8; i ++) {
		if (addr & 0x01) {
			IO_SET;
     89a:	1e 9a       	sbi	0x03, 6	; 3
			}
		else {
			IO_CLR;
			}
		SCK_SET;
     89c:	1d 9a       	sbi	0x03, 5	; 3
		SCK_CLR;
     89e:	1d 98       	cbi	0x03, 5	; 3
	RST_SET;					//启动DS1302总线

	                                                //写入目标地址：addr
	IO_OUT;
	addr = addr | 0x01;                             //最低位置高
	for (i = 0; i < 8; i ++) {
     8a0:	9f 5f       	subi	r25, 0xFF	; 255
     8a2:	98 30       	cpi	r25, 0x08	; 8
     8a4:	49 f0       	breq	.+18     	; 0x8b8 <ds1302_read_byte+0x28>
		else {
			IO_CLR;
			}
		SCK_SET;
		SCK_CLR;
		addr = addr >> 1;
     8a6:	86 95       	lsr	r24

	                                                //写入目标地址：addr
	IO_OUT;
	addr = addr | 0x01;                             //最低位置高
	for (i = 0; i < 8; i ++) {
		if (addr & 0x01) {
     8a8:	80 fd       	sbrc	r24, 0
     8aa:	f7 cf       	rjmp	.-18     	; 0x89a <ds1302_read_byte+0xa>
			IO_SET;
			}
		else {
			IO_CLR;
     8ac:	1e 98       	cbi	0x03, 6	; 3
			}
		SCK_SET;
     8ae:	1d 9a       	sbi	0x03, 5	; 3
		SCK_CLR;
     8b0:	1d 98       	cbi	0x03, 5	; 3
	RST_SET;					//启动DS1302总线

	                                                //写入目标地址：addr
	IO_OUT;
	addr = addr | 0x01;                             //最低位置高
	for (i = 0; i < 8; i ++) {
     8b2:	9f 5f       	subi	r25, 0xFF	; 255
     8b4:	98 30       	cpi	r25, 0x08	; 8
     8b6:	b9 f7       	brne	.-18     	; 0x8a6 <ds1302_read_byte+0x16>
		SCK_CLR;
		addr = addr >> 1;
		}
	
	/*输出数据：temp*/
	IO_IN;
     8b8:	16 98       	cbi	0x02, 6	; 2
     8ba:	90 e0       	ldi	r25, 0x00	; 0
	for (i = 0; i < 8; i ++) {
		temp = temp >> 1;
     8bc:	86 95       	lsr	r24
		if (IO_R) {
     8be:	0e 99       	sbic	0x01, 6	; 1
			temp |= 0x80;
     8c0:	80 68       	ori	r24, 0x80	; 128
			}
		else {
			temp &= 0x7F;
			}
		SCK_SET;
     8c2:	1d 9a       	sbi	0x03, 5	; 3
		SCK_CLR;
     8c4:	1d 98       	cbi	0x03, 5	; 3
		addr = addr >> 1;
		}
	
	/*输出数据：temp*/
	IO_IN;
	for (i = 0; i < 8; i ++) {
     8c6:	9f 5f       	subi	r25, 0xFF	; 255
     8c8:	98 30       	cpi	r25, 0x08	; 8
     8ca:	c1 f7       	brne	.-16     	; 0x8bc <ds1302_read_byte+0x2c>
			}
		SCK_SET;
		SCK_CLR;
		}
	
	RST_CLR;					//停止DS1302总线
     8cc:	1f 98       	cbi	0x03, 7	; 3
	return temp;
}
     8ce:	08 95       	ret

000008d0 <ds1302_write_time>:
//***********************************************************************

void ds1302_write_time(void)
 {

	ds1302_write_byte(ds1302_control_add,0x00);		//关闭写保护 
     8d0:	8e e8       	ldi	r24, 0x8E	; 142
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	0e 94 20 04 	call	0x840	; 0x840 <ds1302_write_byte>
	ds1302_write_byte(ds1302_sec_add,0x80);			//暂停 
     8d8:	80 e8       	ldi	r24, 0x80	; 128
     8da:	60 e8       	ldi	r22, 0x80	; 128
     8dc:	0e 94 20 04 	call	0x840	; 0x840 <ds1302_write_byte>
	//ds1302_write_byte(ds1302_charger_add,0xa9);		//涓流充电 
	ds1302_write_byte(ds1302_year_add,time_buf[1]);		//年 
     8e0:	8c e8       	ldi	r24, 0x8C	; 140
     8e2:	60 91 01 01 	lds	r22, 0x0101
     8e6:	0e 94 20 04 	call	0x840	; 0x840 <ds1302_write_byte>
	ds1302_write_byte(ds1302_month_add,time_buf[2]);	//月 
     8ea:	88 e8       	ldi	r24, 0x88	; 136
     8ec:	60 91 02 01 	lds	r22, 0x0102
     8f0:	0e 94 20 04 	call	0x840	; 0x840 <ds1302_write_byte>
	ds1302_write_byte(ds1302_date_add,time_buf[3]);		//日 
     8f4:	86 e8       	ldi	r24, 0x86	; 134
     8f6:	60 91 03 01 	lds	r22, 0x0103
     8fa:	0e 94 20 04 	call	0x840	; 0x840 <ds1302_write_byte>
	ds1302_write_byte(ds1302_day_add,time_buf[7]);		//周 
     8fe:	8a e8       	ldi	r24, 0x8A	; 138
     900:	60 91 07 01 	lds	r22, 0x0107
     904:	0e 94 20 04 	call	0x840	; 0x840 <ds1302_write_byte>
	ds1302_write_byte(ds1302_hr_add,time_buf[4]);		//时 
     908:	84 e8       	ldi	r24, 0x84	; 132
     90a:	60 91 04 01 	lds	r22, 0x0104
     90e:	0e 94 20 04 	call	0x840	; 0x840 <ds1302_write_byte>
	ds1302_write_byte(ds1302_min_add,time_buf[5]);		//分
     912:	82 e8       	ldi	r24, 0x82	; 130
     914:	60 91 05 01 	lds	r22, 0x0105
     918:	0e 94 20 04 	call	0x840	; 0x840 <ds1302_write_byte>
	ds1302_write_byte(ds1302_sec_add,time_buf[6]);		//秒
     91c:	80 e8       	ldi	r24, 0x80	; 128
     91e:	60 91 06 01 	lds	r22, 0x0106
     922:	0e 94 20 04 	call	0x840	; 0x840 <ds1302_write_byte>
	ds1302_write_byte(ds1302_day_add,time_buf[7]);		//周 
     926:	8a e8       	ldi	r24, 0x8A	; 138
     928:	60 91 07 01 	lds	r22, 0x0107
     92c:	0e 94 20 04 	call	0x840	; 0x840 <ds1302_write_byte>
	ds1302_write_byte(ds1302_control_add,0x80);		//打开写保护 
     930:	8e e8       	ldi	r24, 0x8E	; 142
     932:	60 e8       	ldi	r22, 0x80	; 128
     934:	0e 94 20 04 	call	0x840	; 0x840 <ds1302_write_byte>
}
     938:	08 95       	ret

0000093a <ds1302_read_time>:
//***********************************************************************

void ds1302_read_time(void)  
{ 

	time_buf[1]=ds1302_read_byte(ds1302_year_add);		//年 
     93a:	8c e8       	ldi	r24, 0x8C	; 140
     93c:	0e 94 48 04 	call	0x890	; 0x890 <ds1302_read_byte>
     940:	80 93 01 01 	sts	0x0101, r24
	time_buf[2]=ds1302_read_byte(ds1302_month_add);		//月 
     944:	88 e8       	ldi	r24, 0x88	; 136
     946:	0e 94 48 04 	call	0x890	; 0x890 <ds1302_read_byte>
     94a:	80 93 02 01 	sts	0x0102, r24
	time_buf[3]=ds1302_read_byte(ds1302_date_add);		//日 
     94e:	86 e8       	ldi	r24, 0x86	; 134
     950:	0e 94 48 04 	call	0x890	; 0x890 <ds1302_read_byte>
     954:	80 93 03 01 	sts	0x0103, r24
	time_buf[4]=ds1302_read_byte(ds1302_hr_add);		//时 
     958:	84 e8       	ldi	r24, 0x84	; 132
     95a:	0e 94 48 04 	call	0x890	; 0x890 <ds1302_read_byte>
     95e:	80 93 04 01 	sts	0x0104, r24
	time_buf[5]=ds1302_read_byte(ds1302_min_add);		//分 
     962:	82 e8       	ldi	r24, 0x82	; 130
     964:	0e 94 48 04 	call	0x890	; 0x890 <ds1302_read_byte>
     968:	80 93 05 01 	sts	0x0105, r24
	time_buf[6]=(ds1302_read_byte(ds1302_sec_add))&0x7F;//秒 
     96c:	80 e8       	ldi	r24, 0x80	; 128
     96e:	0e 94 48 04 	call	0x890	; 0x890 <ds1302_read_byte>
     972:	8f 77       	andi	r24, 0x7F	; 127
     974:	80 93 06 01 	sts	0x0106, r24
	time_buf[7]=ds1302_read_byte(ds1302_day_add);		//周 
     978:	8a e8       	ldi	r24, 0x8A	; 138
     97a:	0e 94 48 04 	call	0x890	; 0x890 <ds1302_read_byte>
     97e:	80 93 07 01 	sts	0x0107, r24
}
     982:	08 95       	ret

00000984 <ds1302_init>:
//***********************************************************************

void ds1302_init(void) 
{
	
	RST_CLR;			//RST脚置低
     984:	1f 98       	cbi	0x03, 7	; 3
	SCK_CLR;			//SCK脚置低
     986:	1d 98       	cbi	0x03, 5	; 3
	RST_OUT;			//RST脚设置为输出
     988:	17 9a       	sbi	0x02, 7	; 2
	SCK_OUT;			//SCK脚设置为输出
     98a:	15 9a       	sbi	0x02, 5	; 2
}
     98c:	08 95       	ret

0000098e <McuInit>:
//	  IO口初始化
//***********************************************************************

void McuInit()
{
	LCD_Data=0xFF;                     //各相关IO口初始化
     98e:	8f ef       	ldi	r24, 0xFF	; 255
     990:	8b bb       	out	0x1b, r24	; 27
	DDR_Data=0xFF;
     992:	8a bb       	out	0x1a, r24	; 26

	PORTF=0xFF;
     994:	80 93 62 00 	sts	0x0062, r24
	DDRF=0xFF;
     998:	80 93 61 00 	sts	0x0061, r24

	PORTG=0x0F;                        
     99c:	e5 e6       	ldi	r30, 0x65	; 101
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	9f e0       	ldi	r25, 0x0F	; 15
     9a2:	90 83       	st	Z, r25
	DDRG=0x0F;
     9a4:	90 93 64 00 	sts	0x0064, r25

	PORTD=0xFF;
     9a8:	82 bb       	out	0x12, r24	; 18
	DDRD=0xFF;
     9aa:	81 bb       	out	0x11, r24	; 17
  	
	D_LE1;                             //关掉数码管，以免显示乱码，因为共用PA口                   
     9ac:	94 9a       	sbi	0x12, 4	; 18
    W_LE1;                     
     9ae:	95 9a       	sbi	0x12, 5	; 18
    LCD_Data=0xFF;                      //关所有数码管            
     9b0:	8b bb       	out	0x1b, r24	; 27
    W_LE0; 
     9b2:	95 98       	cbi	0x12, 5	; 18

    PORTB=0xFF;
     9b4:	88 bb       	out	0x18, r24	; 24
	DDRB=0xFF;
     9b6:	87 bb       	out	0x17, r24	; 23

	LCD_BL0;
     9b8:	80 81       	ld	r24, Z
     9ba:	8b 7f       	andi	r24, 0xFB	; 251
     9bc:	80 83       	st	Z, r24
}
     9be:	08 95       	ret

000009c0 <LCD_WR_REG>:
//	   写寻址寄存器地址，厂家规定0x22
//***********************************************************************

void LCD_WR_REG(uchar index)           
{
	LCD_RS0;                            //根据控制器datasheet，RS为0时，为写寄存器地址
     9c0:	e2 e6       	ldi	r30, 0x62	; 98
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	90 81       	ld	r25, Z
     9c6:	9d 7f       	andi	r25, 0xFD	; 253
     9c8:	90 83       	st	Z, r25
	LCD_EC0;
     9ca:	90 81       	ld	r25, Z
     9cc:	97 7f       	andi	r25, 0xF7	; 247
     9ce:	90 83       	st	Z, r25
	LCD_Data = 0x00;
     9d0:	1b ba       	out	0x1b, r1	; 27
	LCD_WR0;
     9d2:	90 81       	ld	r25, Z
     9d4:	9b 7f       	andi	r25, 0xFB	; 251
     9d6:	90 83       	st	Z, r25
	LCD_WR1;
     9d8:	90 81       	ld	r25, Z
     9da:	94 60       	ori	r25, 0x04	; 4
     9dc:	90 83       	st	Z, r25
	LCD_Data = index;
     9de:	8b bb       	out	0x1b, r24	; 27
	LCD_WR0;
     9e0:	80 81       	ld	r24, Z
     9e2:	8b 7f       	andi	r24, 0xFB	; 251
     9e4:	80 83       	st	Z, r24
	LCD_WR1;
     9e6:	80 81       	ld	r24, Z
     9e8:	84 60       	ori	r24, 0x04	; 4
     9ea:	80 83       	st	Z, r24
	LCD_EC1;
     9ec:	80 81       	ld	r24, Z
     9ee:	88 60       	ori	r24, 0x08	; 8
     9f0:	80 83       	st	Z, r24
	LCD_RS0;
     9f2:	80 81       	ld	r24, Z
     9f4:	8d 7f       	andi	r24, 0xFD	; 253
     9f6:	80 83       	st	Z, r24
}
     9f8:	08 95       	ret

000009fa <LCD_RD_REG16>:

unsigned int LCD_RD_REG16(uchar index)
{
	unsigned int pd;

	LCD_RS0;
     9fa:	a2 e6       	ldi	r26, 0x62	; 98
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	9c 91       	ld	r25, X
     a00:	9d 7f       	andi	r25, 0xFD	; 253
     a02:	9c 93       	st	X, r25
	LCD_EC0;
     a04:	9c 91       	ld	r25, X
     a06:	97 7f       	andi	r25, 0xF7	; 247
     a08:	9c 93       	st	X, r25
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a0a:	44 e0       	ldi	r20, 0x04	; 4
     a0c:	94 2f       	mov	r25, r20
     a0e:	9a 95       	dec	r25
     a10:	f1 f7       	brne	.-4      	; 0xa0e <LCD_RD_REG16+0x14>
	
	delay_us(2);
	
	LCD_Data = 0x00;
     a12:	1b ba       	out	0x1b, r1	; 27
     a14:	94 2f       	mov	r25, r20
     a16:	9a 95       	dec	r25
     a18:	f1 f7       	brne	.-4      	; 0xa16 <LCD_RD_REG16+0x1c>
	delay_us(2);

	LCD_WR0;
     a1a:	9c 91       	ld	r25, X
     a1c:	9b 7f       	andi	r25, 0xFB	; 251
     a1e:	9c 93       	st	X, r25
     a20:	94 2f       	mov	r25, r20
     a22:	9a 95       	dec	r25
     a24:	f1 f7       	brne	.-4      	; 0xa22 <LCD_RD_REG16+0x28>
	delay_us(2);

	LCD_WR1;
     a26:	9c 91       	ld	r25, X
     a28:	94 60       	ori	r25, 0x04	; 4
     a2a:	9c 93       	st	X, r25
     a2c:	94 2f       	mov	r25, r20
     a2e:	9a 95       	dec	r25
     a30:	f1 f7       	brne	.-4      	; 0xa2e <LCD_RD_REG16+0x34>
	delay_us(2);

	LCD_Data = index;
     a32:	8b bb       	out	0x1b, r24	; 27
     a34:	84 2f       	mov	r24, r20
     a36:	8a 95       	dec	r24
     a38:	f1 f7       	brne	.-4      	; 0xa36 <LCD_RD_REG16+0x3c>
	delay_us(2);

	LCD_WR0;
     a3a:	8c 91       	ld	r24, X
     a3c:	8b 7f       	andi	r24, 0xFB	; 251
     a3e:	8c 93       	st	X, r24
     a40:	84 2f       	mov	r24, r20
     a42:	8a 95       	dec	r24
     a44:	f1 f7       	brne	.-4      	; 0xa42 <LCD_RD_REG16+0x48>
	delay_us(2);

	LCD_WR1;
     a46:	8c 91       	ld	r24, X
     a48:	84 60       	ori	r24, 0x04	; 4
     a4a:	8c 93       	st	X, r24
     a4c:	84 2f       	mov	r24, r20
     a4e:	8a 95       	dec	r24
     a50:	f1 f7       	brne	.-4      	; 0xa4e <LCD_RD_REG16+0x54>
	delay_us(2);

	LCD_RS1;
     a52:	8c 91       	ld	r24, X
     a54:	82 60       	ori	r24, 0x02	; 2
     a56:	8c 93       	st	X, r24
     a58:	84 2f       	mov	r24, r20
     a5a:	8a 95       	dec	r24
     a5c:	f1 f7       	brne	.-4      	; 0xa5a <LCD_RD_REG16+0x60>
	delay_us(2);

	LCD_Data = 0xFF;
     a5e:	9f ef       	ldi	r25, 0xFF	; 255
     a60:	9b bb       	out	0x1b, r25	; 27
     a62:	84 2f       	mov	r24, r20
     a64:	8a 95       	dec	r24
     a66:	f1 f7       	brne	.-4      	; 0xa64 <LCD_RD_REG16+0x6a>
	delay_us(2);

	LCD_RD0;
     a68:	e5 e6       	ldi	r30, 0x65	; 101
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	80 81       	ld	r24, Z
     a6e:	8f 7e       	andi	r24, 0xEF	; 239
     a70:	80 83       	st	Z, r24
     a72:	84 2f       	mov	r24, r20
     a74:	8a 95       	dec	r24
     a76:	f1 f7       	brne	.-4      	; 0xa74 <LCD_RD_REG16+0x7a>
	delay_us(2);

    //DDR_IN;  //数据输入
	delay_us(2);

	LCD_RD1;
     a78:	84 2f       	mov	r24, r20
     a7a:	8a 95       	dec	r24
     a7c:	f1 f7       	brne	.-4      	; 0xa7a <LCD_RD_REG16+0x80>
     a7e:	80 81       	ld	r24, Z
     a80:	80 61       	ori	r24, 0x10	; 16
     a82:	80 83       	st	Z, r24
	pd = LCD_Data;
     a84:	2b b3       	in	r18, 0x1b	; 27
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	84 2f       	mov	r24, r20
     a8a:	8a 95       	dec	r24
     a8c:	f1 f7       	brne	.-4      	; 0xa8a <LCD_RD_REG16+0x90>
	delay_us(2);

	LCD_Data = 0xFF;
     a8e:	9b bb       	out	0x1b, r25	; 27
	LCD_RD0;
     a90:	80 81       	ld	r24, Z
     a92:	8f 7e       	andi	r24, 0xEF	; 239
     a94:	80 83       	st	Z, r24
     a96:	4a 95       	dec	r20
     a98:	f1 f7       	brne	.-4      	; 0xa96 <LCD_RD_REG16+0x9c>
	delay_us(2);

	LCD_RD1;
     a9a:	80 81       	ld	r24, Z
     a9c:	80 61       	ori	r24, 0x10	; 16
     a9e:	80 83       	st	Z, r24
	pd = pd + LCD_Data*256;
     aa0:	4b b3       	in	r20, 0x1b	; 27
	LCD_EC1;
     aa2:	8c 91       	ld	r24, X
     aa4:	88 60       	ori	r24, 0x08	; 8
     aa6:	8c 93       	st	X, r24
	LCD_RS0;
     aa8:	8c 91       	ld	r24, X
     aaa:	8d 7f       	andi	r24, 0xFD	; 253
     aac:	8c 93       	st	X, r24
     aae:	94 2f       	mov	r25, r20
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	28 0f       	add	r18, r24
     ab4:	39 1f       	adc	r19, r25
	return pd;
}
     ab6:	c9 01       	movw	r24, r18
     ab8:	08 95       	ret

00000aba <LCD_WR_CMD>:
//	   写控制命令，index为寄存器地址，val为控制命令，16位长度
//***********************************************************************

void LCD_WR_CMD(uchar index,uint val)
{
	LCD_RS0;
     aba:	e2 e6       	ldi	r30, 0x62	; 98
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	90 81       	ld	r25, Z
     ac0:	9d 7f       	andi	r25, 0xFD	; 253
     ac2:	90 83       	st	Z, r25
	LCD_EC0;
     ac4:	90 81       	ld	r25, Z
     ac6:	97 7f       	andi	r25, 0xF7	; 247
     ac8:	90 83       	st	Z, r25
	LCD_Data = 0x00;
     aca:	1b ba       	out	0x1b, r1	; 27
	LCD_WR0;
     acc:	90 81       	ld	r25, Z
     ace:	9b 7f       	andi	r25, 0xFB	; 251
     ad0:	90 83       	st	Z, r25
	LCD_WR1;
     ad2:	90 81       	ld	r25, Z
     ad4:	94 60       	ori	r25, 0x04	; 4
     ad6:	90 83       	st	Z, r25
	LCD_Data = index;
     ad8:	8b bb       	out	0x1b, r24	; 27
	LCD_WR0;
     ada:	80 81       	ld	r24, Z
     adc:	8b 7f       	andi	r24, 0xFB	; 251
     ade:	80 83       	st	Z, r24
	LCD_WR1;
     ae0:	80 81       	ld	r24, Z
     ae2:	84 60       	ori	r24, 0x04	; 4
     ae4:	80 83       	st	Z, r24
	LCD_EC1;
     ae6:	80 81       	ld	r24, Z
     ae8:	88 60       	ori	r24, 0x08	; 8
     aea:	80 83       	st	Z, r24
	LCD_RS0;
     aec:	80 81       	ld	r24, Z
     aee:	8d 7f       	andi	r24, 0xFD	; 253
     af0:	80 83       	st	Z, r24

	LCD_RS1;                             //根据控制器datasheet，RS为1时，为写控制命令或者数据到GRAM
     af2:	80 81       	ld	r24, Z
     af4:	82 60       	ori	r24, 0x02	; 2
     af6:	80 83       	st	Z, r24
	LCD_EC0;
     af8:	80 81       	ld	r24, Z
     afa:	87 7f       	andi	r24, 0xF7	; 247
     afc:	80 83       	st	Z, r24
	LCD_Data = (uchar)(val>>8);
     afe:	7b bb       	out	0x1b, r23	; 27
	LCD_WR0;
     b00:	80 81       	ld	r24, Z
     b02:	8b 7f       	andi	r24, 0xFB	; 251
     b04:	80 83       	st	Z, r24
	LCD_WR1;
     b06:	80 81       	ld	r24, Z
     b08:	84 60       	ori	r24, 0x04	; 4
     b0a:	80 83       	st	Z, r24
	LCD_EC1;
     b0c:	80 81       	ld	r24, Z
     b0e:	88 60       	ori	r24, 0x08	; 8
     b10:	80 83       	st	Z, r24
	LCD_RS0;
     b12:	80 81       	ld	r24, Z
     b14:	8d 7f       	andi	r24, 0xFD	; 253
     b16:	80 83       	st	Z, r24
	LCD_RS1;
     b18:	80 81       	ld	r24, Z
     b1a:	82 60       	ori	r24, 0x02	; 2
     b1c:	80 83       	st	Z, r24
	LCD_EC0;
     b1e:	80 81       	ld	r24, Z
     b20:	87 7f       	andi	r24, 0xF7	; 247
     b22:	80 83       	st	Z, r24
	LCD_Data = (uchar)val;
     b24:	6b bb       	out	0x1b, r22	; 27
	LCD_WR0;
     b26:	80 81       	ld	r24, Z
     b28:	8b 7f       	andi	r24, 0xFB	; 251
     b2a:	80 83       	st	Z, r24
	LCD_WR1;
     b2c:	80 81       	ld	r24, Z
     b2e:	84 60       	ori	r24, 0x04	; 4
     b30:	80 83       	st	Z, r24
	LCD_EC1;
     b32:	80 81       	ld	r24, Z
     b34:	88 60       	ori	r24, 0x08	; 8
     b36:	80 83       	st	Z, r24
	LCD_RS0;
     b38:	80 81       	ld	r24, Z
     b3a:	8d 7f       	andi	r24, 0xFD	; 253
     b3c:	80 83       	st	Z, r24
}
     b3e:	08 95       	ret

00000b40 <LCD_WR_Data>:
//***********************************************************************

void LCD_WR_Data(uint val)
{

	LCD_Data = (uchar)(val>>8);
     b40:	9b bb       	out	0x1b, r25	; 27
	LCD_WR0;
     b42:	e2 e6       	ldi	r30, 0x62	; 98
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	90 81       	ld	r25, Z
     b48:	9b 7f       	andi	r25, 0xFB	; 251
     b4a:	90 83       	st	Z, r25
	LCD_WR1;
     b4c:	90 81       	ld	r25, Z
     b4e:	94 60       	ori	r25, 0x04	; 4
     b50:	90 83       	st	Z, r25
	//LCD_RS1;
	LCD_Data = (uchar)val;
     b52:	8b bb       	out	0x1b, r24	; 27
	LCD_WR0;
     b54:	80 81       	ld	r24, Z
     b56:	8b 7f       	andi	r24, 0xFB	; 251
     b58:	80 83       	st	Z, r24
	LCD_WR1;
     b5a:	80 81       	ld	r24, Z
     b5c:	84 60       	ori	r24, 0x04	; 4
     b5e:	80 83       	st	Z, r24

}
     b60:	08 95       	ret

00000b62 <LCD_WR_DataP>:
//	   向GRAM存储器写数据，用来显示，定义为8位指针调用
//***********************************************************************
void LCD_WR_DataP(uint val)
{

	LCD_Data = (uchar)val;
     b62:	8b bb       	out	0x1b, r24	; 27
	LCD_WR0;
     b64:	e2 e6       	ldi	r30, 0x62	; 98
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	8b 7f       	andi	r24, 0xFB	; 251
     b6c:	80 83       	st	Z, r24
	LCD_WR1;
     b6e:	80 81       	ld	r24, Z
     b70:	84 60       	ori	r24, 0x04	; 4
     b72:	80 83       	st	Z, r24
}
     b74:	08 95       	ret

00000b76 <LCD_Init>:

void LCD_Init()
{
     b76:	1f 93       	push	r17
	LCD_RST0;                      //复位有效，至少2ms
     b78:	97 98       	cbi	0x12, 7	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b7a:	86 e6       	ldi	r24, 0x66	; 102
     b7c:	9e e0       	ldi	r25, 0x0E	; 14
     b7e:	fc 01       	movw	r30, r24
     b80:	31 97       	sbiw	r30, 0x01	; 1
     b82:	f1 f7       	brne	.-4      	; 0xb80 <LCD_Init+0xa>
	delay_ms(2);
	LCD_RST1;                      //复位结束
     b84:	97 9a       	sbi	0x12, 7	; 18
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	f1 f7       	brne	.-4      	; 0xb86 <LCD_Init+0x10>
	delay_ms(2);

    LCD_WR_CMD(0x00,0x0001);		//启动晶振，必须有至少10ms的延时，保证稳定
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	61 e0       	ldi	r22, 0x01	; 1
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	98 e4       	ldi	r25, 0x48	; 72
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	f1 f7       	brne	.-4      	; 0xb98 <LCD_Init+0x22>
    delay_ms(10);
    LCD_WR_CMD(0x03,0x0030);        //设置数据扫描方向，由左至右，水平扫描
     b9c:	83 e0       	ldi	r24, 0x03	; 3
     b9e:	60 e3       	ldi	r22, 0x30	; 48
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
    //LCD_WR_CMD(0x03,0x0230);      //HWM=1为高速数据模式
    LCD_WR_CMD(0x01,0x011D);
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	6d e1       	ldi	r22, 0x1D	; 29
     baa:	71 e0       	ldi	r23, 0x01	; 1
     bac:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
    //delay_us(1000);
    LCD_WR_CMD(0x0a,0x0106); 
     bb0:	8a e0       	ldi	r24, 0x0A	; 10
     bb2:	66 e0       	ldi	r22, 0x06	; 6
     bb4:	71 e0       	ldi	r23, 0x01	; 1
     bb6:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
    //delay_us(1000);
    LCD_WR_CMD(0x07,0x0037);        //非8位模式,开显示
     bba:	87 e0       	ldi	r24, 0x07	; 7
     bbc:	67 e3       	ldi	r22, 0x37	; 55
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>

    LCD_WR_CMD(0x08,0x0707);        //光栅周期数为7，若为0，则无显示，是为了保证足够的时间让光栅回到行左边
     bc4:	88 e0       	ldi	r24, 0x08	; 8
     bc6:	67 e0       	ldi	r22, 0x07	; 7
     bc8:	77 e0       	ldi	r23, 0x07	; 7
     bca:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
    LCD_WR_CMD(0x0c,0x01);
     bce:	8c e0       	ldi	r24, 0x0C	; 12
     bd0:	61 e0       	ldi	r22, 0x01	; 1
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
    LCD_WR_CMD(0x02,0x0400);        //驱动波形控制指令
     bd8:	82 e0       	ldi	r24, 0x02	; 2
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	74 e0       	ldi	r23, 0x04	; 4
     bde:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
    //delay_us(1000);
    LCD_WR_CMD(0x0a,0x0107);        //门驱动和电源控制IC指令，后面要紧跟需要的指令
     be2:	8a e0       	ldi	r24, 0x0A	; 10
     be4:	67 e0       	ldi	r22, 0x07	; 7
     be6:	71 e0       	ldi	r23, 0x01	; 1
     be8:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
 //   delay_us(1000);

    LCD_WR_CMD(0x12,0x0001);        //VciOUT = 3V × 0.83 = 2.49V
     bec:	82 e1       	ldi	r24, 0x12	; 18
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
    // only 100(=VCI), 000(.92 VCI),001(.83),010(.73VCI) is valid. other is inhibited
  //  delay_us(1000);
    LCD_WR_CMD(0x0a,0x0101); 
     bf6:	8a e0       	ldi	r24, 0x0A	; 10
     bf8:	61 e0       	ldi	r22, 0x01	; 1
     bfa:	71 e0       	ldi	r23, 0x01	; 1
     bfc:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
   // delay_us(1000);
   
   // LCD_WR_CMD(0x13,0x404);
   // delay_us(1);LCD_WR_CMD(0x0a,0x0101); delay_us(1);

    LCD_WR_CMD(0x11,0x0505);   //CAD=0
     c00:	81 e1       	ldi	r24, 0x11	; 17
     c02:	65 e0       	ldi	r22, 0x05	; 5
     c04:	75 e0       	ldi	r23, 0x05	; 5
     c06:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
   // delay_us(1);LCD_WR_CMD(0x0a,0x0101); delay_us(1);



    LCD_WR_CMD(0x14,0x2c0f); // last 4 bit must be 1!!! vcomg = 1, 
     c0a:	84 e1       	ldi	r24, 0x14	; 20
     c0c:	6f e0       	ldi	r22, 0x0F	; 15
     c0e:	7c e2       	ldi	r23, 0x2C	; 44
     c10:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c14:	12 e0       	ldi	r17, 0x02	; 2
     c16:	81 2f       	mov	r24, r17
     c18:	8a 95       	dec	r24
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <LCD_Init+0xa2>
    // VDV4-0 == 09-0e,10-12 // other is inhibited.!!! 
    delay_us(1);
    LCD_WR_CMD(0x0a,0x0102); 
     c1c:	8a e0       	ldi	r24, 0x0A	; 10
     c1e:	62 e0       	ldi	r22, 0x02	; 2
     c20:	71 e0       	ldi	r23, 0x01	; 1
     c22:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
   // delay_us(1);

    LCD_WR_CMD(0x10,0x1a10);// if Vci > 3.0V, use 0x1a10.
     c26:	80 e1       	ldi	r24, 0x10	; 16
     c28:	60 e1       	ldi	r22, 0x10	; 16
     c2a:	7a e1       	ldi	r23, 0x1A	; 26
     c2c:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
     c30:	81 2f       	mov	r24, r17
     c32:	8a 95       	dec	r24
     c34:	f1 f7       	brne	.-4      	; 0xc32 <LCD_Init+0xbc>
    delay_us(1);
    LCD_WR_CMD(0x0a,0x0100); 
     c36:	8a e0       	ldi	r24, 0x0A	; 10
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	71 e0       	ldi	r23, 0x01	; 1
     c3c:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
  //  delay_us(1);

    LCD_WR_CMD(0x13,0x0616); //////////!!!!!!!!!!!!! VERY IMPORTANT!!!
     c40:	83 e1       	ldi	r24, 0x13	; 19
     c42:	66 e1       	ldi	r22, 0x16	; 22
     c44:	76 e0       	ldi	r23, 0x06	; 6
     c46:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
     c4a:	81 2f       	mov	r24, r17
     c4c:	8a 95       	dec	r24
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <LCD_Init+0xd6>
    //set VRH3-0 to fit REG1out= 3 to DDVDH-0.5
    delay_us(1);
    LCD_WR_CMD(0x0a,0x0101); 
     c50:	8a e0       	ldi	r24, 0x0A	; 10
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	71 e0       	ldi	r23, 0x01	; 1
     c56:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
  //  delay_ms(1);

    LCD_WR_CMD(0x30,0x0003);
     c5a:	80 e3       	ldi	r24, 0x30	; 48
     c5c:	63 e0       	ldi	r22, 0x03	; 3
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
    LCD_WR_CMD(0x31,0x0404);
     c64:	81 e3       	ldi	r24, 0x31	; 49
     c66:	64 e0       	ldi	r22, 0x04	; 4
     c68:	74 e0       	ldi	r23, 0x04	; 4
     c6a:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
    LCD_WR_CMD(0x32,0x0303);
     c6e:	82 e3       	ldi	r24, 0x32	; 50
     c70:	63 e0       	ldi	r22, 0x03	; 3
     c72:	73 e0       	ldi	r23, 0x03	; 3
     c74:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
    LCD_WR_CMD(0x33,0x0406);
     c78:	83 e3       	ldi	r24, 0x33	; 51
     c7a:	66 e0       	ldi	r22, 0x06	; 6
     c7c:	74 e0       	ldi	r23, 0x04	; 4
     c7e:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
    LCD_WR_CMD(0x34,0x0404);
     c82:	84 e3       	ldi	r24, 0x34	; 52
     c84:	64 e0       	ldi	r22, 0x04	; 4
     c86:	74 e0       	ldi	r23, 0x04	; 4
     c88:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
    LCD_WR_CMD(0x35,0x0303);
     c8c:	85 e3       	ldi	r24, 0x35	; 53
     c8e:	63 e0       	ldi	r22, 0x03	; 3
     c90:	73 e0       	ldi	r23, 0x03	; 3
     c92:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
    LCD_WR_CMD(0x36,0x0407);
     c96:	86 e3       	ldi	r24, 0x36	; 54
     c98:	67 e0       	ldi	r22, 0x07	; 7
     c9a:	74 e0       	ldi	r23, 0x04	; 4
     c9c:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
    LCD_WR_CMD(0x37,0x0604);
     ca0:	87 e3       	ldi	r24, 0x37	; 55
     ca2:	64 e0       	ldi	r22, 0x04	; 4
     ca4:	76 e0       	ldi	r23, 0x06	; 6
     ca6:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
     caa:	81 2f       	mov	r24, r17
     cac:	8a 95       	dec	r24
     cae:	f1 f7       	brne	.-4      	; 0xcac <LCD_Init+0x136>
    delay_us(1);
  //  LCD_WR_CMD(0x0a,0x0100);
   // delay_ms(1); 
    
    //*********** SAP, AP set****************	
    LCD_WR_CMD(0x10,0x1a10);//BT2-0 Ok,and...
     cb0:	80 e1       	ldi	r24, 0x10	; 16
     cb2:	60 e1       	ldi	r22, 0x10	; 16
     cb4:	7a e1       	ldi	r23, 0x1A	; 26
     cb6:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
     cba:	1a 95       	dec	r17
     cbc:	f1 f7       	brne	.-4      	; 0xcba <LCD_Init+0x144>
    delay_us(1);
    LCD_WR_CMD(0x0a,0x0100); 
     cbe:	8a e0       	ldi	r24, 0x0A	; 10
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	71 e0       	ldi	r23, 0x01	; 1
     cc4:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
  //  delay_us(100);	
	//*********** PON  set********************
	LCD_WR_CMD(0x13,0x0616); //////////
     cc8:	83 e1       	ldi	r24, 0x13	; 19
     cca:	66 e1       	ldi	r22, 0x16	; 22
     ccc:	76 e0       	ldi	r23, 0x06	; 6
     cce:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
 //   LCD_WR_CMD(0x07,0x0037);
  //  delay_us(1);
  //  LCD_WR_CMD(0x0a,0x0100); 
   // delay_us(100); 
      
}
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <LCD_clear>:
//	   清屏子程序
//***********************************************************************


void LCD_clear(uint p)
{
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	8c 01       	movw	r16, r24
	uint num;
	
	LCD_WR_CMD(0x44,127*256+0);
     cdc:	84 e4       	ldi	r24, 0x44	; 68
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	7f e7       	ldi	r23, 0x7F	; 127
     ce2:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
	LCD_WR_CMD(0x45,239*256+80);
     ce6:	85 e4       	ldi	r24, 0x45	; 69
     ce8:	60 e5       	ldi	r22, 0x50	; 80
     cea:	7f ee       	ldi	r23, 0xEF	; 239
     cec:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
	LCD_WR_CMD(0x21,80*256+0);	
     cf0:	81 e2       	ldi	r24, 0x21	; 33
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	70 e5       	ldi	r23, 0x50	; 80
     cf6:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
	LCD_WR_REG(0x22);
     cfa:	82 e2       	ldi	r24, 0x22	; 34
     cfc:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_WR_REG>
	LCD_EC0;
     d00:	80 91 62 00 	lds	r24, 0x0062
     d04:	87 7f       	andi	r24, 0xF7	; 247
     d06:	80 93 62 00 	sts	0x0062, r24
	LCD_RS1;
     d0a:	80 91 62 00 	lds	r24, 0x0062
     d0e:	82 60       	ori	r24, 0x02	; 2
     d10:	80 93 62 00 	sts	0x0062, r24
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e5       	ldi	r19, 0x50	; 80
//***********************************************************************

void LCD_WR_Data(uint val)
{

	LCD_Data = (uchar)(val>>8);
     d18:	1b bb       	out	0x1b, r17	; 27
	LCD_WR0;
     d1a:	80 91 62 00 	lds	r24, 0x0062
     d1e:	8b 7f       	andi	r24, 0xFB	; 251
     d20:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
     d24:	80 91 62 00 	lds	r24, 0x0062
     d28:	84 60       	ori	r24, 0x04	; 4
     d2a:	80 93 62 00 	sts	0x0062, r24
	//LCD_RS1;
	LCD_Data = (uchar)val;
     d2e:	0b bb       	out	0x1b, r16	; 27
	LCD_WR0;
     d30:	80 91 62 00 	lds	r24, 0x0062
     d34:	8b 7f       	andi	r24, 0xFB	; 251
     d36:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
     d3a:	80 91 62 00 	lds	r24, 0x0062
     d3e:	84 60       	ori	r24, 0x04	; 4
     d40:	80 93 62 00 	sts	0x0062, r24
	LCD_WR_CMD(0x45,239*256+80);
	LCD_WR_CMD(0x21,80*256+0);	
	LCD_WR_REG(0x22);
	LCD_EC0;
	LCD_RS1;
	for(num=160*128;num>0;num--)
     d44:	21 50       	subi	r18, 0x01	; 1
     d46:	30 40       	sbci	r19, 0x00	; 0
     d48:	39 f7       	brne	.-50     	; 0xd18 <LCD_clear+0x42>
	{
		LCD_WR_Data(p);
	}
	LCD_WR_CMD(0x44,95*256+0);
     d4a:	84 e4       	ldi	r24, 0x44	; 68
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	7f e5       	ldi	r23, 0x5F	; 95
     d50:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
	LCD_WR_CMD(0x45,79*256+16);
     d54:	85 e4       	ldi	r24, 0x45	; 69
     d56:	60 e1       	ldi	r22, 0x10	; 16
     d58:	7f e4       	ldi	r23, 0x4F	; 79
     d5a:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
	LCD_WR_CMD(0x21,16*256+0);	
     d5e:	81 e2       	ldi	r24, 0x21	; 33
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	70 e1       	ldi	r23, 0x10	; 16
     d64:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
	LCD_WR_REG(0x22);
     d68:	82 e2       	ldi	r24, 0x22	; 34
     d6a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_WR_REG>
	LCD_EC0;
     d6e:	80 91 62 00 	lds	r24, 0x0062
     d72:	87 7f       	andi	r24, 0xF7	; 247
     d74:	80 93 62 00 	sts	0x0062, r24
	LCD_RS1;
     d78:	80 91 62 00 	lds	r24, 0x0062
     d7c:	82 60       	ori	r24, 0x02	; 2
     d7e:	80 93 62 00 	sts	0x0062, r24
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	38 e1       	ldi	r19, 0x18	; 24
//***********************************************************************

void LCD_WR_Data(uint val)
{

	LCD_Data = (uchar)(val>>8);
     d86:	1b bb       	out	0x1b, r17	; 27
	LCD_WR0;
     d88:	80 91 62 00 	lds	r24, 0x0062
     d8c:	8b 7f       	andi	r24, 0xFB	; 251
     d8e:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
     d92:	80 91 62 00 	lds	r24, 0x0062
     d96:	84 60       	ori	r24, 0x04	; 4
     d98:	80 93 62 00 	sts	0x0062, r24
	//LCD_RS1;
	LCD_Data = (uchar)val;
     d9c:	0b bb       	out	0x1b, r16	; 27
	LCD_WR0;
     d9e:	80 91 62 00 	lds	r24, 0x0062
     da2:	8b 7f       	andi	r24, 0xFB	; 251
     da4:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
     da8:	80 91 62 00 	lds	r24, 0x0062
     dac:	84 60       	ori	r24, 0x04	; 4
     dae:	80 93 62 00 	sts	0x0062, r24
	LCD_WR_CMD(0x45,79*256+16);
	LCD_WR_CMD(0x21,16*256+0);	
	LCD_WR_REG(0x22);
	LCD_EC0;
	LCD_RS1;
	for(num=64*96;num>0;num--)
     db2:	21 50       	subi	r18, 0x01	; 1
     db4:	30 40       	sbci	r19, 0x00	; 0
     db6:	39 f7       	brne	.-50     	; 0xd86 <LCD_clear+0xb0>
	{
		LCD_WR_Data(p);
	}
	LCD_EC1;
     db8:	80 91 62 00 	lds	r24, 0x0062
     dbc:	88 60       	ori	r24, 0x08	; 8
     dbe:	80 93 62 00 	sts	0x0062, r24
}
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	08 95       	ret

00000dc8 <DisplayChar>:
//     y:显示位置第几行,整屏是160/16==10行
//     char_color:字体颜色
//***********************************************************************

void DisplayChar(uchar casc,uchar postion_x,uchar postion_y,uint char_color)
{
     dc8:	9f 92       	push	r9
     dca:	af 92       	push	r10
     dcc:	bf 92       	push	r11
     dce:	cf 92       	push	r12
     dd0:	df 92       	push	r13
     dd2:	ef 92       	push	r14
     dd4:	ff 92       	push	r15
     dd6:	0f 93       	push	r16
     dd8:	1f 93       	push	r17
     dda:	b8 2e       	mov	r11, r24
     ddc:	c6 2e       	mov	r12, r22
     dde:	04 2f       	mov	r16, r20
     de0:	92 2e       	mov	r9, r18
     de2:	a3 2e       	mov	r10, r19

	uchar i,j,b;
	uchar *p;
	
	LCD_WR_CMD(0x44,(postion_x*8+7)*256+(postion_x*8));	            //x end point
     de4:	dd 24       	eor	r13, r13
     de6:	88 e0       	ldi	r24, 0x08	; 8
     de8:	98 e0       	ldi	r25, 0x08	; 8
     dea:	c8 9e       	mul	r12, r24
     dec:	b0 01       	movw	r22, r0
     dee:	c9 9e       	mul	r12, r25
     df0:	70 0d       	add	r23, r0
     df2:	d8 9e       	mul	r13, r24
     df4:	70 0d       	add	r23, r0
     df6:	11 24       	eor	r1, r1
     df8:	60 50       	subi	r22, 0x00	; 0
     dfa:	79 4f       	sbci	r23, 0xF9	; 249
     dfc:	84 e4       	ldi	r24, 0x44	; 68
     dfe:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
	LCD_WR_CMD(0x45,(postion_y*16+15+80)*256+(postion_y*16+80));	//y end point
     e02:	10 e0       	ldi	r17, 0x00	; 0
     e04:	55 e0       	ldi	r21, 0x05	; 5
     e06:	e5 2e       	mov	r14, r21
     e08:	f1 2c       	mov	r15, r1
     e0a:	e0 0e       	add	r14, r16
     e0c:	f1 1e       	adc	r15, r17
     e0e:	10 2f       	mov	r17, r16
     e10:	00 27       	eor	r16, r16
     e12:	0e 0d       	add	r16, r14
     e14:	1f 1d       	adc	r17, r15
     e16:	00 51       	subi	r16, 0x10	; 16
     e18:	1a 4f       	sbci	r17, 0xFA	; 250
     e1a:	02 95       	swap	r16
     e1c:	12 95       	swap	r17
     e1e:	10 7f       	andi	r17, 0xF0	; 240
     e20:	10 27       	eor	r17, r16
     e22:	00 7f       	andi	r16, 0xF0	; 240
     e24:	10 27       	eor	r17, r16
     e26:	85 e4       	ldi	r24, 0x45	; 69
     e28:	b8 01       	movw	r22, r16
     e2a:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
	LCD_WR_CMD(0x21,(postion_y*16+80)*256+(postion_x*8));	
     e2e:	fe 2c       	mov	r15, r14
     e30:	ee 24       	eor	r14, r14
     e32:	ff 0c       	add	r15, r15
     e34:	ec 0c       	add	r14, r12
     e36:	fd 1c       	adc	r15, r13
     e38:	ee 0c       	add	r14, r14
     e3a:	ff 1c       	adc	r15, r15
     e3c:	ee 0c       	add	r14, r14
     e3e:	ff 1c       	adc	r15, r15
     e40:	ee 0c       	add	r14, r14
     e42:	ff 1c       	adc	r15, r15
     e44:	81 e2       	ldi	r24, 0x21	; 33
     e46:	b7 01       	movw	r22, r14
     e48:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
	LCD_WR_REG(0x22);
     e4c:	82 e2       	ldi	r24, 0x22	; 34
     e4e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_WR_REG>
	LCD_EC0;
     e52:	80 91 62 00 	lds	r24, 0x0062
     e56:	87 7f       	andi	r24, 0xF7	; 247
     e58:	80 93 62 00 	sts	0x0062, r24
	LCD_RS1;
     e5c:	80 91 62 00 	lds	r24, 0x0062
     e60:	82 60       	ori	r24, 0x02	; 2
     e62:	80 93 62 00 	sts	0x0062, r24
	p=ascii;
	p+=casc*16;
     e66:	4b 2d       	mov	r20, r11
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	42 95       	swap	r20
     e6c:	52 95       	swap	r21
     e6e:	50 7f       	andi	r21, 0xF0	; 240
     e70:	54 27       	eor	r21, r20
     e72:	40 7f       	andi	r20, 0xF0	; 240
     e74:	54 27       	eor	r21, r20
     e76:	48 5f       	subi	r20, 0xF8	; 248
     e78:	5e 4f       	sbci	r21, 0xFE	; 254
//***********************************************************************

void LCD_WR_Data(uint val)
{

	LCD_Data = (uchar)(val>>8);
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
	LCD_RS1;
	p=ascii;
	p+=casc*16;
	for(j=0;j<16;j++)
	{
		b=*(p+j);
     e7e:	fa 01       	movw	r30, r20
     e80:	e2 0f       	add	r30, r18
     e82:	f3 1f       	adc	r31, r19
     e84:	e0 81       	ld	r30, Z
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	1a c0       	rjmp	.+52     	; 0xebe <DisplayChar+0xf6>
//***********************************************************************

void LCD_WR_Data(uint val)
{

	LCD_Data = (uchar)(val>>8);
     e8a:	1b ba       	out	0x1b, r1	; 27
	LCD_WR0;
     e8c:	80 91 62 00 	lds	r24, 0x0062
     e90:	8b 7f       	andi	r24, 0xFB	; 251
     e92:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
     e96:	80 91 62 00 	lds	r24, 0x0062
     e9a:	84 60       	ori	r24, 0x04	; 4
     e9c:	80 93 62 00 	sts	0x0062, r24
	//LCD_RS1;
	LCD_Data = (uchar)val;
     ea0:	1b ba       	out	0x1b, r1	; 27
	LCD_WR0;
     ea2:	80 91 62 00 	lds	r24, 0x0062
     ea6:	8b 7f       	andi	r24, 0xFB	; 251
     ea8:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
     eac:	80 91 62 00 	lds	r24, 0x0062
     eb0:	84 60       	ori	r24, 0x04	; 4
     eb2:	80 93 62 00 	sts	0x0062, r24
	p=ascii;
	p+=casc*16;
	for(j=0;j<16;j++)
	{
		b=*(p+j);
		for(i=0;i<8;i++)
     eb6:	9f 5f       	subi	r25, 0xFF	; 255
     eb8:	98 30       	cpi	r25, 0x08	; 8
     eba:	81 f0       	breq	.+32     	; 0xedc <DisplayChar+0x114>
			}
			else
			{
				LCD_WR_Data(0x0000);       				//背景颜色
			}
			b=b<<1;
     ebc:	ee 0f       	add	r30, r30
	for(j=0;j<16;j++)
	{
		b=*(p+j);
		for(i=0;i<8;i++)
		{
			if(b&0x80)
     ebe:	e7 ff       	sbrs	r30, 7
     ec0:	e4 cf       	rjmp	.-56     	; 0xe8a <DisplayChar+0xc2>
//***********************************************************************

void LCD_WR_Data(uint val)
{

	LCD_Data = (uchar)(val>>8);
     ec2:	ab ba       	out	0x1b, r10	; 27
	LCD_WR0;
     ec4:	80 91 62 00 	lds	r24, 0x0062
     ec8:	8b 7f       	andi	r24, 0xFB	; 251
     eca:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
     ece:	80 91 62 00 	lds	r24, 0x0062
     ed2:	84 60       	ori	r24, 0x04	; 4
     ed4:	80 93 62 00 	sts	0x0062, r24
	//LCD_RS1;
	LCD_Data = (uchar)val;
     ed8:	9b ba       	out	0x1b, r9	; 27
     eda:	e3 cf       	rjmp	.-58     	; 0xea2 <DisplayChar+0xda>
			}
			else
			{
				LCD_WR_Data(0x0000);       				//背景颜色
			}
			b=b<<1;
     edc:	2f 5f       	subi	r18, 0xFF	; 255
     ede:	3f 4f       	sbci	r19, 0xFF	; 255
	LCD_WR_REG(0x22);
	LCD_EC0;
	LCD_RS1;
	p=ascii;
	p+=casc*16;
	for(j=0;j<16;j++)
     ee0:	20 31       	cpi	r18, 0x10	; 16
     ee2:	31 05       	cpc	r19, r1
     ee4:	61 f6       	brne	.-104    	; 0xe7e <DisplayChar+0xb6>
			}
			b=b<<1;
			
		}	
	}
	LCD_EC1;
     ee6:	80 91 62 00 	lds	r24, 0x0062
     eea:	88 60       	ori	r24, 0x08	; 8
     eec:	80 93 62 00 	sts	0x0062, r24
}
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	df 90       	pop	r13
     efa:	cf 90       	pop	r12
     efc:	bf 90       	pop	r11
     efe:	af 90       	pop	r10
     f00:	9f 90       	pop	r9
     f02:	08 95       	ret

00000f04 <DisplayGB2312>:
//         y:显示位置第几行
//		  color:字体颜色
//***********************************************************************

void DisplayGB2312(uchar gb,uchar postion_x,uchar postion_y,uint gb_color)
{
     f04:	9f 92       	push	r9
     f06:	af 92       	push	r10
     f08:	bf 92       	push	r11
     f0a:	cf 92       	push	r12
     f0c:	df 92       	push	r13
     f0e:	ef 92       	push	r14
     f10:	ff 92       	push	r15
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	b8 2e       	mov	r11, r24
     f18:	c6 2e       	mov	r12, r22
     f1a:	04 2f       	mov	r16, r20
     f1c:	a2 2e       	mov	r10, r18
     f1e:	93 2e       	mov	r9, r19

	uchar i,j,b;
	uchar *p;
	
	LCD_WR_CMD(0x44,(postion_x*16+15)*256+(postion_x*16));	        //x end point
     f20:	dd 24       	eor	r13, r13
     f22:	80 e1       	ldi	r24, 0x10	; 16
     f24:	90 e1       	ldi	r25, 0x10	; 16
     f26:	c8 9e       	mul	r12, r24
     f28:	b0 01       	movw	r22, r0
     f2a:	c9 9e       	mul	r12, r25
     f2c:	70 0d       	add	r23, r0
     f2e:	d8 9e       	mul	r13, r24
     f30:	70 0d       	add	r23, r0
     f32:	11 24       	eor	r1, r1
     f34:	60 50       	subi	r22, 0x00	; 0
     f36:	71 4f       	sbci	r23, 0xF1	; 241
     f38:	84 e4       	ldi	r24, 0x44	; 68
     f3a:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
	LCD_WR_CMD(0x45,(postion_y*16+15+80)*256+(postion_y*16+80));	//y end point
     f3e:	10 e0       	ldi	r17, 0x00	; 0
     f40:	b5 e0       	ldi	r27, 0x05	; 5
     f42:	eb 2e       	mov	r14, r27
     f44:	f1 2c       	mov	r15, r1
     f46:	e0 0e       	add	r14, r16
     f48:	f1 1e       	adc	r15, r17
     f4a:	10 2f       	mov	r17, r16
     f4c:	00 27       	eor	r16, r16
     f4e:	0e 0d       	add	r16, r14
     f50:	1f 1d       	adc	r17, r15
     f52:	00 51       	subi	r16, 0x10	; 16
     f54:	1a 4f       	sbci	r17, 0xFA	; 250
     f56:	02 95       	swap	r16
     f58:	12 95       	swap	r17
     f5a:	10 7f       	andi	r17, 0xF0	; 240
     f5c:	10 27       	eor	r17, r16
     f5e:	00 7f       	andi	r16, 0xF0	; 240
     f60:	10 27       	eor	r17, r16
     f62:	85 e4       	ldi	r24, 0x45	; 69
     f64:	b8 01       	movw	r22, r16
     f66:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
	LCD_WR_CMD(0x21,(postion_y*16+80)*256+(postion_x*16));	
     f6a:	fe 2c       	mov	r15, r14
     f6c:	ee 24       	eor	r14, r14
     f6e:	ec 0c       	add	r14, r12
     f70:	fd 1c       	adc	r15, r13
     f72:	e2 94       	swap	r14
     f74:	f2 94       	swap	r15
     f76:	70 ef       	ldi	r23, 0xF0	; 240
     f78:	f7 22       	and	r15, r23
     f7a:	fe 24       	eor	r15, r14
     f7c:	e7 22       	and	r14, r23
     f7e:	fe 24       	eor	r15, r14
     f80:	81 e2       	ldi	r24, 0x21	; 33
     f82:	b7 01       	movw	r22, r14
     f84:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
	LCD_WR_REG(0x22);
     f88:	82 e2       	ldi	r24, 0x22	; 34
     f8a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_WR_REG>
	LCD_EC0;
     f8e:	80 91 62 00 	lds	r24, 0x0062
     f92:	87 7f       	andi	r24, 0xF7	; 247
     f94:	80 93 62 00 	sts	0x0062, r24
	LCD_RS1;
     f98:	80 91 62 00 	lds	r24, 0x0062
     f9c:	82 60       	ori	r24, 0x02	; 2
     f9e:	80 93 62 00 	sts	0x0062, r24
	p=GB2312;
	p+=gb*32;
     fa2:	4b 2d       	mov	r20, r11
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	44 0f       	add	r20, r20
     fa8:	55 1f       	adc	r21, r21
     faa:	42 95       	swap	r20
     fac:	52 95       	swap	r21
     fae:	50 7f       	andi	r21, 0xF0	; 240
     fb0:	54 27       	eor	r21, r20
     fb2:	40 7f       	andi	r20, 0xF0	; 240
     fb4:	54 27       	eor	r21, r20
     fb6:	48 5f       	subi	r20, 0xF8	; 248
     fb8:	56 4f       	sbci	r21, 0xF6	; 246
//***********************************************************************

void LCD_WR_Data(uint val)
{

	LCD_Data = (uchar)(val>>8);
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
	LCD_RS1;
	p=GB2312;
	p+=gb*32;
	for(j=0;j<32;j++)
	{
		b=*(p+j);
     fbe:	fa 01       	movw	r30, r20
     fc0:	e2 0f       	add	r30, r18
     fc2:	f3 1f       	adc	r31, r19
     fc4:	e0 81       	ld	r30, Z
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	1a c0       	rjmp	.+52     	; 0xffe <DisplayGB2312+0xfa>
//***********************************************************************

void LCD_WR_Data(uint val)
{

	LCD_Data = (uchar)(val>>8);
     fca:	1b ba       	out	0x1b, r1	; 27
	LCD_WR0;
     fcc:	80 91 62 00 	lds	r24, 0x0062
     fd0:	8b 7f       	andi	r24, 0xFB	; 251
     fd2:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
     fd6:	80 91 62 00 	lds	r24, 0x0062
     fda:	84 60       	ori	r24, 0x04	; 4
     fdc:	80 93 62 00 	sts	0x0062, r24
	//LCD_RS1;
	LCD_Data = (uchar)val;
     fe0:	1b ba       	out	0x1b, r1	; 27
	LCD_WR0;
     fe2:	80 91 62 00 	lds	r24, 0x0062
     fe6:	8b 7f       	andi	r24, 0xFB	; 251
     fe8:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
     fec:	80 91 62 00 	lds	r24, 0x0062
     ff0:	84 60       	ori	r24, 0x04	; 4
     ff2:	80 93 62 00 	sts	0x0062, r24
	p=GB2312;
	p+=gb*32;
	for(j=0;j<32;j++)
	{
		b=*(p+j);
		for(i=0;i<8;i++)
     ff6:	9f 5f       	subi	r25, 0xFF	; 255
     ff8:	98 30       	cpi	r25, 0x08	; 8
     ffa:	81 f0       	breq	.+32     	; 0x101c <DisplayGB2312+0x118>
			}
			else
			{
				LCD_WR_Data(0x0000);         //背景颜色
			}
			b=b<<1;
     ffc:	ee 0f       	add	r30, r30
	for(j=0;j<32;j++)
	{
		b=*(p+j);
		for(i=0;i<8;i++)
		{
			if(b&0x80)
     ffe:	e7 ff       	sbrs	r30, 7
    1000:	e4 cf       	rjmp	.-56     	; 0xfca <DisplayGB2312+0xc6>
//***********************************************************************

void LCD_WR_Data(uint val)
{

	LCD_Data = (uchar)(val>>8);
    1002:	9b ba       	out	0x1b, r9	; 27
	LCD_WR0;
    1004:	80 91 62 00 	lds	r24, 0x0062
    1008:	8b 7f       	andi	r24, 0xFB	; 251
    100a:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
    100e:	80 91 62 00 	lds	r24, 0x0062
    1012:	84 60       	ori	r24, 0x04	; 4
    1014:	80 93 62 00 	sts	0x0062, r24
	//LCD_RS1;
	LCD_Data = (uchar)val;
    1018:	ab ba       	out	0x1b, r10	; 27
    101a:	e3 cf       	rjmp	.-58     	; 0xfe2 <DisplayGB2312+0xde>
			}
			else
			{
				LCD_WR_Data(0x0000);         //背景颜色
			}
			b=b<<1;
    101c:	2f 5f       	subi	r18, 0xFF	; 255
    101e:	3f 4f       	sbci	r19, 0xFF	; 255
	LCD_WR_REG(0x22);
	LCD_EC0;
	LCD_RS1;
	p=GB2312;
	p+=gb*32;
	for(j=0;j<32;j++)
    1020:	20 32       	cpi	r18, 0x20	; 32
    1022:	31 05       	cpc	r19, r1
    1024:	61 f6       	brne	.-104    	; 0xfbe <DisplayGB2312+0xba>
			}
			b=b<<1;
			
		}	
	}
	LCD_EC1;
    1026:	80 91 62 00 	lds	r24, 0x0062
    102a:	88 60       	ori	r24, 0x08	; 8
    102c:	80 93 62 00 	sts	0x0062, r24
}
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	df 90       	pop	r13
    103a:	cf 90       	pop	r12
    103c:	bf 90       	pop	r11
    103e:	af 90       	pop	r10
    1040:	9f 90       	pop	r9
    1042:	08 95       	ret

00001044 <DisplayString>:
//         x:显示位置第几列
//         y:显示位置第几行
//***********************************************************************

void DisplayString(uchar *s,uchar x,uchar y,uint s_color)                      //英文字符串显示.
{
    1044:	ef 92       	push	r14
    1046:	ff 92       	push	r15
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	ec 01       	movw	r28, r24
    1052:	16 2f       	mov	r17, r22
    1054:	04 2f       	mov	r16, r20
    1056:	79 01       	movw	r14, r18
	while (*s) 
    1058:	88 81       	ld	r24, Y
    105a:	88 23       	and	r24, r24
    105c:	39 f4       	brne	.+14     	; 0x106c <DisplayString+0x28>
    105e:	16 c0       	rjmp	.+44     	; 0x108c <DisplayString+0x48>
	{ 
		DisplayChar(*s,x,y,s_color);
		if(++x>=16)
		{
			x=0;
			if(++y>=10)
    1060:	10 e0       	ldi	r17, 0x00	; 0
    1062:	00 e0       	ldi	r16, 0x00	; 0
			{
				y=0;
			}
		}
		s++;
    1064:	21 96       	adiw	r28, 0x01	; 1
//         y:显示位置第几行
//***********************************************************************

void DisplayString(uchar *s,uchar x,uchar y,uint s_color)                      //英文字符串显示.
{
	while (*s) 
    1066:	88 81       	ld	r24, Y
    1068:	88 23       	and	r24, r24
    106a:	81 f0       	breq	.+32     	; 0x108c <DisplayString+0x48>
	{ 
		DisplayChar(*s,x,y,s_color);
    106c:	61 2f       	mov	r22, r17
    106e:	40 2f       	mov	r20, r16
    1070:	97 01       	movw	r18, r14
    1072:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <DisplayChar>
		if(++x>=16)
    1076:	1f 5f       	subi	r17, 0xFF	; 255
    1078:	10 31       	cpi	r17, 0x10	; 16
    107a:	a0 f3       	brcs	.-24     	; 0x1064 <DisplayString+0x20>
		{
			x=0;
			if(++y>=10)
    107c:	0f 5f       	subi	r16, 0xFF	; 255
    107e:	0a 30       	cpi	r16, 0x0A	; 10
    1080:	78 f7       	brcc	.-34     	; 0x1060 <DisplayString+0x1c>
    1082:	10 e0       	ldi	r17, 0x00	; 0
			{
				y=0;
			}
		}
		s++;
    1084:	21 96       	adiw	r28, 0x01	; 1
//         y:显示位置第几行
//***********************************************************************

void DisplayString(uchar *s,uchar x,uchar y,uint s_color)                      //英文字符串显示.
{
	while (*s) 
    1086:	88 81       	ld	r24, Y
    1088:	88 23       	and	r24, r24
    108a:	81 f7       	brne	.-32     	; 0x106c <DisplayString+0x28>
				y=0;
			}
		}
		s++;
    }
}
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	ff 90       	pop	r15
    1096:	ef 90       	pop	r14
    1098:	08 95       	ret

0000109a <GUIback>:
//***********************************************************************
//          打点绘图背景颜色函数，可先调用,相当于清屏函数
//***********************************************************************

void GUIback(uint back_color)                 //背景函数
  {
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	8c 01       	movw	r16, r24
  	uint num;
	LCD_WR_CMD(0x44,127*256+0);              //水平显示区域
    10a0:	84 e4       	ldi	r24, 0x44	; 68
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	7f e7       	ldi	r23, 0x7F	; 127
    10a6:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
	LCD_WR_CMD(0x45,239*256+80);			 //垂直显示区域
    10aa:	85 e4       	ldi	r24, 0x45	; 69
    10ac:	60 e5       	ldi	r22, 0x50	; 80
    10ae:	7f ee       	ldi	r23, 0xEF	; 239
    10b0:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
	LCD_WR_CMD(0x21,80*256);				 //显示RAM起始位置，大屏起始点为0x5000
    10b4:	81 e2       	ldi	r24, 0x21	; 33
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	70 e5       	ldi	r23, 0x50	; 80
    10ba:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
	LCD_WR_REG(0x22);                     	 //执行写数据到GRAM操作
    10be:	82 e2       	ldi	r24, 0x22	; 34
    10c0:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_WR_REG>
    LCD_EC0;
    10c4:	80 91 62 00 	lds	r24, 0x0062
    10c8:	87 7f       	andi	r24, 0xF7	; 247
    10ca:	80 93 62 00 	sts	0x0062, r24
	LCD_RS1;
    10ce:	80 91 62 00 	lds	r24, 0x0062
    10d2:	82 60       	ori	r24, 0x02	; 2
    10d4:	80 93 62 00 	sts	0x0062, r24
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e5       	ldi	r19, 0x50	; 80
//***********************************************************************

void LCD_WR_Data(uint val)
{

	LCD_Data = (uchar)(val>>8);
    10dc:	1b bb       	out	0x1b, r17	; 27
	LCD_WR0;
    10de:	80 91 62 00 	lds	r24, 0x0062
    10e2:	8b 7f       	andi	r24, 0xFB	; 251
    10e4:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
    10e8:	80 91 62 00 	lds	r24, 0x0062
    10ec:	84 60       	ori	r24, 0x04	; 4
    10ee:	80 93 62 00 	sts	0x0062, r24
	//LCD_RS1;
	LCD_Data = (uchar)val;
    10f2:	0b bb       	out	0x1b, r16	; 27
	LCD_WR0;
    10f4:	80 91 62 00 	lds	r24, 0x0062
    10f8:	8b 7f       	andi	r24, 0xFB	; 251
    10fa:	80 93 62 00 	sts	0x0062, r24
	LCD_WR1;
    10fe:	80 91 62 00 	lds	r24, 0x0062
    1102:	84 60       	ori	r24, 0x04	; 4
    1104:	80 93 62 00 	sts	0x0062, r24
	LCD_WR_CMD(0x45,239*256+80);			 //垂直显示区域
	LCD_WR_CMD(0x21,80*256);				 //显示RAM起始位置，大屏起始点为0x5000
	LCD_WR_REG(0x22);                     	 //执行写数据到GRAM操作
    LCD_EC0;
	LCD_RS1;
	for(num=160*128;num>0;num--)
    1108:	21 50       	subi	r18, 0x01	; 1
    110a:	30 40       	sbci	r19, 0x00	; 0
    110c:	39 f7       	brne	.-50     	; 0x10dc <GUIback+0x42>
	{
		LCD_WR_Data(back_color);
	}
	LCD_EC1;
    110e:	80 91 62 00 	lds	r24, 0x0062
    1112:	88 60       	ori	r24, 0x08	; 8
    1114:	80 93 62 00 	sts	0x0062, r24
  }
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	08 95       	ret

0000111e <GUIpoint>:
//***********************************************************************
//         大屏GUI打点函数，（x,y）为坐标
//***********************************************************************

void GUIpoint(uchar x,uchar y,uint point_color)                      //打点函数
{
    111e:	df 92       	push	r13
    1120:	ef 92       	push	r14
    1122:	ff 92       	push	r15
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	f8 2e       	mov	r15, r24
    112a:	06 2f       	mov	r16, r22
    112c:	d4 2e       	mov	r13, r20
    112e:	e5 2e       	mov	r14, r21
	
	LCD_WR_CMD(0x44,127*256+0);              //水平显示区域
    1130:	84 e4       	ldi	r24, 0x44	; 68
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	7f e7       	ldi	r23, 0x7F	; 127
    1136:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
	LCD_WR_CMD(0x45,239*256+80);			 //垂直显示区域
    113a:	85 e4       	ldi	r24, 0x45	; 69
    113c:	60 e5       	ldi	r22, 0x50	; 80
    113e:	7f ee       	ldi	r23, 0xEF	; 239
    1140:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
	LCD_WR_CMD(0x21,(y+80)*256+x);			 //显示RAM起始位置，大屏起始点为0x5000
    1144:	10 e0       	ldi	r17, 0x00	; 0
    1146:	00 5b       	subi	r16, 0xB0	; 176
    1148:	1f 4f       	sbci	r17, 0xFF	; 255
    114a:	10 2f       	mov	r17, r16
    114c:	00 27       	eor	r16, r16
    114e:	0f 0d       	add	r16, r15
    1150:	11 1d       	adc	r17, r1
    1152:	81 e2       	ldi	r24, 0x21	; 33
    1154:	b8 01       	movw	r22, r16
    1156:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_WR_CMD>
	LCD_WR_REG(0x22);                     	 //执行写数据到GRAM操作
    115a:	82 e2       	ldi	r24, 0x22	; 34
    115c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_WR_REG>
	LCD_EC0;
    1160:	e2 e6       	ldi	r30, 0x62	; 98
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	87 7f       	andi	r24, 0xF7	; 247
    1168:	80 83       	st	Z, r24
	LCD_RS1;
    116a:	80 81       	ld	r24, Z
    116c:	82 60       	ori	r24, 0x02	; 2
    116e:	80 83       	st	Z, r24
//***********************************************************************

void LCD_WR_Data(uint val)
{

	LCD_Data = (uchar)(val>>8);
    1170:	eb ba       	out	0x1b, r14	; 27
	LCD_WR0;
    1172:	80 81       	ld	r24, Z
    1174:	8b 7f       	andi	r24, 0xFB	; 251
    1176:	80 83       	st	Z, r24
	LCD_WR1;
    1178:	80 81       	ld	r24, Z
    117a:	84 60       	ori	r24, 0x04	; 4
    117c:	80 83       	st	Z, r24
	//LCD_RS1;
	LCD_Data = (uchar)val;
    117e:	db ba       	out	0x1b, r13	; 27
	LCD_WR0;
    1180:	80 81       	ld	r24, Z
    1182:	8b 7f       	andi	r24, 0xFB	; 251
    1184:	80 83       	st	Z, r24
	LCD_WR1;
    1186:	80 81       	ld	r24, Z
    1188:	84 60       	ori	r24, 0x04	; 4
    118a:	80 83       	st	Z, r24
	LCD_EC0;
	LCD_RS1;
	
	LCD_WR_Data(point_color);               //打点颜色	
	
	LCD_EC1;	
    118c:	80 81       	ld	r24, Z
    118e:	88 60       	ori	r24, 0x08	; 8
    1190:	80 83       	st	Z, r24
}
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	ff 90       	pop	r15
    1198:	ef 90       	pop	r14
    119a:	df 90       	pop	r13
    119c:	08 95       	ret

0000119e <GUIline>:
//***********************************************************************
//         大屏GUI画线函数，（x0,y0）为起始坐标,（x1,y1）为终点坐标
//***********************************************************************

void GUIline(uchar x0,uchar y0,uchar x1,uchar y1,uint line_color)   //画线函数
{
    119e:	2f 92       	push	r2
    11a0:	3f 92       	push	r3
    11a2:	4f 92       	push	r4
    11a4:	5f 92       	push	r5
    11a6:	6f 92       	push	r6
    11a8:	7f 92       	push	r7
    11aa:	8f 92       	push	r8
    11ac:	9f 92       	push	r9
    11ae:	af 92       	push	r10
    11b0:	bf 92       	push	r11
    11b2:	cf 92       	push	r12
    11b4:	df 92       	push	r13
    11b6:	ef 92       	push	r14
    11b8:	ff 92       	push	r15
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <GUIline+0x26>
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <GUIline+0x28>
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	98 2e       	mov	r9, r24
    11cc:	86 2e       	mov	r8, r22
    11ce:	1a 83       	std	Y+2, r17	; 0x02
    11d0:	09 83       	std	Y+1, r16	; 0x01
  	int temp; 
    int dx,dy;               									//定义起点到终点的横、纵坐标增加值 
    int s1,s2,status,i; 
    int Dx,Dy,sub; 
	
	dx = x1 - x0; 
    11d2:	84 2f       	mov	r24, r20
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	89 19       	sub	r24, r9
    11d8:	91 09       	sbc	r25, r1
    if(dx >= 0)                 //X的方向是增加的 
    11da:	97 fd       	sbrc	r25, 7
    11dc:	87 c0       	rjmp	.+270    	; 0x12ec <GUIline+0x14e>
    11de:	51 e0       	ldi	r21, 0x01	; 1
    11e0:	45 2e       	mov	r4, r21
    11e2:	51 2c       	mov	r5, r1
        s1 = 1; 
    else                     //X的方向是降低的 
        s1 = -1;      
    dy = y1 - y0;                 //判断Y的方向是增加还是降到的 
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	28 19       	sub	r18, r8
    11e8:	31 09       	sbc	r19, r1
    if(dy >= 0) 
    11ea:	37 fd       	sbrc	r19, 7
    11ec:	6e c0       	rjmp	.+220    	; 0x12ca <GUIline+0x12c>
    11ee:	41 e0       	ldi	r20, 0x01	; 1
    11f0:	24 2e       	mov	r2, r20
    11f2:	31 2c       	mov	r3, r1
        s2 = 1; 
    else 
        s2 =- 1; 
   
    Dx = abs(x1-x0);             //计算横、纵标志增加值的绝对值 
    11f4:	6c 01       	movw	r12, r24
    11f6:	97 fd       	sbrc	r25, 7
    11f8:	6e c0       	rjmp	.+220    	; 0x12d6 <GUIline+0x138>
    Dy = abs(y1-y0); 
    11fa:	a9 01       	movw	r20, r18
    11fc:	37 fd       	sbrc	r19, 7
    11fe:	72 c0       	rjmp	.+228    	; 0x12e4 <GUIline+0x146>
        
    if(Dy > Dx)                               
    1200:	c4 16       	cp	r12, r20
    1202:	d5 06       	cpc	r13, r21
    1204:	0c f0       	brlt	.+2      	; 0x1208 <GUIline+0x6a>
    1206:	5b c0       	rjmp	.+182    	; 0x12be <GUIline+0x120>
    1208:	ca 01       	movw	r24, r20
    120a:	a6 01       	movw	r20, r12
    120c:	6c 01       	movw	r12, r24
    120e:	21 e0       	ldi	r18, 0x01	; 1
    1210:	e2 2e       	mov	r14, r18
    1212:	f1 2c       	mov	r15, r1
    }  
    else 
        status = 0; 

/*********Bresenham算法画任意两点间的直线********/  
    sub = Dy + Dy - Dx;                 //第1次判断下个点的位置 
    1214:	3a 01       	movw	r6, r20
    1216:	66 0c       	add	r6, r6
    1218:	77 1c       	adc	r7, r7
    121a:	c3 01       	movw	r24, r6
    121c:	8c 19       	sub	r24, r12
    121e:	9d 09       	sbc	r25, r13
    1220:	9c 83       	std	Y+4, r25	; 0x04
    1222:	8b 83       	std	Y+3, r24	; 0x03
    1224:	00 e0       	ldi	r16, 0x00	; 0
    1226:	10 e0       	ldi	r17, 0x00	; 0
        {  
            if(status == 1)               //在靠近Y轴区，x值加1 
                x0 += s1;  
            else                     //在靠近X轴区，y值加1                
                y0 += s2;  
            sub -= (Dx + Dx);                 //判断下下个点的位置  
    1228:	aa 24       	eor	r10, r10
    122a:	bb 24       	eor	r11, r11
    122c:	ac 18       	sub	r10, r12
    122e:	bd 08       	sbc	r11, r13
    1230:	ac 18       	sub	r10, r12
    1232:	bd 08       	sbc	r11, r13
    1234:	0c c0       	rjmp	.+24     	; 0x124e <GUIline+0xb0>
        }  
        if(status == 1) 
            y0 += s2;  
        else        
            x0 += s1;  
    1236:	94 0c       	add	r9, r4
    else 
        status = 0; 

/*********Bresenham算法画任意两点间的直线********/  
    sub = Dy + Dy - Dx;                 //第1次判断下个点的位置 
    for(i = 0;i < Dx;i ++) 
    1238:	0f 5f       	subi	r16, 0xFF	; 255
    123a:	1f 4f       	sbci	r17, 0xFF	; 255
    123c:	0c 15       	cp	r16, r12
    123e:	1d 05       	cpc	r17, r13
    1240:	2c f5       	brge	.+74     	; 0x128c <GUIline+0xee>
        }  
        if(status == 1) 
            y0 += s2;  
        else        
            x0 += s1;  
        sub += Dy + Dy;  
    1242:	eb 81       	ldd	r30, Y+3	; 0x03
    1244:	fc 81       	ldd	r31, Y+4	; 0x04
    1246:	e6 0d       	add	r30, r6
    1248:	f7 1d       	adc	r31, r7
    124a:	fc 83       	std	Y+4, r31	; 0x04
    124c:	eb 83       	std	Y+3, r30	; 0x03

/*********Bresenham算法画任意两点间的直线********/  
    sub = Dy + Dy - Dx;                 //第1次判断下个点的位置 
    for(i = 0;i < Dx;i ++) 
    {  
        GUIpoint(x0,y0,line_color);           //画点  
    124e:	89 2d       	mov	r24, r9
    1250:	68 2d       	mov	r22, r8
    1252:	49 81       	ldd	r20, Y+1	; 0x01
    1254:	5a 81       	ldd	r21, Y+2	; 0x02
    1256:	0e 94 8f 08 	call	0x111e	; 0x111e <GUIpoint>
        if(sub >= 0)                                
    125a:	eb 81       	ldd	r30, Y+3	; 0x03
    125c:	fc 81       	ldd	r31, Y+4	; 0x04
    125e:	f7 fd       	sbrc	r31, 7
    1260:	0b c0       	rjmp	.+22     	; 0x1278 <GUIline+0xda>
        {  
            if(status == 1)               //在靠近Y轴区，x值加1 
    1262:	f1 e0       	ldi	r31, 0x01	; 1
    1264:	ef 16       	cp	r14, r31
    1266:	f1 04       	cpc	r15, r1
    1268:	41 f1       	breq	.+80     	; 0x12ba <GUIline+0x11c>
                x0 += s1;  
            else                     //在靠近X轴区，y值加1                
                y0 += s2;  
    126a:	82 0c       	add	r8, r2
            sub -= (Dx + Dx);                 //判断下下个点的位置  
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	8a 0d       	add	r24, r10
    1272:	9b 1d       	adc	r25, r11
    1274:	9c 83       	std	Y+4, r25	; 0x04
    1276:	8b 83       	std	Y+3, r24	; 0x03
        }  
        if(status == 1) 
    1278:	91 e0       	ldi	r25, 0x01	; 1
    127a:	e9 16       	cp	r14, r25
    127c:	f1 04       	cpc	r15, r1
    127e:	d9 f6       	brne	.-74     	; 0x1236 <GUIline+0x98>
            y0 += s2;  
    1280:	82 0c       	add	r8, r2
    else 
        status = 0; 

/*********Bresenham算法画任意两点间的直线********/  
    sub = Dy + Dy - Dx;                 //第1次判断下个点的位置 
    for(i = 0;i < Dx;i ++) 
    1282:	0f 5f       	subi	r16, 0xFF	; 255
    1284:	1f 4f       	sbci	r17, 0xFF	; 255
    1286:	0c 15       	cp	r16, r12
    1288:	1d 05       	cpc	r17, r13
    128a:	dc f2       	brlt	.-74     	; 0x1242 <GUIline+0xa4>
        else        
            x0 += s1;  
        sub += Dy + Dy;  
         
    }  
} 
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	ff 90       	pop	r15
    129e:	ef 90       	pop	r14
    12a0:	df 90       	pop	r13
    12a2:	cf 90       	pop	r12
    12a4:	bf 90       	pop	r11
    12a6:	af 90       	pop	r10
    12a8:	9f 90       	pop	r9
    12aa:	8f 90       	pop	r8
    12ac:	7f 90       	pop	r7
    12ae:	6f 90       	pop	r6
    12b0:	5f 90       	pop	r5
    12b2:	4f 90       	pop	r4
    12b4:	3f 90       	pop	r3
    12b6:	2f 90       	pop	r2
    12b8:	08 95       	ret
    {  
        GUIpoint(x0,y0,line_color);           //画点  
        if(sub >= 0)                                
        {  
            if(status == 1)               //在靠近Y轴区，x值加1 
                x0 += s1;  
    12ba:	94 0c       	add	r9, r4
    12bc:	d7 cf       	rjmp	.-82     	; 0x126c <GUIline+0xce>
    else 
        status = 0; 

/*********Bresenham算法画任意两点间的直线********/  
    sub = Dy + Dy - Dx;                 //第1次判断下个点的位置 
    for(i = 0;i < Dx;i ++) 
    12be:	c1 14       	cp	r12, r1
    12c0:	d1 04       	cpc	r13, r1
    12c2:	21 f3       	breq	.-56     	; 0x128c <GUIline+0xee>
    12c4:	ee 24       	eor	r14, r14
    12c6:	ff 24       	eor	r15, r15
    12c8:	a5 cf       	rjmp	.-182    	; 0x1214 <GUIline+0x76>
    if(dx >= 0)                 //X的方向是增加的 
        s1 = 1; 
    else                     //X的方向是降低的 
        s1 = -1;      
    dy = y1 - y0;                 //判断Y的方向是增加还是降到的 
    if(dy >= 0) 
    12ca:	22 24       	eor	r2, r2
    12cc:	2a 94       	dec	r2
    12ce:	32 2c       	mov	r3, r2
        s2 = 1; 
    else 
        s2 =- 1; 
   
    Dx = abs(x1-x0);             //计算横、纵标志增加值的绝对值 
    12d0:	6c 01       	movw	r12, r24
    12d2:	97 ff       	sbrs	r25, 7
    12d4:	92 cf       	rjmp	.-220    	; 0x11fa <GUIline+0x5c>
    12d6:	d0 94       	com	r13
    12d8:	c1 94       	neg	r12
    12da:	d1 08       	sbc	r13, r1
    12dc:	d3 94       	inc	r13
    Dy = abs(y1-y0); 
    12de:	a9 01       	movw	r20, r18
    12e0:	37 ff       	sbrs	r19, 7
    12e2:	8e cf       	rjmp	.-228    	; 0x1200 <GUIline+0x62>
    12e4:	50 95       	com	r21
    12e6:	41 95       	neg	r20
    12e8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ea:	8a cf       	rjmp	.-236    	; 0x1200 <GUIline+0x62>
    int dx,dy;               									//定义起点到终点的横、纵坐标增加值 
    int s1,s2,status,i; 
    int Dx,Dy,sub; 
	
	dx = x1 - x0; 
    if(dx >= 0)                 //X的方向是增加的 
    12ec:	44 24       	eor	r4, r4
    12ee:	4a 94       	dec	r4
    12f0:	54 2c       	mov	r5, r4
    12f2:	78 cf       	rjmp	.-272    	; 0x11e4 <GUIline+0x46>

000012f4 <GUIfull>:
*           y1      终止点纵坐标 
*          color      显示颜色(对于黑白色LCM，为0时灭，为1时显示) 
* 出口参数：无 
****************************************************************************/ 
void GUIfull(uchar x0,uchar y0,uchar x1,uchar y1,uint full_colour) 
{ 
    12f4:	df 92       	push	r13
    12f6:	ef 92       	push	r14
    12f8:	ff 92       	push	r15
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	e8 2e       	mov	r14, r24
    1304:	f4 2e       	mov	r15, r20
    1306:	d2 2e       	mov	r13, r18
    1308:	e8 01       	movw	r28, r16
    unsigned char i,j; 
for(j = y0;j <= y1;j ++) 
    130a:	26 17       	cp	r18, r22
    130c:	78 f0       	brcs	.+30     	; 0x132c <GUIfull+0x38>
    130e:	06 2f       	mov	r16, r22
    for(i = x0;i <= x1;i ++) 
    1310:	fe 14       	cp	r15, r14
    1312:	48 f0       	brcs	.+18     	; 0x1326 <GUIfull+0x32>
* 出口参数：无 
****************************************************************************/ 
void GUIfull(uchar x0,uchar y0,uchar x1,uchar y1,uint full_colour) 
{ 
    unsigned char i,j; 
for(j = y0;j <= y1;j ++) 
    1314:	1e 2d       	mov	r17, r14
    for(i = x0;i <= x1;i ++) 
    GUIpoint(i,j,full_colour); 
    1316:	81 2f       	mov	r24, r17
    1318:	60 2f       	mov	r22, r16
    131a:	ae 01       	movw	r20, r28
    131c:	0e 94 8f 08 	call	0x111e	; 0x111e <GUIpoint>
****************************************************************************/ 
void GUIfull(uchar x0,uchar y0,uchar x1,uchar y1,uint full_colour) 
{ 
    unsigned char i,j; 
for(j = y0;j <= y1;j ++) 
    for(i = x0;i <= x1;i ++) 
    1320:	1f 5f       	subi	r17, 0xFF	; 255
    1322:	f1 16       	cp	r15, r17
    1324:	c0 f7       	brcc	.-16     	; 0x1316 <GUIfull+0x22>
* 出口参数：无 
****************************************************************************/ 
void GUIfull(uchar x0,uchar y0,uchar x1,uchar y1,uint full_colour) 
{ 
    unsigned char i,j; 
for(j = y0;j <= y1;j ++) 
    1326:	0f 5f       	subi	r16, 0xFF	; 255
    1328:	d0 16       	cp	r13, r16
    132a:	90 f7       	brcc	.-28     	; 0x1310 <GUIfull+0x1c>
    for(i = x0;i <= x1;i ++) 
    GUIpoint(i,j,full_colour); 
} 
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	df 90       	pop	r13
    133a:	08 95       	ret

0000133c <plotC>:
*           y    指定线起点所在列的位置 
*          color      显示颜色(对于黑白色LCM，为0时灭，为1时显示) 
* 出口参数：无 
****************************************************************************/ 
void plotC(uchar x,uchar y,uchar xc,int yc,uint yc_colour) 
{ 
    133c:	9f 92       	push	r9
    133e:	af 92       	push	r10
    1340:	bf 92       	push	r11
    1342:	cf 92       	push	r12
    1344:	df 92       	push	r13
    1346:	ef 92       	push	r14
    1348:	ff 92       	push	r15
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	c8 2e       	mov	r12, r24
    1350:	b6 2e       	mov	r11, r22
    1352:	f4 2e       	mov	r15, r20
    1354:	e2 2e       	mov	r14, r18
    GUIpoint(xc+x,yc+y,yc_colour); 
    1356:	d4 2e       	mov	r13, r20
    1358:	d8 0e       	add	r13, r24
    135a:	92 2e       	mov	r9, r18
    135c:	96 0e       	add	r9, r22
    135e:	8d 2d       	mov	r24, r13
    1360:	69 2d       	mov	r22, r9
    1362:	a8 01       	movw	r20, r16
    1364:	0e 94 8f 08 	call	0x111e	; 0x111e <GUIpoint>
    GUIpoint(xc+x,yc-y,yc_colour); 
    1368:	ae 2c       	mov	r10, r14
    136a:	ab 18       	sub	r10, r11
    136c:	8d 2d       	mov	r24, r13
    136e:	6a 2d       	mov	r22, r10
    1370:	a8 01       	movw	r20, r16
    1372:	0e 94 8f 08 	call	0x111e	; 0x111e <GUIpoint>
    GUIpoint(xc-x,yc+y,yc_colour); 
    1376:	df 2c       	mov	r13, r15
    1378:	dc 18       	sub	r13, r12
    137a:	8d 2d       	mov	r24, r13
    137c:	69 2d       	mov	r22, r9
    137e:	a8 01       	movw	r20, r16
    1380:	0e 94 8f 08 	call	0x111e	; 0x111e <GUIpoint>
    GUIpoint(xc-x,yc-y,yc_colour); 
    1384:	8d 2d       	mov	r24, r13
    1386:	6a 2d       	mov	r22, r10
    1388:	a8 01       	movw	r20, r16
    138a:	0e 94 8f 08 	call	0x111e	; 0x111e <GUIpoint>
    GUIpoint(xc+y,yc+x,yc_colour); 
    138e:	df 2c       	mov	r13, r15
    1390:	db 0c       	add	r13, r11
    1392:	ae 2c       	mov	r10, r14
    1394:	ac 0c       	add	r10, r12
    1396:	8d 2d       	mov	r24, r13
    1398:	6a 2d       	mov	r22, r10
    139a:	a8 01       	movw	r20, r16
    139c:	0e 94 8f 08 	call	0x111e	; 0x111e <GUIpoint>
    GUIpoint(xc+y,yc-x,yc_colour); 
    13a0:	ec 18       	sub	r14, r12
    13a2:	8d 2d       	mov	r24, r13
    13a4:	6e 2d       	mov	r22, r14
    13a6:	a8 01       	movw	r20, r16
    13a8:	0e 94 8f 08 	call	0x111e	; 0x111e <GUIpoint>
    GUIpoint(xc-y,yc+x,yc_colour); 
    13ac:	fb 18       	sub	r15, r11
    13ae:	8f 2d       	mov	r24, r15
    13b0:	6a 2d       	mov	r22, r10
    13b2:	a8 01       	movw	r20, r16
    13b4:	0e 94 8f 08 	call	0x111e	; 0x111e <GUIpoint>
    GUIpoint(xc-y,yc-x,yc_colour); 
    13b8:	8f 2d       	mov	r24, r15
    13ba:	6e 2d       	mov	r22, r14
    13bc:	a8 01       	movw	r20, r16
    13be:	0e 94 8f 08 	call	0x111e	; 0x111e <GUIpoint>
} 
    13c2:	1f 91       	pop	r17
    13c4:	0f 91       	pop	r16
    13c6:	ff 90       	pop	r15
    13c8:	ef 90       	pop	r14
    13ca:	df 90       	pop	r13
    13cc:	cf 90       	pop	r12
    13ce:	bf 90       	pop	r11
    13d0:	af 90       	pop	r10
    13d2:	9f 90       	pop	r9
    13d4:	08 95       	ret

000013d6 <GUIcircle>:
*           r 半径 
*          color      显示颜色(对于黑白色LCM，为0时灭，为1时显示) 
* 出口参数：无 
****************************************************************************/ 
void GUIcircle(uchar xc,uchar yc,uchar r,uint circle_colour) 
{ 
    13d6:	6f 92       	push	r6
    13d8:	7f 92       	push	r7
    13da:	8f 92       	push	r8
    13dc:	9f 92       	push	r9
    13de:	af 92       	push	r10
    13e0:	bf 92       	push	r11
    13e2:	cf 92       	push	r12
    13e4:	df 92       	push	r13
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	68 2e       	mov	r6, r24
    13f4:	76 2e       	mov	r7, r22
    13f6:	49 01       	movw	r8, r18
    int x,y,d; 
    y = r; 
    13f8:	e4 2e       	mov	r14, r20
    13fa:	ff 24       	eor	r15, r15
    d = 3 - (r + r); 
    13fc:	cc 27       	eor	r28, r28
    13fe:	dd 27       	eor	r29, r29
    1400:	ce 19       	sub	r28, r14
    1402:	df 09       	sbc	r29, r15
    1404:	ce 19       	sub	r28, r14
    1406:	df 09       	sbc	r29, r15
    1408:	23 96       	adiw	r28, 0x03	; 3
    140a:	cc 24       	eor	r12, r12
    140c:	dd 24       	eor	r13, r13
    140e:	66 e0       	ldi	r22, 0x06	; 6
    1410:	a6 2e       	mov	r10, r22
    1412:	b1 2c       	mov	r11, r1
    1414:	19 c0       	rjmp	.+50     	; 0x1448 <GUIcircle+0x72>
        plotC(x,y,xc,yc,circle_colour); 
        if(d < 0) 
            d += (x + x + x + x) + 6; 
        else 
        { 
            d+=((x - y) + (x - y) + (x - y) + (x - y)) + 10; 
    1416:	c6 01       	movw	r24, r12
    1418:	8e 19       	sub	r24, r14
    141a:	9f 09       	sbc	r25, r15
    141c:	2a 96       	adiw	r28, 0x0a	; 10
    141e:	c8 0f       	add	r28, r24
    1420:	d9 1f       	adc	r29, r25
    1422:	c8 0f       	add	r28, r24
    1424:	d9 1f       	adc	r29, r25
    1426:	c8 0f       	add	r28, r24
    1428:	d9 1f       	adc	r29, r25
    142a:	c8 0f       	add	r28, r24
    142c:	d9 1f       	adc	r29, r25
            y = y - 1; 
    142e:	08 94       	sec
    1430:	e1 08       	sbc	r14, r1
    1432:	f1 08       	sbc	r15, r1
        } 
        x = x + 1; 
    1434:	08 94       	sec
    1436:	c1 1c       	adc	r12, r1
    1438:	d1 1c       	adc	r13, r1
    143a:	84 e0       	ldi	r24, 0x04	; 4
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a8 0e       	add	r10, r24
    1440:	b9 1e       	adc	r11, r25
{ 
    int x,y,d; 
    y = r; 
    d = 3 - (r + r); 
    x = 0; 
    while(x <= y) 
    1442:	ec 14       	cp	r14, r12
    1444:	fd 04       	cpc	r15, r13
    1446:	6c f0       	brlt	.+26     	; 0x1462 <GUIcircle+0x8c>
    { 
        plotC(x,y,xc,yc,circle_colour); 
    1448:	8c 2d       	mov	r24, r12
    144a:	6e 2d       	mov	r22, r14
    144c:	46 2d       	mov	r20, r6
    144e:	27 2d       	mov	r18, r7
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	84 01       	movw	r16, r8
    1454:	0e 94 9e 09 	call	0x133c	; 0x133c <plotC>
        if(d < 0) 
    1458:	d7 ff       	sbrs	r29, 7
    145a:	dd cf       	rjmp	.-70     	; 0x1416 <GUIcircle+0x40>
            d += (x + x + x + x) + 6; 
    145c:	ca 0d       	add	r28, r10
    145e:	db 1d       	adc	r29, r11
    1460:	e9 cf       	rjmp	.-46     	; 0x1434 <GUIcircle+0x5e>
            d+=((x - y) + (x - y) + (x - y) + (x - y)) + 10; 
            y = y - 1; 
        } 
        x = x + 1; 
    } 
} 
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	ff 90       	pop	r15
    146c:	ef 90       	pop	r14
    146e:	df 90       	pop	r13
    1470:	cf 90       	pop	r12
    1472:	bf 90       	pop	r11
    1474:	af 90       	pop	r10
    1476:	9f 90       	pop	r9
    1478:	8f 90       	pop	r8
    147a:	7f 90       	pop	r7
    147c:	6f 90       	pop	r6
    147e:	08 95       	ret

00001480 <__fixunssfsi>:
    1480:	ef 92       	push	r14
    1482:	ff 92       	push	r15
    1484:	0f 93       	push	r16
    1486:	1f 93       	push	r17
    1488:	7b 01       	movw	r14, r22
    148a:	8c 01       	movw	r16, r24
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	40 e0       	ldi	r20, 0x00	; 0
    1492:	5f e4       	ldi	r21, 0x4F	; 79
    1494:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__gesf2>
    1498:	88 23       	and	r24, r24
    149a:	8c f0       	brlt	.+34     	; 0x14be <__fixunssfsi+0x3e>
    149c:	c8 01       	movw	r24, r16
    149e:	b7 01       	movw	r22, r14
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 e0       	ldi	r20, 0x00	; 0
    14a6:	5f e4       	ldi	r21, 0x4F	; 79
    14a8:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__subsf3>
    14ac:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__fixsfsi>
    14b0:	9b 01       	movw	r18, r22
    14b2:	ac 01       	movw	r20, r24
    14b4:	20 50       	subi	r18, 0x00	; 0
    14b6:	30 40       	sbci	r19, 0x00	; 0
    14b8:	40 40       	sbci	r20, 0x00	; 0
    14ba:	50 48       	sbci	r21, 0x80	; 128
    14bc:	06 c0       	rjmp	.+12     	; 0x14ca <__fixunssfsi+0x4a>
    14be:	c8 01       	movw	r24, r16
    14c0:	b7 01       	movw	r22, r14
    14c2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__fixsfsi>
    14c6:	9b 01       	movw	r18, r22
    14c8:	ac 01       	movw	r20, r24
    14ca:	b9 01       	movw	r22, r18
    14cc:	ca 01       	movw	r24, r20
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	ff 90       	pop	r15
    14d4:	ef 90       	pop	r14
    14d6:	08 95       	ret

000014d8 <_fpadd_parts>:
    14d8:	a0 e0       	ldi	r26, 0x00	; 0
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e2 e7       	ldi	r30, 0x72	; 114
    14de:	fa e0       	ldi	r31, 0x0A	; 10
    14e0:	0c 94 93 10 	jmp	0x2126	; 0x2126 <__prologue_saves__>
    14e4:	dc 01       	movw	r26, r24
    14e6:	2b 01       	movw	r4, r22
    14e8:	fa 01       	movw	r30, r20
    14ea:	9c 91       	ld	r25, X
    14ec:	92 30       	cpi	r25, 0x02	; 2
    14ee:	08 f4       	brcc	.+2      	; 0x14f2 <_fpadd_parts+0x1a>
    14f0:	39 c1       	rjmp	.+626    	; 0x1764 <_fpadd_parts+0x28c>
    14f2:	eb 01       	movw	r28, r22
    14f4:	88 81       	ld	r24, Y
    14f6:	82 30       	cpi	r24, 0x02	; 2
    14f8:	08 f4       	brcc	.+2      	; 0x14fc <_fpadd_parts+0x24>
    14fa:	33 c1       	rjmp	.+614    	; 0x1762 <_fpadd_parts+0x28a>
    14fc:	94 30       	cpi	r25, 0x04	; 4
    14fe:	69 f4       	brne	.+26     	; 0x151a <_fpadd_parts+0x42>
    1500:	84 30       	cpi	r24, 0x04	; 4
    1502:	09 f0       	breq	.+2      	; 0x1506 <_fpadd_parts+0x2e>
    1504:	2f c1       	rjmp	.+606    	; 0x1764 <_fpadd_parts+0x28c>
    1506:	11 96       	adiw	r26, 0x01	; 1
    1508:	9c 91       	ld	r25, X
    150a:	11 97       	sbiw	r26, 0x01	; 1
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	98 17       	cp	r25, r24
    1510:	09 f4       	brne	.+2      	; 0x1514 <_fpadd_parts+0x3c>
    1512:	28 c1       	rjmp	.+592    	; 0x1764 <_fpadd_parts+0x28c>
    1514:	a8 ee       	ldi	r26, 0xE8	; 232
    1516:	bb e0       	ldi	r27, 0x0B	; 11
    1518:	25 c1       	rjmp	.+586    	; 0x1764 <_fpadd_parts+0x28c>
    151a:	84 30       	cpi	r24, 0x04	; 4
    151c:	09 f4       	brne	.+2      	; 0x1520 <_fpadd_parts+0x48>
    151e:	21 c1       	rjmp	.+578    	; 0x1762 <_fpadd_parts+0x28a>
    1520:	82 30       	cpi	r24, 0x02	; 2
    1522:	a9 f4       	brne	.+42     	; 0x154e <_fpadd_parts+0x76>
    1524:	92 30       	cpi	r25, 0x02	; 2
    1526:	09 f0       	breq	.+2      	; 0x152a <_fpadd_parts+0x52>
    1528:	1d c1       	rjmp	.+570    	; 0x1764 <_fpadd_parts+0x28c>
    152a:	9a 01       	movw	r18, r20
    152c:	ad 01       	movw	r20, r26
    152e:	88 e0       	ldi	r24, 0x08	; 8
    1530:	ea 01       	movw	r28, r20
    1532:	09 90       	ld	r0, Y+
    1534:	ae 01       	movw	r20, r28
    1536:	e9 01       	movw	r28, r18
    1538:	09 92       	st	Y+, r0
    153a:	9e 01       	movw	r18, r28
    153c:	81 50       	subi	r24, 0x01	; 1
    153e:	c1 f7       	brne	.-16     	; 0x1530 <_fpadd_parts+0x58>
    1540:	e2 01       	movw	r28, r4
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	11 96       	adiw	r26, 0x01	; 1
    1546:	9c 91       	ld	r25, X
    1548:	89 23       	and	r24, r25
    154a:	81 83       	std	Z+1, r24	; 0x01
    154c:	08 c1       	rjmp	.+528    	; 0x175e <_fpadd_parts+0x286>
    154e:	92 30       	cpi	r25, 0x02	; 2
    1550:	09 f4       	brne	.+2      	; 0x1554 <_fpadd_parts+0x7c>
    1552:	07 c1       	rjmp	.+526    	; 0x1762 <_fpadd_parts+0x28a>
    1554:	12 96       	adiw	r26, 0x02	; 2
    1556:	2d 90       	ld	r2, X+
    1558:	3c 90       	ld	r3, X
    155a:	13 97       	sbiw	r26, 0x03	; 3
    155c:	eb 01       	movw	r28, r22
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	9b 81       	ldd	r25, Y+3	; 0x03
    1562:	14 96       	adiw	r26, 0x04	; 4
    1564:	ad 90       	ld	r10, X+
    1566:	bd 90       	ld	r11, X+
    1568:	cd 90       	ld	r12, X+
    156a:	dc 90       	ld	r13, X
    156c:	17 97       	sbiw	r26, 0x07	; 7
    156e:	ec 80       	ldd	r14, Y+4	; 0x04
    1570:	fd 80       	ldd	r15, Y+5	; 0x05
    1572:	0e 81       	ldd	r16, Y+6	; 0x06
    1574:	1f 81       	ldd	r17, Y+7	; 0x07
    1576:	91 01       	movw	r18, r2
    1578:	28 1b       	sub	r18, r24
    157a:	39 0b       	sbc	r19, r25
    157c:	b9 01       	movw	r22, r18
    157e:	37 ff       	sbrs	r19, 7
    1580:	04 c0       	rjmp	.+8      	; 0x158a <_fpadd_parts+0xb2>
    1582:	66 27       	eor	r22, r22
    1584:	77 27       	eor	r23, r23
    1586:	62 1b       	sub	r22, r18
    1588:	73 0b       	sbc	r23, r19
    158a:	60 32       	cpi	r22, 0x20	; 32
    158c:	71 05       	cpc	r23, r1
    158e:	0c f0       	brlt	.+2      	; 0x1592 <_fpadd_parts+0xba>
    1590:	61 c0       	rjmp	.+194    	; 0x1654 <_fpadd_parts+0x17c>
    1592:	12 16       	cp	r1, r18
    1594:	13 06       	cpc	r1, r19
    1596:	6c f5       	brge	.+90     	; 0x15f2 <_fpadd_parts+0x11a>
    1598:	37 01       	movw	r6, r14
    159a:	48 01       	movw	r8, r16
    159c:	06 2e       	mov	r0, r22
    159e:	04 c0       	rjmp	.+8      	; 0x15a8 <_fpadd_parts+0xd0>
    15a0:	96 94       	lsr	r9
    15a2:	87 94       	ror	r8
    15a4:	77 94       	ror	r7
    15a6:	67 94       	ror	r6
    15a8:	0a 94       	dec	r0
    15aa:	d2 f7       	brpl	.-12     	; 0x15a0 <_fpadd_parts+0xc8>
    15ac:	21 e0       	ldi	r18, 0x01	; 1
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e0       	ldi	r20, 0x00	; 0
    15b2:	50 e0       	ldi	r21, 0x00	; 0
    15b4:	04 c0       	rjmp	.+8      	; 0x15be <_fpadd_parts+0xe6>
    15b6:	22 0f       	add	r18, r18
    15b8:	33 1f       	adc	r19, r19
    15ba:	44 1f       	adc	r20, r20
    15bc:	55 1f       	adc	r21, r21
    15be:	6a 95       	dec	r22
    15c0:	d2 f7       	brpl	.-12     	; 0x15b6 <_fpadd_parts+0xde>
    15c2:	21 50       	subi	r18, 0x01	; 1
    15c4:	30 40       	sbci	r19, 0x00	; 0
    15c6:	40 40       	sbci	r20, 0x00	; 0
    15c8:	50 40       	sbci	r21, 0x00	; 0
    15ca:	2e 21       	and	r18, r14
    15cc:	3f 21       	and	r19, r15
    15ce:	40 23       	and	r20, r16
    15d0:	51 23       	and	r21, r17
    15d2:	21 15       	cp	r18, r1
    15d4:	31 05       	cpc	r19, r1
    15d6:	41 05       	cpc	r20, r1
    15d8:	51 05       	cpc	r21, r1
    15da:	21 f0       	breq	.+8      	; 0x15e4 <_fpadd_parts+0x10c>
    15dc:	21 e0       	ldi	r18, 0x01	; 1
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e0       	ldi	r20, 0x00	; 0
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	79 01       	movw	r14, r18
    15e6:	8a 01       	movw	r16, r20
    15e8:	e6 28       	or	r14, r6
    15ea:	f7 28       	or	r15, r7
    15ec:	08 29       	or	r16, r8
    15ee:	19 29       	or	r17, r9
    15f0:	3c c0       	rjmp	.+120    	; 0x166a <_fpadd_parts+0x192>
    15f2:	23 2b       	or	r18, r19
    15f4:	d1 f1       	breq	.+116    	; 0x166a <_fpadd_parts+0x192>
    15f6:	26 0e       	add	r2, r22
    15f8:	37 1e       	adc	r3, r23
    15fa:	35 01       	movw	r6, r10
    15fc:	46 01       	movw	r8, r12
    15fe:	06 2e       	mov	r0, r22
    1600:	04 c0       	rjmp	.+8      	; 0x160a <_fpadd_parts+0x132>
    1602:	96 94       	lsr	r9
    1604:	87 94       	ror	r8
    1606:	77 94       	ror	r7
    1608:	67 94       	ror	r6
    160a:	0a 94       	dec	r0
    160c:	d2 f7       	brpl	.-12     	; 0x1602 <_fpadd_parts+0x12a>
    160e:	21 e0       	ldi	r18, 0x01	; 1
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e0       	ldi	r20, 0x00	; 0
    1614:	50 e0       	ldi	r21, 0x00	; 0
    1616:	04 c0       	rjmp	.+8      	; 0x1620 <_fpadd_parts+0x148>
    1618:	22 0f       	add	r18, r18
    161a:	33 1f       	adc	r19, r19
    161c:	44 1f       	adc	r20, r20
    161e:	55 1f       	adc	r21, r21
    1620:	6a 95       	dec	r22
    1622:	d2 f7       	brpl	.-12     	; 0x1618 <_fpadd_parts+0x140>
    1624:	21 50       	subi	r18, 0x01	; 1
    1626:	30 40       	sbci	r19, 0x00	; 0
    1628:	40 40       	sbci	r20, 0x00	; 0
    162a:	50 40       	sbci	r21, 0x00	; 0
    162c:	2a 21       	and	r18, r10
    162e:	3b 21       	and	r19, r11
    1630:	4c 21       	and	r20, r12
    1632:	5d 21       	and	r21, r13
    1634:	21 15       	cp	r18, r1
    1636:	31 05       	cpc	r19, r1
    1638:	41 05       	cpc	r20, r1
    163a:	51 05       	cpc	r21, r1
    163c:	21 f0       	breq	.+8      	; 0x1646 <_fpadd_parts+0x16e>
    163e:	21 e0       	ldi	r18, 0x01	; 1
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e0       	ldi	r20, 0x00	; 0
    1644:	50 e0       	ldi	r21, 0x00	; 0
    1646:	59 01       	movw	r10, r18
    1648:	6a 01       	movw	r12, r20
    164a:	a6 28       	or	r10, r6
    164c:	b7 28       	or	r11, r7
    164e:	c8 28       	or	r12, r8
    1650:	d9 28       	or	r13, r9
    1652:	0b c0       	rjmp	.+22     	; 0x166a <_fpadd_parts+0x192>
    1654:	82 15       	cp	r24, r2
    1656:	93 05       	cpc	r25, r3
    1658:	2c f0       	brlt	.+10     	; 0x1664 <_fpadd_parts+0x18c>
    165a:	1c 01       	movw	r2, r24
    165c:	aa 24       	eor	r10, r10
    165e:	bb 24       	eor	r11, r11
    1660:	65 01       	movw	r12, r10
    1662:	03 c0       	rjmp	.+6      	; 0x166a <_fpadd_parts+0x192>
    1664:	ee 24       	eor	r14, r14
    1666:	ff 24       	eor	r15, r15
    1668:	87 01       	movw	r16, r14
    166a:	11 96       	adiw	r26, 0x01	; 1
    166c:	9c 91       	ld	r25, X
    166e:	d2 01       	movw	r26, r4
    1670:	11 96       	adiw	r26, 0x01	; 1
    1672:	8c 91       	ld	r24, X
    1674:	98 17       	cp	r25, r24
    1676:	09 f4       	brne	.+2      	; 0x167a <_fpadd_parts+0x1a2>
    1678:	45 c0       	rjmp	.+138    	; 0x1704 <_fpadd_parts+0x22c>
    167a:	99 23       	and	r25, r25
    167c:	39 f0       	breq	.+14     	; 0x168c <_fpadd_parts+0x1b4>
    167e:	a8 01       	movw	r20, r16
    1680:	97 01       	movw	r18, r14
    1682:	2a 19       	sub	r18, r10
    1684:	3b 09       	sbc	r19, r11
    1686:	4c 09       	sbc	r20, r12
    1688:	5d 09       	sbc	r21, r13
    168a:	06 c0       	rjmp	.+12     	; 0x1698 <_fpadd_parts+0x1c0>
    168c:	a6 01       	movw	r20, r12
    168e:	95 01       	movw	r18, r10
    1690:	2e 19       	sub	r18, r14
    1692:	3f 09       	sbc	r19, r15
    1694:	40 0b       	sbc	r20, r16
    1696:	51 0b       	sbc	r21, r17
    1698:	57 fd       	sbrc	r21, 7
    169a:	08 c0       	rjmp	.+16     	; 0x16ac <_fpadd_parts+0x1d4>
    169c:	11 82       	std	Z+1, r1	; 0x01
    169e:	33 82       	std	Z+3, r3	; 0x03
    16a0:	22 82       	std	Z+2, r2	; 0x02
    16a2:	24 83       	std	Z+4, r18	; 0x04
    16a4:	35 83       	std	Z+5, r19	; 0x05
    16a6:	46 83       	std	Z+6, r20	; 0x06
    16a8:	57 83       	std	Z+7, r21	; 0x07
    16aa:	1d c0       	rjmp	.+58     	; 0x16e6 <_fpadd_parts+0x20e>
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	81 83       	std	Z+1, r24	; 0x01
    16b0:	33 82       	std	Z+3, r3	; 0x03
    16b2:	22 82       	std	Z+2, r2	; 0x02
    16b4:	88 27       	eor	r24, r24
    16b6:	99 27       	eor	r25, r25
    16b8:	dc 01       	movw	r26, r24
    16ba:	82 1b       	sub	r24, r18
    16bc:	93 0b       	sbc	r25, r19
    16be:	a4 0b       	sbc	r26, r20
    16c0:	b5 0b       	sbc	r27, r21
    16c2:	84 83       	std	Z+4, r24	; 0x04
    16c4:	95 83       	std	Z+5, r25	; 0x05
    16c6:	a6 83       	std	Z+6, r26	; 0x06
    16c8:	b7 83       	std	Z+7, r27	; 0x07
    16ca:	0d c0       	rjmp	.+26     	; 0x16e6 <_fpadd_parts+0x20e>
    16cc:	22 0f       	add	r18, r18
    16ce:	33 1f       	adc	r19, r19
    16d0:	44 1f       	adc	r20, r20
    16d2:	55 1f       	adc	r21, r21
    16d4:	24 83       	std	Z+4, r18	; 0x04
    16d6:	35 83       	std	Z+5, r19	; 0x05
    16d8:	46 83       	std	Z+6, r20	; 0x06
    16da:	57 83       	std	Z+7, r21	; 0x07
    16dc:	82 81       	ldd	r24, Z+2	; 0x02
    16de:	93 81       	ldd	r25, Z+3	; 0x03
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	93 83       	std	Z+3, r25	; 0x03
    16e4:	82 83       	std	Z+2, r24	; 0x02
    16e6:	24 81       	ldd	r18, Z+4	; 0x04
    16e8:	35 81       	ldd	r19, Z+5	; 0x05
    16ea:	46 81       	ldd	r20, Z+6	; 0x06
    16ec:	57 81       	ldd	r21, Z+7	; 0x07
    16ee:	da 01       	movw	r26, r20
    16f0:	c9 01       	movw	r24, r18
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	a1 09       	sbc	r26, r1
    16f6:	b1 09       	sbc	r27, r1
    16f8:	8f 5f       	subi	r24, 0xFF	; 255
    16fa:	9f 4f       	sbci	r25, 0xFF	; 255
    16fc:	af 4f       	sbci	r26, 0xFF	; 255
    16fe:	bf 43       	sbci	r27, 0x3F	; 63
    1700:	28 f3       	brcs	.-54     	; 0x16cc <_fpadd_parts+0x1f4>
    1702:	0b c0       	rjmp	.+22     	; 0x171a <_fpadd_parts+0x242>
    1704:	91 83       	std	Z+1, r25	; 0x01
    1706:	33 82       	std	Z+3, r3	; 0x03
    1708:	22 82       	std	Z+2, r2	; 0x02
    170a:	ea 0c       	add	r14, r10
    170c:	fb 1c       	adc	r15, r11
    170e:	0c 1d       	adc	r16, r12
    1710:	1d 1d       	adc	r17, r13
    1712:	e4 82       	std	Z+4, r14	; 0x04
    1714:	f5 82       	std	Z+5, r15	; 0x05
    1716:	06 83       	std	Z+6, r16	; 0x06
    1718:	17 83       	std	Z+7, r17	; 0x07
    171a:	83 e0       	ldi	r24, 0x03	; 3
    171c:	80 83       	st	Z, r24
    171e:	24 81       	ldd	r18, Z+4	; 0x04
    1720:	35 81       	ldd	r19, Z+5	; 0x05
    1722:	46 81       	ldd	r20, Z+6	; 0x06
    1724:	57 81       	ldd	r21, Z+7	; 0x07
    1726:	57 ff       	sbrs	r21, 7
    1728:	1a c0       	rjmp	.+52     	; 0x175e <_fpadd_parts+0x286>
    172a:	c9 01       	movw	r24, r18
    172c:	aa 27       	eor	r26, r26
    172e:	97 fd       	sbrc	r25, 7
    1730:	a0 95       	com	r26
    1732:	ba 2f       	mov	r27, r26
    1734:	81 70       	andi	r24, 0x01	; 1
    1736:	90 70       	andi	r25, 0x00	; 0
    1738:	a0 70       	andi	r26, 0x00	; 0
    173a:	b0 70       	andi	r27, 0x00	; 0
    173c:	56 95       	lsr	r21
    173e:	47 95       	ror	r20
    1740:	37 95       	ror	r19
    1742:	27 95       	ror	r18
    1744:	82 2b       	or	r24, r18
    1746:	93 2b       	or	r25, r19
    1748:	a4 2b       	or	r26, r20
    174a:	b5 2b       	or	r27, r21
    174c:	84 83       	std	Z+4, r24	; 0x04
    174e:	95 83       	std	Z+5, r25	; 0x05
    1750:	a6 83       	std	Z+6, r26	; 0x06
    1752:	b7 83       	std	Z+7, r27	; 0x07
    1754:	82 81       	ldd	r24, Z+2	; 0x02
    1756:	93 81       	ldd	r25, Z+3	; 0x03
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	93 83       	std	Z+3, r25	; 0x03
    175c:	82 83       	std	Z+2, r24	; 0x02
    175e:	df 01       	movw	r26, r30
    1760:	01 c0       	rjmp	.+2      	; 0x1764 <_fpadd_parts+0x28c>
    1762:	d2 01       	movw	r26, r4
    1764:	cd 01       	movw	r24, r26
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	e2 e1       	ldi	r30, 0x12	; 18
    176c:	0c 94 af 10 	jmp	0x215e	; 0x215e <__epilogue_restores__>

00001770 <__subsf3>:
    1770:	a0 e2       	ldi	r26, 0x20	; 32
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	ee eb       	ldi	r30, 0xBE	; 190
    1776:	fb e0       	ldi	r31, 0x0B	; 11
    1778:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__prologue_saves__+0x18>
    177c:	69 83       	std	Y+1, r22	; 0x01
    177e:	7a 83       	std	Y+2, r23	; 0x02
    1780:	8b 83       	std	Y+3, r24	; 0x03
    1782:	9c 83       	std	Y+4, r25	; 0x04
    1784:	2d 83       	std	Y+5, r18	; 0x05
    1786:	3e 83       	std	Y+6, r19	; 0x06
    1788:	4f 83       	std	Y+7, r20	; 0x07
    178a:	58 87       	std	Y+8, r21	; 0x08
    178c:	e9 e0       	ldi	r30, 0x09	; 9
    178e:	ee 2e       	mov	r14, r30
    1790:	f1 2c       	mov	r15, r1
    1792:	ec 0e       	add	r14, r28
    1794:	fd 1e       	adc	r15, r29
    1796:	ce 01       	movw	r24, r28
    1798:	01 96       	adiw	r24, 0x01	; 1
    179a:	b7 01       	movw	r22, r14
    179c:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    17a0:	8e 01       	movw	r16, r28
    17a2:	0f 5e       	subi	r16, 0xEF	; 239
    17a4:	1f 4f       	sbci	r17, 0xFF	; 255
    17a6:	ce 01       	movw	r24, r28
    17a8:	05 96       	adiw	r24, 0x05	; 5
    17aa:	b8 01       	movw	r22, r16
    17ac:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    17b0:	8a 89       	ldd	r24, Y+18	; 0x12
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	89 27       	eor	r24, r25
    17b6:	8a 8b       	std	Y+18, r24	; 0x12
    17b8:	c7 01       	movw	r24, r14
    17ba:	b8 01       	movw	r22, r16
    17bc:	ae 01       	movw	r20, r28
    17be:	47 5e       	subi	r20, 0xE7	; 231
    17c0:	5f 4f       	sbci	r21, 0xFF	; 255
    17c2:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <_fpadd_parts>
    17c6:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__pack_f>
    17ca:	a0 96       	adiw	r28, 0x20	; 32
    17cc:	e6 e0       	ldi	r30, 0x06	; 6
    17ce:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <__epilogue_restores__+0x18>

000017d2 <__addsf3>:
    17d2:	a0 e2       	ldi	r26, 0x20	; 32
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	ef ee       	ldi	r30, 0xEF	; 239
    17d8:	fb e0       	ldi	r31, 0x0B	; 11
    17da:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__prologue_saves__+0x18>
    17de:	69 83       	std	Y+1, r22	; 0x01
    17e0:	7a 83       	std	Y+2, r23	; 0x02
    17e2:	8b 83       	std	Y+3, r24	; 0x03
    17e4:	9c 83       	std	Y+4, r25	; 0x04
    17e6:	2d 83       	std	Y+5, r18	; 0x05
    17e8:	3e 83       	std	Y+6, r19	; 0x06
    17ea:	4f 83       	std	Y+7, r20	; 0x07
    17ec:	58 87       	std	Y+8, r21	; 0x08
    17ee:	f9 e0       	ldi	r31, 0x09	; 9
    17f0:	ef 2e       	mov	r14, r31
    17f2:	f1 2c       	mov	r15, r1
    17f4:	ec 0e       	add	r14, r28
    17f6:	fd 1e       	adc	r15, r29
    17f8:	ce 01       	movw	r24, r28
    17fa:	01 96       	adiw	r24, 0x01	; 1
    17fc:	b7 01       	movw	r22, r14
    17fe:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    1802:	8e 01       	movw	r16, r28
    1804:	0f 5e       	subi	r16, 0xEF	; 239
    1806:	1f 4f       	sbci	r17, 0xFF	; 255
    1808:	ce 01       	movw	r24, r28
    180a:	05 96       	adiw	r24, 0x05	; 5
    180c:	b8 01       	movw	r22, r16
    180e:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    1812:	c7 01       	movw	r24, r14
    1814:	b8 01       	movw	r22, r16
    1816:	ae 01       	movw	r20, r28
    1818:	47 5e       	subi	r20, 0xE7	; 231
    181a:	5f 4f       	sbci	r21, 0xFF	; 255
    181c:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <_fpadd_parts>
    1820:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__pack_f>
    1824:	a0 96       	adiw	r28, 0x20	; 32
    1826:	e6 e0       	ldi	r30, 0x06	; 6
    1828:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <__epilogue_restores__+0x18>

0000182c <__mulsf3>:
    182c:	a0 e2       	ldi	r26, 0x20	; 32
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	ec e1       	ldi	r30, 0x1C	; 28
    1832:	fc e0       	ldi	r31, 0x0C	; 12
    1834:	0c 94 93 10 	jmp	0x2126	; 0x2126 <__prologue_saves__>
    1838:	69 83       	std	Y+1, r22	; 0x01
    183a:	7a 83       	std	Y+2, r23	; 0x02
    183c:	8b 83       	std	Y+3, r24	; 0x03
    183e:	9c 83       	std	Y+4, r25	; 0x04
    1840:	2d 83       	std	Y+5, r18	; 0x05
    1842:	3e 83       	std	Y+6, r19	; 0x06
    1844:	4f 83       	std	Y+7, r20	; 0x07
    1846:	58 87       	std	Y+8, r21	; 0x08
    1848:	ce 01       	movw	r24, r28
    184a:	01 96       	adiw	r24, 0x01	; 1
    184c:	be 01       	movw	r22, r28
    184e:	67 5f       	subi	r22, 0xF7	; 247
    1850:	7f 4f       	sbci	r23, 0xFF	; 255
    1852:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    1856:	ce 01       	movw	r24, r28
    1858:	05 96       	adiw	r24, 0x05	; 5
    185a:	be 01       	movw	r22, r28
    185c:	6f 5e       	subi	r22, 0xEF	; 239
    185e:	7f 4f       	sbci	r23, 0xFF	; 255
    1860:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    1864:	99 85       	ldd	r25, Y+9	; 0x09
    1866:	92 30       	cpi	r25, 0x02	; 2
    1868:	88 f0       	brcs	.+34     	; 0x188c <__mulsf3+0x60>
    186a:	89 89       	ldd	r24, Y+17	; 0x11
    186c:	82 30       	cpi	r24, 0x02	; 2
    186e:	c8 f0       	brcs	.+50     	; 0x18a2 <__mulsf3+0x76>
    1870:	94 30       	cpi	r25, 0x04	; 4
    1872:	19 f4       	brne	.+6      	; 0x187a <__mulsf3+0x4e>
    1874:	82 30       	cpi	r24, 0x02	; 2
    1876:	51 f4       	brne	.+20     	; 0x188c <__mulsf3+0x60>
    1878:	04 c0       	rjmp	.+8      	; 0x1882 <__mulsf3+0x56>
    187a:	84 30       	cpi	r24, 0x04	; 4
    187c:	29 f4       	brne	.+10     	; 0x1888 <__mulsf3+0x5c>
    187e:	92 30       	cpi	r25, 0x02	; 2
    1880:	81 f4       	brne	.+32     	; 0x18a2 <__mulsf3+0x76>
    1882:	88 ee       	ldi	r24, 0xE8	; 232
    1884:	9b e0       	ldi	r25, 0x0B	; 11
    1886:	c6 c0       	rjmp	.+396    	; 0x1a14 <__mulsf3+0x1e8>
    1888:	92 30       	cpi	r25, 0x02	; 2
    188a:	49 f4       	brne	.+18     	; 0x189e <__mulsf3+0x72>
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1890:	8a 89       	ldd	r24, Y+18	; 0x12
    1892:	98 13       	cpse	r25, r24
    1894:	21 e0       	ldi	r18, 0x01	; 1
    1896:	2a 87       	std	Y+10, r18	; 0x0a
    1898:	ce 01       	movw	r24, r28
    189a:	09 96       	adiw	r24, 0x09	; 9
    189c:	bb c0       	rjmp	.+374    	; 0x1a14 <__mulsf3+0x1e8>
    189e:	82 30       	cpi	r24, 0x02	; 2
    18a0:	49 f4       	brne	.+18     	; 0x18b4 <__mulsf3+0x88>
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a6:	8a 89       	ldd	r24, Y+18	; 0x12
    18a8:	98 13       	cpse	r25, r24
    18aa:	21 e0       	ldi	r18, 0x01	; 1
    18ac:	2a 8b       	std	Y+18, r18	; 0x12
    18ae:	ce 01       	movw	r24, r28
    18b0:	41 96       	adiw	r24, 0x11	; 17
    18b2:	b0 c0       	rjmp	.+352    	; 0x1a14 <__mulsf3+0x1e8>
    18b4:	2d 84       	ldd	r2, Y+13	; 0x0d
    18b6:	3e 84       	ldd	r3, Y+14	; 0x0e
    18b8:	4f 84       	ldd	r4, Y+15	; 0x0f
    18ba:	58 88       	ldd	r5, Y+16	; 0x10
    18bc:	6d 88       	ldd	r6, Y+21	; 0x15
    18be:	7e 88       	ldd	r7, Y+22	; 0x16
    18c0:	8f 88       	ldd	r8, Y+23	; 0x17
    18c2:	98 8c       	ldd	r9, Y+24	; 0x18
    18c4:	ee 24       	eor	r14, r14
    18c6:	ff 24       	eor	r15, r15
    18c8:	87 01       	movw	r16, r14
    18ca:	aa 24       	eor	r10, r10
    18cc:	bb 24       	eor	r11, r11
    18ce:	65 01       	movw	r12, r10
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	50 e0       	ldi	r21, 0x00	; 0
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	e0 e0       	ldi	r30, 0x00	; 0
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	c1 01       	movw	r24, r2
    18de:	81 70       	andi	r24, 0x01	; 1
    18e0:	90 70       	andi	r25, 0x00	; 0
    18e2:	89 2b       	or	r24, r25
    18e4:	e9 f0       	breq	.+58     	; 0x1920 <__mulsf3+0xf4>
    18e6:	e6 0c       	add	r14, r6
    18e8:	f7 1c       	adc	r15, r7
    18ea:	08 1d       	adc	r16, r8
    18ec:	19 1d       	adc	r17, r9
    18ee:	9a 01       	movw	r18, r20
    18f0:	ab 01       	movw	r20, r22
    18f2:	2a 0d       	add	r18, r10
    18f4:	3b 1d       	adc	r19, r11
    18f6:	4c 1d       	adc	r20, r12
    18f8:	5d 1d       	adc	r21, r13
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a0 e0       	ldi	r26, 0x00	; 0
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e6 14       	cp	r14, r6
    1904:	f7 04       	cpc	r15, r7
    1906:	08 05       	cpc	r16, r8
    1908:	19 05       	cpc	r17, r9
    190a:	20 f4       	brcc	.+8      	; 0x1914 <__mulsf3+0xe8>
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	a0 e0       	ldi	r26, 0x00	; 0
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	ba 01       	movw	r22, r20
    1916:	a9 01       	movw	r20, r18
    1918:	48 0f       	add	r20, r24
    191a:	59 1f       	adc	r21, r25
    191c:	6a 1f       	adc	r22, r26
    191e:	7b 1f       	adc	r23, r27
    1920:	aa 0c       	add	r10, r10
    1922:	bb 1c       	adc	r11, r11
    1924:	cc 1c       	adc	r12, r12
    1926:	dd 1c       	adc	r13, r13
    1928:	97 fe       	sbrs	r9, 7
    192a:	08 c0       	rjmp	.+16     	; 0x193c <__mulsf3+0x110>
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a0 e0       	ldi	r26, 0x00	; 0
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	a8 2a       	or	r10, r24
    1936:	b9 2a       	or	r11, r25
    1938:	ca 2a       	or	r12, r26
    193a:	db 2a       	or	r13, r27
    193c:	31 96       	adiw	r30, 0x01	; 1
    193e:	e0 32       	cpi	r30, 0x20	; 32
    1940:	f1 05       	cpc	r31, r1
    1942:	49 f0       	breq	.+18     	; 0x1956 <__mulsf3+0x12a>
    1944:	66 0c       	add	r6, r6
    1946:	77 1c       	adc	r7, r7
    1948:	88 1c       	adc	r8, r8
    194a:	99 1c       	adc	r9, r9
    194c:	56 94       	lsr	r5
    194e:	47 94       	ror	r4
    1950:	37 94       	ror	r3
    1952:	27 94       	ror	r2
    1954:	c3 cf       	rjmp	.-122    	; 0x18dc <__mulsf3+0xb0>
    1956:	fa 85       	ldd	r31, Y+10	; 0x0a
    1958:	ea 89       	ldd	r30, Y+18	; 0x12
    195a:	2b 89       	ldd	r18, Y+19	; 0x13
    195c:	3c 89       	ldd	r19, Y+20	; 0x14
    195e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1960:	9c 85       	ldd	r25, Y+12	; 0x0c
    1962:	28 0f       	add	r18, r24
    1964:	39 1f       	adc	r19, r25
    1966:	2e 5f       	subi	r18, 0xFE	; 254
    1968:	3f 4f       	sbci	r19, 0xFF	; 255
    196a:	17 c0       	rjmp	.+46     	; 0x199a <__mulsf3+0x16e>
    196c:	ca 01       	movw	r24, r20
    196e:	81 70       	andi	r24, 0x01	; 1
    1970:	90 70       	andi	r25, 0x00	; 0
    1972:	89 2b       	or	r24, r25
    1974:	61 f0       	breq	.+24     	; 0x198e <__mulsf3+0x162>
    1976:	16 95       	lsr	r17
    1978:	07 95       	ror	r16
    197a:	f7 94       	ror	r15
    197c:	e7 94       	ror	r14
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a0 e0       	ldi	r26, 0x00	; 0
    1984:	b0 e8       	ldi	r27, 0x80	; 128
    1986:	e8 2a       	or	r14, r24
    1988:	f9 2a       	or	r15, r25
    198a:	0a 2b       	or	r16, r26
    198c:	1b 2b       	or	r17, r27
    198e:	76 95       	lsr	r23
    1990:	67 95       	ror	r22
    1992:	57 95       	ror	r21
    1994:	47 95       	ror	r20
    1996:	2f 5f       	subi	r18, 0xFF	; 255
    1998:	3f 4f       	sbci	r19, 0xFF	; 255
    199a:	77 fd       	sbrc	r23, 7
    199c:	e7 cf       	rjmp	.-50     	; 0x196c <__mulsf3+0x140>
    199e:	0c c0       	rjmp	.+24     	; 0x19b8 <__mulsf3+0x18c>
    19a0:	44 0f       	add	r20, r20
    19a2:	55 1f       	adc	r21, r21
    19a4:	66 1f       	adc	r22, r22
    19a6:	77 1f       	adc	r23, r23
    19a8:	17 fd       	sbrc	r17, 7
    19aa:	41 60       	ori	r20, 0x01	; 1
    19ac:	ee 0c       	add	r14, r14
    19ae:	ff 1c       	adc	r15, r15
    19b0:	00 1f       	adc	r16, r16
    19b2:	11 1f       	adc	r17, r17
    19b4:	21 50       	subi	r18, 0x01	; 1
    19b6:	30 40       	sbci	r19, 0x00	; 0
    19b8:	40 30       	cpi	r20, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	59 07       	cpc	r21, r25
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	69 07       	cpc	r22, r25
    19c2:	90 e4       	ldi	r25, 0x40	; 64
    19c4:	79 07       	cpc	r23, r25
    19c6:	60 f3       	brcs	.-40     	; 0x19a0 <__mulsf3+0x174>
    19c8:	2b 8f       	std	Y+27, r18	; 0x1b
    19ca:	3c 8f       	std	Y+28, r19	; 0x1c
    19cc:	db 01       	movw	r26, r22
    19ce:	ca 01       	movw	r24, r20
    19d0:	8f 77       	andi	r24, 0x7F	; 127
    19d2:	90 70       	andi	r25, 0x00	; 0
    19d4:	a0 70       	andi	r26, 0x00	; 0
    19d6:	b0 70       	andi	r27, 0x00	; 0
    19d8:	80 34       	cpi	r24, 0x40	; 64
    19da:	91 05       	cpc	r25, r1
    19dc:	a1 05       	cpc	r26, r1
    19de:	b1 05       	cpc	r27, r1
    19e0:	61 f4       	brne	.+24     	; 0x19fa <__mulsf3+0x1ce>
    19e2:	47 fd       	sbrc	r20, 7
    19e4:	0a c0       	rjmp	.+20     	; 0x19fa <__mulsf3+0x1ce>
    19e6:	e1 14       	cp	r14, r1
    19e8:	f1 04       	cpc	r15, r1
    19ea:	01 05       	cpc	r16, r1
    19ec:	11 05       	cpc	r17, r1
    19ee:	29 f0       	breq	.+10     	; 0x19fa <__mulsf3+0x1ce>
    19f0:	40 5c       	subi	r20, 0xC0	; 192
    19f2:	5f 4f       	sbci	r21, 0xFF	; 255
    19f4:	6f 4f       	sbci	r22, 0xFF	; 255
    19f6:	7f 4f       	sbci	r23, 0xFF	; 255
    19f8:	40 78       	andi	r20, 0x80	; 128
    19fa:	1a 8e       	std	Y+26, r1	; 0x1a
    19fc:	fe 17       	cp	r31, r30
    19fe:	11 f0       	breq	.+4      	; 0x1a04 <__mulsf3+0x1d8>
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	8a 8f       	std	Y+26, r24	; 0x1a
    1a04:	4d 8f       	std	Y+29, r20	; 0x1d
    1a06:	5e 8f       	std	Y+30, r21	; 0x1e
    1a08:	6f 8f       	std	Y+31, r22	; 0x1f
    1a0a:	78 a3       	std	Y+32, r23	; 0x20
    1a0c:	83 e0       	ldi	r24, 0x03	; 3
    1a0e:	89 8f       	std	Y+25, r24	; 0x19
    1a10:	ce 01       	movw	r24, r28
    1a12:	49 96       	adiw	r24, 0x19	; 25
    1a14:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__pack_f>
    1a18:	a0 96       	adiw	r28, 0x20	; 32
    1a1a:	e2 e1       	ldi	r30, 0x12	; 18
    1a1c:	0c 94 af 10 	jmp	0x215e	; 0x215e <__epilogue_restores__>

00001a20 <__divsf3>:
    1a20:	a8 e1       	ldi	r26, 0x18	; 24
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e6 e1       	ldi	r30, 0x16	; 22
    1a26:	fd e0       	ldi	r31, 0x0D	; 13
    1a28:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <__prologue_saves__+0x10>
    1a2c:	69 83       	std	Y+1, r22	; 0x01
    1a2e:	7a 83       	std	Y+2, r23	; 0x02
    1a30:	8b 83       	std	Y+3, r24	; 0x03
    1a32:	9c 83       	std	Y+4, r25	; 0x04
    1a34:	2d 83       	std	Y+5, r18	; 0x05
    1a36:	3e 83       	std	Y+6, r19	; 0x06
    1a38:	4f 83       	std	Y+7, r20	; 0x07
    1a3a:	58 87       	std	Y+8, r21	; 0x08
    1a3c:	b9 e0       	ldi	r27, 0x09	; 9
    1a3e:	eb 2e       	mov	r14, r27
    1a40:	f1 2c       	mov	r15, r1
    1a42:	ec 0e       	add	r14, r28
    1a44:	fd 1e       	adc	r15, r29
    1a46:	ce 01       	movw	r24, r28
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	b7 01       	movw	r22, r14
    1a4c:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    1a50:	8e 01       	movw	r16, r28
    1a52:	0f 5e       	subi	r16, 0xEF	; 239
    1a54:	1f 4f       	sbci	r17, 0xFF	; 255
    1a56:	ce 01       	movw	r24, r28
    1a58:	05 96       	adiw	r24, 0x05	; 5
    1a5a:	b8 01       	movw	r22, r16
    1a5c:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    1a60:	29 85       	ldd	r18, Y+9	; 0x09
    1a62:	22 30       	cpi	r18, 0x02	; 2
    1a64:	08 f4       	brcc	.+2      	; 0x1a68 <__divsf3+0x48>
    1a66:	7e c0       	rjmp	.+252    	; 0x1b64 <__divsf3+0x144>
    1a68:	39 89       	ldd	r19, Y+17	; 0x11
    1a6a:	32 30       	cpi	r19, 0x02	; 2
    1a6c:	10 f4       	brcc	.+4      	; 0x1a72 <__divsf3+0x52>
    1a6e:	b8 01       	movw	r22, r16
    1a70:	7c c0       	rjmp	.+248    	; 0x1b6a <__divsf3+0x14a>
    1a72:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a74:	9a 89       	ldd	r25, Y+18	; 0x12
    1a76:	89 27       	eor	r24, r25
    1a78:	8a 87       	std	Y+10, r24	; 0x0a
    1a7a:	24 30       	cpi	r18, 0x04	; 4
    1a7c:	11 f0       	breq	.+4      	; 0x1a82 <__divsf3+0x62>
    1a7e:	22 30       	cpi	r18, 0x02	; 2
    1a80:	31 f4       	brne	.+12     	; 0x1a8e <__divsf3+0x6e>
    1a82:	23 17       	cp	r18, r19
    1a84:	09 f0       	breq	.+2      	; 0x1a88 <__divsf3+0x68>
    1a86:	6e c0       	rjmp	.+220    	; 0x1b64 <__divsf3+0x144>
    1a88:	68 ee       	ldi	r22, 0xE8	; 232
    1a8a:	7b e0       	ldi	r23, 0x0B	; 11
    1a8c:	6e c0       	rjmp	.+220    	; 0x1b6a <__divsf3+0x14a>
    1a8e:	34 30       	cpi	r19, 0x04	; 4
    1a90:	39 f4       	brne	.+14     	; 0x1aa0 <__divsf3+0x80>
    1a92:	1d 86       	std	Y+13, r1	; 0x0d
    1a94:	1e 86       	std	Y+14, r1	; 0x0e
    1a96:	1f 86       	std	Y+15, r1	; 0x0f
    1a98:	18 8a       	std	Y+16, r1	; 0x10
    1a9a:	1c 86       	std	Y+12, r1	; 0x0c
    1a9c:	1b 86       	std	Y+11, r1	; 0x0b
    1a9e:	04 c0       	rjmp	.+8      	; 0x1aa8 <__divsf3+0x88>
    1aa0:	32 30       	cpi	r19, 0x02	; 2
    1aa2:	21 f4       	brne	.+8      	; 0x1aac <__divsf3+0x8c>
    1aa4:	84 e0       	ldi	r24, 0x04	; 4
    1aa6:	89 87       	std	Y+9, r24	; 0x09
    1aa8:	b7 01       	movw	r22, r14
    1aaa:	5f c0       	rjmp	.+190    	; 0x1b6a <__divsf3+0x14a>
    1aac:	2b 85       	ldd	r18, Y+11	; 0x0b
    1aae:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ab0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab4:	28 1b       	sub	r18, r24
    1ab6:	39 0b       	sbc	r19, r25
    1ab8:	3c 87       	std	Y+12, r19	; 0x0c
    1aba:	2b 87       	std	Y+11, r18	; 0x0b
    1abc:	ed 84       	ldd	r14, Y+13	; 0x0d
    1abe:	fe 84       	ldd	r15, Y+14	; 0x0e
    1ac0:	0f 85       	ldd	r16, Y+15	; 0x0f
    1ac2:	18 89       	ldd	r17, Y+16	; 0x10
    1ac4:	ad 88       	ldd	r10, Y+21	; 0x15
    1ac6:	be 88       	ldd	r11, Y+22	; 0x16
    1ac8:	cf 88       	ldd	r12, Y+23	; 0x17
    1aca:	d8 8c       	ldd	r13, Y+24	; 0x18
    1acc:	ea 14       	cp	r14, r10
    1ace:	fb 04       	cpc	r15, r11
    1ad0:	0c 05       	cpc	r16, r12
    1ad2:	1d 05       	cpc	r17, r13
    1ad4:	40 f4       	brcc	.+16     	; 0x1ae6 <__divsf3+0xc6>
    1ad6:	ee 0c       	add	r14, r14
    1ad8:	ff 1c       	adc	r15, r15
    1ada:	00 1f       	adc	r16, r16
    1adc:	11 1f       	adc	r17, r17
    1ade:	21 50       	subi	r18, 0x01	; 1
    1ae0:	30 40       	sbci	r19, 0x00	; 0
    1ae2:	3c 87       	std	Y+12, r19	; 0x0c
    1ae4:	2b 87       	std	Y+11, r18	; 0x0b
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	a0 e0       	ldi	r26, 0x00	; 0
    1af4:	b0 e4       	ldi	r27, 0x40	; 64
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	ea 14       	cp	r14, r10
    1afc:	fb 04       	cpc	r15, r11
    1afe:	0c 05       	cpc	r16, r12
    1b00:	1d 05       	cpc	r17, r13
    1b02:	40 f0       	brcs	.+16     	; 0x1b14 <__divsf3+0xf4>
    1b04:	28 2b       	or	r18, r24
    1b06:	39 2b       	or	r19, r25
    1b08:	4a 2b       	or	r20, r26
    1b0a:	5b 2b       	or	r21, r27
    1b0c:	ea 18       	sub	r14, r10
    1b0e:	fb 08       	sbc	r15, r11
    1b10:	0c 09       	sbc	r16, r12
    1b12:	1d 09       	sbc	r17, r13
    1b14:	b6 95       	lsr	r27
    1b16:	a7 95       	ror	r26
    1b18:	97 95       	ror	r25
    1b1a:	87 95       	ror	r24
    1b1c:	ee 0c       	add	r14, r14
    1b1e:	ff 1c       	adc	r15, r15
    1b20:	00 1f       	adc	r16, r16
    1b22:	11 1f       	adc	r17, r17
    1b24:	6f 5f       	subi	r22, 0xFF	; 255
    1b26:	7f 4f       	sbci	r23, 0xFF	; 255
    1b28:	6f 31       	cpi	r22, 0x1F	; 31
    1b2a:	71 05       	cpc	r23, r1
    1b2c:	31 f7       	brne	.-52     	; 0x1afa <__divsf3+0xda>
    1b2e:	da 01       	movw	r26, r20
    1b30:	c9 01       	movw	r24, r18
    1b32:	8f 77       	andi	r24, 0x7F	; 127
    1b34:	90 70       	andi	r25, 0x00	; 0
    1b36:	a0 70       	andi	r26, 0x00	; 0
    1b38:	b0 70       	andi	r27, 0x00	; 0
    1b3a:	80 34       	cpi	r24, 0x40	; 64
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	a1 05       	cpc	r26, r1
    1b40:	b1 05       	cpc	r27, r1
    1b42:	61 f4       	brne	.+24     	; 0x1b5c <__divsf3+0x13c>
    1b44:	27 fd       	sbrc	r18, 7
    1b46:	0a c0       	rjmp	.+20     	; 0x1b5c <__divsf3+0x13c>
    1b48:	e1 14       	cp	r14, r1
    1b4a:	f1 04       	cpc	r15, r1
    1b4c:	01 05       	cpc	r16, r1
    1b4e:	11 05       	cpc	r17, r1
    1b50:	29 f0       	breq	.+10     	; 0x1b5c <__divsf3+0x13c>
    1b52:	20 5c       	subi	r18, 0xC0	; 192
    1b54:	3f 4f       	sbci	r19, 0xFF	; 255
    1b56:	4f 4f       	sbci	r20, 0xFF	; 255
    1b58:	5f 4f       	sbci	r21, 0xFF	; 255
    1b5a:	20 78       	andi	r18, 0x80	; 128
    1b5c:	2d 87       	std	Y+13, r18	; 0x0d
    1b5e:	3e 87       	std	Y+14, r19	; 0x0e
    1b60:	4f 87       	std	Y+15, r20	; 0x0f
    1b62:	58 8b       	std	Y+16, r21	; 0x10
    1b64:	be 01       	movw	r22, r28
    1b66:	67 5f       	subi	r22, 0xF7	; 247
    1b68:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__pack_f>
    1b70:	68 96       	adiw	r28, 0x18	; 24
    1b72:	ea e0       	ldi	r30, 0x0A	; 10
    1b74:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__epilogue_restores__+0x10>

00001b78 <__gesf2>:
    1b78:	a8 e1       	ldi	r26, 0x18	; 24
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e2 ec       	ldi	r30, 0xC2	; 194
    1b7e:	fd e0       	ldi	r31, 0x0D	; 13
    1b80:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__prologue_saves__+0x18>
    1b84:	69 83       	std	Y+1, r22	; 0x01
    1b86:	7a 83       	std	Y+2, r23	; 0x02
    1b88:	8b 83       	std	Y+3, r24	; 0x03
    1b8a:	9c 83       	std	Y+4, r25	; 0x04
    1b8c:	2d 83       	std	Y+5, r18	; 0x05
    1b8e:	3e 83       	std	Y+6, r19	; 0x06
    1b90:	4f 83       	std	Y+7, r20	; 0x07
    1b92:	58 87       	std	Y+8, r21	; 0x08
    1b94:	89 e0       	ldi	r24, 0x09	; 9
    1b96:	e8 2e       	mov	r14, r24
    1b98:	f1 2c       	mov	r15, r1
    1b9a:	ec 0e       	add	r14, r28
    1b9c:	fd 1e       	adc	r15, r29
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	01 96       	adiw	r24, 0x01	; 1
    1ba2:	b7 01       	movw	r22, r14
    1ba4:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    1ba8:	8e 01       	movw	r16, r28
    1baa:	0f 5e       	subi	r16, 0xEF	; 239
    1bac:	1f 4f       	sbci	r17, 0xFF	; 255
    1bae:	ce 01       	movw	r24, r28
    1bb0:	05 96       	adiw	r24, 0x05	; 5
    1bb2:	b8 01       	movw	r22, r16
    1bb4:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    1bb8:	89 85       	ldd	r24, Y+9	; 0x09
    1bba:	82 30       	cpi	r24, 0x02	; 2
    1bbc:	40 f0       	brcs	.+16     	; 0x1bce <__gesf2+0x56>
    1bbe:	89 89       	ldd	r24, Y+17	; 0x11
    1bc0:	82 30       	cpi	r24, 0x02	; 2
    1bc2:	28 f0       	brcs	.+10     	; 0x1bce <__gesf2+0x56>
    1bc4:	c7 01       	movw	r24, r14
    1bc6:	b8 01       	movw	r22, r16
    1bc8:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fpcmp_parts_f>
    1bcc:	01 c0       	rjmp	.+2      	; 0x1bd0 <__gesf2+0x58>
    1bce:	8f ef       	ldi	r24, 0xFF	; 255
    1bd0:	68 96       	adiw	r28, 0x18	; 24
    1bd2:	e6 e0       	ldi	r30, 0x06	; 6
    1bd4:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <__epilogue_restores__+0x18>

00001bd8 <__floatsisf>:
    1bd8:	a8 e0       	ldi	r26, 0x08	; 8
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e2 ef       	ldi	r30, 0xF2	; 242
    1bde:	fd e0       	ldi	r31, 0x0D	; 13
    1be0:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__prologue_saves__+0x12>
    1be4:	9b 01       	movw	r18, r22
    1be6:	ac 01       	movw	r20, r24
    1be8:	83 e0       	ldi	r24, 0x03	; 3
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	da 01       	movw	r26, r20
    1bee:	c9 01       	movw	r24, r18
    1bf0:	88 27       	eor	r24, r24
    1bf2:	b7 fd       	sbrc	r27, 7
    1bf4:	83 95       	inc	r24
    1bf6:	99 27       	eor	r25, r25
    1bf8:	aa 27       	eor	r26, r26
    1bfa:	bb 27       	eor	r27, r27
    1bfc:	b8 2e       	mov	r11, r24
    1bfe:	21 15       	cp	r18, r1
    1c00:	31 05       	cpc	r19, r1
    1c02:	41 05       	cpc	r20, r1
    1c04:	51 05       	cpc	r21, r1
    1c06:	19 f4       	brne	.+6      	; 0x1c0e <__floatsisf+0x36>
    1c08:	82 e0       	ldi	r24, 0x02	; 2
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	3a c0       	rjmp	.+116    	; 0x1c82 <__floatsisf+0xaa>
    1c0e:	88 23       	and	r24, r24
    1c10:	a9 f0       	breq	.+42     	; 0x1c3c <__floatsisf+0x64>
    1c12:	20 30       	cpi	r18, 0x00	; 0
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	38 07       	cpc	r19, r24
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	48 07       	cpc	r20, r24
    1c1c:	80 e8       	ldi	r24, 0x80	; 128
    1c1e:	58 07       	cpc	r21, r24
    1c20:	29 f4       	brne	.+10     	; 0x1c2c <__floatsisf+0x54>
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	70 e0       	ldi	r23, 0x00	; 0
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	9f ec       	ldi	r25, 0xCF	; 207
    1c2a:	30 c0       	rjmp	.+96     	; 0x1c8c <__floatsisf+0xb4>
    1c2c:	ee 24       	eor	r14, r14
    1c2e:	ff 24       	eor	r15, r15
    1c30:	87 01       	movw	r16, r14
    1c32:	e2 1a       	sub	r14, r18
    1c34:	f3 0a       	sbc	r15, r19
    1c36:	04 0b       	sbc	r16, r20
    1c38:	15 0b       	sbc	r17, r21
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <__floatsisf+0x68>
    1c3c:	79 01       	movw	r14, r18
    1c3e:	8a 01       	movw	r16, r20
    1c40:	8e e1       	ldi	r24, 0x1E	; 30
    1c42:	c8 2e       	mov	r12, r24
    1c44:	d1 2c       	mov	r13, r1
    1c46:	dc 82       	std	Y+4, r13	; 0x04
    1c48:	cb 82       	std	Y+3, r12	; 0x03
    1c4a:	ed 82       	std	Y+5, r14	; 0x05
    1c4c:	fe 82       	std	Y+6, r15	; 0x06
    1c4e:	0f 83       	std	Y+7, r16	; 0x07
    1c50:	18 87       	std	Y+8, r17	; 0x08
    1c52:	c8 01       	movw	r24, r16
    1c54:	b7 01       	movw	r22, r14
    1c56:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__clzsi2>
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	18 16       	cp	r1, r24
    1c5e:	19 06       	cpc	r1, r25
    1c60:	84 f4       	brge	.+32     	; 0x1c82 <__floatsisf+0xaa>
    1c62:	08 2e       	mov	r0, r24
    1c64:	04 c0       	rjmp	.+8      	; 0x1c6e <__floatsisf+0x96>
    1c66:	ee 0c       	add	r14, r14
    1c68:	ff 1c       	adc	r15, r15
    1c6a:	00 1f       	adc	r16, r16
    1c6c:	11 1f       	adc	r17, r17
    1c6e:	0a 94       	dec	r0
    1c70:	d2 f7       	brpl	.-12     	; 0x1c66 <__floatsisf+0x8e>
    1c72:	ed 82       	std	Y+5, r14	; 0x05
    1c74:	fe 82       	std	Y+6, r15	; 0x06
    1c76:	0f 83       	std	Y+7, r16	; 0x07
    1c78:	18 87       	std	Y+8, r17	; 0x08
    1c7a:	c8 1a       	sub	r12, r24
    1c7c:	d9 0a       	sbc	r13, r25
    1c7e:	dc 82       	std	Y+4, r13	; 0x04
    1c80:	cb 82       	std	Y+3, r12	; 0x03
    1c82:	ba 82       	std	Y+2, r11	; 0x02
    1c84:	ce 01       	movw	r24, r28
    1c86:	01 96       	adiw	r24, 0x01	; 1
    1c88:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__pack_f>
    1c8c:	28 96       	adiw	r28, 0x08	; 8
    1c8e:	e9 e0       	ldi	r30, 0x09	; 9
    1c90:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__epilogue_restores__+0x12>

00001c94 <__fixsfsi>:
    1c94:	ac e0       	ldi	r26, 0x0C	; 12
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e0 e5       	ldi	r30, 0x50	; 80
    1c9a:	fe e0       	ldi	r31, 0x0E	; 14
    1c9c:	0c 94 a3 10 	jmp	0x2146	; 0x2146 <__prologue_saves__+0x20>
    1ca0:	69 83       	std	Y+1, r22	; 0x01
    1ca2:	7a 83       	std	Y+2, r23	; 0x02
    1ca4:	8b 83       	std	Y+3, r24	; 0x03
    1ca6:	9c 83       	std	Y+4, r25	; 0x04
    1ca8:	ce 01       	movw	r24, r28
    1caa:	01 96       	adiw	r24, 0x01	; 1
    1cac:	be 01       	movw	r22, r28
    1cae:	6b 5f       	subi	r22, 0xFB	; 251
    1cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb2:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    1cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb8:	82 30       	cpi	r24, 0x02	; 2
    1cba:	61 f1       	breq	.+88     	; 0x1d14 <__fixsfsi+0x80>
    1cbc:	82 30       	cpi	r24, 0x02	; 2
    1cbe:	50 f1       	brcs	.+84     	; 0x1d14 <__fixsfsi+0x80>
    1cc0:	84 30       	cpi	r24, 0x04	; 4
    1cc2:	21 f4       	brne	.+8      	; 0x1ccc <__fixsfsi+0x38>
    1cc4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc6:	88 23       	and	r24, r24
    1cc8:	51 f1       	breq	.+84     	; 0x1d1e <__fixsfsi+0x8a>
    1cca:	2e c0       	rjmp	.+92     	; 0x1d28 <__fixsfsi+0x94>
    1ccc:	2f 81       	ldd	r18, Y+7	; 0x07
    1cce:	38 85       	ldd	r19, Y+8	; 0x08
    1cd0:	37 fd       	sbrc	r19, 7
    1cd2:	20 c0       	rjmp	.+64     	; 0x1d14 <__fixsfsi+0x80>
    1cd4:	6e 81       	ldd	r22, Y+6	; 0x06
    1cd6:	2f 31       	cpi	r18, 0x1F	; 31
    1cd8:	31 05       	cpc	r19, r1
    1cda:	1c f0       	brlt	.+6      	; 0x1ce2 <__fixsfsi+0x4e>
    1cdc:	66 23       	and	r22, r22
    1cde:	f9 f0       	breq	.+62     	; 0x1d1e <__fixsfsi+0x8a>
    1ce0:	23 c0       	rjmp	.+70     	; 0x1d28 <__fixsfsi+0x94>
    1ce2:	8e e1       	ldi	r24, 0x1E	; 30
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	82 1b       	sub	r24, r18
    1ce8:	93 0b       	sbc	r25, r19
    1cea:	29 85       	ldd	r18, Y+9	; 0x09
    1cec:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cee:	4b 85       	ldd	r20, Y+11	; 0x0b
    1cf0:	5c 85       	ldd	r21, Y+12	; 0x0c
    1cf2:	04 c0       	rjmp	.+8      	; 0x1cfc <__fixsfsi+0x68>
    1cf4:	56 95       	lsr	r21
    1cf6:	47 95       	ror	r20
    1cf8:	37 95       	ror	r19
    1cfa:	27 95       	ror	r18
    1cfc:	8a 95       	dec	r24
    1cfe:	d2 f7       	brpl	.-12     	; 0x1cf4 <__fixsfsi+0x60>
    1d00:	66 23       	and	r22, r22
    1d02:	b1 f0       	breq	.+44     	; 0x1d30 <__fixsfsi+0x9c>
    1d04:	50 95       	com	r21
    1d06:	40 95       	com	r20
    1d08:	30 95       	com	r19
    1d0a:	21 95       	neg	r18
    1d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0e:	4f 4f       	sbci	r20, 0xFF	; 255
    1d10:	5f 4f       	sbci	r21, 0xFF	; 255
    1d12:	0e c0       	rjmp	.+28     	; 0x1d30 <__fixsfsi+0x9c>
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	50 e0       	ldi	r21, 0x00	; 0
    1d1c:	09 c0       	rjmp	.+18     	; 0x1d30 <__fixsfsi+0x9c>
    1d1e:	2f ef       	ldi	r18, 0xFF	; 255
    1d20:	3f ef       	ldi	r19, 0xFF	; 255
    1d22:	4f ef       	ldi	r20, 0xFF	; 255
    1d24:	5f e7       	ldi	r21, 0x7F	; 127
    1d26:	04 c0       	rjmp	.+8      	; 0x1d30 <__fixsfsi+0x9c>
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	50 e8       	ldi	r21, 0x80	; 128
    1d30:	b9 01       	movw	r22, r18
    1d32:	ca 01       	movw	r24, r20
    1d34:	2c 96       	adiw	r28, 0x0c	; 12
    1d36:	e2 e0       	ldi	r30, 0x02	; 2
    1d38:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__epilogue_restores__+0x20>

00001d3c <__clzsi2>:
    1d3c:	ef 92       	push	r14
    1d3e:	ff 92       	push	r15
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	7b 01       	movw	r14, r22
    1d46:	8c 01       	movw	r16, r24
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	e8 16       	cp	r14, r24
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	f8 06       	cpc	r15, r24
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	08 07       	cpc	r16, r24
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	18 07       	cpc	r17, r24
    1d58:	88 f4       	brcc	.+34     	; 0x1d7c <__clzsi2+0x40>
    1d5a:	8f ef       	ldi	r24, 0xFF	; 255
    1d5c:	e8 16       	cp	r14, r24
    1d5e:	f1 04       	cpc	r15, r1
    1d60:	01 05       	cpc	r16, r1
    1d62:	11 05       	cpc	r17, r1
    1d64:	31 f0       	breq	.+12     	; 0x1d72 <__clzsi2+0x36>
    1d66:	28 f0       	brcs	.+10     	; 0x1d72 <__clzsi2+0x36>
    1d68:	88 e0       	ldi	r24, 0x08	; 8
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a0 e0       	ldi	r26, 0x00	; 0
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	17 c0       	rjmp	.+46     	; 0x1da0 <__clzsi2+0x64>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a0 e0       	ldi	r26, 0x00	; 0
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	12 c0       	rjmp	.+36     	; 0x1da0 <__clzsi2+0x64>
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	e8 16       	cp	r14, r24
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	f8 06       	cpc	r15, r24
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	08 07       	cpc	r16, r24
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	18 07       	cpc	r17, r24
    1d8c:	28 f0       	brcs	.+10     	; 0x1d98 <__clzsi2+0x5c>
    1d8e:	88 e1       	ldi	r24, 0x18	; 24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	a0 e0       	ldi	r26, 0x00	; 0
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	04 c0       	rjmp	.+8      	; 0x1da0 <__clzsi2+0x64>
    1d98:	80 e1       	ldi	r24, 0x10	; 16
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	a0 e0       	ldi	r26, 0x00	; 0
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	20 e2       	ldi	r18, 0x20	; 32
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	28 1b       	sub	r18, r24
    1daa:	39 0b       	sbc	r19, r25
    1dac:	4a 0b       	sbc	r20, r26
    1dae:	5b 0b       	sbc	r21, r27
    1db0:	04 c0       	rjmp	.+8      	; 0x1dba <__clzsi2+0x7e>
    1db2:	16 95       	lsr	r17
    1db4:	07 95       	ror	r16
    1db6:	f7 94       	ror	r15
    1db8:	e7 94       	ror	r14
    1dba:	8a 95       	dec	r24
    1dbc:	d2 f7       	brpl	.-12     	; 0x1db2 <__clzsi2+0x76>
    1dbe:	f7 01       	movw	r30, r14
    1dc0:	e0 51       	subi	r30, 0x10	; 16
    1dc2:	f4 4f       	sbci	r31, 0xF4	; 244
    1dc4:	80 81       	ld	r24, Z
    1dc6:	28 1b       	sub	r18, r24
    1dc8:	31 09       	sbc	r19, r1
    1dca:	41 09       	sbc	r20, r1
    1dcc:	51 09       	sbc	r21, r1
    1dce:	c9 01       	movw	r24, r18
    1dd0:	1f 91       	pop	r17
    1dd2:	0f 91       	pop	r16
    1dd4:	ff 90       	pop	r15
    1dd6:	ef 90       	pop	r14
    1dd8:	08 95       	ret

00001dda <__pack_f>:
    1dda:	df 92       	push	r13
    1ddc:	ef 92       	push	r14
    1dde:	ff 92       	push	r15
    1de0:	0f 93       	push	r16
    1de2:	1f 93       	push	r17
    1de4:	fc 01       	movw	r30, r24
    1de6:	e4 80       	ldd	r14, Z+4	; 0x04
    1de8:	f5 80       	ldd	r15, Z+5	; 0x05
    1dea:	06 81       	ldd	r16, Z+6	; 0x06
    1dec:	17 81       	ldd	r17, Z+7	; 0x07
    1dee:	d1 80       	ldd	r13, Z+1	; 0x01
    1df0:	80 81       	ld	r24, Z
    1df2:	82 30       	cpi	r24, 0x02	; 2
    1df4:	48 f4       	brcc	.+18     	; 0x1e08 <__pack_f+0x2e>
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	a0 e1       	ldi	r26, 0x10	; 16
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e8 2a       	or	r14, r24
    1e00:	f9 2a       	or	r15, r25
    1e02:	0a 2b       	or	r16, r26
    1e04:	1b 2b       	or	r17, r27
    1e06:	a5 c0       	rjmp	.+330    	; 0x1f52 <__pack_f+0x178>
    1e08:	84 30       	cpi	r24, 0x04	; 4
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <__pack_f+0x34>
    1e0c:	9f c0       	rjmp	.+318    	; 0x1f4c <__pack_f+0x172>
    1e0e:	82 30       	cpi	r24, 0x02	; 2
    1e10:	21 f4       	brne	.+8      	; 0x1e1a <__pack_f+0x40>
    1e12:	ee 24       	eor	r14, r14
    1e14:	ff 24       	eor	r15, r15
    1e16:	87 01       	movw	r16, r14
    1e18:	05 c0       	rjmp	.+10     	; 0x1e24 <__pack_f+0x4a>
    1e1a:	e1 14       	cp	r14, r1
    1e1c:	f1 04       	cpc	r15, r1
    1e1e:	01 05       	cpc	r16, r1
    1e20:	11 05       	cpc	r17, r1
    1e22:	19 f4       	brne	.+6      	; 0x1e2a <__pack_f+0x50>
    1e24:	e0 e0       	ldi	r30, 0x00	; 0
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	96 c0       	rjmp	.+300    	; 0x1f56 <__pack_f+0x17c>
    1e2a:	62 81       	ldd	r22, Z+2	; 0x02
    1e2c:	73 81       	ldd	r23, Z+3	; 0x03
    1e2e:	9f ef       	ldi	r25, 0xFF	; 255
    1e30:	62 38       	cpi	r22, 0x82	; 130
    1e32:	79 07       	cpc	r23, r25
    1e34:	0c f0       	brlt	.+2      	; 0x1e38 <__pack_f+0x5e>
    1e36:	5b c0       	rjmp	.+182    	; 0x1eee <__pack_f+0x114>
    1e38:	22 e8       	ldi	r18, 0x82	; 130
    1e3a:	3f ef       	ldi	r19, 0xFF	; 255
    1e3c:	26 1b       	sub	r18, r22
    1e3e:	37 0b       	sbc	r19, r23
    1e40:	2a 31       	cpi	r18, 0x1A	; 26
    1e42:	31 05       	cpc	r19, r1
    1e44:	2c f0       	brlt	.+10     	; 0x1e50 <__pack_f+0x76>
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e0       	ldi	r20, 0x00	; 0
    1e4c:	50 e0       	ldi	r21, 0x00	; 0
    1e4e:	2a c0       	rjmp	.+84     	; 0x1ea4 <__pack_f+0xca>
    1e50:	b8 01       	movw	r22, r16
    1e52:	a7 01       	movw	r20, r14
    1e54:	02 2e       	mov	r0, r18
    1e56:	04 c0       	rjmp	.+8      	; 0x1e60 <__pack_f+0x86>
    1e58:	76 95       	lsr	r23
    1e5a:	67 95       	ror	r22
    1e5c:	57 95       	ror	r21
    1e5e:	47 95       	ror	r20
    1e60:	0a 94       	dec	r0
    1e62:	d2 f7       	brpl	.-12     	; 0x1e58 <__pack_f+0x7e>
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	a0 e0       	ldi	r26, 0x00	; 0
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	04 c0       	rjmp	.+8      	; 0x1e76 <__pack_f+0x9c>
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	aa 1f       	adc	r26, r26
    1e74:	bb 1f       	adc	r27, r27
    1e76:	2a 95       	dec	r18
    1e78:	d2 f7       	brpl	.-12     	; 0x1e6e <__pack_f+0x94>
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	a1 09       	sbc	r26, r1
    1e7e:	b1 09       	sbc	r27, r1
    1e80:	8e 21       	and	r24, r14
    1e82:	9f 21       	and	r25, r15
    1e84:	a0 23       	and	r26, r16
    1e86:	b1 23       	and	r27, r17
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	a1 05       	cpc	r26, r1
    1e8c:	b1 05       	cpc	r27, r1
    1e8e:	21 f0       	breq	.+8      	; 0x1e98 <__pack_f+0xbe>
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	a0 e0       	ldi	r26, 0x00	; 0
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	9a 01       	movw	r18, r20
    1e9a:	ab 01       	movw	r20, r22
    1e9c:	28 2b       	or	r18, r24
    1e9e:	39 2b       	or	r19, r25
    1ea0:	4a 2b       	or	r20, r26
    1ea2:	5b 2b       	or	r21, r27
    1ea4:	da 01       	movw	r26, r20
    1ea6:	c9 01       	movw	r24, r18
    1ea8:	8f 77       	andi	r24, 0x7F	; 127
    1eaa:	90 70       	andi	r25, 0x00	; 0
    1eac:	a0 70       	andi	r26, 0x00	; 0
    1eae:	b0 70       	andi	r27, 0x00	; 0
    1eb0:	80 34       	cpi	r24, 0x40	; 64
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	a1 05       	cpc	r26, r1
    1eb6:	b1 05       	cpc	r27, r1
    1eb8:	39 f4       	brne	.+14     	; 0x1ec8 <__pack_f+0xee>
    1eba:	27 ff       	sbrs	r18, 7
    1ebc:	09 c0       	rjmp	.+18     	; 0x1ed0 <__pack_f+0xf6>
    1ebe:	20 5c       	subi	r18, 0xC0	; 192
    1ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec2:	4f 4f       	sbci	r20, 0xFF	; 255
    1ec4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec6:	04 c0       	rjmp	.+8      	; 0x1ed0 <__pack_f+0xf6>
    1ec8:	21 5c       	subi	r18, 0xC1	; 193
    1eca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ecc:	4f 4f       	sbci	r20, 0xFF	; 255
    1ece:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed0:	e0 e0       	ldi	r30, 0x00	; 0
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	20 30       	cpi	r18, 0x00	; 0
    1ed6:	a0 e0       	ldi	r26, 0x00	; 0
    1ed8:	3a 07       	cpc	r19, r26
    1eda:	a0 e0       	ldi	r26, 0x00	; 0
    1edc:	4a 07       	cpc	r20, r26
    1ede:	a0 e4       	ldi	r26, 0x40	; 64
    1ee0:	5a 07       	cpc	r21, r26
    1ee2:	10 f0       	brcs	.+4      	; 0x1ee8 <__pack_f+0x10e>
    1ee4:	e1 e0       	ldi	r30, 0x01	; 1
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	79 01       	movw	r14, r18
    1eea:	8a 01       	movw	r16, r20
    1eec:	27 c0       	rjmp	.+78     	; 0x1f3c <__pack_f+0x162>
    1eee:	60 38       	cpi	r22, 0x80	; 128
    1ef0:	71 05       	cpc	r23, r1
    1ef2:	64 f5       	brge	.+88     	; 0x1f4c <__pack_f+0x172>
    1ef4:	fb 01       	movw	r30, r22
    1ef6:	e1 58       	subi	r30, 0x81	; 129
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	d8 01       	movw	r26, r16
    1efc:	c7 01       	movw	r24, r14
    1efe:	8f 77       	andi	r24, 0x7F	; 127
    1f00:	90 70       	andi	r25, 0x00	; 0
    1f02:	a0 70       	andi	r26, 0x00	; 0
    1f04:	b0 70       	andi	r27, 0x00	; 0
    1f06:	80 34       	cpi	r24, 0x40	; 64
    1f08:	91 05       	cpc	r25, r1
    1f0a:	a1 05       	cpc	r26, r1
    1f0c:	b1 05       	cpc	r27, r1
    1f0e:	39 f4       	brne	.+14     	; 0x1f1e <__pack_f+0x144>
    1f10:	e7 fe       	sbrs	r14, 7
    1f12:	0d c0       	rjmp	.+26     	; 0x1f2e <__pack_f+0x154>
    1f14:	80 e4       	ldi	r24, 0x40	; 64
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	a0 e0       	ldi	r26, 0x00	; 0
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	04 c0       	rjmp	.+8      	; 0x1f26 <__pack_f+0x14c>
    1f1e:	8f e3       	ldi	r24, 0x3F	; 63
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	a0 e0       	ldi	r26, 0x00	; 0
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e8 0e       	add	r14, r24
    1f28:	f9 1e       	adc	r15, r25
    1f2a:	0a 1f       	adc	r16, r26
    1f2c:	1b 1f       	adc	r17, r27
    1f2e:	17 ff       	sbrs	r17, 7
    1f30:	05 c0       	rjmp	.+10     	; 0x1f3c <__pack_f+0x162>
    1f32:	16 95       	lsr	r17
    1f34:	07 95       	ror	r16
    1f36:	f7 94       	ror	r15
    1f38:	e7 94       	ror	r14
    1f3a:	31 96       	adiw	r30, 0x01	; 1
    1f3c:	87 e0       	ldi	r24, 0x07	; 7
    1f3e:	16 95       	lsr	r17
    1f40:	07 95       	ror	r16
    1f42:	f7 94       	ror	r15
    1f44:	e7 94       	ror	r14
    1f46:	8a 95       	dec	r24
    1f48:	d1 f7       	brne	.-12     	; 0x1f3e <__pack_f+0x164>
    1f4a:	05 c0       	rjmp	.+10     	; 0x1f56 <__pack_f+0x17c>
    1f4c:	ee 24       	eor	r14, r14
    1f4e:	ff 24       	eor	r15, r15
    1f50:	87 01       	movw	r16, r14
    1f52:	ef ef       	ldi	r30, 0xFF	; 255
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	6e 2f       	mov	r22, r30
    1f58:	67 95       	ror	r22
    1f5a:	66 27       	eor	r22, r22
    1f5c:	67 95       	ror	r22
    1f5e:	90 2f       	mov	r25, r16
    1f60:	9f 77       	andi	r25, 0x7F	; 127
    1f62:	d7 94       	ror	r13
    1f64:	dd 24       	eor	r13, r13
    1f66:	d7 94       	ror	r13
    1f68:	8e 2f       	mov	r24, r30
    1f6a:	86 95       	lsr	r24
    1f6c:	49 2f       	mov	r20, r25
    1f6e:	46 2b       	or	r20, r22
    1f70:	58 2f       	mov	r21, r24
    1f72:	5d 29       	or	r21, r13
    1f74:	b7 01       	movw	r22, r14
    1f76:	ca 01       	movw	r24, r20
    1f78:	1f 91       	pop	r17
    1f7a:	0f 91       	pop	r16
    1f7c:	ff 90       	pop	r15
    1f7e:	ef 90       	pop	r14
    1f80:	df 90       	pop	r13
    1f82:	08 95       	ret

00001f84 <__unpack_f>:
    1f84:	fc 01       	movw	r30, r24
    1f86:	db 01       	movw	r26, r22
    1f88:	40 81       	ld	r20, Z
    1f8a:	51 81       	ldd	r21, Z+1	; 0x01
    1f8c:	22 81       	ldd	r18, Z+2	; 0x02
    1f8e:	62 2f       	mov	r22, r18
    1f90:	6f 77       	andi	r22, 0x7F	; 127
    1f92:	70 e0       	ldi	r23, 0x00	; 0
    1f94:	22 1f       	adc	r18, r18
    1f96:	22 27       	eor	r18, r18
    1f98:	22 1f       	adc	r18, r18
    1f9a:	93 81       	ldd	r25, Z+3	; 0x03
    1f9c:	89 2f       	mov	r24, r25
    1f9e:	88 0f       	add	r24, r24
    1fa0:	82 2b       	or	r24, r18
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	99 27       	eor	r25, r25
    1faa:	99 1f       	adc	r25, r25
    1fac:	11 96       	adiw	r26, 0x01	; 1
    1fae:	9c 93       	st	X, r25
    1fb0:	11 97       	sbiw	r26, 0x01	; 1
    1fb2:	21 15       	cp	r18, r1
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	a9 f5       	brne	.+106    	; 0x2022 <__unpack_f+0x9e>
    1fb8:	41 15       	cp	r20, r1
    1fba:	51 05       	cpc	r21, r1
    1fbc:	61 05       	cpc	r22, r1
    1fbe:	71 05       	cpc	r23, r1
    1fc0:	11 f4       	brne	.+4      	; 0x1fc6 <__unpack_f+0x42>
    1fc2:	82 e0       	ldi	r24, 0x02	; 2
    1fc4:	37 c0       	rjmp	.+110    	; 0x2034 <__unpack_f+0xb0>
    1fc6:	82 e8       	ldi	r24, 0x82	; 130
    1fc8:	9f ef       	ldi	r25, 0xFF	; 255
    1fca:	13 96       	adiw	r26, 0x03	; 3
    1fcc:	9c 93       	st	X, r25
    1fce:	8e 93       	st	-X, r24
    1fd0:	12 97       	sbiw	r26, 0x02	; 2
    1fd2:	9a 01       	movw	r18, r20
    1fd4:	ab 01       	movw	r20, r22
    1fd6:	67 e0       	ldi	r22, 0x07	; 7
    1fd8:	22 0f       	add	r18, r18
    1fda:	33 1f       	adc	r19, r19
    1fdc:	44 1f       	adc	r20, r20
    1fde:	55 1f       	adc	r21, r21
    1fe0:	6a 95       	dec	r22
    1fe2:	d1 f7       	brne	.-12     	; 0x1fd8 <__unpack_f+0x54>
    1fe4:	83 e0       	ldi	r24, 0x03	; 3
    1fe6:	8c 93       	st	X, r24
    1fe8:	0d c0       	rjmp	.+26     	; 0x2004 <__unpack_f+0x80>
    1fea:	22 0f       	add	r18, r18
    1fec:	33 1f       	adc	r19, r19
    1fee:	44 1f       	adc	r20, r20
    1ff0:	55 1f       	adc	r21, r21
    1ff2:	12 96       	adiw	r26, 0x02	; 2
    1ff4:	8d 91       	ld	r24, X+
    1ff6:	9c 91       	ld	r25, X
    1ff8:	13 97       	sbiw	r26, 0x03	; 3
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	13 96       	adiw	r26, 0x03	; 3
    1ffe:	9c 93       	st	X, r25
    2000:	8e 93       	st	-X, r24
    2002:	12 97       	sbiw	r26, 0x02	; 2
    2004:	20 30       	cpi	r18, 0x00	; 0
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	38 07       	cpc	r19, r24
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	48 07       	cpc	r20, r24
    200e:	80 e4       	ldi	r24, 0x40	; 64
    2010:	58 07       	cpc	r21, r24
    2012:	58 f3       	brcs	.-42     	; 0x1fea <__unpack_f+0x66>
    2014:	14 96       	adiw	r26, 0x04	; 4
    2016:	2d 93       	st	X+, r18
    2018:	3d 93       	st	X+, r19
    201a:	4d 93       	st	X+, r20
    201c:	5c 93       	st	X, r21
    201e:	17 97       	sbiw	r26, 0x07	; 7
    2020:	08 95       	ret
    2022:	2f 3f       	cpi	r18, 0xFF	; 255
    2024:	31 05       	cpc	r19, r1
    2026:	79 f4       	brne	.+30     	; 0x2046 <__unpack_f+0xc2>
    2028:	41 15       	cp	r20, r1
    202a:	51 05       	cpc	r21, r1
    202c:	61 05       	cpc	r22, r1
    202e:	71 05       	cpc	r23, r1
    2030:	19 f4       	brne	.+6      	; 0x2038 <__unpack_f+0xb4>
    2032:	84 e0       	ldi	r24, 0x04	; 4
    2034:	8c 93       	st	X, r24
    2036:	08 95       	ret
    2038:	64 ff       	sbrs	r22, 4
    203a:	03 c0       	rjmp	.+6      	; 0x2042 <__unpack_f+0xbe>
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	8c 93       	st	X, r24
    2040:	12 c0       	rjmp	.+36     	; 0x2066 <__unpack_f+0xe2>
    2042:	1c 92       	st	X, r1
    2044:	10 c0       	rjmp	.+32     	; 0x2066 <__unpack_f+0xe2>
    2046:	2f 57       	subi	r18, 0x7F	; 127
    2048:	30 40       	sbci	r19, 0x00	; 0
    204a:	13 96       	adiw	r26, 0x03	; 3
    204c:	3c 93       	st	X, r19
    204e:	2e 93       	st	-X, r18
    2050:	12 97       	sbiw	r26, 0x02	; 2
    2052:	83 e0       	ldi	r24, 0x03	; 3
    2054:	8c 93       	st	X, r24
    2056:	87 e0       	ldi	r24, 0x07	; 7
    2058:	44 0f       	add	r20, r20
    205a:	55 1f       	adc	r21, r21
    205c:	66 1f       	adc	r22, r22
    205e:	77 1f       	adc	r23, r23
    2060:	8a 95       	dec	r24
    2062:	d1 f7       	brne	.-12     	; 0x2058 <__unpack_f+0xd4>
    2064:	70 64       	ori	r23, 0x40	; 64
    2066:	14 96       	adiw	r26, 0x04	; 4
    2068:	4d 93       	st	X+, r20
    206a:	5d 93       	st	X+, r21
    206c:	6d 93       	st	X+, r22
    206e:	7c 93       	st	X, r23
    2070:	17 97       	sbiw	r26, 0x07	; 7
    2072:	08 95       	ret

00002074 <__fpcmp_parts_f>:
    2074:	1f 93       	push	r17
    2076:	dc 01       	movw	r26, r24
    2078:	fb 01       	movw	r30, r22
    207a:	9c 91       	ld	r25, X
    207c:	92 30       	cpi	r25, 0x02	; 2
    207e:	08 f4       	brcc	.+2      	; 0x2082 <__fpcmp_parts_f+0xe>
    2080:	47 c0       	rjmp	.+142    	; 0x2110 <__fpcmp_parts_f+0x9c>
    2082:	80 81       	ld	r24, Z
    2084:	82 30       	cpi	r24, 0x02	; 2
    2086:	08 f4       	brcc	.+2      	; 0x208a <__fpcmp_parts_f+0x16>
    2088:	43 c0       	rjmp	.+134    	; 0x2110 <__fpcmp_parts_f+0x9c>
    208a:	94 30       	cpi	r25, 0x04	; 4
    208c:	51 f4       	brne	.+20     	; 0x20a2 <__fpcmp_parts_f+0x2e>
    208e:	11 96       	adiw	r26, 0x01	; 1
    2090:	1c 91       	ld	r17, X
    2092:	84 30       	cpi	r24, 0x04	; 4
    2094:	99 f5       	brne	.+102    	; 0x20fc <__fpcmp_parts_f+0x88>
    2096:	81 81       	ldd	r24, Z+1	; 0x01
    2098:	68 2f       	mov	r22, r24
    209a:	70 e0       	ldi	r23, 0x00	; 0
    209c:	61 1b       	sub	r22, r17
    209e:	71 09       	sbc	r23, r1
    20a0:	3f c0       	rjmp	.+126    	; 0x2120 <__fpcmp_parts_f+0xac>
    20a2:	84 30       	cpi	r24, 0x04	; 4
    20a4:	21 f0       	breq	.+8      	; 0x20ae <__fpcmp_parts_f+0x3a>
    20a6:	92 30       	cpi	r25, 0x02	; 2
    20a8:	31 f4       	brne	.+12     	; 0x20b6 <__fpcmp_parts_f+0x42>
    20aa:	82 30       	cpi	r24, 0x02	; 2
    20ac:	b9 f1       	breq	.+110    	; 0x211c <__fpcmp_parts_f+0xa8>
    20ae:	81 81       	ldd	r24, Z+1	; 0x01
    20b0:	88 23       	and	r24, r24
    20b2:	89 f1       	breq	.+98     	; 0x2116 <__fpcmp_parts_f+0xa2>
    20b4:	2d c0       	rjmp	.+90     	; 0x2110 <__fpcmp_parts_f+0x9c>
    20b6:	11 96       	adiw	r26, 0x01	; 1
    20b8:	1c 91       	ld	r17, X
    20ba:	11 97       	sbiw	r26, 0x01	; 1
    20bc:	82 30       	cpi	r24, 0x02	; 2
    20be:	f1 f0       	breq	.+60     	; 0x20fc <__fpcmp_parts_f+0x88>
    20c0:	81 81       	ldd	r24, Z+1	; 0x01
    20c2:	18 17       	cp	r17, r24
    20c4:	d9 f4       	brne	.+54     	; 0x20fc <__fpcmp_parts_f+0x88>
    20c6:	12 96       	adiw	r26, 0x02	; 2
    20c8:	2d 91       	ld	r18, X+
    20ca:	3c 91       	ld	r19, X
    20cc:	13 97       	sbiw	r26, 0x03	; 3
    20ce:	82 81       	ldd	r24, Z+2	; 0x02
    20d0:	93 81       	ldd	r25, Z+3	; 0x03
    20d2:	82 17       	cp	r24, r18
    20d4:	93 07       	cpc	r25, r19
    20d6:	94 f0       	brlt	.+36     	; 0x20fc <__fpcmp_parts_f+0x88>
    20d8:	28 17       	cp	r18, r24
    20da:	39 07       	cpc	r19, r25
    20dc:	bc f0       	brlt	.+46     	; 0x210c <__fpcmp_parts_f+0x98>
    20de:	14 96       	adiw	r26, 0x04	; 4
    20e0:	8d 91       	ld	r24, X+
    20e2:	9d 91       	ld	r25, X+
    20e4:	0d 90       	ld	r0, X+
    20e6:	bc 91       	ld	r27, X
    20e8:	a0 2d       	mov	r26, r0
    20ea:	24 81       	ldd	r18, Z+4	; 0x04
    20ec:	35 81       	ldd	r19, Z+5	; 0x05
    20ee:	46 81       	ldd	r20, Z+6	; 0x06
    20f0:	57 81       	ldd	r21, Z+7	; 0x07
    20f2:	28 17       	cp	r18, r24
    20f4:	39 07       	cpc	r19, r25
    20f6:	4a 07       	cpc	r20, r26
    20f8:	5b 07       	cpc	r21, r27
    20fa:	18 f4       	brcc	.+6      	; 0x2102 <__fpcmp_parts_f+0x8e>
    20fc:	11 23       	and	r17, r17
    20fe:	41 f0       	breq	.+16     	; 0x2110 <__fpcmp_parts_f+0x9c>
    2100:	0a c0       	rjmp	.+20     	; 0x2116 <__fpcmp_parts_f+0xa2>
    2102:	82 17       	cp	r24, r18
    2104:	93 07       	cpc	r25, r19
    2106:	a4 07       	cpc	r26, r20
    2108:	b5 07       	cpc	r27, r21
    210a:	40 f4       	brcc	.+16     	; 0x211c <__fpcmp_parts_f+0xa8>
    210c:	11 23       	and	r17, r17
    210e:	19 f0       	breq	.+6      	; 0x2116 <__fpcmp_parts_f+0xa2>
    2110:	61 e0       	ldi	r22, 0x01	; 1
    2112:	70 e0       	ldi	r23, 0x00	; 0
    2114:	05 c0       	rjmp	.+10     	; 0x2120 <__fpcmp_parts_f+0xac>
    2116:	6f ef       	ldi	r22, 0xFF	; 255
    2118:	7f ef       	ldi	r23, 0xFF	; 255
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <__fpcmp_parts_f+0xac>
    211c:	60 e0       	ldi	r22, 0x00	; 0
    211e:	70 e0       	ldi	r23, 0x00	; 0
    2120:	cb 01       	movw	r24, r22
    2122:	1f 91       	pop	r17
    2124:	08 95       	ret

00002126 <__prologue_saves__>:
    2126:	2f 92       	push	r2
    2128:	3f 92       	push	r3
    212a:	4f 92       	push	r4
    212c:	5f 92       	push	r5
    212e:	6f 92       	push	r6
    2130:	7f 92       	push	r7
    2132:	8f 92       	push	r8
    2134:	9f 92       	push	r9
    2136:	af 92       	push	r10
    2138:	bf 92       	push	r11
    213a:	cf 92       	push	r12
    213c:	df 92       	push	r13
    213e:	ef 92       	push	r14
    2140:	ff 92       	push	r15
    2142:	0f 93       	push	r16
    2144:	1f 93       	push	r17
    2146:	cf 93       	push	r28
    2148:	df 93       	push	r29
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	ca 1b       	sub	r28, r26
    2150:	db 0b       	sbc	r29, r27
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	f8 94       	cli
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	09 94       	ijmp

0000215e <__epilogue_restores__>:
    215e:	2a 88       	ldd	r2, Y+18	; 0x12
    2160:	39 88       	ldd	r3, Y+17	; 0x11
    2162:	48 88       	ldd	r4, Y+16	; 0x10
    2164:	5f 84       	ldd	r5, Y+15	; 0x0f
    2166:	6e 84       	ldd	r6, Y+14	; 0x0e
    2168:	7d 84       	ldd	r7, Y+13	; 0x0d
    216a:	8c 84       	ldd	r8, Y+12	; 0x0c
    216c:	9b 84       	ldd	r9, Y+11	; 0x0b
    216e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2170:	b9 84       	ldd	r11, Y+9	; 0x09
    2172:	c8 84       	ldd	r12, Y+8	; 0x08
    2174:	df 80       	ldd	r13, Y+7	; 0x07
    2176:	ee 80       	ldd	r14, Y+6	; 0x06
    2178:	fd 80       	ldd	r15, Y+5	; 0x05
    217a:	0c 81       	ldd	r16, Y+4	; 0x04
    217c:	1b 81       	ldd	r17, Y+3	; 0x03
    217e:	aa 81       	ldd	r26, Y+2	; 0x02
    2180:	b9 81       	ldd	r27, Y+1	; 0x01
    2182:	ce 0f       	add	r28, r30
    2184:	d1 1d       	adc	r29, r1
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
    2190:	ed 01       	movw	r28, r26
    2192:	08 95       	ret

00002194 <cos>:
    2194:	03 d0       	rcall	.+6      	; 0x219c <__fp_rempio2>
    2196:	e3 95       	inc	r30
    2198:	28 c0       	rjmp	.+80     	; 0x21ea <__fp_sinus>
    219a:	d4 c0       	rjmp	.+424    	; 0x2344 <__fp_nan>

0000219c <__fp_rempio2>:
    219c:	3f d0       	rcall	.+126    	; 0x221c <__fp_splitA>
    219e:	e8 f3       	brcs	.-6      	; 0x219a <cos+0x6>
    21a0:	e8 94       	clt
    21a2:	e0 e0       	ldi	r30, 0x00	; 0
    21a4:	bb 27       	eor	r27, r27
    21a6:	9f 57       	subi	r25, 0x7F	; 127
    21a8:	f0 f0       	brcs	.+60     	; 0x21e6 <__fp_rempio2+0x4a>
    21aa:	2a ed       	ldi	r18, 0xDA	; 218
    21ac:	3f e0       	ldi	r19, 0x0F	; 15
    21ae:	49 ec       	ldi	r20, 0xC9	; 201
    21b0:	06 c0       	rjmp	.+12     	; 0x21be <__fp_rempio2+0x22>
    21b2:	ee 0f       	add	r30, r30
    21b4:	bb 0f       	add	r27, r27
    21b6:	66 1f       	adc	r22, r22
    21b8:	77 1f       	adc	r23, r23
    21ba:	88 1f       	adc	r24, r24
    21bc:	28 f0       	brcs	.+10     	; 0x21c8 <__fp_rempio2+0x2c>
    21be:	b2 3a       	cpi	r27, 0xA2	; 162
    21c0:	62 07       	cpc	r22, r18
    21c2:	73 07       	cpc	r23, r19
    21c4:	84 07       	cpc	r24, r20
    21c6:	28 f0       	brcs	.+10     	; 0x21d2 <__fp_rempio2+0x36>
    21c8:	b2 5a       	subi	r27, 0xA2	; 162
    21ca:	62 0b       	sbc	r22, r18
    21cc:	73 0b       	sbc	r23, r19
    21ce:	84 0b       	sbc	r24, r20
    21d0:	e3 95       	inc	r30
    21d2:	9a 95       	dec	r25
    21d4:	72 f7       	brpl	.-36     	; 0x21b2 <__fp_rempio2+0x16>
    21d6:	80 38       	cpi	r24, 0x80	; 128
    21d8:	30 f4       	brcc	.+12     	; 0x21e6 <__fp_rempio2+0x4a>
    21da:	9a 95       	dec	r25
    21dc:	bb 0f       	add	r27, r27
    21de:	66 1f       	adc	r22, r22
    21e0:	77 1f       	adc	r23, r23
    21e2:	88 1f       	adc	r24, r24
    21e4:	d2 f7       	brpl	.-12     	; 0x21da <__fp_rempio2+0x3e>
    21e6:	90 48       	sbci	r25, 0x80	; 128
    21e8:	a1 c0       	rjmp	.+322    	; 0x232c <__fp_mpack_finite>

000021ea <__fp_sinus>:
    21ea:	ef 93       	push	r30
    21ec:	e0 ff       	sbrs	r30, 0
    21ee:	06 c0       	rjmp	.+12     	; 0x21fc <__fp_sinus+0x12>
    21f0:	a2 ea       	ldi	r26, 0xA2	; 162
    21f2:	2a ed       	ldi	r18, 0xDA	; 218
    21f4:	3f e0       	ldi	r19, 0x0F	; 15
    21f6:	49 ec       	ldi	r20, 0xC9	; 201
    21f8:	5f eb       	ldi	r21, 0xBF	; 191
    21fa:	3d d0       	rcall	.+122    	; 0x2276 <__addsf3x>
    21fc:	c5 d0       	rcall	.+394    	; 0x2388 <__fp_round>
    21fe:	0f 90       	pop	r0
    2200:	03 94       	inc	r0
    2202:	01 fc       	sbrc	r0, 1
    2204:	90 58       	subi	r25, 0x80	; 128
    2206:	ec e8       	ldi	r30, 0x8C	; 140
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	9f c0       	rjmp	.+318    	; 0x234a <__fp_powsodd>

0000220c <__fp_split3>:
    220c:	57 fd       	sbrc	r21, 7
    220e:	90 58       	subi	r25, 0x80	; 128
    2210:	44 0f       	add	r20, r20
    2212:	55 1f       	adc	r21, r21
    2214:	59 f0       	breq	.+22     	; 0x222c <__fp_splitA+0x10>
    2216:	5f 3f       	cpi	r21, 0xFF	; 255
    2218:	71 f0       	breq	.+28     	; 0x2236 <__fp_splitA+0x1a>
    221a:	47 95       	ror	r20

0000221c <__fp_splitA>:
    221c:	88 0f       	add	r24, r24
    221e:	97 fb       	bst	r25, 7
    2220:	99 1f       	adc	r25, r25
    2222:	61 f0       	breq	.+24     	; 0x223c <__fp_splitA+0x20>
    2224:	9f 3f       	cpi	r25, 0xFF	; 255
    2226:	79 f0       	breq	.+30     	; 0x2246 <__fp_splitA+0x2a>
    2228:	87 95       	ror	r24
    222a:	08 95       	ret
    222c:	12 16       	cp	r1, r18
    222e:	13 06       	cpc	r1, r19
    2230:	14 06       	cpc	r1, r20
    2232:	55 1f       	adc	r21, r21
    2234:	f2 cf       	rjmp	.-28     	; 0x221a <__fp_split3+0xe>
    2236:	46 95       	lsr	r20
    2238:	f1 df       	rcall	.-30     	; 0x221c <__fp_splitA>
    223a:	08 c0       	rjmp	.+16     	; 0x224c <__fp_splitA+0x30>
    223c:	16 16       	cp	r1, r22
    223e:	17 06       	cpc	r1, r23
    2240:	18 06       	cpc	r1, r24
    2242:	99 1f       	adc	r25, r25
    2244:	f1 cf       	rjmp	.-30     	; 0x2228 <__fp_splitA+0xc>
    2246:	86 95       	lsr	r24
    2248:	71 05       	cpc	r23, r1
    224a:	61 05       	cpc	r22, r1
    224c:	08 94       	sec
    224e:	08 95       	ret

00002250 <sin>:
    2250:	9f 93       	push	r25
    2252:	a4 df       	rcall	.-184    	; 0x219c <__fp_rempio2>
    2254:	0f 90       	pop	r0
    2256:	07 fc       	sbrc	r0, 7
    2258:	ee 5f       	subi	r30, 0xFE	; 254
    225a:	c7 cf       	rjmp	.-114    	; 0x21ea <__fp_sinus>
    225c:	87 d0       	rcall	.+270    	; 0x236c <__fp_pscA>
    225e:	30 f0       	brcs	.+12     	; 0x226c <sin+0x1c>
    2260:	8c d0       	rcall	.+280    	; 0x237a <__fp_pscB>
    2262:	20 f0       	brcs	.+8      	; 0x226c <sin+0x1c>
    2264:	31 f4       	brne	.+12     	; 0x2272 <sin+0x22>
    2266:	9f 3f       	cpi	r25, 0xFF	; 255
    2268:	11 f4       	brne	.+4      	; 0x226e <sin+0x1e>
    226a:	1e f4       	brtc	.+6      	; 0x2272 <sin+0x22>
    226c:	6b c0       	rjmp	.+214    	; 0x2344 <__fp_nan>
    226e:	0e f4       	brtc	.+2      	; 0x2272 <sin+0x22>
    2270:	e0 95       	com	r30
    2272:	e7 fb       	bst	r30, 7
    2274:	53 c0       	rjmp	.+166    	; 0x231c <__fp_inf>

00002276 <__addsf3x>:
    2276:	e9 2f       	mov	r30, r25
    2278:	c9 df       	rcall	.-110    	; 0x220c <__fp_split3>
    227a:	80 f3       	brcs	.-32     	; 0x225c <sin+0xc>
    227c:	ba 17       	cp	r27, r26
    227e:	62 07       	cpc	r22, r18
    2280:	73 07       	cpc	r23, r19
    2282:	84 07       	cpc	r24, r20
    2284:	95 07       	cpc	r25, r21
    2286:	18 f0       	brcs	.+6      	; 0x228e <__addsf3x+0x18>
    2288:	71 f4       	brne	.+28     	; 0x22a6 <__addsf3x+0x30>
    228a:	9e f5       	brtc	.+102    	; 0x22f2 <__addsf3x+0x7c>
    228c:	8e c0       	rjmp	.+284    	; 0x23aa <__fp_zero>
    228e:	0e f4       	brtc	.+2      	; 0x2292 <__addsf3x+0x1c>
    2290:	e0 95       	com	r30
    2292:	0b 2e       	mov	r0, r27
    2294:	ba 2f       	mov	r27, r26
    2296:	a0 2d       	mov	r26, r0
    2298:	0b 01       	movw	r0, r22
    229a:	b9 01       	movw	r22, r18
    229c:	90 01       	movw	r18, r0
    229e:	0c 01       	movw	r0, r24
    22a0:	ca 01       	movw	r24, r20
    22a2:	a0 01       	movw	r20, r0
    22a4:	11 24       	eor	r1, r1
    22a6:	ff 27       	eor	r31, r31
    22a8:	59 1b       	sub	r21, r25
    22aa:	99 f0       	breq	.+38     	; 0x22d2 <__addsf3x+0x5c>
    22ac:	59 3f       	cpi	r21, 0xF9	; 249
    22ae:	50 f4       	brcc	.+20     	; 0x22c4 <__addsf3x+0x4e>
    22b0:	50 3e       	cpi	r21, 0xE0	; 224
    22b2:	68 f1       	brcs	.+90     	; 0x230e <__addsf3x+0x98>
    22b4:	1a 16       	cp	r1, r26
    22b6:	f0 40       	sbci	r31, 0x00	; 0
    22b8:	a2 2f       	mov	r26, r18
    22ba:	23 2f       	mov	r18, r19
    22bc:	34 2f       	mov	r19, r20
    22be:	44 27       	eor	r20, r20
    22c0:	58 5f       	subi	r21, 0xF8	; 248
    22c2:	f3 cf       	rjmp	.-26     	; 0x22aa <__addsf3x+0x34>
    22c4:	46 95       	lsr	r20
    22c6:	37 95       	ror	r19
    22c8:	27 95       	ror	r18
    22ca:	a7 95       	ror	r26
    22cc:	f0 40       	sbci	r31, 0x00	; 0
    22ce:	53 95       	inc	r21
    22d0:	c9 f7       	brne	.-14     	; 0x22c4 <__addsf3x+0x4e>
    22d2:	7e f4       	brtc	.+30     	; 0x22f2 <__addsf3x+0x7c>
    22d4:	1f 16       	cp	r1, r31
    22d6:	ba 0b       	sbc	r27, r26
    22d8:	62 0b       	sbc	r22, r18
    22da:	73 0b       	sbc	r23, r19
    22dc:	84 0b       	sbc	r24, r20
    22de:	ba f0       	brmi	.+46     	; 0x230e <__addsf3x+0x98>
    22e0:	91 50       	subi	r25, 0x01	; 1
    22e2:	a1 f0       	breq	.+40     	; 0x230c <__addsf3x+0x96>
    22e4:	ff 0f       	add	r31, r31
    22e6:	bb 1f       	adc	r27, r27
    22e8:	66 1f       	adc	r22, r22
    22ea:	77 1f       	adc	r23, r23
    22ec:	88 1f       	adc	r24, r24
    22ee:	c2 f7       	brpl	.-16     	; 0x22e0 <__addsf3x+0x6a>
    22f0:	0e c0       	rjmp	.+28     	; 0x230e <__addsf3x+0x98>
    22f2:	ba 0f       	add	r27, r26
    22f4:	62 1f       	adc	r22, r18
    22f6:	73 1f       	adc	r23, r19
    22f8:	84 1f       	adc	r24, r20
    22fa:	48 f4       	brcc	.+18     	; 0x230e <__addsf3x+0x98>
    22fc:	87 95       	ror	r24
    22fe:	77 95       	ror	r23
    2300:	67 95       	ror	r22
    2302:	b7 95       	ror	r27
    2304:	f7 95       	ror	r31
    2306:	9e 3f       	cpi	r25, 0xFE	; 254
    2308:	08 f0       	brcs	.+2      	; 0x230c <__addsf3x+0x96>
    230a:	b3 cf       	rjmp	.-154    	; 0x2272 <sin+0x22>
    230c:	93 95       	inc	r25
    230e:	88 0f       	add	r24, r24
    2310:	08 f0       	brcs	.+2      	; 0x2314 <__addsf3x+0x9e>
    2312:	99 27       	eor	r25, r25
    2314:	ee 0f       	add	r30, r30
    2316:	97 95       	ror	r25
    2318:	87 95       	ror	r24
    231a:	08 95       	ret

0000231c <__fp_inf>:
    231c:	97 f9       	bld	r25, 7
    231e:	9f 67       	ori	r25, 0x7F	; 127
    2320:	80 e8       	ldi	r24, 0x80	; 128
    2322:	70 e0       	ldi	r23, 0x00	; 0
    2324:	60 e0       	ldi	r22, 0x00	; 0
    2326:	08 95       	ret

00002328 <__fp_mpack>:
    2328:	9f 3f       	cpi	r25, 0xFF	; 255
    232a:	31 f0       	breq	.+12     	; 0x2338 <__fp_mpack_finite+0xc>

0000232c <__fp_mpack_finite>:
    232c:	91 50       	subi	r25, 0x01	; 1
    232e:	20 f4       	brcc	.+8      	; 0x2338 <__fp_mpack_finite+0xc>
    2330:	87 95       	ror	r24
    2332:	77 95       	ror	r23
    2334:	67 95       	ror	r22
    2336:	b7 95       	ror	r27
    2338:	88 0f       	add	r24, r24
    233a:	91 1d       	adc	r25, r1
    233c:	96 95       	lsr	r25
    233e:	87 95       	ror	r24
    2340:	97 f9       	bld	r25, 7
    2342:	08 95       	ret

00002344 <__fp_nan>:
    2344:	9f ef       	ldi	r25, 0xFF	; 255
    2346:	80 ec       	ldi	r24, 0xC0	; 192
    2348:	08 95       	ret

0000234a <__fp_powsodd>:
    234a:	9f 93       	push	r25
    234c:	8f 93       	push	r24
    234e:	7f 93       	push	r23
    2350:	6f 93       	push	r22
    2352:	ff 93       	push	r31
    2354:	ef 93       	push	r30
    2356:	9b 01       	movw	r18, r22
    2358:	ac 01       	movw	r20, r24
    235a:	68 da       	rcall	.-2864   	; 0x182c <__mulsf3>
    235c:	ef 91       	pop	r30
    235e:	ff 91       	pop	r31
    2360:	2b d0       	rcall	.+86     	; 0x23b8 <__fp_powser>
    2362:	2f 91       	pop	r18
    2364:	3f 91       	pop	r19
    2366:	4f 91       	pop	r20
    2368:	5f 91       	pop	r21
    236a:	60 ca       	rjmp	.-2880   	; 0x182c <__mulsf3>

0000236c <__fp_pscA>:
    236c:	00 24       	eor	r0, r0
    236e:	0a 94       	dec	r0
    2370:	16 16       	cp	r1, r22
    2372:	17 06       	cpc	r1, r23
    2374:	18 06       	cpc	r1, r24
    2376:	09 06       	cpc	r0, r25
    2378:	08 95       	ret

0000237a <__fp_pscB>:
    237a:	00 24       	eor	r0, r0
    237c:	0a 94       	dec	r0
    237e:	12 16       	cp	r1, r18
    2380:	13 06       	cpc	r1, r19
    2382:	14 06       	cpc	r1, r20
    2384:	05 06       	cpc	r0, r21
    2386:	08 95       	ret

00002388 <__fp_round>:
    2388:	09 2e       	mov	r0, r25
    238a:	03 94       	inc	r0
    238c:	00 0c       	add	r0, r0
    238e:	11 f4       	brne	.+4      	; 0x2394 <__fp_round+0xc>
    2390:	88 23       	and	r24, r24
    2392:	52 f0       	brmi	.+20     	; 0x23a8 <__fp_round+0x20>
    2394:	bb 0f       	add	r27, r27
    2396:	40 f4       	brcc	.+16     	; 0x23a8 <__fp_round+0x20>
    2398:	bf 2b       	or	r27, r31
    239a:	11 f4       	brne	.+4      	; 0x23a0 <__fp_round+0x18>
    239c:	60 ff       	sbrs	r22, 0
    239e:	04 c0       	rjmp	.+8      	; 0x23a8 <__fp_round+0x20>
    23a0:	6f 5f       	subi	r22, 0xFF	; 255
    23a2:	7f 4f       	sbci	r23, 0xFF	; 255
    23a4:	8f 4f       	sbci	r24, 0xFF	; 255
    23a6:	9f 4f       	sbci	r25, 0xFF	; 255
    23a8:	08 95       	ret

000023aa <__fp_zero>:
    23aa:	e8 94       	clt

000023ac <__fp_szero>:
    23ac:	bb 27       	eor	r27, r27
    23ae:	66 27       	eor	r22, r22
    23b0:	77 27       	eor	r23, r23
    23b2:	cb 01       	movw	r24, r22
    23b4:	97 f9       	bld	r25, 7
    23b6:	08 95       	ret

000023b8 <__fp_powser>:
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	1f 93       	push	r17
    23be:	0f 93       	push	r16
    23c0:	ff 92       	push	r15
    23c2:	ef 92       	push	r14
    23c4:	df 92       	push	r13
    23c6:	7b 01       	movw	r14, r22
    23c8:	8c 01       	movw	r16, r24
    23ca:	68 94       	set
    23cc:	05 c0       	rjmp	.+10     	; 0x23d8 <__fp_powser+0x20>
    23ce:	da 2e       	mov	r13, r26
    23d0:	ef 01       	movw	r28, r30
    23d2:	21 d0       	rcall	.+66     	; 0x2416 <__mulsf3x>
    23d4:	fe 01       	movw	r30, r28
    23d6:	e8 94       	clt
    23d8:	a5 91       	lpm	r26, Z+
    23da:	25 91       	lpm	r18, Z+
    23dc:	35 91       	lpm	r19, Z+
    23de:	45 91       	lpm	r20, Z+
    23e0:	55 91       	lpm	r21, Z+
    23e2:	ae f3       	brts	.-22     	; 0x23ce <__fp_powser+0x16>
    23e4:	ef 01       	movw	r28, r30
    23e6:	47 df       	rcall	.-370    	; 0x2276 <__addsf3x>
    23e8:	fe 01       	movw	r30, r28
    23ea:	97 01       	movw	r18, r14
    23ec:	a8 01       	movw	r20, r16
    23ee:	da 94       	dec	r13
    23f0:	79 f7       	brne	.-34     	; 0x23d0 <__fp_powser+0x18>
    23f2:	df 90       	pop	r13
    23f4:	ef 90       	pop	r14
    23f6:	ff 90       	pop	r15
    23f8:	0f 91       	pop	r16
    23fa:	1f 91       	pop	r17
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	08 95       	ret
    2402:	b4 df       	rcall	.-152    	; 0x236c <__fp_pscA>
    2404:	28 f0       	brcs	.+10     	; 0x2410 <__fp_powser+0x58>
    2406:	b9 df       	rcall	.-142    	; 0x237a <__fp_pscB>
    2408:	18 f0       	brcs	.+6      	; 0x2410 <__fp_powser+0x58>
    240a:	95 23       	and	r25, r21
    240c:	09 f0       	breq	.+2      	; 0x2410 <__fp_powser+0x58>
    240e:	86 cf       	rjmp	.-244    	; 0x231c <__fp_inf>
    2410:	99 cf       	rjmp	.-206    	; 0x2344 <__fp_nan>
    2412:	11 24       	eor	r1, r1
    2414:	cb cf       	rjmp	.-106    	; 0x23ac <__fp_szero>

00002416 <__mulsf3x>:
    2416:	fa de       	rcall	.-524    	; 0x220c <__fp_split3>
    2418:	a0 f3       	brcs	.-24     	; 0x2402 <__fp_powser+0x4a>

0000241a <__mulsf3_pse>:
    241a:	95 9f       	mul	r25, r21
    241c:	d1 f3       	breq	.-12     	; 0x2412 <__fp_powser+0x5a>
    241e:	95 0f       	add	r25, r21
    2420:	50 e0       	ldi	r21, 0x00	; 0
    2422:	55 1f       	adc	r21, r21
    2424:	62 9f       	mul	r22, r18
    2426:	f0 01       	movw	r30, r0
    2428:	72 9f       	mul	r23, r18
    242a:	bb 27       	eor	r27, r27
    242c:	f0 0d       	add	r31, r0
    242e:	b1 1d       	adc	r27, r1
    2430:	63 9f       	mul	r22, r19
    2432:	aa 27       	eor	r26, r26
    2434:	f0 0d       	add	r31, r0
    2436:	b1 1d       	adc	r27, r1
    2438:	aa 1f       	adc	r26, r26
    243a:	64 9f       	mul	r22, r20
    243c:	66 27       	eor	r22, r22
    243e:	b0 0d       	add	r27, r0
    2440:	a1 1d       	adc	r26, r1
    2442:	66 1f       	adc	r22, r22
    2444:	82 9f       	mul	r24, r18
    2446:	22 27       	eor	r18, r18
    2448:	b0 0d       	add	r27, r0
    244a:	a1 1d       	adc	r26, r1
    244c:	62 1f       	adc	r22, r18
    244e:	73 9f       	mul	r23, r19
    2450:	b0 0d       	add	r27, r0
    2452:	a1 1d       	adc	r26, r1
    2454:	62 1f       	adc	r22, r18
    2456:	83 9f       	mul	r24, r19
    2458:	a0 0d       	add	r26, r0
    245a:	61 1d       	adc	r22, r1
    245c:	22 1f       	adc	r18, r18
    245e:	74 9f       	mul	r23, r20
    2460:	33 27       	eor	r19, r19
    2462:	a0 0d       	add	r26, r0
    2464:	61 1d       	adc	r22, r1
    2466:	23 1f       	adc	r18, r19
    2468:	84 9f       	mul	r24, r20
    246a:	60 0d       	add	r22, r0
    246c:	21 1d       	adc	r18, r1
    246e:	82 2f       	mov	r24, r18
    2470:	76 2f       	mov	r23, r22
    2472:	6a 2f       	mov	r22, r26
    2474:	11 24       	eor	r1, r1
    2476:	9f 57       	subi	r25, 0x7F	; 127
    2478:	50 40       	sbci	r21, 0x00	; 0
    247a:	8a f0       	brmi	.+34     	; 0x249e <__mulsf3_pse+0x84>
    247c:	e1 f0       	breq	.+56     	; 0x24b6 <__mulsf3_pse+0x9c>
    247e:	88 23       	and	r24, r24
    2480:	4a f0       	brmi	.+18     	; 0x2494 <__mulsf3_pse+0x7a>
    2482:	ee 0f       	add	r30, r30
    2484:	ff 1f       	adc	r31, r31
    2486:	bb 1f       	adc	r27, r27
    2488:	66 1f       	adc	r22, r22
    248a:	77 1f       	adc	r23, r23
    248c:	88 1f       	adc	r24, r24
    248e:	91 50       	subi	r25, 0x01	; 1
    2490:	50 40       	sbci	r21, 0x00	; 0
    2492:	a9 f7       	brne	.-22     	; 0x247e <__mulsf3_pse+0x64>
    2494:	9e 3f       	cpi	r25, 0xFE	; 254
    2496:	51 05       	cpc	r21, r1
    2498:	70 f0       	brcs	.+28     	; 0x24b6 <__mulsf3_pse+0x9c>
    249a:	40 cf       	rjmp	.-384    	; 0x231c <__fp_inf>
    249c:	87 cf       	rjmp	.-242    	; 0x23ac <__fp_szero>
    249e:	5f 3f       	cpi	r21, 0xFF	; 255
    24a0:	ec f3       	brlt	.-6      	; 0x249c <__mulsf3_pse+0x82>
    24a2:	98 3e       	cpi	r25, 0xE8	; 232
    24a4:	dc f3       	brlt	.-10     	; 0x249c <__mulsf3_pse+0x82>
    24a6:	86 95       	lsr	r24
    24a8:	77 95       	ror	r23
    24aa:	67 95       	ror	r22
    24ac:	b7 95       	ror	r27
    24ae:	f7 95       	ror	r31
    24b0:	e7 95       	ror	r30
    24b2:	9f 5f       	subi	r25, 0xFF	; 255
    24b4:	c1 f7       	brne	.-16     	; 0x24a6 <__mulsf3_pse+0x8c>
    24b6:	fe 2b       	or	r31, r30
    24b8:	88 0f       	add	r24, r24
    24ba:	91 1d       	adc	r25, r1
    24bc:	96 95       	lsr	r25
    24be:	87 95       	ror	r24
    24c0:	97 f9       	bld	r25, 7
    24c2:	08 95       	ret

000024c4 <_exit>:
    24c4:	f8 94       	cli

000024c6 <__stop_program>:
    24c6:	ff cf       	rjmp	.-2      	; 0x24c6 <__stop_program>
