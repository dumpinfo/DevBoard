__start:
__text_start:
      4E EFCF      LDI	R28,0xFF
      4F E1D0      LDI	R29,0x10
      50 BFCD      OUT	0x3D,R28
      51 BFDE      OUT	0x3E,R29
      52 51CE      SUBI	R28,0x1E
      53 40D0      SBCI	R29,0
      54 EA0A      LDI	R16,0xAA
      55 8308      STD	Y+0,R16
      56 2400      CLR	R0
      57 E1E0      LDI	R30,0x10
      58 E0F1      LDI	R31,1
      59 E011      LDI	R17,1
      5A 31E1      CPI	R30,0x11
      5B 07F1      CPC	R31,R17
      5C F011      BEQ	0x005F
      5D 9201      ST	R0,Z+
      5E CFFB      RJMP	0x005A
      5F 8300      STD	Z+0,R16
      60 E8EC      LDI	R30,0x8C
      61 E0F0      LDI	R31,0
      62 E0A0      LDI	R26,0
      63 E0B1      LDI	R27,1
      64 E010      LDI	R17,0
      65 E000      LDI	R16,0
      66 BF0B      OUT	0x3B,R16
      67 39EC      CPI	R30,0x9C
      68 07F1      CPC	R31,R17
      69 F021      BEQ	0x006E
      6A 95C8      LPM
      6B 9631      ADIW	R30,1
      6C 920D      ST	R0,X+
      6D CFF9      RJMP	0x0067
      6E 940E 0125 CALL	_main
_exit:
      70 CFFF      RJMP	_exit
FILE: F:\PROGRA~1\iccavr\include\delay.h
(0001) //********************************************************************
(0002) /*函 数 名：delay_us
(0003) 建立日期：2010年1月28日
(0004) 编译环境：ICCAVR7.16A
(0005) 函数作用：微秒级的延时程序
(0006) 说    明：7.3728M晶振下
(0007) ********************************************************************/
(0008) void delay_1us(void)                 //1us延时函数，不能连续调用， 
(0009) { 
(0010)    asm("nop");                       //1时钟周期
_delay_1us:
      71 0000      NOP
(0011)    asm("nop");
      72 0000      NOP
(0012)    asm("nop");
      73 0000      NOP
(0013)    asm("nop");
      74 0000      NOP
(0014)    asm("nop");                       //1T
      75 0000      NOP
(0015)    asm("nop");
      76 0000      NOP
      77 9508      RET
(0016) 
(0017) }
(0018) void delay_3us(void)                 //3us延时函数,,可重复调用不影响精度
(0019) { 
(0020)    
(0021)    asm("nop");
_delay_3us:
      78 0000      NOP
(0022)    asm("nop");
      79 0000      NOP
(0023)    asm("nop");                       
      7A 0000      NOP
(0024)    asm("nop");
      7B 0000      NOP
(0025)    asm("nop");
      7C 0000      NOP
(0026)    asm("nop");
      7D 0000      NOP
(0027)    asm("nop");                       
      7E 0000      NOP
(0028)    asm("nop");
      7F 0000      NOP
(0029)    asm("nop");
      80 0000      NOP
(0030)    asm("nop");
      81 0000      NOP
(0031)    asm("nop");                       
      82 0000      NOP
(0032)    asm("nop");
      83 0000      NOP
(0033)    asm("nop");
      84 0000      NOP
(0034)    asm("nop");
      85 0000      NOP
(0035)    asm("nop");                       
      86 0000      NOP
(0036)    asm("nop");
      87 0000      NOP
(0037)    asm("nop");
      88 0000      NOP
(0038)    asm("nop");
      89 0000      NOP
(0039)    asm("nop");
      8A 0000      NOP
(0040)    asm("nop");
      8B 0000      NOP
(0041)    asm("nop");                       
      8C 0000      NOP
      8D 9508      RET
(0042) } 
(0043) 
(0044) void delay_10us(void)                 //10us延时函数,,可重复调用不影响精度
(0045) {
(0046)    delay_3us();
_delay_10us:
      8E DFE9      RCALL	_delay_3us
(0047)    delay_3us(); 
      8F DFE8      RCALL	_delay_3us
(0048)    delay_3us();  
      90 CFE7      RJMP	_delay_3us
(0049) }
(0050)   
(0051) void delay_50us(void)                 //48us延时函数,,可重复调用不影响精度
(0052) { 
(0053)    delay_10us();
_delay_50us:
      91 DFFC      RCALL	_delay_10us
(0054)    delay_10us(); 
      92 DFFB      RCALL	_delay_10us
(0055)    delay_10us();
      93 DFFA      RCALL	_delay_10us
(0056)    delay_10us();
      94 CFF9      RJMP	_delay_10us
(0057) }
(0058) void delay_100us(void)     //exactly 98us延时函数,,可重复调用不影响精度
(0059) {
(0060)  delay_50us();
_delay_100us:
      95 DFFB      RCALL	_delay_50us
(0061)  delay_50us();
      96 CFFA      RJMP	_delay_50us
_delay_n100us:
  n100us               --> R20
      97 934A      ST	R20,-Y
      98 2F40      MOV	R20,R16
(0062) }
(0063) void delay_n100us(unsigned char n100us)
(0064) {
      99 C001      RJMP	0x009B
(0065)  while(n100us--)                          
(0066)  delay_100us();
      9A DFFA      RCALL	_delay_100us
      9B 2E24      MOV	R2,R20
      9C 2433      CLR	R3
      9D 5041      SUBI	R20,1
      9E 2022      TST	R2
      9F F7D1      BNE	0x009A
      A0 9149      LD	R20,Y+
      A1 9508      RET
(0067) }
(0068) /*delay_n100us(2)        250us
(0069) delay_n100us(3)          360us
(0070) delay_n100us(4)          470us
(0071) delay_n100us(5)          580us
(0072) delay_n100us(6)          690us
(0073) delay_n100us(7)       800us
(0074) delay_n100us(8)          900us              主要是由于函数声明及while,,,大概6us
(0075) 
(0076) */
(0077) void delay_1ms()
(0078) {
(0079)  delay_100us();
_delay_1ms:
      A2 DFF2      RCALL	_delay_100us
(0080)  delay_100us();
      A3 DFF1      RCALL	_delay_100us
(0081)  delay_100us();
      A4 DFF0      RCALL	_delay_100us
(0082)  delay_100us();
      A5 DFEF      RCALL	_delay_100us
(0083)  delay_100us();
      A6 DFEE      RCALL	_delay_100us
(0084)  delay_100us();
      A7 DFED      RCALL	_delay_100us
(0085)  delay_100us();
      A8 DFEC      RCALL	_delay_100us
(0086)  delay_100us();
      A9 DFEB      RCALL	_delay_100us
(0087)  delay_100us();
      AA DFEA      RCALL	_delay_100us
(0088)  delay_100us();
      AB CFE9      RJMP	_delay_100us
_delay_nms:
  nms                  --> R20
      AC 934A      ST	R20,-Y
      AD 935A      ST	R21,-Y
      AE 01A8      MOVW	R20,R16
(0089) }
(0090) /********************************************************************
(0091) 函 数 名：Delay_ms
(0092) 建立日期：2010年1月28日
(0093) 修改日期：
(0094) 函数作用：毫秒级的精确延时程序
(0095) 说    明：
(0096) ********************************************************************/
(0097) void delay_nms(unsigned int nms)
(0098) {
      AF C001      RJMP	0x00B1
(0099)  while(nms--) 
(0100)  delay_1ms();
      B0 DFF1      RCALL	_delay_1ms
      B1 011A      MOVW	R2,R20
      B2 5041      SUBI	R20,1
      B3 4050      SBCI	R21,0
      B4 2022      TST	R2
      B5 F7D1      BNE	0x00B0
      B6 2033      TST	R3
      B7 F7C1      BNE	0x00B0
      B8 9159      LD	R21,Y+
      B9 9149      LD	R20,Y+
      BA 9508      RET
_delay_ns:
  ns                   --> R20
      BB 934A      ST	R20,-Y
      BC 2F40      MOV	R20,R16
(0101) }
(0102) void delay_ns(unsigned char ns)
(0103) {
      BD C003      RJMP	0x00C1
(0104)  while(ns--) 
(0105)  delay_nms(1000);
      BE EE08      LDI	R16,0xE8
      BF E013      LDI	R17,3
      C0 DFEB      RCALL	_delay_nms
      C1 2E24      MOV	R2,R20
      C2 2433      CLR	R3
      C3 5041      SUBI	R20,1
      C4 2022      TST	R2
      C5 F7C1      BNE	0x00BE
      C6 9149      LD	R20,Y+
      C7 9508      RET
FILE: E:\DMAVR-~3\INTKEY\INTKEY.C
(0001) //DMAVR-M16中断式独立键盘示例程序，键值变化可能不稳，因为键盘硬件的抖动原因
(0002) //两个中断键盘进行加1或者减1计数
(0003) //注意ICCAVR中断函数处理方法，中断向量号可以在头文件iom128v.h中查找
(0004) //编译环境 ICCAVR 7.16A
(0005) //系统时钟7.3728MHZ，设置熔丝位为外部高频石英晶体振荡，启动时间4.1ms
(0006) //作者：阿迪 www.avrgcc.com
(0007) //日期：2010.01.14
(0008) 
(0009) //***********************************************************************
(0010) //			包含文件
(0011) //***********************************************************************
(0012) 
(0013) #include <string.h>
(0014) #include <stdio.h>
(0015) #include <delay.h>
(0016) #include <iom128v.h>
(0017) 
(0018) #define Data_IO	        PORTA                //数据口
(0019) #define Data_DDR        DDRA                 //数据口方向寄存器
(0020) #define D_LE0	        PORTD &= ~(1 << PD4) //数码管段控制位为0
(0021) #define D_LE1           PORTD |= (1 << PD4)  //数码管段控制位为1
(0022) #define W_LE0	        PORTD &= ~(1 << PD5) //数码管位控制位为0
(0023) #define W_LE1           PORTD |= (1 << PD5)  //数码管位控制位为1
(0024) 
(0025) #define uchar           unsigned char
(0026) #define uint            unsigned int
(0027) 
(0028) uchar count;                                  //定义键盘计数变量
(0029) 
(0030) //***********************************************************************
(0031) //			共阴数码管显示的断码表
(0032) //***********************************************************************
(0033) 
(0034) uchar table[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};
(0035) 
(0036) //***********************************************************************
(0037) //			IO端口初始化
(0038) //***********************************************************************
(0039) 
(0040) void System_Init()
(0041) {
(0042)     Data_IO=0xFF;             //数据口为输出
_System_Init:
      C8 EF8F      LDI	R24,0xFF
      C9 BB8B      OUT	0x1B,R24
(0043)     Data_DDR=0xFF;
      CA BB8A      OUT	0x1A,R24
(0044) 
(0045) 	PORTD=0x7F;               //PD0 PD1设置为输入
      CB E78F      LDI	R24,0x7F
      CC BB82      OUT	0x12,R24
(0046) 	DDRD=0x70;                //PD0 PD1上拉电阻使能有效
      CD E780      LDI	R24,0x70
      CE BB81      OUT	0x11,R24
(0047) 	
(0048) 	PORTB=0xFF;				  //关闭发光二极管
      CF EF8F      LDI	R24,0xFF
      D0 BB88      OUT	0x18,R24
(0049) 	DDRB=0xFF;
      D1 BB87      OUT	0x17,R24
      D2 9508      RET
_Display_Key:
  j                    --> R22
  i                    --> R20
  num                  --> R10
      D3 940E 012E CALL	push_xgsetF00C
      D5 2EA0      MOV	R10,R16
(0050) }
(0051) 
(0052) //*************************************************************************
(0053) //			74HC573控制数码管动态扫描显示函数
(0054) //*************************************************************************
(0055) 
(0056) void Display_Key(uchar num)
(0057) {
(0058) 	 uchar i,j;
(0059) 	 System_Init();
      D6 DFF1      RCALL	_System_Init
(0060)      j=0x01;                    //此数据用来控制位选
      D7 E061      LDI	R22,1
(0061)   for(i=0;i<8;i++)
      D8 2744      CLR	R20
      D9 C013      RJMP	0x00ED
(0062)   {
(0063)     D_LE1;                    //控制数码管段数据的74HC573的LE管脚置高
      DA 9A94      SBI	0x12,4
(0064)     W_LE1;                    //控制数码管位的74HC573的LE管脚置高
      DB 9A95      SBI	0x12,5
(0065)     Data_IO=0x00;               //设置要显示的位，也就是哪一个数码管亮，这里是八个一起显示
      DC 2422      CLR	R2
      DD BA2B      OUT	0x1B,R2
(0066)     W_LE0;                    //锁存位数据，下面送上段数据以后，就显示出来了
      DE 9895      CBI	0x12,5
(0067) 	j=(j<<1);
      DF 0F66      LSL	R22
(0068)     Data_IO=table[num];         //送要显示的数据，就是段数据，如显示0送的是0x3f
      E0 E080      LDI	R24,0
      E1 E091      LDI	R25,1
      E2 2DEA      MOV	R30,R10
      E3 27FF      CLR	R31
      E4 0FE8      ADD	R30,R24
      E5 1FF9      ADC	R31,R25
      E6 8020      LDD	R2,Z+0
      E7 BA2B      OUT	0x1B,R2
(0069)     D_LE0;                    //锁存段数据，数码管亮一个时间片刻
      E8 9894      CBI	0x12,4
(0070)     delay_nms(1);              //显示一个时间片刻，会影响亮度和闪烁性
      E9 E001      LDI	R16,1
      EA E010      LDI	R17,0
      EB DFC0      RCALL	_delay_nms
      EC 9543      INC	R20
      ED 3048      CPI	R20,0x8
      EE F358      BCS	0x00DA
      EF 940C 0135 JMP	pop_xgsetF00C
(0071) 
(0072)   }
(0073) 
(0074) }
(0075) 
(0076) void Interrupt_Init()
(0077) {
(0078)   EIMSK|=0x03;                                     //使能外部中断0和外部中断1
_Interrupt_Init:
      F1 B789      IN	R24,0x39
      F2 6083      ORI	R24,3
      F3 BF89      OUT	0x39,R24
(0079)   EICRA=0x0A;                                     //下降沿触发方式
      F4 E08A      LDI	R24,0xA
      F5 9380 006A STS	0x006A,R24
(0080)   MCUCSR=0x00;                                    //控制和状态寄存器初始化
      F7 2422      CLR	R2
      F8 BE24      OUT	0x34,R2
      F9 9508      RET
_INT0_ISR:
      FA 922A      ST	R2,-Y
      FB 938A      ST	R24,-Y
      FC 939A      ST	R25,-Y
      FD B62F      IN	R2,0x3F
      FE 922A      ST	R2,-Y
(0081) }
(0082) 
(0083) //*************************************************************************
(0084) //	   中断服务子程序
(0085) //*************************************************************************
(0086) 
(0087) #pragma interrupt_handler  INT0_ISR:iv_INT0 //int0_ISR：中断函数名，接着是中断向量号
(0088) void INT0_ISR() 	 				  		//中断0服务程序
(0089)    { 
(0090)    	 if(++count>=16) 
      FF 9180 0110 LDS	R24,count
     101 5F8F      SUBI	R24,0xFF
     102 2E28      MOV	R2,R24
     103 9220 0110 STS	count,R2
     105 3180      CPI	R24,0x10
     106 F018      BCS	0x010A
(0091)    	 count=0;
     107 2422      CLR	R2
     108 9220 0110 STS	count,R2
     10A 9029      LD	R2,Y+
     10B BE2F      OUT	0x3F,R2
     10C 9199      LD	R25,Y+
     10D 9189      LD	R24,Y+
     10E 9029      LD	R2,Y+
     10F 9518      RETI
_INT1_ISR:
     110 922A      ST	R2,-Y
     111 938A      ST	R24,-Y
     112 B62F      IN	R2,0x3F
     113 922A      ST	R2,-Y
(0092)    } 
(0093) 
(0094) #pragma interrupt_handler  INT1_ISR:iv_INT1
(0095) void INT1_ISR() 	 				 	   //中断1服务程序
(0096)    { 
(0097)    	 if(count) --count;
     114 9020 0110 LDS	R2,count
     116 2022      TST	R2
     117 F029      BEQ	0x011D
     118 2D82      MOV	R24,R2
     119 5081      SUBI	R24,1
     11A 9380 0110 STS	count,R24
     11C C003      RJMP	0x0120
(0098)    	 else count=15;
     11D E08F      LDI	R24,0xF
     11E 9380 0110 STS	count,R24
     120 9029      LD	R2,Y+
     121 BE2F      OUT	0x3F,R2
     122 9189      LD	R24,Y+
     123 9029      LD	R2,Y+
     124 9518      RETI
(0099)   }
(0100) 
(0101) 
(0102) //*************************************************************************
(0103) //			主程序
(0104) //*************************************************************************
(0105) int main(void)
(0106) {
(0107)   System_Init();                             //系统初始化
_main:
     125 DFA2      RCALL	_System_Init
(0108)   Interrupt_Init();                          //中断配置初始化
     126 DFCA      RCALL	_Interrupt_Init
(0109)   SREG|=0x80;                                //开启全局中断
     127 9478      BSET	7
     128 C003      RJMP	0x012C
(0110)   while(1)
(0111)   {
(0112)     Display_Key(count);                     //显示键值
FILE: <library>
     129 9100 0110 LDS	R16,count
     12B DFA7      RCALL	_Display_Key
     12C CFFC      RJMP	0x0129
     12D 9508      RET
push_xgsetF00C:
     12E 937A      ST	R23,-Y
     12F 936A      ST	R22,-Y
     130 935A      ST	R21,-Y
     131 934A      ST	R20,-Y
     132 92BA      ST	R11,-Y
     133 92AA      ST	R10,-Y
     134 9508      RET
pop_xgsetF00C:
     135 90A9      LD	R10,Y+
     136 90B9      LD	R11,Y+
     137 9149      LD	R20,Y+
     138 9159      LD	R21,Y+
     139 9169      LD	R22,Y+
     13A 9179      LD	R23,Y+
     13B 9508      RET
