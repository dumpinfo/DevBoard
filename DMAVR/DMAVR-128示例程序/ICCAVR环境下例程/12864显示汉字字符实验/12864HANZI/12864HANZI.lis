                        .module _12864HANZI.C
                        .area text(rom, con, rel)
 0000                   .dbfile E:\DMAVR-~3\12864HANZI\12864HANZI.C
 0000                   .dbfile F:\PROGRA~1\iccavr\include\delay.h
 0000                   .dbfunc e delay_1us _delay_1us fV
                        .even
 0000           _delay_1us::
 0000                   .dbline -1
 0000                   .dbline 9
 0000           ; //********************************************************************
 0000           ; /*函 数 名：delay_us
 0000           ; 建立日期：2010年1月28日
 0000           ; 编译环境：ICCAVR7.16A
 0000           ; 函数作用：微秒级的延时程序
 0000           ; 说    明：7.3728M晶振下
 0000           ; ********************************************************************/
 0000           ; void delay_1us(void)                 //1us延时函数，不能连续调用， 
 0000           ; { 
 0000                   .dbline 10
 0000           ;    asm("nop");                       //1时钟周期
 0000 0000              nop
 0002                   .dbline 11
 0002           ;    asm("nop");
 0002 0000              nop
 0004                   .dbline 12
 0004           ;    asm("nop");
 0004 0000              nop
 0006                   .dbline 13
 0006           ;    asm("nop");
 0006 0000              nop
 0008                   .dbline 14
 0008           ;    asm("nop");                       //1T
 0008 0000              nop
 000A                   .dbline 15
 000A           ;    asm("nop");
 000A 0000              nop
 000C                   .dbline -2
 000C           L1:
 000C                   .dbline 0 ; func end
 000C 0895              ret
 000E                   .dbend
 000E                   .dbfunc e delay_3us _delay_3us fV
                        .even
 000E           _delay_3us::
 000E                   .dbline -1
 000E                   .dbline 19
 000E           ; 
 000E           ; }
 000E           ; void delay_3us(void)                 //3us延时函数,,可重复调用不影响精度
 000E           ; { 
 000E                   .dbline 21
 000E           ;    
 000E           ;    asm("nop");
 000E 0000              nop
 0010                   .dbline 22
 0010           ;    asm("nop");
 0010 0000              nop
 0012                   .dbline 23
 0012           ;    asm("nop");                       
 0012 0000              nop
 0014                   .dbline 24
 0014           ;    asm("nop");
 0014 0000              nop
 0016                   .dbline 25
 0016           ;    asm("nop");
 0016 0000              nop
 0018                   .dbline 26
 0018           ;    asm("nop");
 0018 0000              nop
 001A                   .dbline 27
 001A           ;    asm("nop");                       
 001A 0000              nop
 001C                   .dbline 28
 001C           ;    asm("nop");
 001C 0000              nop
 001E                   .dbline 29
 001E           ;    asm("nop");
 001E 0000              nop
 0020                   .dbline 30
 0020           ;    asm("nop");
 0020 0000              nop
 0022                   .dbline 31
 0022           ;    asm("nop");                       
 0022 0000              nop
 0024                   .dbline 32
 0024           ;    asm("nop");
 0024 0000              nop
 0026                   .dbline 33
 0026           ;    asm("nop");
 0026 0000              nop
 0028                   .dbline 34
 0028           ;    asm("nop");
 0028 0000              nop
 002A                   .dbline 35
 002A           ;    asm("nop");                       
 002A 0000              nop
 002C                   .dbline 36
 002C           ;    asm("nop");
 002C 0000              nop
 002E                   .dbline 37
 002E           ;    asm("nop");
 002E 0000              nop
 0030                   .dbline 38
 0030           ;    asm("nop");
 0030 0000              nop
 0032                   .dbline 39
 0032           ;    asm("nop");
 0032 0000              nop
 0034                   .dbline 40
 0034           ;    asm("nop");
 0034 0000              nop
 0036                   .dbline 41
 0036           ;    asm("nop");                       
 0036 0000              nop
 0038                   .dbline -2
 0038           L2:
 0038                   .dbline 0 ; func end
 0038 0895              ret
 003A                   .dbend
 003A                   .dbfunc e delay_10us _delay_10us fV
                        .even
 003A           _delay_10us::
 003A                   .dbline -1
 003A                   .dbline 45
 003A           ; } 
 003A           ; 
 003A           ; void delay_10us(void)                 //10us延时函数,,可重复调用不影响精度
 003A           ; {
 003A                   .dbline 46
 003A           ;    delay_3us();
 003A E9DF              xcall _delay_3us
 003C                   .dbline 47
 003C           ;    delay_3us(); 
 003C E8DF              xcall _delay_3us
 003E                   .dbline 48
 003E           ;    delay_3us();  
 003E                   .dbline -2
 003E           L3:
 003E                   .dbline 0 ; func end
 003E E7CF              xjmp _delay_3us
 0040                   .dbend
 0040                   .dbfunc e delay_50us _delay_50us fV
                        .even
 0040           _delay_50us::
 0040                   .dbline -1
 0040                   .dbline 52
 0040           ; }
 0040           ;   
 0040           ; void delay_50us(void)                 //48us延时函数,,可重复调用不影响精度
 0040           ; { 
 0040                   .dbline 53
 0040           ;    delay_10us();
 0040 FCDF              xcall _delay_10us
 0042                   .dbline 54
 0042           ;    delay_10us(); 
 0042 FBDF              xcall _delay_10us
 0044                   .dbline 55
 0044           ;    delay_10us();
 0044 FADF              xcall _delay_10us
 0046                   .dbline 56
 0046           ;    delay_10us();
 0046                   .dbline -2
 0046           L4:
 0046                   .dbline 0 ; func end
 0046 F9CF              xjmp _delay_10us
 0048                   .dbend
 0048                   .dbfunc e delay_100us _delay_100us fV
                        .even
 0048           _delay_100us::
 0048                   .dbline -1
 0048                   .dbline 59
 0048           ; }
 0048           ; void delay_100us(void)     //exactly 98us延时函数,,可重复调用不影响精度
 0048           ; {
 0048                   .dbline 60
 0048           ;  delay_50us();
 0048 FBDF              xcall _delay_50us
 004A                   .dbline 61
 004A           ;  delay_50us();
 004A                   .dbline -2
 004A           L5:
 004A                   .dbline 0 ; func end
 004A FACF              xjmp _delay_50us
 004C                   .dbend
 004C                   .dbfunc e delay_n100us _delay_n100us fV
 004C           ;         n100us -> R20
                        .even
 004C           _delay_n100us::
 004C 4A93              st -y,R20
 004E 402F              mov R20,R16
 0050                   .dbline -1
 0050                   .dbline 64
 0050           ; }
 0050           ; void delay_n100us(unsigned char n100us)
 0050           ; {
 0050 01C0              xjmp L8
 0052           L7:
 0052                   .dbline 66
 0052           ;  while(n100us--)                          
 0052           ;  delay_100us();
 0052 FADF              xcall _delay_100us
 0054           L8:
 0054                   .dbline 65
 0054 242E              mov R2,R20
 0056 3324              clr R3
 0058 4150              subi R20,1
 005A 2220              tst R2
 005C D1F7              brne L7
 005E           X0:
 005E                   .dbline -2
 005E           L6:
 005E                   .dbline 0 ; func end
 005E 4991              ld R20,y+
 0060 0895              ret
 0062                   .dbsym r n100us 20 c
 0062                   .dbend
 0062                   .dbfunc e delay_1ms _delay_1ms fV
                        .even
 0062           _delay_1ms::
 0062                   .dbline -1
 0062                   .dbline 78
 0062           ; }
 0062           ; /*delay_n100us(2)        250us
 0062           ; delay_n100us(3)          360us
 0062           ; delay_n100us(4)          470us
 0062           ; delay_n100us(5)          580us
 0062           ; delay_n100us(6)          690us
 0062           ; delay_n100us(7)       800us
 0062           ; delay_n100us(8)          900us              主要是由于函数声明及while,,,大概6us
 0062           ; 
 0062           ; */
 0062           ; void delay_1ms()
 0062           ; {
 0062                   .dbline 79
 0062           ;  delay_100us();
 0062 F2DF              xcall _delay_100us
 0064                   .dbline 80
 0064           ;  delay_100us();
 0064 F1DF              xcall _delay_100us
 0066                   .dbline 81
 0066           ;  delay_100us();
 0066 F0DF              xcall _delay_100us
 0068                   .dbline 82
 0068           ;  delay_100us();
 0068 EFDF              xcall _delay_100us
 006A                   .dbline 83
 006A           ;  delay_100us();
 006A EEDF              xcall _delay_100us
 006C                   .dbline 84
 006C           ;  delay_100us();
 006C EDDF              xcall _delay_100us
 006E                   .dbline 85
 006E           ;  delay_100us();
 006E ECDF              xcall _delay_100us
 0070                   .dbline 86
 0070           ;  delay_100us();
 0070 EBDF              xcall _delay_100us
 0072                   .dbline 87
 0072           ;  delay_100us();
 0072 EADF              xcall _delay_100us
 0074                   .dbline 88
 0074           ;  delay_100us();
 0074                   .dbline -2
 0074           L10:
 0074                   .dbline 0 ; func end
 0074 E9CF              xjmp _delay_100us
 0076                   .dbend
 0076                   .dbfunc e delay_nms _delay_nms fV
 0076           ;            nms -> R20,R21
                        .even
 0076           _delay_nms::
 0076 4A93              st -y,R20
 0078 5A93              st -y,R21
 007A A801              movw R20,R16
 007C                   .dbline -1
 007C                   .dbline 98
 007C           ; }
 007C           ; /********************************************************************
 007C           ; 函 数 名：Delay_ms
 007C           ; 建立日期：2010年1月28日
 007C           ; 修改日期：
 007C           ; 函数作用：毫秒级的精确延时程序
 007C           ; 说    明：
 007C           ; ********************************************************************/
 007C           ; void delay_nms(unsigned int nms)
 007C           ; {
 007C 01C0              xjmp L13
 007E           L12:
 007E                   .dbline 100
 007E           ;  while(nms--) 
 007E           ;  delay_1ms();
 007E F1DF              xcall _delay_1ms
 0080           L13:
 0080                   .dbline 99
 0080 1A01              movw R2,R20
 0082 4150              subi R20,1
 0084 5040              sbci R21,0
 0086 2220              tst R2
 0088 D1F7              brne L12
 008A 3320              tst R3
 008C C1F7              brne L12
 008E           X1:
 008E                   .dbline -2
 008E           L11:
 008E                   .dbline 0 ; func end
 008E 5991              ld R21,y+
 0090 4991              ld R20,y+
 0092 0895              ret
 0094                   .dbsym r nms 20 i
 0094                   .dbend
 0094                   .dbfunc e delay_ns _delay_ns fV
 0094           ;             ns -> R20
                        .even
 0094           _delay_ns::
 0094 4A93              st -y,R20
 0096 402F              mov R20,R16
 0098                   .dbline -1
 0098                   .dbline 103
 0098           ; }
 0098           ; void delay_ns(unsigned char ns)
 0098           ; {
 0098 03C0              xjmp L17
 009A           L16:
 009A                   .dbline 105
 009A           ;  while(ns--) 
 009A           ;  delay_nms(1000);
 009A 08EE              ldi R16,1000
 009C 13E0              ldi R17,3
 009E EBDF              xcall _delay_nms
 00A0           L17:
 00A0                   .dbline 104
 00A0 242E              mov R2,R20
 00A2 3324              clr R3
 00A4 4150              subi R20,1
 00A6 2220              tst R2
 00A8 C1F7              brne L16
 00AA           X2:
 00AA                   .dbline -2
 00AA           L15:
 00AA                   .dbline 0 ; func end
 00AA 4991              ld R20,y+
 00AC 0895              ret
 00AE                   .dbsym r ns 20 c
 00AE                   .dbend
 00AE                   .dbfile E:\DMAVR-~3\12864HANZI\12864HANZI.C
 00AE                   .dbfunc e system_init _system_init fV
                        .even
 00AE           _system_init::
 00AE                   .dbline -1
 00AE                   .dbline 56
 00AE           ; //DMAVR-128的12864型LCD显示驱动程序，显示的是welcome信息和欣世纪电子网站地址，是简单的显示汉字和字符
 00AE           ; //编译环境 ICCAVR 7.16A
 00AE           ; //系统时钟7.3728MHZ，设置熔丝位为外部高频石英晶体振荡，启动时间4.1ms
 00AE           ; //作者：阿迪 www.avrgcc.com
 00AE           ; //日期：2010.01.14
 00AE           ; 
 00AE           ; //***********************************************************************
 00AE           ; //                    包含文件
 00AE           ; //***********************************************************************
 00AE           ; 
 00AE           ; #include <string.h>
 00AE           ; #include <stdio.h>
 00AE           ; #include <delay.h>
 00AE           ; #include <iom128v.h>
 00AE           ; 
 00AE           ; //***********************************************************************
 00AE           ; //    定义变量区
 00AE           ; //***********************************************************************
 00AE           ; #define uchar unsigned char
 00AE           ; #define uint  unsigned int
 00AE           ; 
 00AE           ; #define RS_CLR        PORTF &= ~(1 << PF1)                 //RS置低
 00AE           ; #define RS_SET        PORTF |= (1 << PF1)                  //RS置高
 00AE           ; 
 00AE           ; #define RW_CLR        PORTF &= ~(1 << PF2)                 //RW置低
 00AE           ; #define RW_SET        PORTF |= (1 << PF2)                  //RW置高
 00AE           ; 
 00AE           ; #define EN_CLR        PORTF &= ~(1 << PF3)                 //E置低
 00AE           ; #define EN_SET        PORTF |= (1 << PF3)                  //E置高
 00AE           ; 
 00AE           ; #define LOW           0
 00AE           ; #define HIGH    1
 00AE           ; 
 00AE           ; //12864初始化指令
 00AE           ; #define CLEAR_SCREEN  0x01            //清屏指令：清屏且AC值为00H
 00AE           ; #define AC_INIT                   0x02                //将AC设置为00H。且游标移到原点位置
 00AE           ; #define CURSE_ADD             0x06            //设定游标移到方向及图像整体移动方向（默认游标右移，图像整体不动）
 00AE           ; #define FUN_MODE              0x30            //工作模式：8位基本指令集
 00AE           ; #define DISPLAY_ON            0x0c            //显示开,显示游标，且游标位置反白
 00AE           ; #define DISPLAY_OFF           0x08            //显示关
 00AE           ; #define CURSE_DIR             0x14            //游标向右移动:AC=AC+1
 00AE           ; #define SET_CG_AC             0x40            //设置AC，范围为：00H~3FH
 00AE           ; #define SET_DD_AC             0x80
 00AE           ; 
 00AE           ; #define Data_IO               PORTA                //液晶数据口
 00AE           ; #define Data_DDR        DDRA                 //数据口方向寄存器
 00AE           ; #define D_LE0         PORTD &= ~(1 << PD4) //数码管段控制位为0，锁存端口数据
 00AE           ; #define D_LE1           PORTD |= (1 << PD4)  //数码管段控制位为1，锁存器输出与端口一致
 00AE           ; #define W_LE0         PORTD &= ~(1 << PD5) //数码管位控制位为0
 00AE           ; #define W_LE1           PORTD |= (1 << PD5)  //数码管位控制位为1
 00AE           ; 
 00AE           ; //*************************************************************************
 00AE           ; //                    初始化子程序
 00AE           ; //*************************************************************************
 00AE           ; void system_init()
 00AE           ; {
 00AE                   .dbline 58
 00AE           ; 
 00AE           ;       Data_IO = 0xFF;                                 //电平设置
 00AE 8FEF              ldi R24,255
 00B0 8BBB              out 0x1b,R24
 00B2                   .dbline 59
 00B2           ;       Data_DDR = 0xFF;                                        //方向输出
 00B2 8ABB              out 0x1a,R24
 00B4                   .dbline 60
 00B4           ;       PORTF = 0xFF;                       //电平设置
 00B4 80936200          sts 98,R24
 00B8                   .dbline 61
 00B8           ;       DDRF = 0xFF;                        //方向输出
 00B8 80936100          sts 97,R24
 00BC                   .dbline 62
 00BC           ;     PORTD=0xFF;
 00BC 82BB              out 0x12,R24
 00BE                   .dbline 63
 00BE           ;       DDRD=0xFF;
 00BE 81BB              out 0x11,R24
 00C0                   .dbline 64
 00C0           ;       D_LE1;                             //关掉数码管，以免显示乱码                   
 00C0 949A              sbi 0x12,4
 00C2                   .dbline 65
 00C2           ;     W_LE1;                     
 00C2 959A              sbi 0x12,5
 00C4                   .dbline 66
 00C4           ;     Data_IO=0xFF;                      //关数码管            
 00C4 8BBB              out 0x1b,R24
 00C6                   .dbline 67
 00C6           ;     W_LE0; 
 00C6 9598              cbi 0x12,5
 00C8                   .dbline 69
 00C8           ;       
 00C8           ;       PORTB=0xFF;
 00C8 88BB              out 0x18,R24
 00CA                   .dbline 70
 00CA           ;       DDRB=0xFF;
 00CA 87BB              out 0x17,R24
 00CC                   .dbline -2
 00CC           L19:
 00CC                   .dbline 0 ; func end
 00CC 0895              ret
 00CE                   .dbend
 00CE                   .dbfunc e LCD_write_com _LCD_write_com fV
 00CE           ;            com -> R10
                        .even
 00CE           _LCD_write_com::
 00CE AA92              st -y,R10
 00D0 A02E              mov R10,R16
 00D2                   .dbline -1
 00D2                   .dbline 79
 00D2           ; }
 00D2           ; 
 00D2           ; //***********************************************************************
 00D2           ; //    显示屏命令写入函数
 00D2           ; //***********************************************************************
 00D2           ; 
 00D2           ; 
 00D2           ; void LCD_write_com(unsigned char com) 
 00D2           ; {     
 00D2                   .dbline 80
 00D2           ;       RS_CLR;
 00D2 80916200          lds R24,98
 00D6 8D7F              andi R24,253
 00D8 80936200          sts 98,R24
 00DC                   .dbline 81
 00DC           ;       RW_CLR;
 00DC 80916200          lds R24,98
 00E0 8B7F              andi R24,251
 00E2 80936200          sts 98,R24
 00E6                   .dbline 82
 00E6           ;       EN_SET;
 00E6 80916200          lds R24,98
 00EA 8860              ori R24,8
 00EC 80936200          sts 98,R24
 00F0                   .dbline 83
 00F0           ;       Data_IO = com;
 00F0 ABBA              out 0x1b,R10
 00F2                   .dbline 84
 00F2           ;       delay_nms(5);
 00F2 05E0              ldi R16,5
 00F4 10E0              ldi R17,0
 00F6 BFDF              xcall _delay_nms
 00F8                   .dbline 85
 00F8           ;       EN_CLR;
 00F8 80916200          lds R24,98
 00FC 877F              andi R24,247
 00FE 80936200          sts 98,R24
 0102                   .dbline -2
 0102           L20:
 0102                   .dbline 0 ; func end
 0102 A990              ld R10,y+
 0104 0895              ret
 0106                   .dbsym r com 10 c
 0106                   .dbend
 0106                   .dbfunc e LCD_write_data _LCD_write_data fV
 0106           ;           data -> R10
                        .even
 0106           _LCD_write_data::
 0106 AA92              st -y,R10
 0108 A02E              mov R10,R16
 010A                   .dbline -1
 010A                   .dbline 92
 010A           ; }
 010A           ; //***********************************************************************
 010A           ; //    显示屏数据写入函数
 010A           ; //***********************************************************************
 010A           ; 
 010A           ; void LCD_write_data(unsigned char data) 
 010A           ; {
 010A                   .dbline 93
 010A           ;       RS_SET;
 010A 80916200          lds R24,98
 010E 8260              ori R24,2
 0110 80936200          sts 98,R24
 0114                   .dbline 94
 0114           ;       RW_CLR;
 0114 80916200          lds R24,98
 0118 8B7F              andi R24,251
 011A 80936200          sts 98,R24
 011E                   .dbline 95
 011E           ;       EN_SET;
 011E 80916200          lds R24,98
 0122 8860              ori R24,8
 0124 80936200          sts 98,R24
 0128                   .dbline 96
 0128           ;       Data_IO = data;
 0128 ABBA              out 0x1b,R10
 012A                   .dbline 97
 012A           ;       delay_nms(5);
 012A 05E0              ldi R16,5
 012C 10E0              ldi R17,0
 012E A3DF              xcall _delay_nms
 0130                   .dbline 98
 0130           ;       EN_CLR;
 0130 80916200          lds R24,98
 0134 877F              andi R24,247
 0136 80936200          sts 98,R24
 013A                   .dbline -2
 013A           L21:
 013A                   .dbline 0 ; func end
 013A A990              ld R10,y+
 013C 0895              ret
 013E                   .dbsym r data 10 c
 013E                   .dbend
 013E                   .dbfunc e LCD_clear _LCD_clear fV
                        .even
 013E           _LCD_clear::
 013E                   .dbline -1
 013E                   .dbline 105
 013E           ; }
 013E           ; //***********************************************************************
 013E           ; //    显示屏清空显示
 013E           ; //***********************************************************************
 013E           ; 
 013E           ; void LCD_clear(void) 
 013E           ; {
 013E                   .dbline 106
 013E           ;       LCD_write_com(0x01);
 013E 01E0              ldi R16,1
 0140 C6DF              xcall _LCD_write_com
 0142                   .dbline 107
 0142           ;       delay_nms(5);
 0142 05E0              ldi R16,5
 0144 10E0              ldi R17,0
 0146                   .dbline -2
 0146           L22:
 0146                   .dbline 0 ; func end
 0146 97CF              xjmp _delay_nms
 0148                   .dbend
 0148                   .dbfunc e DisplayCgrom _DisplayCgrom fV
 0148           ;             hz -> R20,R21
 0148           ;           addr -> R10
                        .even
 0148           _DisplayCgrom::
 0148 0E940000          xcall push_xgset300C
 014C A901              movw R20,R18
 014E A02E              mov R10,R16
 0150                   .dbline -1
 0150                   .dbline 116
 0150           ; }
 0150           ; 
 0150           ; //***********************************************************************
 0150           ; //函数名称：DisplayCgrom(uchar hz)显示CGROM里的汉字
 0150           ; //入口参数：无
 0150           ; //返回参数：无
 0150           ; //***********************************************************************
 0150           ; void DisplayCgrom(uchar addr,uchar *hz)
 0150           ; {
 0150                   .dbline 117
 0150           ;       LCD_write_com(addr);
 0150 0A2D              mov R16,R10
 0152 BDDF              xcall _LCD_write_com
 0154                   .dbline 118
 0154           ;     delay_nms(5);
 0154 05E0              ldi R16,5
 0156 10E0              ldi R17,0
 0158 8EDF              xcall _delay_nms
 015A 08C0              xjmp L25
 015C           L24:
 015C                   .dbline 120
 015C           ;       while(*hz != '\0')
 015C           ;       {
 015C                   .dbline 121
 015C           ;               LCD_write_data(*hz);
 015C FA01              movw R30,R20
 015E 0081              ldd R16,z+0
 0160 D2DF              xcall _LCD_write_data
 0162                   .dbline 122
 0162           ;               hz++;
 0162 4F5F              subi R20,255  ; offset = 1
 0164 5F4F              sbci R21,255
 0166                   .dbline 123
 0166           ;         delay_nms(5);
 0166 05E0              ldi R16,5
 0168 10E0              ldi R17,0
 016A 85DF              xcall _delay_nms
 016C                   .dbline 124
 016C           ;       }
 016C           L25:
 016C                   .dbline 119
 016C FA01              movw R30,R20
 016E 2080              ldd R2,z+0
 0170 2220              tst R2
 0172 A1F7              brne L24
 0174           X3:
 0174                   .dbline -2
 0174           L23:
 0174                   .dbline 0 ; func end
 0174 0C940000          xjmp pop_xgset300C
 0178                   .dbsym r hz 20 pc
 0178                   .dbsym r addr 10 c
 0178                   .dbend
 0178                   .dbfunc e Display _Display fV
                        .even
 0178           _Display::
 0178                   .dbline -1
 0178                   .dbline 133
 0178           ; 
 0178           ; } 
 0178           ; //****************************************************************
 0178           ; //函数名称：Display()显示测试结果
 0178           ; //入口参数：无
 0178           ; //返回参数：无
 0178           ; //****************************************************************
 0178           ; void Display(void)
 0178           ; {
 0178                   .dbline 134
 0178           ;       DisplayCgrom(0x80,"欣世纪电子欢迎你");
 0178 20E0              ldi R18,<L28
 017A 30E0              ldi R19,>L28
 017C 00E8              ldi R16,128
 017E E4DF              xcall _DisplayCgrom
 0180                   .dbline 135
 0180           ;       DisplayCgrom(0x88,"旺:jingyehanxing");
 0180 20E0              ldi R18,<L29
 0182 30E0              ldi R19,>L29
 0184 08E8              ldi R16,136
 0186 E0DF              xcall _DisplayCgrom
 0188                   .dbline 136
 0188           ;       DisplayCgrom(0x90,"www.avrgcc.com  ");
 0188 20E0              ldi R18,<L30
 018A 30E0              ldi R19,>L30
 018C 00E9              ldi R16,144
 018E DCDF              xcall _DisplayCgrom
 0190                   .dbline 137
 0190           ;       DisplayCgrom(0x98,"电话:13946060471");
 0190 20E0              ldi R18,<L31
 0192 30E0              ldi R19,>L31
 0194 08E9              ldi R16,152
 0196                   .dbline -2
 0196           L27:
 0196                   .dbline 0 ; func end
 0196 D8CF              xjmp _DisplayCgrom
 0198                   .dbend
 0198                   .dbfunc e LCD_init _LCD_init fV
                        .even
 0198           _LCD_init::
 0198                   .dbline -1
 0198                   .dbline 146
 0198           ; 
 0198           ; }
 0198           ; 
 0198           ; //***********************************************************************
 0198           ; //    显示屏初始化函数
 0198           ; //***********************************************************************
 0198           ; 
 0198           ; void LCD_init(void) 
 0198           ; {
 0198                   .dbline 147
 0198           ;       DDRA = 0xFF;                                    //I/O口方向设置
 0198 8FEF              ldi R24,255
 019A 8ABB              out 0x1a,R24
 019C                   .dbline 148
 019C           ;       DDRA |= (1 << PA5) | (1 << PA6) | (1 << PA7);
 019C 8AB3              in R24,0x1a
 019E 806E              ori R24,224
 01A0 8ABB              out 0x1a,R24
 01A2                   .dbline 149
 01A2           ;       LCD_write_com(FUN_MODE);                        //显示模式设置
 01A2 00E3              ldi R16,48
 01A4 94DF              xcall _LCD_write_com
 01A6                   .dbline 150
 01A6           ;       delay_nms(5);
 01A6 05E0              ldi R16,5
 01A8 10E0              ldi R17,0
 01AA 65DF              xcall _delay_nms
 01AC                   .dbline 151
 01AC           ;       LCD_write_com(FUN_MODE);                        //显示模式设置
 01AC 00E3              ldi R16,48
 01AE 8FDF              xcall _LCD_write_com
 01B0                   .dbline 152
 01B0           ;       delay_nms(5);
 01B0 05E0              ldi R16,5
 01B2 10E0              ldi R17,0
 01B4 60DF              xcall _delay_nms
 01B6                   .dbline 153
 01B6           ;     LCD_write_com(DISPLAY_ON);                        //显示开
 01B6 0CE0              ldi R16,12
 01B8 8ADF              xcall _LCD_write_com
 01BA                   .dbline 154
 01BA           ;       delay_nms(5);
 01BA 05E0              ldi R16,5
 01BC 10E0              ldi R17,0
 01BE 5BDF              xcall _delay_nms
 01C0                   .dbline 155
 01C0           ;     LCD_write_com(CLEAR_SCREEN);                      //清屏
 01C0 01E0              ldi R16,1
 01C2 85DF              xcall _LCD_write_com
 01C4                   .dbline 156
 01C4           ;       delay_nms(5);
 01C4 05E0              ldi R16,5
 01C6 10E0              ldi R17,0
 01C8                   .dbline -2
 01C8           L32:
 01C8                   .dbline 0 ; func end
 01C8 56CF              xjmp _delay_nms
 01CA                   .dbend
 01CA                   .dbfunc e main _main fV
                        .even
 01CA           _main::
 01CA                   .dbline -1
 01CA                   .dbline 162
 01CA           ; }
 01CA           ; //***********************************************************************
 01CA           ; //                    主程序
 01CA           ; //***********************************************************************
 01CA           ; void main(void)
 01CA           ; {
 01CA                   .dbline 164
 01CA           ; 
 01CA           ;     system_init();                                //系统初始化，设置IO口属性
 01CA 71DF              xcall _system_init
 01CC                   .dbline 165
 01CC           ;       delay_nms(100);                                //延时100ms
 01CC 04E6              ldi R16,100
 01CE 10E0              ldi R17,0
 01D0 52DF              xcall _delay_nms
 01D2                   .dbline 166
 01D2           ;       LCD_init();                                   //液晶参数初始化设置
 01D2 E2DF              xcall _LCD_init
 01D4                   .dbline 167
 01D4           ;       LCD_clear();                                  //清屏
 01D4 B4DF              xcall _LCD_clear
 01D6 01C0              xjmp L35
 01D8           L34:
 01D8                   .dbline 169
 01D8           ;       while(1)
 01D8           ;       {
 01D8                   .dbline 170
 01D8           ;       Display();                                    //显示汉字
 01D8 CFDF              xcall _Display
 01DA                   .dbline 171
 01DA           ;       }
 01DA           L35:
 01DA                   .dbline 168
 01DA FECF              xjmp L34
 01DC           X4:
 01DC                   .dbline -2
 01DC           L33:
 01DC                   .dbline 0 ; func end
 01DC 0895              ret
 01DE                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile E:\DMAVR-~3\12864HANZI\12864HANZI.C
 0000           L31:
 0000                   .blkb 17
                        .area idata
 0000 B5E7BBB03A3133393436303630343731  .byte 181,231,187,176,58,49,51,57,52,54,48,54,48,52,55,49
 0010 00                .byte 0
                        .area data(ram, con, rel)
 0011                   .dbfile E:\DMAVR-~3\12864HANZI\12864HANZI.C
 0011           L30:
 0011                   .blkb 17
                        .area idata
 0011 7777772E6176726763632E636F6D2020  .byte 'w,'w,'w,46,'a,'v,'r,'g,'c,'c,46,'c,'o,'m,32,32
 0021 00                .byte 0
                        .area data(ram, con, rel)
 0022                   .dbfile E:\DMAVR-~3\12864HANZI\12864HANZI.C
 0022           L29:
 0022                   .blkb 17
                        .area idata
 0022 CDFA3A6A696E67796568616E78696E67  .byte 205,250,58,'j,'i,'n,'g,'y,'e,'h,'a,'n,'x,'i,'n,'g
 0032 00                .byte 0
                        .area data(ram, con, rel)
 0033                   .dbfile E:\DMAVR-~3\12864HANZI\12864HANZI.C
 0033           L28:
 0033                   .blkb 17
                        .area idata
 0033 D0C0CAC0BCCDB5E7D7D3BBB6D3ADC4E3  .byte 208,192,202,192,188,205,181,231,215,211,187,182,211,173,196,227
 0043 00                .byte 0
                        .area data(ram, con, rel)
 0044                   .dbfile E:\DMAVR-~3\12864HANZI\12864HANZI.C
 0044           ; }
 0044           ; 
