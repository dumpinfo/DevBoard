__start:
__text_start:
      4E EFCF      LDI	R28,0xFF
      4F E1D0      LDI	R29,0x10
      50 BFCD      OUT	0x3D,R28
      51 BFDE      OUT	0x3E,R29
      52 51CE      SUBI	R28,0x1E
      53 40D0      SBCI	R29,0
      54 EA0A      LDI	R16,0xAA
      55 8308      STD	Y+0,R16
      56 2400      CLR	R0
      57 E1E0      LDI	R30,0x10
      58 E0F1      LDI	R31,1
      59 E011      LDI	R17,1
      5A 31E0      CPI	R30,0x10
      5B 07F1      CPC	R31,R17
      5C F011      BEQ	0x005F
      5D 9201      ST	R0,Z+
      5E CFFB      RJMP	0x005A
      5F 8300      STD	Z+0,R16
      60 E8EC      LDI	R30,0x8C
      61 E0F0      LDI	R31,0
      62 E0A0      LDI	R26,0
      63 E0B1      LDI	R27,1
      64 E010      LDI	R17,0
      65 E000      LDI	R16,0
      66 BF0B      OUT	0x3B,R16
      67 39EC      CPI	R30,0x9C
      68 07F1      CPC	R31,R17
      69 F021      BEQ	0x006E
      6A 95C8      LPM
      6B 9631      ADIW	R30,1
      6C 920D      ST	R0,X+
      6D CFF9      RJMP	0x0067
      6E 940E 00EE CALL	_main
_exit:
      70 CFFF      RJMP	_exit
FILE: F:\PROGRA~1\iccavr\include\delay.h
(0001) //********************************************************************
(0002) /*函 数 名：delay_us
(0003) 建立日期：2010年1月28日
(0004) 编译环境：ICCAVR7.16A
(0005) 函数作用：微秒级的延时程序
(0006) 说    明：7.3728M晶振下
(0007) ********************************************************************/
(0008) void delay_1us(void)                 //1us延时函数，不能连续调用， 
(0009) { 
(0010)    asm("nop");                       //1时钟周期
_delay_1us:
      71 0000      NOP
(0011)    asm("nop");
      72 0000      NOP
(0012)    asm("nop");
      73 0000      NOP
(0013)    asm("nop");
      74 0000      NOP
(0014)    asm("nop");                       //1T
      75 0000      NOP
(0015)    asm("nop");
      76 0000      NOP
      77 9508      RET
(0016) 
(0017) }
(0018) void delay_3us(void)                 //3us延时函数,,可重复调用不影响精度
(0019) { 
(0020)    
(0021)    asm("nop");
_delay_3us:
      78 0000      NOP
(0022)    asm("nop");
      79 0000      NOP
(0023)    asm("nop");                       
      7A 0000      NOP
(0024)    asm("nop");
      7B 0000      NOP
(0025)    asm("nop");
      7C 0000      NOP
(0026)    asm("nop");
      7D 0000      NOP
(0027)    asm("nop");                       
      7E 0000      NOP
(0028)    asm("nop");
      7F 0000      NOP
(0029)    asm("nop");
      80 0000      NOP
(0030)    asm("nop");
      81 0000      NOP
(0031)    asm("nop");                       
      82 0000      NOP
(0032)    asm("nop");
      83 0000      NOP
(0033)    asm("nop");
      84 0000      NOP
(0034)    asm("nop");
      85 0000      NOP
(0035)    asm("nop");                       
      86 0000      NOP
(0036)    asm("nop");
      87 0000      NOP
(0037)    asm("nop");
      88 0000      NOP
(0038)    asm("nop");
      89 0000      NOP
(0039)    asm("nop");
      8A 0000      NOP
(0040)    asm("nop");
      8B 0000      NOP
(0041)    asm("nop");                       
      8C 0000      NOP
      8D 9508      RET
(0042) } 
(0043) 
(0044) void delay_10us(void)                 //10us延时函数,,可重复调用不影响精度
(0045) {
(0046)    delay_3us();
_delay_10us:
      8E DFE9      RCALL	_delay_3us
(0047)    delay_3us(); 
      8F DFE8      RCALL	_delay_3us
(0048)    delay_3us();  
      90 CFE7      RJMP	_delay_3us
(0049) }
(0050)   
(0051) void delay_50us(void)                 //48us延时函数,,可重复调用不影响精度
(0052) { 
(0053)    delay_10us();
_delay_50us:
      91 DFFC      RCALL	_delay_10us
(0054)    delay_10us(); 
      92 DFFB      RCALL	_delay_10us
(0055)    delay_10us();
      93 DFFA      RCALL	_delay_10us
(0056)    delay_10us();
      94 CFF9      RJMP	_delay_10us
(0057) }
(0058) void delay_100us(void)     //exactly 98us延时函数,,可重复调用不影响精度
(0059) {
(0060)  delay_50us();
_delay_100us:
      95 DFFB      RCALL	_delay_50us
(0061)  delay_50us();
      96 CFFA      RJMP	_delay_50us
_delay_n100us:
  n100us               --> R20
      97 934A      ST	R20,-Y
      98 2F40      MOV	R20,R16
(0062) }
(0063) void delay_n100us(unsigned char n100us)
(0064) {
      99 C001      RJMP	0x009B
(0065)  while(n100us--)                          
(0066)  delay_100us();
      9A DFFA      RCALL	_delay_100us
      9B 2E24      MOV	R2,R20
      9C 2433      CLR	R3
      9D 5041      SUBI	R20,1
      9E 2022      TST	R2
      9F F7D1      BNE	0x009A
      A0 9149      LD	R20,Y+
      A1 9508      RET
(0067) }
(0068) /*delay_n100us(2)        250us
(0069) delay_n100us(3)          360us
(0070) delay_n100us(4)          470us
(0071) delay_n100us(5)          580us
(0072) delay_n100us(6)          690us
(0073) delay_n100us(7)       800us
(0074) delay_n100us(8)          900us              主要是由于函数声明及while,,,大概6us
(0075) 
(0076) */
(0077) void delay_1ms()
(0078) {
(0079)  delay_100us();
_delay_1ms:
      A2 DFF2      RCALL	_delay_100us
(0080)  delay_100us();
      A3 DFF1      RCALL	_delay_100us
(0081)  delay_100us();
      A4 DFF0      RCALL	_delay_100us
(0082)  delay_100us();
      A5 DFEF      RCALL	_delay_100us
(0083)  delay_100us();
      A6 DFEE      RCALL	_delay_100us
(0084)  delay_100us();
      A7 DFED      RCALL	_delay_100us
(0085)  delay_100us();
      A8 DFEC      RCALL	_delay_100us
(0086)  delay_100us();
      A9 DFEB      RCALL	_delay_100us
(0087)  delay_100us();
      AA DFEA      RCALL	_delay_100us
(0088)  delay_100us();
      AB CFE9      RJMP	_delay_100us
_delay_nms:
  nms                  --> R20
      AC 934A      ST	R20,-Y
      AD 935A      ST	R21,-Y
      AE 01A8      MOVW	R20,R16
(0089) }
(0090) /********************************************************************
(0091) 函 数 名：Delay_ms
(0092) 建立日期：2010年1月28日
(0093) 修改日期：
(0094) 函数作用：毫秒级的精确延时程序
(0095) 说    明：
(0096) ********************************************************************/
(0097) void delay_nms(unsigned int nms)
(0098) {
      AF C001      RJMP	0x00B1
(0099)  while(nms--) 
(0100)  delay_1ms();
      B0 DFF1      RCALL	_delay_1ms
      B1 011A      MOVW	R2,R20
      B2 5041      SUBI	R20,1
      B3 4050      SBCI	R21,0
      B4 2022      TST	R2
      B5 F7D1      BNE	0x00B0
      B6 2033      TST	R3
      B7 F7C1      BNE	0x00B0
      B8 9159      LD	R21,Y+
      B9 9149      LD	R20,Y+
      BA 9508      RET
_delay_ns:
  ns                   --> R20
      BB 934A      ST	R20,-Y
      BC 2F40      MOV	R20,R16
(0101) }
(0102) void delay_ns(unsigned char ns)
(0103) {
      BD C003      RJMP	0x00C1
(0104)  while(ns--) 
(0105)  delay_nms(1000);
      BE EE08      LDI	R16,0xE8
      BF E013      LDI	R17,3
      C0 DFEB      RCALL	_delay_nms
      C1 2E24      MOV	R2,R20
      C2 2433      CLR	R3
      C3 5041      SUBI	R20,1
      C4 2022      TST	R2
      C5 F7C1      BNE	0x00BE
      C6 9149      LD	R20,Y+
      C7 9508      RET
FILE: E:\DMAVR-~3\LEDSHOW\LEDSHOW.C
(0001) //DMAVR-128的8位数码管动态显示程序，显示01234567
(0002) //编译环境 ICCAVR 7.16A
(0003) //系统时钟7.3728MHZ，设置熔丝位为外部高频石英晶体振荡，启动时间4.1ms
(0004) //作者：阿迪 www.avrgcc.com
(0005) //日期：2010.01.14
(0006) //***********************************************************************
(0007) //			包含文件
(0008) //***********************************************************************
(0009) 
(0010) #include <string.h>
(0011) #include <stdio.h>
(0012) #include <delay.h>
(0013) #include <iom128v.h>
(0014) 
(0015) //***********************************************************************
(0016) //			定义变量区
(0017) //***********************************************************************
(0018) 
(0019) #define uchar           unsigned char
(0020) #define uint            unsigned int
(0021) 
(0022) #define Data_IO	        PORTA                //数据口
(0023) #define Data_DDR        DDRA                 //数据口方向寄存器
(0024) #define D_LE0	        PORTD &= ~(1 << PD4) //数码管段控制位为0
(0025) #define D_LE1           PORTD |= (1 << PD4)  //数码管段控制位为1
(0026) #define W_LE0	        PORTD &= ~(1 << PD5) //数码管位控制位为0
(0027) #define W_LE1           PORTD |= (1 << PD5)  //数码管位控制位为1
(0028) 
(0029) #define W0 				0xfe                 //数码管各位单独选中时应送的位数据
(0030) #define W1              0xfd
(0031) #define W2 				0xfb
(0032) #define W3              0xf7
(0033) #define W4 				0xef
(0034) #define W5              0xdf
(0035) #define W6 				0xbf
(0036) #define W7              0x7f
(0037) 
(0038) //***********************************************************************
(0039) //			共阴数码管显示的断码表
(0040) //***********************************************************************
(0041) 
(0042) uchar table[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,
(0043)                0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};
(0044) 
(0045) //***********************************************************************
(0046) //			IO端口初始化
(0047) //***********************************************************************
(0048) 
(0049) void System_Init()
(0050) {
(0051)     Data_IO=0xFF;             //数据口为输出
_System_Init:
      C8 EF8F      LDI	R24,0xFF
      C9 BB8B      OUT	0x1B,R24
(0052)     Data_DDR=0xFF;
      CA BB8A      OUT	0x1A,R24
(0053) 
(0054)     PORTD=0xFF;               //74HC573的控制口，设置为输出
      CB BB82      OUT	0x12,R24
(0055)     DDRD=0xFF;
      CC BB81      OUT	0x11,R24
(0056) 	
(0057) 	PORTB=0xFF;				  //关闭发光二极管
      CD BB88      OUT	0x18,R24
(0058) 	DDRB=0xFF;
      CE BB87      OUT	0x17,R24
      CF 9508      RET
_Write_LED:
  j                    --> R22
  i                    --> R20
      D0 934A      ST	R20,-Y
      D1 936A      ST	R22,-Y
(0059) }
(0060) 
(0061) //***********************************************************************
(0062) //			74HC573控制数码管动态扫描
(0063) //***********************************************************************
(0064) 
(0065) void Write_LED()
(0066) {
(0067)    uchar i,j;
(0068)    j=0x01;                    //此数据用来控制位选
      D2 E061      LDI	R22,1
(0069)   for(i=0;i<8;i++)
      D3 2744      CLR	R20
      D4 C014      RJMP	0x00E9
(0070)   {
(0071)     D_LE1;                    //控制数码管段数据的74HC573的LE管脚置高
      D5 9A94      SBI	0x12,4
(0072)     W_LE1;                    //控制数码管位的74HC573的LE管脚置高
      D6 9A95      SBI	0x12,5
(0073)     Data_IO=~j;               //设置要显示的位，也就是哪一个数码管亮
      D7 2E26      MOV	R2,R22
      D8 9420      COM	R2
      D9 BA2B      OUT	0x1B,R2
(0074)     W_LE0;                    //锁存位数据，下面送上段数据以后，就显示出来了
      DA 9895      CBI	0x12,5
(0075) 	j=(j<<1);
      DB 0F66      LSL	R22
(0076)     Data_IO=table[i];         //送要显示的数据，就是段数据，如显示0送的是0x3f
      DC E080      LDI	R24,0
      DD E091      LDI	R25,1
      DE 2FE4      MOV	R30,R20
      DF 27FF      CLR	R31
      E0 0FE8      ADD	R30,R24
      E1 1FF9      ADC	R31,R25
      E2 8020      LDD	R2,Z+0
      E3 BA2B      OUT	0x1B,R2
(0077)     D_LE0;                    //锁存段数据，数码管亮一个时间片刻
      E4 9894      CBI	0x12,4
(0078)     delay_nms(1);              //显示一个时间片刻，会影响亮度和闪烁性
      E5 E001      LDI	R16,1
      E6 E010      LDI	R17,0
      E7 DFC4      RCALL	_delay_nms
      E8 9543      INC	R20
      E9 3048      CPI	R20,0x8
      EA F350      BCS	0x00D5
      EB 9169      LD	R22,Y+
      EC 9149      LD	R20,Y+
      ED 9508      RET
(0079) 
(0080)   }
(0081) }
(0082) 
(0083) //***********************************************************************
(0084) //			主程序
(0085) //***********************************************************************
(0086) 
(0087) void main(void)
(0088) {
(0089) 
(0090)      System_Init();             //初始化
_main:
      EE DFD9      RCALL	_System_Init
      EF C001      RJMP	0x00F1
(0091) 
(0092)  while(1)
(0093)    {
(0094)      Write_LED();               //调用函数，显示
FILE: <library>
      F0 DFDF      RCALL	_Write_LED
      F1 CFFE      RJMP	0x00F0
      F2 9508      RET
