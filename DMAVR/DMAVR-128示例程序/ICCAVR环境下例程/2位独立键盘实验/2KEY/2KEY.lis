                        .module _2KEY.C
                        .area text(rom, con, rel)
 0000                   .dbfile E:\DMAVR-~3\2KEY\2KEY.C
 0000                   .dbfile F:\PROGRA~1\iccavr\include\delay.h
 0000                   .dbfunc e delay_1us _delay_1us fV
                        .even
 0000           _delay_1us::
 0000                   .dbline -1
 0000                   .dbline 9
 0000           ; //********************************************************************
 0000           ; /*函 数 名：delay_us
 0000           ; 建立日期：2010年1月28日
 0000           ; 编译环境：ICCAVR7.16A
 0000           ; 函数作用：微秒级的延时程序
 0000           ; 说    明：7.3728M晶振下
 0000           ; ********************************************************************/
 0000           ; void delay_1us(void)                 //1us延时函数，不能连续调用， 
 0000           ; { 
 0000                   .dbline 10
 0000           ;    asm("nop");                       //1时钟周期
 0000 0000              nop
 0002                   .dbline 11
 0002           ;    asm("nop");
 0002 0000              nop
 0004                   .dbline 12
 0004           ;    asm("nop");
 0004 0000              nop
 0006                   .dbline 13
 0006           ;    asm("nop");
 0006 0000              nop
 0008                   .dbline 14
 0008           ;    asm("nop");                       //1T
 0008 0000              nop
 000A                   .dbline 15
 000A           ;    asm("nop");
 000A 0000              nop
 000C                   .dbline -2
 000C           L1:
 000C                   .dbline 0 ; func end
 000C 0895              ret
 000E                   .dbend
 000E                   .dbfunc e delay_3us _delay_3us fV
                        .even
 000E           _delay_3us::
 000E                   .dbline -1
 000E                   .dbline 19
 000E           ; 
 000E           ; }
 000E           ; void delay_3us(void)                 //3us延时函数,,可重复调用不影响精度
 000E           ; { 
 000E                   .dbline 21
 000E           ;    
 000E           ;    asm("nop");
 000E 0000              nop
 0010                   .dbline 22
 0010           ;    asm("nop");
 0010 0000              nop
 0012                   .dbline 23
 0012           ;    asm("nop");                       
 0012 0000              nop
 0014                   .dbline 24
 0014           ;    asm("nop");
 0014 0000              nop
 0016                   .dbline 25
 0016           ;    asm("nop");
 0016 0000              nop
 0018                   .dbline 26
 0018           ;    asm("nop");
 0018 0000              nop
 001A                   .dbline 27
 001A           ;    asm("nop");                       
 001A 0000              nop
 001C                   .dbline 28
 001C           ;    asm("nop");
 001C 0000              nop
 001E                   .dbline 29
 001E           ;    asm("nop");
 001E 0000              nop
 0020                   .dbline 30
 0020           ;    asm("nop");
 0020 0000              nop
 0022                   .dbline 31
 0022           ;    asm("nop");                       
 0022 0000              nop
 0024                   .dbline 32
 0024           ;    asm("nop");
 0024 0000              nop
 0026                   .dbline 33
 0026           ;    asm("nop");
 0026 0000              nop
 0028                   .dbline 34
 0028           ;    asm("nop");
 0028 0000              nop
 002A                   .dbline 35
 002A           ;    asm("nop");                       
 002A 0000              nop
 002C                   .dbline 36
 002C           ;    asm("nop");
 002C 0000              nop
 002E                   .dbline 37
 002E           ;    asm("nop");
 002E 0000              nop
 0030                   .dbline 38
 0030           ;    asm("nop");
 0030 0000              nop
 0032                   .dbline 39
 0032           ;    asm("nop");
 0032 0000              nop
 0034                   .dbline 40
 0034           ;    asm("nop");
 0034 0000              nop
 0036                   .dbline 41
 0036           ;    asm("nop");                       
 0036 0000              nop
 0038                   .dbline -2
 0038           L2:
 0038                   .dbline 0 ; func end
 0038 0895              ret
 003A                   .dbend
 003A                   .dbfunc e delay_10us _delay_10us fV
                        .even
 003A           _delay_10us::
 003A                   .dbline -1
 003A                   .dbline 45
 003A           ; } 
 003A           ; 
 003A           ; void delay_10us(void)                 //10us延时函数,,可重复调用不影响精度
 003A           ; {
 003A                   .dbline 46
 003A           ;    delay_3us();
 003A E9DF              xcall _delay_3us
 003C                   .dbline 47
 003C           ;    delay_3us(); 
 003C E8DF              xcall _delay_3us
 003E                   .dbline 48
 003E           ;    delay_3us();  
 003E                   .dbline -2
 003E           L3:
 003E                   .dbline 0 ; func end
 003E E7CF              xjmp _delay_3us
 0040                   .dbend
 0040                   .dbfunc e delay_50us _delay_50us fV
                        .even
 0040           _delay_50us::
 0040                   .dbline -1
 0040                   .dbline 52
 0040           ; }
 0040           ;   
 0040           ; void delay_50us(void)                 //48us延时函数,,可重复调用不影响精度
 0040           ; { 
 0040                   .dbline 53
 0040           ;    delay_10us();
 0040 FCDF              xcall _delay_10us
 0042                   .dbline 54
 0042           ;    delay_10us(); 
 0042 FBDF              xcall _delay_10us
 0044                   .dbline 55
 0044           ;    delay_10us();
 0044 FADF              xcall _delay_10us
 0046                   .dbline 56
 0046           ;    delay_10us();
 0046                   .dbline -2
 0046           L4:
 0046                   .dbline 0 ; func end
 0046 F9CF              xjmp _delay_10us
 0048                   .dbend
 0048                   .dbfunc e delay_100us _delay_100us fV
                        .even
 0048           _delay_100us::
 0048                   .dbline -1
 0048                   .dbline 59
 0048           ; }
 0048           ; void delay_100us(void)     //exactly 98us延时函数,,可重复调用不影响精度
 0048           ; {
 0048                   .dbline 60
 0048           ;  delay_50us();
 0048 FBDF              xcall _delay_50us
 004A                   .dbline 61
 004A           ;  delay_50us();
 004A                   .dbline -2
 004A           L5:
 004A                   .dbline 0 ; func end
 004A FACF              xjmp _delay_50us
 004C                   .dbend
 004C                   .dbfunc e delay_n100us _delay_n100us fV
 004C           ;         n100us -> R20
                        .even
 004C           _delay_n100us::
 004C 4A93              st -y,R20
 004E 402F              mov R20,R16
 0050                   .dbline -1
 0050                   .dbline 64
 0050           ; }
 0050           ; void delay_n100us(unsigned char n100us)
 0050           ; {
 0050 01C0              xjmp L8
 0052           L7:
 0052                   .dbline 66
 0052           ;  while(n100us--)                          
 0052           ;  delay_100us();
 0052 FADF              xcall _delay_100us
 0054           L8:
 0054                   .dbline 65
 0054 242E              mov R2,R20
 0056 3324              clr R3
 0058 4150              subi R20,1
 005A 2220              tst R2
 005C D1F7              brne L7
 005E           X0:
 005E                   .dbline -2
 005E           L6:
 005E                   .dbline 0 ; func end
 005E 4991              ld R20,y+
 0060 0895              ret
 0062                   .dbsym r n100us 20 c
 0062                   .dbend
 0062                   .dbfunc e delay_1ms _delay_1ms fV
                        .even
 0062           _delay_1ms::
 0062                   .dbline -1
 0062                   .dbline 78
 0062           ; }
 0062           ; /*delay_n100us(2)        250us
 0062           ; delay_n100us(3)          360us
 0062           ; delay_n100us(4)          470us
 0062           ; delay_n100us(5)          580us
 0062           ; delay_n100us(6)          690us
 0062           ; delay_n100us(7)       800us
 0062           ; delay_n100us(8)          900us              主要是由于函数声明及while,,,大概6us
 0062           ; 
 0062           ; */
 0062           ; void delay_1ms()
 0062           ; {
 0062                   .dbline 79
 0062           ;  delay_100us();
 0062 F2DF              xcall _delay_100us
 0064                   .dbline 80
 0064           ;  delay_100us();
 0064 F1DF              xcall _delay_100us
 0066                   .dbline 81
 0066           ;  delay_100us();
 0066 F0DF              xcall _delay_100us
 0068                   .dbline 82
 0068           ;  delay_100us();
 0068 EFDF              xcall _delay_100us
 006A                   .dbline 83
 006A           ;  delay_100us();
 006A EEDF              xcall _delay_100us
 006C                   .dbline 84
 006C           ;  delay_100us();
 006C EDDF              xcall _delay_100us
 006E                   .dbline 85
 006E           ;  delay_100us();
 006E ECDF              xcall _delay_100us
 0070                   .dbline 86
 0070           ;  delay_100us();
 0070 EBDF              xcall _delay_100us
 0072                   .dbline 87
 0072           ;  delay_100us();
 0072 EADF              xcall _delay_100us
 0074                   .dbline 88
 0074           ;  delay_100us();
 0074                   .dbline -2
 0074           L10:
 0074                   .dbline 0 ; func end
 0074 E9CF              xjmp _delay_100us
 0076                   .dbend
 0076                   .dbfunc e delay_nms _delay_nms fV
 0076           ;            nms -> R20,R21
                        .even
 0076           _delay_nms::
 0076 4A93              st -y,R20
 0078 5A93              st -y,R21
 007A A801              movw R20,R16
 007C                   .dbline -1
 007C                   .dbline 98
 007C           ; }
 007C           ; /********************************************************************
 007C           ; 函 数 名：Delay_ms
 007C           ; 建立日期：2010年1月28日
 007C           ; 修改日期：
 007C           ; 函数作用：毫秒级的精确延时程序
 007C           ; 说    明：
 007C           ; ********************************************************************/
 007C           ; void delay_nms(unsigned int nms)
 007C           ; {
 007C 01C0              xjmp L13
 007E           L12:
 007E                   .dbline 100
 007E           ;  while(nms--) 
 007E           ;  delay_1ms();
 007E F1DF              xcall _delay_1ms
 0080           L13:
 0080                   .dbline 99
 0080 1A01              movw R2,R20
 0082 4150              subi R20,1
 0084 5040              sbci R21,0
 0086 2220              tst R2
 0088 D1F7              brne L12
 008A 3320              tst R3
 008C C1F7              brne L12
 008E           X1:
 008E                   .dbline -2
 008E           L11:
 008E                   .dbline 0 ; func end
 008E 5991              ld R21,y+
 0090 4991              ld R20,y+
 0092 0895              ret
 0094                   .dbsym r nms 20 i
 0094                   .dbend
 0094                   .dbfunc e delay_ns _delay_ns fV
 0094           ;             ns -> R20
                        .even
 0094           _delay_ns::
 0094 4A93              st -y,R20
 0096 402F              mov R20,R16
 0098                   .dbline -1
 0098                   .dbline 103
 0098           ; }
 0098           ; void delay_ns(unsigned char ns)
 0098           ; {
 0098 03C0              xjmp L17
 009A           L16:
 009A                   .dbline 105
 009A           ;  while(ns--) 
 009A           ;  delay_nms(1000);
 009A 08EE              ldi R16,1000
 009C 13E0              ldi R17,3
 009E EBDF              xcall _delay_nms
 00A0           L17:
 00A0                   .dbline 104
 00A0 242E              mov R2,R20
 00A2 3324              clr R3
 00A4 4150              subi R20,1
 00A6 2220              tst R2
 00A8 C1F7              brne L16
 00AA           X2:
 00AA                   .dbline -2
 00AA           L15:
 00AA                   .dbline 0 ; func end
 00AA 4991              ld R20,y+
 00AC 0895              ret
 00AE                   .dbsym r ns 20 c
 00AE                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile F:\PROGRA~1\iccavr\include\delay.h
 0000           _table::
 0000                   .blkb 2
                        .area idata
 0000 3F06              .byte 63,6
                        .area data(ram, con, rel)
 0002                   .dbfile F:\PROGRA~1\iccavr\include\delay.h
 0002                   .blkb 2
                        .area idata
 0002 5B4F              .byte 91,'O
                        .area data(ram, con, rel)
 0004                   .dbfile F:\PROGRA~1\iccavr\include\delay.h
 0004                   .blkb 2
                        .area idata
 0004 666D              .byte 'f,'m
                        .area data(ram, con, rel)
 0006                   .dbfile F:\PROGRA~1\iccavr\include\delay.h
 0006                   .blkb 2
                        .area idata
 0006 7D07              .byte 125,7
                        .area data(ram, con, rel)
 0008                   .dbfile F:\PROGRA~1\iccavr\include\delay.h
 0008                   .blkb 2
                        .area idata
 0008 7F6F              .byte 127,'o
                        .area data(ram, con, rel)
 000A                   .dbfile F:\PROGRA~1\iccavr\include\delay.h
 000A                   .blkb 2
                        .area idata
 000A 777C              .byte 'w,124
                        .area data(ram, con, rel)
 000C                   .dbfile F:\PROGRA~1\iccavr\include\delay.h
 000C                   .blkb 2
                        .area idata
 000C 395E              .byte 57,94
                        .area data(ram, con, rel)
 000E                   .dbfile F:\PROGRA~1\iccavr\include\delay.h
 000E                   .blkb 2
                        .area idata
 000E 7971              .byte 'y,'q
                        .area data(ram, con, rel)
 0010                   .dbfile F:\PROGRA~1\iccavr\include\delay.h
 0010                   .dbfile E:\DMAVR-~3\2KEY\2KEY.C
 0010                   .dbsym e table _table A[16:16]c
                        .area text(rom, con, rel)
 00AE                   .dbfile E:\DMAVR-~3\2KEY\2KEY.C
 00AE                   .dbfunc e System_Init _System_Init fV
                        .even
 00AE           _System_Init::
 00AE                   .dbline -1
 00AE                   .dbline 41
 00AE           ; //DMAVR-128的2位独立键盘控制程序，显示键值1和2
 00AE           ; //编译环境 ICCAVR 7.16A
 00AE           ; //系统时钟7.3728MHZ，设置熔丝位为外部高频石英晶体振荡，启动时间4.1ms
 00AE           ; //作者：阿迪 www.avrgcc.com
 00AE           ; //日期：2010.01.14
 00AE           ; //***********************************************************************
 00AE           ; //                    包含文件
 00AE           ; //***********************************************************************
 00AE           ; 
 00AE           ; #include <string.h>
 00AE           ; #include <stdio.h>
 00AE           ; #include <delay.h>
 00AE           ; #include <iom128v.h>
 00AE           ; 
 00AE           ; #define uchar           unsigned char
 00AE           ; #define uint            unsigned int
 00AE           ; 
 00AE           ; #define key_io          PORTC               //独立键盘与PC4和PC5连接
 00AE           ; #define key_ior         PINC                //读取IO口值为PINC的值
 00AE           ; #define Data_IO               PORTA                //数据口
 00AE           ; #define Data_DDR        DDRA                 //数据口方向寄存器
 00AE           ; #define D_LE0         PORTD &= ~(1 << PD4) //数码管段控制位为0
 00AE           ; #define D_LE1           PORTD |= (1 << PD4)  //数码管段控制位为1
 00AE           ; #define W_LE0         PORTD &= ~(1 << PD5) //数码管位控制位为0
 00AE           ; #define W_LE1           PORTD |= (1 << PD5)  //数码管位控制位为1
 00AE           ; 
 00AE           ; 
 00AE           ; //***********************************************************************
 00AE           ; //                    共阴数码管显示的断码表
 00AE           ; //***********************************************************************
 00AE           ; 
 00AE           ; uchar table[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,
 00AE           ;                          0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};
 00AE           ; uchar key;
 00AE           ; 
 00AE           ; //***********************************************************************
 00AE           ; //                    IO端口初始化
 00AE           ; //***********************************************************************
 00AE           ; 
 00AE           ; void System_Init()
 00AE           ; {
 00AE                   .dbline 42
 00AE           ;     Data_IO=0xFF;             //数据口为输出
 00AE 8FEF              ldi R24,255
 00B0 8BBB              out 0x1b,R24
 00B2                   .dbline 43
 00B2           ;     Data_DDR=0xFF;
 00B2 8ABB              out 0x1a,R24
 00B4                   .dbline 45
 00B4           ; 
 00B4           ;     PORTD=0xFF;               //74HC573的控制口，设置为输出
 00B4 82BB              out 0x12,R24
 00B6                   .dbline 46
 00B6           ;     DDRD=0xFF;
 00B6 81BB              out 0x11,R24
 00B8                   .dbline 48
 00B8           ;       
 00B8           ;       PORTB=0xFF;
 00B8 88BB              out 0x18,R24
 00BA                   .dbline 49
 00BA           ;       DDRB=0xFF;                                //关闭发光二极管
 00BA 87BB              out 0x17,R24
 00BC                   .dbline -2
 00BC           L19:
 00BC                   .dbline 0 ; func end
 00BC 0895              ret
 00BE                   .dbend
 00BE                   .dbfunc e Display_Key _Display_Key fV
 00BE           ;              j -> R22
 00BE           ;              i -> R20
 00BE           ;            num -> R10
                        .even
 00BE           _Display_Key::
 00BE 0E940000          xcall push_xgsetF00C
 00C2 A02E              mov R10,R16
 00C4                   .dbline -1
 00C4                   .dbline 57
 00C4           ; }
 00C4           ; 
 00C4           ; //*************************************************************************
 00C4           ; //                    74HC573控制数码管动态扫描显示函数
 00C4           ; //*************************************************************************
 00C4           ; 
 00C4           ; void Display_Key(uchar num)
 00C4           ; {
 00C4                   .dbline 59
 00C4           ;  uchar i,j;
 00C4           ;  System_Init();
 00C4 F4DF              xcall _System_Init
 00C6                   .dbline 60
 00C6           ;  j=0x01;                    //此数据用来控制位选
 00C6 61E0              ldi R22,1
 00C8                   .dbline 61
 00C8           ;   for(i=0;i<8;i++)
 00C8 4427              clr R20
 00CA 13C0              xjmp L24
 00CC           L21:
 00CC                   .dbline 62
 00CC           ;   {
 00CC                   .dbline 63
 00CC           ;     D_LE1;                    //控制数码管段数据的74HC573的LE管脚置高
 00CC 949A              sbi 0x12,4
 00CE                   .dbline 64
 00CE           ;     W_LE1;                    //控制数码管位的74HC573的LE管脚置高
 00CE 959A              sbi 0x12,5
 00D0                   .dbline 65
 00D0           ;     Data_IO=0x00;               //设置要显示的位，也就是哪一个数码管亮，这里是八个一起显示
 00D0 2224              clr R2
 00D2 2BBA              out 0x1b,R2
 00D4                   .dbline 66
 00D4           ;     W_LE0;                    //锁存位数据，下面送上段数据以后，就显示出来了
 00D4 9598              cbi 0x12,5
 00D6                   .dbline 67
 00D6           ;       j=(j<<1);
 00D6 660F              lsl R22
 00D8                   .dbline 68
 00D8           ;     Data_IO=table[num];         //送要显示的数据，就是段数据，如显示0送的是0x3f
 00D8 80E0              ldi R24,<_table
 00DA 90E0              ldi R25,>_table
 00DC EA2D              mov R30,R10
 00DE FF27              clr R31
 00E0 E80F              add R30,R24
 00E2 F91F              adc R31,R25
 00E4 2080              ldd R2,z+0
 00E6 2BBA              out 0x1b,R2
 00E8                   .dbline 69
 00E8           ;     D_LE0;                    //锁存段数据，数码管亮一个时间片刻
 00E8 9498              cbi 0x12,4
 00EA                   .dbline 70
 00EA           ;     delay_nms(1);              //显示一个时间片刻，会影响亮度和闪烁性
 00EA 01E0              ldi R16,1
 00EC 10E0              ldi R17,0
 00EE C3DF              xcall _delay_nms
 00F0                   .dbline 72
 00F0           ; 
 00F0           ;   }
 00F0           L22:
 00F0                   .dbline 61
 00F0 4395              inc R20
 00F2           L24:
 00F2                   .dbline 61
 00F2 4830              cpi R20,8
 00F4 58F3              brlo L21
 00F6           X3:
 00F6                   .dbline -2
 00F6           L20:
 00F6                   .dbline 0 ; func end
 00F6 0C940000          xjmp pop_xgsetF00C
 00FA                   .dbsym r j 22 c
 00FA                   .dbsym r i 20 c
 00FA                   .dbsym r num 10 c
 00FA                   .dbend
 00FA                   .dbfunc e KeyboardScan _KeyboardScan fc
 00FA           ;      key_check -> R10
 00FA           ;     statevalue -> R20
 00FA           ;    key_checkin -> R20
                        .even
 00FA           _KeyboardScan::
 00FA 0E940000          xcall push_xgset300C
 00FE                   .dbline -1
 00FE                   .dbline 81
 00FE           ; 
 00FE           ; }
 00FE           ; 
 00FE           ; //**********************************************************************
 00FE           ; //    键盘扫描子程序，采用逐键扫描的方式
 00FE           ; //**********************************************************************
 00FE           ; 
 00FE           ; uchar KeyboardScan() 
 00FE           ; {
 00FE                   .dbline 83
 00FE           ;   uchar statevalue,key_checkin,key_check;
 00FE           ;   key_io=0xf0;                    //在IO口由输出方式变为输入方式时要延迟一个周期
 00FE 80EF              ldi R24,240
 0100 85BB              out 0x15,R24
 0102                   .dbline 84
 0102           ;   key_io=0xf0;                    //采取写两次的方法延时
 0102 85BB              out 0x15,R24
 0104                   .dbline 85
 0104           ;   key_checkin=key_ior;            //读取IO口状态，判断是否有键按下
 0104 43B3              in R20,0x13
 0106                   .dbline 86
 0106           ;   if(key_checkin!=0xf0)           //IO口值发生变化则表示有键按下
 0106 403F              cpi R20,240
 0108 F1F0              breq L26
 010A           X4:
 010A                   .dbline 87
 010A           ;   {
 010A                   .dbline 88
 010A           ;     delay_nms(20);                 //键盘消抖，延时20MS
 010A 04E1              ldi R16,20
 010C 10E0              ldi R17,0
 010E B3DF              xcall _delay_nms
 0110                   .dbline 89
 0110           ;     key_checkin=key_ior;
 0110 43B3              in R20,0x13
 0112                   .dbline 90
 0112           ;     if(key_checkin!=0xf0)
 0112 403F              cpi R20,240
 0114 E1F0              breq L27
 0116           X5:
 0116                   .dbline 91
 0116           ;     {
 0116                   .dbline 93
 0116           ;      
 0116           ;      key_check=key_ior;
 0116 A3B2              in R10,0x13
 0118                   .dbline 94
 0118           ;      switch (key_check)
 0118 4A2D              mov R20,R10
 011A 5527              clr R21
 011C 403D              cpi R20,208
 011E E0E0              ldi R30,0
 0120 5E07              cpc R21,R30
 0122 49F0              breq L33
 0124           X6:
 0124 403D              cpi R20,208
 0126 E0E0              ldi R30,0
 0128 5E07              cpc R21,R30
 012A 8CF0              brlt L27
 012C           X7:
 012C           L35:
 012C 403E              cpi R20,224
 012E E0E0              ldi R30,0
 0130 5E07              cpc R21,R30
 0132 29F0              breq L34
 0134           X8:
 0134 0CC0              xjmp L27
 0136           L33:
 0136                   .dbline 96
 0136           ;      {
 0136           ;      case 0xd0:key=2;break;
 0136 82E0              ldi R24,2
 0138 80930000          sts _key,R24
 013C                   .dbline 96
 013C 08C0              xjmp L27
 013E           L34:
 013E                   .dbline 97
 013E           ;      case 0xe0:key=1;break;
 013E 81E0              ldi R24,1
 0140 80930000          sts _key,R24
 0144                   .dbline 97
 0144                   .dbline 100
 0144           ;      }
 0144           ;           
 0144           ;     }
 0144                   .dbline 101
 0144           ;   }
 0144 04C0              xjmp L27
 0146           L26:
 0146                   .dbline 103
 0146           ;   else
 0146           ;   {
 0146                   .dbline 104
 0146           ;   statevalue=0xff;                      //无按键时返回值
 0146 4FEF              ldi R20,255
 0148                   .dbline 105
 0148           ;   key=statevalue;
 0148 40930000          sts _key,R20
 014C                   .dbline 106
 014C           ;   return(key);
 014C 042F              mov R16,R20
 014E           L27:
 014E                   .dbline -2
 014E           L25:
 014E                   .dbline 0 ; func end
 014E 0C940000          xjmp pop_xgset300C
 0152                   .dbsym r key_check 10 c
 0152                   .dbsym r statevalue 20 c
 0152                   .dbsym r key_checkin 20 c
 0152                   .dbend
 0152                   .dbfunc e main _main fV
 0152           ;      key_store -> R20,R21
                        .even
 0152           _main::
 0152                   .dbline -1
 0152                   .dbline 116
 0152           ;   }
 0152           ; }
 0152           ; 
 0152           ; //*************************************************************************
 0152           ; //                    主程序
 0152           ; //*************************************************************************
 0152           ; 
 0152           ; void main()
 0152           ; 
 0152           ; {         
 0152                   .dbline 119
 0152           ;      
 0152           ;         uint key_store;
 0152           ;         DDRC=0x0f;                        //PC口上拉电阻使能
 0152 8FE0              ldi R24,15
 0154 84BB              out 0x14,R24
 0156                   .dbline 120
 0156           ;       PORTC=0xf0;                       //PC高四位输入低四位输出
 0156 80EF              ldi R24,240
 0158 85BB              out 0x15,R24
 015A 1CC0              xjmp L38
 015C           L37:
 015C                   .dbline 124
 015C           ; 
 015C           ; 
 015C           ; while(1)
 015C           ;   {
 015C                   .dbline 126
 015C           ; 
 015C           ;  KeyboardScan();                         //键盘扫描，看是否有按键按下
 015C CEDF              xcall _KeyboardScan
 015E                   .dbline 127
 015E           ;     if(key!=0xff)                        //如果有按键按下，则显示该按键键值0~15
 015E 80910000          lds R24,_key
 0162 8F3F              cpi R24,255
 0164 A9F0              breq L40
 0166           X9:
 0166                   .dbline 128
 0166           ;       {
 0166                   .dbline 129
 0166           ;             { switch(key)
 0166                   .dbline 129
 0166 682F              mov R22,R24
 0168 7727              clr R23
 016A 6130              cpi R22,1
 016C E0E0              ldi R30,0
 016E 7E07              cpc R23,R30
 0170 29F0              breq L45
 0172           X10:
 0172 6230              cpi R22,2
 0174 E0E0              ldi R30,0
 0176 7E07              cpc R23,R30
 0178 31F0              breq L46
 017A           X11:
 017A 0CC0              xjmp L41
 017C           L45:
 017C                   .dbline 130
 017C           ;                  { case 1: Display_Key(0x01);key_store=0x01;break;   //给不同的键赋键值
 017C 01E0              ldi R16,1
 017E 9FDF              xcall _Display_Key
 0180                   .dbline 130
 0180 41E0              ldi R20,1
 0182 50E0              ldi R21,0
 0184                   .dbline 130
 0184 07C0              xjmp L41
 0186           L46:
 0186                   .dbline 131
 0186           ;                    case 2: Display_Key(0x02);key_store=0x02;break;
 0186 02E0              ldi R16,2
 0188 9ADF              xcall _Display_Key
 018A                   .dbline 131
 018A 42E0              ldi R20,2
 018C 50E0              ldi R21,0
 018E                   .dbline 131
 018E                   .dbline 134
 018E           ;            }
 018E           ; 
 018E           ;           }
 018E                   .dbline 136
 018E           ;       
 018E           ;        }
 018E 02C0              xjmp L41
 0190           L40:
 0190                   .dbline 138
 0190           ;      else
 0190           ;        {
 0190                   .dbline 139
 0190           ;        Display_Key(key_store);              //没有按键的时候显示上次的键值
 0190 042F              mov R16,R20
 0192 95DF              xcall _Display_Key
 0194                   .dbline 140
 0194           ;        }
 0194           L41:
 0194                   .dbline 142
 0194           ; 
 0194           ;   }
 0194           L38:
 0194                   .dbline 123
 0194 E3CF              xjmp L37
 0196           X12:
 0196                   .dbline -2
 0196           L36:
 0196                   .dbline 0 ; func end
 0196 0895              ret
 0198                   .dbsym r key_store 20 i
 0198                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile E:\DMAVR-~3\2KEY\2KEY.C
 0000           _key::
 0000                   .blkb 1
 0001                   .dbsym e key _key c
 0001           ; 
 0001           ; }
 0001           ; 
 0001           ; 
 0001           ; 
 0001           ; 
