__start:
__text_start:
      4E EFCF      LDI	R28,0xFF
      4F E1D0      LDI	R29,0x10
      50 BFCD      OUT	0x3D,R28
      51 BFDE      OUT	0x3E,R29
      52 51CE      SUBI	R28,0x1E
      53 40D0      SBCI	R29,0
      54 EA0A      LDI	R16,0xAA
      55 8308      STD	Y+0,R16
      56 2400      CLR	R0
      57 E1E0      LDI	R30,0x10
      58 E0F1      LDI	R31,1
      59 E011      LDI	R17,1
      5A 31E8      CPI	R30,0x18
      5B 07F1      CPC	R31,R17
      5C F011      BEQ	0x005F
      5D 9201      ST	R0,Z+
      5E CFFB      RJMP	0x005A
      5F 8300      STD	Z+0,R16
      60 E8EC      LDI	R30,0x8C
      61 E0F0      LDI	R31,0
      62 E0A0      LDI	R26,0
      63 E0B1      LDI	R27,1
      64 E010      LDI	R17,0
      65 E000      LDI	R16,0
      66 BF0B      OUT	0x3B,R16
      67 39EC      CPI	R30,0x9C
      68 07F1      CPC	R31,R17
      69 F021      BEQ	0x006E
      6A 95C8      LPM
      6B 9631      ADIW	R30,1
      6C 920D      ST	R0,X+
      6D CFF9      RJMP	0x0067
      6E 940E 01C5 CALL	_main
_exit:
      70 CFFF      RJMP	_exit
FILE: F:\PROGRA~1\iccavr\include\delay.h
(0001) //********************************************************************
(0002) /*函 数 名：delay_us
(0003) 建立日期：2010年1月28日
(0004) 编译环境：ICCAVR7.16A
(0005) 函数作用：微秒级的延时程序
(0006) 说    明：7.3728M晶振下
(0007) ********************************************************************/
(0008) void delay_1us(void)                 //1us延时函数，不能连续调用， 
(0009) { 
(0010)    asm("nop");                       //1时钟周期
_delay_1us:
      71 0000      NOP
(0011)    asm("nop");
      72 0000      NOP
(0012)    asm("nop");
      73 0000      NOP
(0013)    asm("nop");
      74 0000      NOP
(0014)    asm("nop");                       //1T
      75 0000      NOP
(0015)    asm("nop");
      76 0000      NOP
      77 9508      RET
(0016) 
(0017) }
(0018) void delay_3us(void)                 //3us延时函数,,可重复调用不影响精度
(0019) { 
(0020)    
(0021)    asm("nop");
_delay_3us:
      78 0000      NOP
(0022)    asm("nop");
      79 0000      NOP
(0023)    asm("nop");                       
      7A 0000      NOP
(0024)    asm("nop");
      7B 0000      NOP
(0025)    asm("nop");
      7C 0000      NOP
(0026)    asm("nop");
      7D 0000      NOP
(0027)    asm("nop");                       
      7E 0000      NOP
(0028)    asm("nop");
      7F 0000      NOP
(0029)    asm("nop");
      80 0000      NOP
(0030)    asm("nop");
      81 0000      NOP
(0031)    asm("nop");                       
      82 0000      NOP
(0032)    asm("nop");
      83 0000      NOP
(0033)    asm("nop");
      84 0000      NOP
(0034)    asm("nop");
      85 0000      NOP
(0035)    asm("nop");                       
      86 0000      NOP
(0036)    asm("nop");
      87 0000      NOP
(0037)    asm("nop");
      88 0000      NOP
(0038)    asm("nop");
      89 0000      NOP
(0039)    asm("nop");
      8A 0000      NOP
(0040)    asm("nop");
      8B 0000      NOP
(0041)    asm("nop");                       
      8C 0000      NOP
      8D 9508      RET
(0042) } 
(0043) 
(0044) void delay_10us(void)                 //10us延时函数,,可重复调用不影响精度
(0045) {
(0046)    delay_3us();
_delay_10us:
      8E DFE9      RCALL	_delay_3us
(0047)    delay_3us(); 
      8F DFE8      RCALL	_delay_3us
(0048)    delay_3us();  
      90 CFE7      RJMP	_delay_3us
(0049) }
(0050)   
(0051) void delay_50us(void)                 //48us延时函数,,可重复调用不影响精度
(0052) { 
(0053)    delay_10us();
_delay_50us:
      91 DFFC      RCALL	_delay_10us
(0054)    delay_10us(); 
      92 DFFB      RCALL	_delay_10us
(0055)    delay_10us();
      93 DFFA      RCALL	_delay_10us
(0056)    delay_10us();
      94 CFF9      RJMP	_delay_10us
(0057) }
(0058) void delay_100us(void)     //exactly 98us延时函数,,可重复调用不影响精度
(0059) {
(0060)  delay_50us();
_delay_100us:
      95 DFFB      RCALL	_delay_50us
(0061)  delay_50us();
      96 CFFA      RJMP	_delay_50us
_delay_n100us:
  n100us               --> R20
      97 934A      ST	R20,-Y
      98 2F40      MOV	R20,R16
(0062) }
(0063) void delay_n100us(unsigned char n100us)
(0064) {
      99 C001      RJMP	0x009B
(0065)  while(n100us--)                          
(0066)  delay_100us();
      9A DFFA      RCALL	_delay_100us
      9B 2E24      MOV	R2,R20
      9C 2433      CLR	R3
      9D 5041      SUBI	R20,1
      9E 2022      TST	R2
      9F F7D1      BNE	0x009A
      A0 9149      LD	R20,Y+
      A1 9508      RET
(0067) }
(0068) /*delay_n100us(2)        250us
(0069) delay_n100us(3)          360us
(0070) delay_n100us(4)          470us
(0071) delay_n100us(5)          580us
(0072) delay_n100us(6)          690us
(0073) delay_n100us(7)       800us
(0074) delay_n100us(8)          900us              主要是由于函数声明及while,,,大概6us
(0075) 
(0076) */
(0077) void delay_1ms()
(0078) {
(0079)  delay_100us();
_delay_1ms:
      A2 DFF2      RCALL	_delay_100us
(0080)  delay_100us();
      A3 DFF1      RCALL	_delay_100us
(0081)  delay_100us();
      A4 DFF0      RCALL	_delay_100us
(0082)  delay_100us();
      A5 DFEF      RCALL	_delay_100us
(0083)  delay_100us();
      A6 DFEE      RCALL	_delay_100us
(0084)  delay_100us();
      A7 DFED      RCALL	_delay_100us
(0085)  delay_100us();
      A8 DFEC      RCALL	_delay_100us
(0086)  delay_100us();
      A9 DFEB      RCALL	_delay_100us
(0087)  delay_100us();
      AA DFEA      RCALL	_delay_100us
(0088)  delay_100us();
      AB CFE9      RJMP	_delay_100us
_delay_nms:
  nms                  --> R20
      AC 934A      ST	R20,-Y
      AD 935A      ST	R21,-Y
      AE 01A8      MOVW	R20,R16
(0089) }
(0090) /********************************************************************
(0091) 函 数 名：Delay_ms
(0092) 建立日期：2010年1月28日
(0093) 修改日期：
(0094) 函数作用：毫秒级的精确延时程序
(0095) 说    明：
(0096) ********************************************************************/
(0097) void delay_nms(unsigned int nms)
(0098) {
      AF C001      RJMP	0x00B1
(0099)  while(nms--) 
(0100)  delay_1ms();
      B0 DFF1      RCALL	_delay_1ms
      B1 011A      MOVW	R2,R20
      B2 5041      SUBI	R20,1
      B3 4050      SBCI	R21,0
      B4 2022      TST	R2
      B5 F7D1      BNE	0x00B0
      B6 2033      TST	R3
      B7 F7C1      BNE	0x00B0
      B8 9159      LD	R21,Y+
      B9 9149      LD	R20,Y+
      BA 9508      RET
_delay_ns:
  ns                   --> R20
      BB 934A      ST	R20,-Y
      BC 2F40      MOV	R20,R16
(0101) }
(0102) void delay_ns(unsigned char ns)
(0103) {
      BD C003      RJMP	0x00C1
(0104)  while(ns--) 
(0105)  delay_nms(1000);
      BE EE08      LDI	R16,0xE8
      BF E013      LDI	R17,3
      C0 DFEB      RCALL	_delay_nms
      C1 2E24      MOV	R2,R20
      C2 2433      CLR	R3
      C3 5041      SUBI	R20,1
      C4 2022      TST	R2
      C5 F7C1      BNE	0x00BE
      C6 9149      LD	R20,Y+
      C7 9508      RET
FILE: E:\DMAVR-~3\ADC\ADC.C
(0001) //DMAVR-128的ADC单通道转换示例程序，采取结束触发中断的方式
(0002) //数据位数为10位精度，可以实现8位精度，显示结果为ADC输出的数字量
(0003) //编译环境 ICCAVR 7.16A
(0004) //系统时钟7.3728MHZ，设置熔丝位为外部高频石英晶体振荡，启动时间4.1ms
(0005) //作者：阿迪 www.avrgcc.com
(0006) //日期：2010.01.14
(0007) 
(0008) //***********************************************************************
(0009) //			包含文件
(0010) //***********************************************************************
(0011) 
(0012) #include <string.h>
(0013) #include <stdio.h>
(0014) #include <delay.h>
(0015) #include <iom128v.h>
(0016) 
(0017) #define Data_IO	        PORTA                //数码管数据口
(0018) #define Data_DDR        DDRA                 //数码管数据口方向寄存器
(0019) #define D_LE0	        PORTD &= ~(1 << PD4) //数码管段控制位为0，锁存端口数据
(0020) #define D_LE1           PORTD |= (1 << PD4)  //数码管段控制位为1，锁存器输出与端口一致
(0021) #define W_LE0	        PORTD &= ~(1 << PD5) //数码管位控制位为0
(0022) #define W_LE1           PORTD |= (1 << PD5)  //数码管位控制位为1
(0023) 
(0024) #define uchar           unsigned char
(0025) #define uint            unsigned int
(0026) 
(0027) uchar adc_datah,adc_datal,A1,A2,A3,A4;                       //定义变量
(0028) uchar flag,j;                                               //标志变量
(0029) 
(0030) //***********************************************************************
(0031) //			共阴数码管显示的断码表0～F
(0032) //***********************************************************************
(0033) 
(0034) uchar table[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,
(0035)                0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};
(0036) 
(0037) //***********************************************************************
(0038) //			IO端口初始化
(0039) //***********************************************************************
(0040) 
(0041) void system_init()
(0042) {
(0043)     Data_IO=0xFF;             //数据口为输出
_system_init:
      C8 EF8F      LDI	R24,0xFF
      C9 BB8B      OUT	0x1B,R24
(0044)     Data_DDR=0xFF;
      CA BB8A      OUT	0x1A,R24
(0045) 
(0046)     PORTD=0xFF;               //74HC573的控制口，设置为输出
      CB BB82      OUT	0x12,R24
(0047)     DDRD=0xFF;
      CC BB81      OUT	0x11,R24
(0048) 	
(0049) 	PORTB=0xFF;				  //关闭发光二极管
      CD BB88      OUT	0x18,R24
(0050) 	DDRB=0xFF;
      CE BB87      OUT	0x17,R24
      CF 9508      RET
_Display_ADC:
  i                    --> R22
  j                    --> R20
      D0 934A      ST	R20,-Y
      D1 936A      ST	R22,-Y
(0051) }
(0052) 
(0053) //*************************************************************************
(0054) //			74HC573控制数码管动态扫描显示函数，显示采集到的温度
(0055) //*************************************************************************
(0056) 
(0057) void Display_ADC()
(0058) {
(0059) 	 uchar i,j;
(0060) 	 system_init();
      D2 DFF5      RCALL	_system_init
(0061)      j=0x01;                    //此数据用来控制位选
      D3 E041      LDI	R20,1
(0062)  for(i=0;i<4;i++)               //用后4位数码管来显示
      D4 2766      CLR	R22
      D5 C00E      RJMP	0x00E4
(0063)   {
(0064)      D_LE1;                     
      D6 9A94      SBI	0x12,4
(0065)      W_LE1;                     
      D7 9A95      SBI	0x12,5
(0066)      Data_IO=~j;                
      D8 2E24      MOV	R2,R20
      D9 9420      COM	R2
      DA BA2B      OUT	0x1B,R2
(0067)      W_LE0;                      
      DB 9895      CBI	0x12,5
(0068) 	 j=(j<<1);
      DC 0F44      LSL	R20
(0069)      Data_IO=0x00;           
      DD 2422      CLR	R2
      DE BA2B      OUT	0x1B,R2
(0070)      D_LE0;                      
      DF 9894      CBI	0x12,4
(0071)      delay_nms(1);                
      E0 E001      LDI	R16,1
      E1 E010      LDI	R17,0
      E2 DFC9      RCALL	_delay_nms
      E3 9563      INC	R22
      E4 3064      CPI	R22,4
      E5 F380      BCS	0x00D6
(0072)   }
(0073)      D_LE1;                    
      E6 9A94      SBI	0x12,4
(0074)      W_LE1;                    
      E7 9A95      SBI	0x12,5
(0075)      Data_IO=~j;               
      E8 2E24      MOV	R2,R20
      E9 9420      COM	R2
      EA BA2B      OUT	0x1B,R2
(0076)      W_LE0;                    
      EB 9895      CBI	0x12,5
(0077) 	 j=(j<<1);
      EC 0F44      LSL	R20
(0078)      Data_IO=table[A1];         
      ED E080      LDI	R24,0
      EE E091      LDI	R25,1
      EF 91E0 0115 LDS	R30,A1
      F1 27FF      CLR	R31
      F2 0FE8      ADD	R30,R24
      F3 1FF9      ADC	R31,R25
      F4 8020      LDD	R2,Z+0
      F5 BA2B      OUT	0x1B,R2
(0079)      D_LE0;                    
      F6 9894      CBI	0x12,4
(0080)      delay_nms(1);              
      F7 E001      LDI	R16,1
      F8 E010      LDI	R17,0
      F9 DFB2      RCALL	_delay_nms
(0081) 
(0082)      D_LE1;                     
      FA 9A94      SBI	0x12,4
(0083)      W_LE1;                     
      FB 9A95      SBI	0x12,5
(0084)      Data_IO=~j;                
      FC 2E24      MOV	R2,R20
      FD 9420      COM	R2
      FE BA2B      OUT	0x1B,R2
(0085)      W_LE0;                      
      FF 9895      CBI	0x12,5
(0086) 	 j=(j<<1);
     100 0F44      LSL	R20
(0087)      Data_IO=table[A2];            
     101 E080      LDI	R24,0
     102 E091      LDI	R25,1
     103 91E0 0114 LDS	R30,A2
     105 27FF      CLR	R31
     106 0FE8      ADD	R30,R24
     107 1FF9      ADC	R31,R25
     108 8020      LDD	R2,Z+0
     109 BA2B      OUT	0x1B,R2
(0088)      D_LE0;                      
     10A 9894      CBI	0x12,4
(0089)      delay_nms(1);                
     10B E001      LDI	R16,1
     10C E010      LDI	R17,0
     10D DF9E      RCALL	_delay_nms
(0090) 
(0091) 	 D_LE1;                     
     10E 9A94      SBI	0x12,4
(0092)      W_LE1;                     
     10F 9A95      SBI	0x12,5
(0093)      Data_IO=~j;                
     110 2E24      MOV	R2,R20
     111 9420      COM	R2
     112 BA2B      OUT	0x1B,R2
(0094)      W_LE0;                      
     113 9895      CBI	0x12,5
(0095) 	 j=(j<<1);
     114 0F44      LSL	R20
(0096)      Data_IO=table[A3];           
     115 E080      LDI	R24,0
     116 E091      LDI	R25,1
     117 91E0 0113 LDS	R30,A3
     119 27FF      CLR	R31
     11A 0FE8      ADD	R30,R24
     11B 1FF9      ADC	R31,R25
     11C 8020      LDD	R2,Z+0
     11D BA2B      OUT	0x1B,R2
(0097)      D_LE0;                      
     11E 9894      CBI	0x12,4
(0098)      delay_nms(1);   
     11F E001      LDI	R16,1
     120 E010      LDI	R17,0
     121 DF8A      RCALL	_delay_nms
(0099) 	 
(0100) 	  D_LE1;                    
     122 9A94      SBI	0x12,4
(0101)      W_LE1;                    
     123 9A95      SBI	0x12,5
(0102)      Data_IO=~j;               
     124 2E24      MOV	R2,R20
     125 9420      COM	R2
     126 BA2B      OUT	0x1B,R2
(0103)      W_LE0;                    
     127 9895      CBI	0x12,5
(0104) 	 j=(j<<1);
     128 0F44      LSL	R20
(0105)      Data_IO=table[A4];         
     129 E080      LDI	R24,0
     12A E091      LDI	R25,1
     12B 91E0 0112 LDS	R30,A4
     12D 27FF      CLR	R31
     12E 0FE8      ADD	R30,R24
     12F 1FF9      ADC	R31,R25
     130 8020      LDD	R2,Z+0
     131 BA2B      OUT	0x1B,R2
(0106)      D_LE0;                    
     132 9894      CBI	0x12,4
(0107)      delay_nms(1);             
     133 E001      LDI	R16,1
     134 E010      LDI	R17,0
     135 DF76      RCALL	_delay_nms
     136 9169      LD	R22,Y+
     137 9149      LD	R20,Y+
     138 9508      RET
(0108) 
(0109) 	 
(0110) 
(0111) }
(0112) 
(0113) void adc_init()
(0114) {
(0115)   ADMUX=0x40;                              //选择通道0，数据右对齐，AVCC为电压基准
_adc_init:
     139 E480      LDI	R24,0x40
     13A B987      OUT	0x07,R24
(0116)   ADCSRA=0xF8;                             //adc使能，连续转换
     13B EF88      LDI	R24,0xF8
     13C B986      OUT	0x06,R24
(0117)   SFIOR=0x00;                              //控制和状态寄存器初始化
     13D 2422      CLR	R2
     13E BC20      OUT	0x20,R2
     13F 9508      RET
_data_do:
  temp_3               --> R12
  temp_2               --> R10
  temp_1               --> R10
  temp_dl              --> R12
  temp_dh              --> R10
     140 940E 0201 CALL	push_xgset003C
     142 0169      MOVW	R12,R18
     143 0158      MOVW	R10,R16
(0118) }
(0119) 
(0120) //*************************************************************************
(0121) //		数据处理函数
(0122) //*************************************************************************
(0123)  void data_do(uint temp_dh,uint temp_dl)
(0124)  {
(0125)      uint temp_1,temp_2,temp_3;
(0126)      temp_1=temp_dh*16*16;
     144 E100      LDI	R16,0x10
     145 E010      LDI	R17,0
     146 0195      MOVW	R18,R10
     147 940E 01E6 CALL	empy16s
     149 0198      MOVW	R18,R16
     14A E100      LDI	R16,0x10
     14B E010      LDI	R17,0
     14C 940E 01E6 CALL	empy16s
     14E 0158      MOVW	R10,R16
(0127)      temp_3=temp_1+temp_dl;
     14F 0115      MOVW	R2,R10
     150 0C2C      ADD	R2,R12
     151 1C3D      ADC	R3,R13
     152 0161      MOVW	R12,R2
(0128)      A1=temp_3/1000;                       //分出千，百，十，和个位
     153 EE28      LDI	R18,0xE8
     154 E033      LDI	R19,3
     155 0181      MOVW	R16,R2
     156 940E 01CC CALL	div16u
     158 9300 0115 STS	A1,R16
(0129)      temp_1=temp_3%1000;
     15A EE28      LDI	R18,0xE8
     15B E033      LDI	R19,3
     15C 0186      MOVW	R16,R12
     15D 940E 01CA CALL	mod16u
     15F 0158      MOVW	R10,R16
(0130)      A2=temp_1/100;
     160 E624      LDI	R18,0x64
     161 E030      LDI	R19,0
     162 940E 01CC CALL	div16u
     164 9300 0114 STS	A2,R16
(0131)      temp_2=temp_1%100;
     166 E624      LDI	R18,0x64
     167 E030      LDI	R19,0
     168 0185      MOVW	R16,R10
     169 940E 01CA CALL	mod16u
     16B 0158      MOVW	R10,R16
(0132)      A3=temp_2/10;
     16C E02A      LDI	R18,0xA
     16D E030      LDI	R19,0
     16E 940E 01CC CALL	div16u
     170 9300 0113 STS	A3,R16
(0133)      A4=temp_2%10;
     172 E02A      LDI	R18,0xA
     173 E030      LDI	R19,0
     174 0185      MOVW	R16,R10
     175 940E 01CA CALL	mod16u
     177 9300 0112 STS	A4,R16
     179 940C 01F6 JMP	pop_xgset003C
_ADC_ISR:
     17B 920A      ST	R0,-Y
     17C 921A      ST	R1,-Y
     17D 922A      ST	R2,-Y
     17E 923A      ST	R3,-Y
     17F 924A      ST	R4,-Y
     180 925A      ST	R5,-Y
     181 926A      ST	R6,-Y
     182 927A      ST	R7,-Y
     183 928A      ST	R8,-Y
     184 929A      ST	R9,-Y
     185 930A      ST	R16,-Y
     186 931A      ST	R17,-Y
     187 932A      ST	R18,-Y
     188 933A      ST	R19,-Y
     189 938A      ST	R24,-Y
     18A 939A      ST	R25,-Y
     18B 93AA      ST	R26,-Y
     18C 93BA      ST	R27,-Y
     18D 93EA      ST	R30,-Y
     18E 93FA      ST	R31,-Y
     18F B60F      IN	R0,0x3F
     190 920A      ST	R0,-Y
(0134) }
(0135) 
(0136) //*************************************************************************
(0137) //		中断服务子程序
(0138) //*************************************************************************
(0139) #pragma interrupt_handler  ADC_ISR:iv_ADC 
(0140) void ADC_ISR() 	 				  		
(0141) {                                          //ADC中断服务程序
(0142)   adc_datal=ADCL;
     191 B024      IN	R2,0x04
     192 9220 0116 STS	adc_datal,R2
(0143)   adc_datah=ADCH;                         //读取adc数据寄存器的值，8位精度
     194 B025      IN	R2,0x05
     195 9220 0117 STS	adc_datah,R2
(0144)   data_do(adc_datah,adc_datal);           //数据处理，得到BCD码
     197 9120 0116 LDS	R18,adc_datal
     199 2733      CLR	R19
     19A 2D02      MOV	R16,R2
     19B 2711      CLR	R17
     19C DFA3      RCALL	_data_do
(0145)   flag=0x01;                              //标志位置1
     19D E081      LDI	R24,1
     19E 9380 0111 STS	flag,R24
(0146)  for(j=0;j<50;j++)
     1A0 2422      CLR	R2
     1A1 9220 0110 STS	j,R2
     1A3 C006      RJMP	0x01AA
(0147)   {
(0148)      Display_ADC();           //显示adc的数据
     1A4 DF2B      RCALL	_Display_ADC
     1A5 9180 0110 LDS	R24,j
     1A7 5F8F      SUBI	R24,0xFF
     1A8 9380 0110 STS	j,R24
     1AA 9180 0110 LDS	R24,j
     1AC 3382      CPI	R24,0x32
     1AD F3B0      BCS	0x01A4
     1AE 9009      LD	R0,Y+
     1AF BE0F      OUT	0x3F,R0
     1B0 91F9      LD	R31,Y+
     1B1 91E9      LD	R30,Y+
     1B2 91B9      LD	R27,Y+
     1B3 91A9      LD	R26,Y+
     1B4 9199      LD	R25,Y+
     1B5 9189      LD	R24,Y+
     1B6 9139      LD	R19,Y+
     1B7 9129      LD	R18,Y+
     1B8 9119      LD	R17,Y+
     1B9 9109      LD	R16,Y+
     1BA 9099      LD	R9,Y+
     1BB 9089      LD	R8,Y+
     1BC 9079      LD	R7,Y+
     1BD 9069      LD	R6,Y+
     1BE 9059      LD	R5,Y+
     1BF 9049      LD	R4,Y+
     1C0 9039      LD	R3,Y+
     1C1 9029      LD	R2,Y+
     1C2 9019      LD	R1,Y+
     1C3 9009      LD	R0,Y+
     1C4 9518      RETI
(0149)   }
(0150) }
(0151) 
(0152) 
(0153) 
(0154) //*************************************************************************
(0155) //			主程序
(0156) //*************************************************************************
(0157) void main()
(0158) {
(0159)   system_init();                             //系统初始化
_main:
     1C5 DF02      RCALL	_system_init
(0160)   adc_init();                                //adc初始化配置
     1C6 DF72      RCALL	_adc_init
(0161)   SREG|=0x80;                                //开启全局中断
     1C7 9478      BSET	7
(0162)   while(1)
FILE: <library>
     1C8 CFFF      RJMP	0x01C8
     1C9 9508      RET
mod16u:
     1CA 9468      BSET	6
     1CB C001      RJMP	xdiv16u
div16u:
     1CC 94E8      BCLR	6
xdiv16u:
     1CD 92EA      ST	R14,-Y
     1CE 92FA      ST	R15,-Y
     1CF 938A      ST	R24,-Y
     1D0 24EE      CLR	R14
     1D1 24FF      CLR	R15
     1D2 E180      LDI	R24,0x10
     1D3 0F00      LSL	R16
     1D4 1F11      ROL	R17
     1D5 1CEE      ROL	R14
     1D6 1CFF      ROL	R15
     1D7 16E2      CP	R14,R18
     1D8 06F3      CPC	R15,R19
     1D9 F018      BCS	0x01DD
     1DA 1AE2      SUB	R14,R18
     1DB 0AF3      SBC	R15,R19
     1DC 9503      INC	R16
     1DD 958A      DEC	R24
     1DE F7A1      BNE	0x01D3
     1DF F416      BRTC	0x01E2
     1E0 2D0E      MOV	R16,R14
     1E1 2D1F      MOV	R17,R15
     1E2 9189      LD	R24,Y+
     1E3 90F9      LD	R15,Y+
     1E4 90E9      LD	R14,Y+
     1E5 9508      RET
empy16s:
     1E6 920A      ST	R0,-Y
     1E7 921A      ST	R1,-Y
     1E8 938A      ST	R24,-Y
     1E9 939A      ST	R25,-Y
     1EA 9F02      MUL	R16,R18
     1EB 01C0      MOVW	R24,R0
     1EC 9F12      MUL	R17,R18
     1ED 0D90      ADD	R25,R0
     1EE 9F03      MUL	R16,R19
     1EF 0D90      ADD	R25,R0
     1F0 018C      MOVW	R16,R24
     1F1 9199      LD	R25,Y+
     1F2 9189      LD	R24,Y+
     1F3 9019      LD	R1,Y+
     1F4 9009      LD	R0,Y+
     1F5 9508      RET
pop_xgset003C:
     1F6 90A9      LD	R10,Y+
     1F7 90B9      LD	R11,Y+
     1F8 90C9      LD	R12,Y+
     1F9 90D9      LD	R13,Y+
     1FA 9508      RET
push_xgsetF0FC:
     1FB 937A      ST	R23,-Y
     1FC 936A      ST	R22,-Y
push_xgset30FC:
     1FD 935A      ST	R21,-Y
     1FE 934A      ST	R20,-Y
push_xgset00FC:
     1FF 92FA      ST	R15,-Y
     200 92EA      ST	R14,-Y
push_xgset003C:
     201 92DA      ST	R13,-Y
     202 92CA      ST	R12,-Y
     203 92BA      ST	R11,-Y
     204 92AA      ST	R10,-Y
     205 9508      RET
