
MMC_SD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000140  00800100  00001c74  00001d08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000040d  00800240  00800240  00001e48  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001ee  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008aa  00000000  00000000  000020b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000038c  00000000  00000000  00002960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b2a  00000000  00000000  00002cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00003818  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d4  00000000  00000000  000039a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
       8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
       c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

0000008c <__c.1971>:
      8c:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e1       	ldi	r29, 0x10	; 16
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	12 e0       	ldi	r17, 0x02	; 2
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e4 e7       	ldi	r30, 0x74	; 116
      ac:	fc e1       	ldi	r31, 0x1C	; 28
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a0 34       	cpi	r26, 0x40	; 64
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	16 e0       	ldi	r17, 0x06	; 6
      c0:	a0 e4       	ldi	r26, 0x40	; 64
      c2:	b2 e0       	ldi	r27, 0x02	; 2
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	ad 34       	cpi	r26, 0x4D	; 77
      ca:	b1 07       	cpc	r27, r17
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	0e 94 6d 00 	call	0xda	; 0xda <main>
      d2:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <_exit>

000000d6 <__bad_interrupt>:
      d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <main>:
函数功能：主函数
操作内容：1、初始化系统时钟,内部或者外部时钟皆可
          2、调用函数,启动MMC/SD控制和FAT文件系统
*************************************************/
int main( void )
{
      da:	df 93       	push	r29
      dc:	cf 93       	push	r28
      de:	00 d0       	rcall	.+0      	; 0xe0 <main+0x6>
      e0:	00 d0       	rcall	.+0      	; 0xe2 <main+0x8>
      e2:	cd b7       	in	r28, 0x3d	; 61
      e4:	de b7       	in	r29, 0x3e	; 62
  uint16 i;
  uint8 getchar,success=0;
      e6:	19 82       	std	Y+1, r1	; 0x01

  uartInit();                 //串口初始化
      e8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uartInit>
  printf("DMAVR-128读写MMC/SD卡数据实验\n");
      ec:	87 e0       	ldi	r24, 0x07	; 7
      ee:	91 e0       	ldi	r25, 0x01	; 1
      f0:	0e 94 14 08 	call	0x1028	; 0x1028 <puts>
  printf("DMAVR-M128 初始化成功!\n");
      f4:	85 e2       	ldi	r24, 0x25	; 37
      f6:	91 e0       	ldi	r25, 0x01	; 1
      f8:	0e 94 14 08 	call	0x1028	; 0x1028 <puts>
  printf("等待初始化MMC/SD卡……\n");
      fc:	8c e3       	ldi	r24, 0x3C	; 60
      fe:	91 e0       	ldi	r25, 0x01	; 1
     100:	0e 94 14 08 	call	0x1028	; 0x1028 <puts>
     104:	1d c0       	rjmp	.+58     	; 0x140 <main+0x66>

  while (status != 0)         // 如果返回非零值，则表示出错，SD卡继续重新初始化                                           
  {
    status = initMMC();
     106:	0e 94 a4 01 	call	0x348	; 0x348 <initMMC>
     10a:	80 93 02 01 	sts	0x0102, r24
    timeout++;
     10e:	80 91 44 02 	lds	r24, 0x0244
     112:	90 91 45 02 	lds	r25, 0x0245
     116:	01 96       	adiw	r24, 0x01	; 1
     118:	90 93 45 02 	sts	0x0245, r25
     11c:	80 93 44 02 	sts	0x0244, r24
    if (timeout == 50)       //初始化50次MMC/SD卡，如果依然返回错误代码，则初始化失败，可能是没有SD卡或损坏
     120:	80 91 44 02 	lds	r24, 0x0244
     124:	90 91 45 02 	lds	r25, 0x0245
     128:	82 33       	cpi	r24, 0x32	; 50
     12a:	91 05       	cpc	r25, r1
     12c:	49 f4       	brne	.+18     	; 0x140 <main+0x66>
    {
      printf("MMC/SD卡初始化失败!\n");   //初始化失败显示
     12e:	83 e5       	ldi	r24, 0x53	; 83
     130:	91 e0       	ldi	r25, 0x01	; 1
     132:	0e 94 14 08 	call	0x1028	; 0x1028 <puts>
	  printf("请检查SD卡是否存在或者复位系统!\n");
     136:	87 e6       	ldi	r24, 0x67	; 103
     138:	91 e0       	ldi	r25, 0x01	; 1
     13a:	0e 94 14 08 	call	0x1028	; 0x1028 <puts>
     13e:	ff cf       	rjmp	.-2      	; 0x13e <main+0x64>
  uartInit();                 //串口初始化
  printf("DMAVR-128读写MMC/SD卡数据实验\n");
  printf("DMAVR-M128 初始化成功!\n");
  printf("等待初始化MMC/SD卡……\n");

  while (status != 0)         // 如果返回非零值，则表示出错，SD卡继续重新初始化                                           
     140:	80 91 02 01 	lds	r24, 0x0102
     144:	88 23       	and	r24, r24
     146:	f9 f6       	brne	.-66     	; 0x106 <main+0x2c>
	  while(1);   		
      break;                                          //50次满则退出
    }
  }
 
  printf("初始化MMC/SD卡成功!\n");                    //初始化成功显示提示信息
     148:	87 e8       	ldi	r24, 0x87	; 135
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	0e 94 14 08 	call	0x1028	; 0x1028 <puts>
 
  cardSize =  MMC_ReadCardSize();                     //从CSD寄存器读取MMC/SD卡容量大小，返回长整型
     150:	0e 94 8b 05 	call	0xb16	; 0xb16 <MMC_ReadCardSize>
     154:	dc 01       	movw	r26, r24
     156:	cb 01       	movw	r24, r22
     158:	80 93 40 02 	sts	0x0240, r24
     15c:	90 93 41 02 	sts	0x0241, r25
     160:	a0 93 42 02 	sts	0x0242, r26
     164:	b0 93 43 02 	sts	0x0243, r27
 
  printf ("卡容量=%ld字节\n",cardSize);				      //输出SD卡容量，单位:字节
     168:	20 91 40 02 	lds	r18, 0x0240
     16c:	30 91 41 02 	lds	r19, 0x0241
     170:	40 91 42 02 	lds	r20, 0x0242
     174:	50 91 43 02 	lds	r21, 0x0243
     178:	00 d0       	rcall	.+0      	; 0x17a <main+0xa0>
     17a:	00 d0       	rcall	.+0      	; 0x17c <main+0xa2>
     17c:	00 d0       	rcall	.+0      	; 0x17e <main+0xa4>
     17e:	ed b7       	in	r30, 0x3d	; 61
     180:	fe b7       	in	r31, 0x3e	; 62
     182:	31 96       	adiw	r30, 0x01	; 1
     184:	8b e9       	ldi	r24, 0x9B	; 155
     186:	91 e0       	ldi	r25, 0x01	; 1
     188:	91 83       	std	Z+1, r25	; 0x01
     18a:	80 83       	st	Z, r24
     18c:	22 83       	std	Z+2, r18	; 0x02
     18e:	33 83       	std	Z+3, r19	; 0x03
     190:	44 83       	std	Z+4, r20	; 0x04
     192:	55 83       	std	Z+5, r21	; 0x05
     194:	0e 94 f8 07 	call	0xff0	; 0xff0 <printf>
     198:	8d b7       	in	r24, 0x3d	; 61
     19a:	9e b7       	in	r25, 0x3e	; 62
     19c:	06 96       	adiw	r24, 0x06	; 6
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	f8 94       	cli
     1a2:	9e bf       	out	0x3e, r25	; 62
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	8d bf       	out	0x3d, r24	; 61

while(1)
 {
  printf("请输入要写入MMC/SD卡的字符数据!\n");
     1a8:	8b ea       	ldi	r24, 0xAB	; 171
     1aa:	91 e0       	ldi	r25, 0x01	; 1
     1ac:	0e 94 14 08 	call	0x1028	; 0x1028 <puts>
 
  scanf("%c",&getchar);                               //将从串口输入的数据写入SD卡，数据为单个字符，如a
     1b0:	00 d0       	rcall	.+0      	; 0x1b2 <main+0xd8>
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <main+0xda>
     1b4:	ed b7       	in	r30, 0x3d	; 61
     1b6:	fe b7       	in	r31, 0x3e	; 62
     1b8:	31 96       	adiw	r30, 0x01	; 1
     1ba:	8b ec       	ldi	r24, 0xCB	; 203
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	91 83       	std	Z+1, r25	; 0x01
     1c0:	80 83       	st	Z, r24
     1c2:	ce 01       	movw	r24, r28
     1c4:	04 96       	adiw	r24, 0x04	; 4
     1c6:	93 83       	std	Z+3, r25	; 0x03
     1c8:	82 83       	std	Z+2, r24	; 0x02
     1ca:	0e 94 49 08 	call	0x1092	; 0x1092 <scanf>
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	0f 90       	pop	r0
     1d4:	0f 90       	pop	r0
 
  printf("要写入的字符是： %c\n",getchar) ;
     1d6:	8c 81       	ldd	r24, Y+4	; 0x04
     1d8:	28 2f       	mov	r18, r24
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	00 d0       	rcall	.+0      	; 0x1de <main+0x104>
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <main+0x106>
     1e0:	ed b7       	in	r30, 0x3d	; 61
     1e2:	fe b7       	in	r31, 0x3e	; 62
     1e4:	31 96       	adiw	r30, 0x01	; 1
     1e6:	8e ec       	ldi	r24, 0xCE	; 206
     1e8:	91 e0       	ldi	r25, 0x01	; 1
     1ea:	91 83       	std	Z+1, r25	; 0x01
     1ec:	80 83       	st	Z, r24
     1ee:	33 83       	std	Z+3, r19	; 0x03
     1f0:	22 83       	std	Z+2, r18	; 0x02
     1f2:	0e 94 f8 07 	call	0xff0	; 0xff0 <printf>
     1f6:	0f 90       	pop	r0
     1f8:	0f 90       	pop	r0
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0

  buffer1[0]=getchar;                                 //将串口输入的数据赋予buffer1，准备写入SD卡
     1fe:	8c 81       	ldd	r24, Y+4	; 0x04
     200:	80 93 46 04 	sts	0x0446, r24

  printf("DMAVR-M128开始读写MMC/SD卡，请查看结果!\n");
     204:	83 ee       	ldi	r24, 0xE3	; 227
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	0e 94 14 08 	call	0x1028	; 0x1028 <puts>

  for(i=1;i<512;i++)
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	9b 83       	std	Y+3, r25	; 0x03
     212:	8a 83       	std	Y+2, r24	; 0x02
     214:	0d c0       	rjmp	.+26     	; 0x230 <main+0x156>
   {
    	buffer1[i]=buffer1[0];   	                  //将输入的数据填充在整个数据缓冲区buffer1
     216:	8a 81       	ldd	r24, Y+2	; 0x02
     218:	9b 81       	ldd	r25, Y+3	; 0x03
     21a:	20 91 46 04 	lds	r18, 0x0446
     21e:	fc 01       	movw	r30, r24
     220:	ea 5b       	subi	r30, 0xBA	; 186
     222:	fb 4f       	sbci	r31, 0xFB	; 251
     224:	20 83       	st	Z, r18

  buffer1[0]=getchar;                                 //将串口输入的数据赋予buffer1，准备写入SD卡

  printf("DMAVR-M128开始读写MMC/SD卡，请查看结果!\n");

  for(i=1;i<512;i++)
     226:	8a 81       	ldd	r24, Y+2	; 0x02
     228:	9b 81       	ldd	r25, Y+3	; 0x03
     22a:	01 96       	adiw	r24, 0x01	; 1
     22c:	9b 83       	std	Y+3, r25	; 0x03
     22e:	8a 83       	std	Y+2, r24	; 0x02
     230:	8a 81       	ldd	r24, Y+2	; 0x02
     232:	9b 81       	ldd	r25, Y+3	; 0x03
     234:	22 e0       	ldi	r18, 0x02	; 2
     236:	80 30       	cpi	r24, 0x00	; 0
     238:	92 07       	cpc	r25, r18
     23a:	68 f3       	brcs	.-38     	; 0x216 <main+0x13c>
   {
    	buffer1[i]=buffer1[0];   	                  //将输入的数据填充在整个数据缓冲区buffer1
    }

  mmcWriteBlock (numSector, BlockLength, buffer1);    //向指定扇区地址(numSector*512)写入数据    			  
     23c:	80 91 03 01 	lds	r24, 0x0103
     240:	90 91 04 01 	lds	r25, 0x0104
     244:	a0 91 05 01 	lds	r26, 0x0105
     248:	b0 91 06 01 	lds	r27, 0x0106
     24c:	20 91 00 01 	lds	r18, 0x0100
     250:	30 91 01 01 	lds	r19, 0x0101
     254:	e6 e4       	ldi	r30, 0x46	; 70
     256:	f4 e0       	ldi	r31, 0x04	; 4
     258:	bc 01       	movw	r22, r24
     25a:	cd 01       	movw	r24, r26
     25c:	a9 01       	movw	r20, r18
     25e:	9f 01       	movw	r18, r30
     260:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <mmcWriteBlock>

  mmcReadBlock(numSector, BlockLength, buffer2);	  //读取刚才写入空间的数据，判断是否写入成功
     264:	80 91 03 01 	lds	r24, 0x0103
     268:	90 91 04 01 	lds	r25, 0x0104
     26c:	a0 91 05 01 	lds	r26, 0x0105
     270:	b0 91 06 01 	lds	r27, 0x0106
     274:	20 91 00 01 	lds	r18, 0x0100
     278:	30 91 01 01 	lds	r19, 0x0101
     27c:	e6 e4       	ldi	r30, 0x46	; 70
     27e:	f2 e0       	ldi	r31, 0x02	; 2
     280:	bc 01       	movw	r22, r24
     282:	cd 01       	movw	r24, r26
     284:	a9 01       	movw	r20, r18
     286:	9f 01       	movw	r18, r30
     288:	0e 94 56 03 	call	0x6ac	; 0x6ac <mmcReadBlock>

 for(i=0;i<BlockLength;i++)
     28c:	1b 82       	std	Y+3, r1	; 0x03
     28e:	1a 82       	std	Y+2, r1	; 0x02
     290:	1e c0       	rjmp	.+60     	; 0x2ce <main+0x1f4>
   {
    	printf ("Data=%c \r",buffer2[i]);			  //输出从MMC/SD卡读出的数据
     292:	8a 81       	ldd	r24, Y+2	; 0x02
     294:	9b 81       	ldd	r25, Y+3	; 0x03
     296:	fc 01       	movw	r30, r24
     298:	ea 5b       	subi	r30, 0xBA	; 186
     29a:	fd 4f       	sbci	r31, 0xFD	; 253
     29c:	80 81       	ld	r24, Z
     29e:	28 2f       	mov	r18, r24
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <main+0x1ca>
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <main+0x1cc>
     2a6:	ed b7       	in	r30, 0x3d	; 61
     2a8:	fe b7       	in	r31, 0x3e	; 62
     2aa:	31 96       	adiw	r30, 0x01	; 1
     2ac:	8b e0       	ldi	r24, 0x0B	; 11
     2ae:	92 e0       	ldi	r25, 0x02	; 2
     2b0:	91 83       	std	Z+1, r25	; 0x01
     2b2:	80 83       	st	Z, r24
     2b4:	33 83       	std	Z+3, r19	; 0x03
     2b6:	22 83       	std	Z+2, r18	; 0x02
     2b8:	0e 94 f8 07 	call	0xff0	; 0xff0 <printf>
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0

  mmcWriteBlock (numSector, BlockLength, buffer1);    //向指定扇区地址(numSector*512)写入数据    			  

  mmcReadBlock(numSector, BlockLength, buffer2);	  //读取刚才写入空间的数据，判断是否写入成功

 for(i=0;i<BlockLength;i++)
     2c4:	8a 81       	ldd	r24, Y+2	; 0x02
     2c6:	9b 81       	ldd	r25, Y+3	; 0x03
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	9b 83       	std	Y+3, r25	; 0x03
     2cc:	8a 83       	std	Y+2, r24	; 0x02
     2ce:	20 91 00 01 	lds	r18, 0x0100
     2d2:	30 91 01 01 	lds	r19, 0x0101
     2d6:	8a 81       	ldd	r24, Y+2	; 0x02
     2d8:	9b 81       	ldd	r25, Y+3	; 0x03
     2da:	82 17       	cp	r24, r18
     2dc:	93 07       	cpc	r25, r19
     2de:	c8 f2       	brcs	.-78     	; 0x292 <main+0x1b8>
   {
    	printf ("Data=%c \r",buffer2[i]);			  //输出从MMC/SD卡读出的数据
   }
  printf ("\n");
     2e0:	8a e0       	ldi	r24, 0x0A	; 10
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 0d 08 	call	0x101a	; 0x101a <putchar>

 for(i=0;i<BlockLength;i++)                                   //判断读写是否成功，读出和写入数据是否一致
     2e8:	1b 82       	std	Y+3, r1	; 0x03
     2ea:	1a 82       	std	Y+2, r1	; 0x02
     2ec:	1b c0       	rjmp	.+54     	; 0x324 <main+0x24a>
 	{

 		if(buffer1[i]!=buffer2[i])                    //数据读写失败
     2ee:	8a 81       	ldd	r24, Y+2	; 0x02
     2f0:	9b 81       	ldd	r25, Y+3	; 0x03
     2f2:	fc 01       	movw	r30, r24
     2f4:	ea 5b       	subi	r30, 0xBA	; 186
     2f6:	fb 4f       	sbci	r31, 0xFB	; 251
     2f8:	20 81       	ld	r18, Z
     2fa:	8a 81       	ldd	r24, Y+2	; 0x02
     2fc:	9b 81       	ldd	r25, Y+3	; 0x03
     2fe:	fc 01       	movw	r30, r24
     300:	ea 5b       	subi	r30, 0xBA	; 186
     302:	fd 4f       	sbci	r31, 0xFD	; 253
     304:	80 81       	ld	r24, Z
     306:	28 17       	cp	r18, r24
     308:	31 f0       	breq	.+12     	; 0x316 <main+0x23c>
 			{
				printf("读写数据失败!\n");
     30a:	85 e1       	ldi	r24, 0x15	; 21
     30c:	92 e0       	ldi	r25, 0x02	; 2
     30e:	0e 94 14 08 	call	0x1028	; 0x1028 <puts>
				success=0;
     312:	19 82       	std	Y+1, r1	; 0x01
     314:	10 c0       	rjmp	.+32     	; 0x336 <main+0x25c>
				break;
 			 }
 		else success=1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	89 83       	std	Y+1, r24	; 0x01
   {
    	printf ("Data=%c \r",buffer2[i]);			  //输出从MMC/SD卡读出的数据
   }
  printf ("\n");

 for(i=0;i<BlockLength;i++)                                   //判断读写是否成功，读出和写入数据是否一致
     31a:	8a 81       	ldd	r24, Y+2	; 0x02
     31c:	9b 81       	ldd	r25, Y+3	; 0x03
     31e:	01 96       	adiw	r24, 0x01	; 1
     320:	9b 83       	std	Y+3, r25	; 0x03
     322:	8a 83       	std	Y+2, r24	; 0x02
     324:	20 91 00 01 	lds	r18, 0x0100
     328:	30 91 01 01 	lds	r19, 0x0101
     32c:	8a 81       	ldd	r24, Y+2	; 0x02
     32e:	9b 81       	ldd	r25, Y+3	; 0x03
     330:	82 17       	cp	r24, r18
     332:	93 07       	cpc	r25, r19
     334:	e0 f2       	brcs	.-72     	; 0x2ee <main+0x214>
				success=0;
				break;
 			 }
 		else success=1;
 	}
 if(success==1)  printf("读写数据成功!\n");           //数据读写成功
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	81 30       	cpi	r24, 0x01	; 1
     33a:	09 f0       	breq	.+2      	; 0x33e <main+0x264>
     33c:	35 cf       	rjmp	.-406    	; 0x1a8 <main+0xce>
     33e:	83 e2       	ldi	r24, 0x23	; 35
     340:	92 e0       	ldi	r25, 0x02	; 2
     342:	0e 94 14 08 	call	0x1028	; 0x1028 <puts>
     346:	30 cf       	rjmp	.-416    	; 0x1a8 <main+0xce>

00000348 <initMMC>:
函数功能：MMC/SD卡初始化
操作内容：1、拉高CS片选和MOSI至少74个时钟周期
          2、SPI发送10个FF
***********************************************************************/
uint8 initMMC (void)
{
     348:	df 93       	push	r29
     34a:	cf 93       	push	r28
     34c:	00 d0       	rcall	.+0      	; 0x34e <initMMC+0x6>
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
  int i;
  spiInit();                          //初始化SPI接口，准备与MMC/SD卡通信
     352:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <spiInit>
 
  MMC_CS_DDR |= (1<<MMC_CS_PIN);      //MMC/SD卡片选IO设置输出模式
     356:	a4 e6       	ldi	r26, 0x64	; 100
     358:	b0 e0       	ldi	r27, 0x00	; 0
     35a:	e4 e6       	ldi	r30, 0x64	; 100
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	80 81       	ld	r24, Z
     360:	88 60       	ori	r24, 0x08	; 8
     362:	8c 93       	st	X, r24
  CS_HIGH();                          //MMC/SD卡片选IO设置为1，拉高   
     364:	a5 e6       	ldi	r26, 0x65	; 101
     366:	b0 e0       	ldi	r27, 0x00	; 0
     368:	e5 e6       	ldi	r30, 0x65	; 101
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	80 81       	ld	r24, Z
     36e:	88 60       	ori	r24, 0x08	; 8
     370:	8c 93       	st	X, r24
 for(i=0;i<=9;i++)
     372:	1a 82       	std	Y+2, r1	; 0x02
     374:	19 82       	std	Y+1, r1	; 0x01
     376:	08 c0       	rjmp	.+16     	; 0x388 <initMMC+0x40>
  spiSendByte(0xff);                  //上电后进行一个延时，至少74个时钟周期
     378:	8f ef       	ldi	r24, 0xFF	; 255
     37a:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
  int i;
  spiInit();                          //初始化SPI接口，准备与MMC/SD卡通信
 
  MMC_CS_DDR |= (1<<MMC_CS_PIN);      //MMC/SD卡片选IO设置输出模式
  CS_HIGH();                          //MMC/SD卡片选IO设置为1，拉高   
 for(i=0;i<=9;i++)
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	9a 81       	ldd	r25, Y+2	; 0x02
     382:	01 96       	adiw	r24, 0x01	; 1
     384:	9a 83       	std	Y+2, r25	; 0x02
     386:	89 83       	std	Y+1, r24	; 0x01
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	9a 81       	ldd	r25, Y+2	; 0x02
     38c:	8a 30       	cpi	r24, 0x0A	; 10
     38e:	91 05       	cpc	r25, r1
     390:	9c f3       	brlt	.-26     	; 0x378 <initMMC+0x30>
  spiSendByte(0xff);                  //上电后进行一个延时，至少74个时钟周期
  return (mmcGoIdle());
     392:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <mmcGoIdle>
}
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	cf 91       	pop	r28
     39c:	df 91       	pop	r29
     39e:	08 95       	ret

000003a0 <mmcGoIdle>:
操作内容：1、初始化MMC/SD卡工作在SPI模式，无论MMC还是SD卡都发送CMD0进行复位
          2、判断MMC卡还是SD卡
          3、SD卡循环10次发送CMD55+ACMD41，MMC卡发送CMD1
***********************************************************************/
uint8 mmcGoIdle()
{
     3a0:	df 93       	push	r29
     3a2:	cf 93       	push	r28
     3a4:	00 d0       	rcall	.+0      	; 0x3a6 <mmcGoIdle+0x6>
     3a6:	00 d0       	rcall	.+0      	; 0x3a8 <mmcGoIdle+0x8>
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
  uint8 response=0x01;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	8b 83       	std	Y+3, r24	; 0x03
  uint8 i;
  uint8 sdcard=0x00;                               //SD卡标志位，为0表示SD卡，为1表示为MMC卡
     3b0:	19 82       	std	Y+1, r1	; 0x01
  CS_LOW();                                        //选中MMC/SD卡，拉低片选，进入SPI模式，默认为MMC/SD模式
     3b2:	a5 e6       	ldi	r26, 0x65	; 101
     3b4:	b0 e0       	ldi	r27, 0x00	; 0
     3b6:	e5 e6       	ldi	r30, 0x65	; 101
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	87 7f       	andi	r24, 0xF7	; 247
     3be:	8c 93       	st	X, r24
  mmcSendCmd(MMC_GO_IDLE_STATE,0,0x95);            //发送CMD0，复位MMC/SD卡，0x95为CRC值
     3c0:	80 e4       	ldi	r24, 0x40	; 64
     3c2:	40 e0       	ldi	r20, 0x00	; 0
     3c4:	50 e0       	ldi	r21, 0x00	; 0
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	70 e0       	ldi	r23, 0x00	; 0
     3ca:	25 e9       	ldi	r18, 0x95	; 149
     3cc:	0e 94 7d 04 	call	0x8fa	; 0x8fa <mmcSendCmd>

  if(mmcGetResponse()!=0x01)                       //CMD0命令的返回值为0x01则继续下一个命令
     3d0:	0e 94 56 02 	call	0x4ac	; 0x4ac <mmcGetResponse>
     3d4:	81 30       	cpi	r24, 0x01	; 1
     3d6:	09 f4       	brne	.+2      	; 0x3da <mmcGoIdle+0x3a>
     3d8:	52 c0       	rjmp	.+164    	; 0x47e <mmcGoIdle+0xde>
    return MMC_INIT_ERROR;
     3da:	84 e0       	ldi	r24, 0x04	; 4
     3dc:	8c 83       	std	Y+4, r24	; 0x04
     3de:	5e c0       	rjmp	.+188    	; 0x49c <mmcGoIdle+0xfc>

  while(response==0x01)
  {
    CS_HIGH();
     3e0:	a5 e6       	ldi	r26, 0x65	; 101
     3e2:	b0 e0       	ldi	r27, 0x00	; 0
     3e4:	e5 e6       	ldi	r30, 0x65	; 101
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	80 81       	ld	r24, Z
     3ea:	88 60       	ori	r24, 0x08	; 8
     3ec:	8c 93       	st	X, r24
    spiSendByte(0xff);
     3ee:	8f ef       	ldi	r24, 0xFF	; 255
     3f0:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
    CS_LOW();
     3f4:	a5 e6       	ldi	r26, 0x65	; 101
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	e5 e6       	ldi	r30, 0x65	; 101
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	80 81       	ld	r24, Z
     3fe:	87 7f       	andi	r24, 0xF7	; 247
     400:	8c 93       	st	X, r24
  if(sdcard==0x00)                                //先识别是否为SD卡，发送SD卡命令CMD55+ACMD41
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	88 23       	and	r24, r24
     406:	71 f5       	brne	.+92     	; 0x464 <mmcGoIdle+0xc4>
  {
   for(i=0;i<10;i++)                              //循环10次，如果为SD卡，一般2次即可正确返回0x00
     408:	1a 82       	std	Y+2, r1	; 0x02
     40a:	27 c0       	rjmp	.+78     	; 0x45a <mmcGoIdle+0xba>
   {
    mmcSendCmd(SD_APP_COND,0x00,0xff);            //发送SD卡CMD55命令，接下来应用激活初始化命令ACMD41
     40c:	87 e7       	ldi	r24, 0x77	; 119
     40e:	40 e0       	ldi	r20, 0x00	; 0
     410:	50 e0       	ldi	r21, 0x00	; 0
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	2f ef       	ldi	r18, 0xFF	; 255
     418:	0e 94 7d 04 	call	0x8fa	; 0x8fa <mmcSendCmd>
    while(mmcGetResponse()!=0x01);                //返回值为0x01，则表示处于空闲状态，再发ACMD41命令
     41c:	0e 94 56 02 	call	0x4ac	; 0x4ac <mmcGetResponse>
     420:	81 30       	cpi	r24, 0x01	; 1
     422:	e1 f7       	brne	.-8      	; 0x41c <mmcGoIdle+0x7c>
    
    mmcSendCmd(SD_APP_OP_COND,0x00,0xff);         //发送ACMD41命令，激活初始化
     424:	89 e6       	ldi	r24, 0x69	; 105
     426:	40 e0       	ldi	r20, 0x00	; 0
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	2f ef       	ldi	r18, 0xFF	; 255
     430:	0e 94 7d 04 	call	0x8fa	; 0x8fa <mmcSendCmd>
    if(mmcGetResponse()==0x00)                    //返回值为0x00，则初始化成功，否则使用MMC命令CMD1继续初始化
     434:	0e 94 56 02 	call	0x4ac	; 0x4ac <mmcGetResponse>
     438:	88 23       	and	r24, r24
     43a:	61 f4       	brne	.+24     	; 0x454 <mmcGoIdle+0xb4>
     {
      CS_HIGH();
     43c:	a5 e6       	ldi	r26, 0x65	; 101
     43e:	b0 e0       	ldi	r27, 0x00	; 0
     440:	e5 e6       	ldi	r30, 0x65	; 101
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	80 81       	ld	r24, Z
     446:	88 60       	ori	r24, 0x08	; 8
     448:	8c 93       	st	X, r24
      spiSendByte(0xff);
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
      return (MMC_SUCCESS);                       //返回初始化成功代码
     450:	1c 82       	std	Y+4, r1	; 0x04
     452:	24 c0       	rjmp	.+72     	; 0x49c <mmcGoIdle+0xfc>
    CS_HIGH();
    spiSendByte(0xff);
    CS_LOW();
  if(sdcard==0x00)                                //先识别是否为SD卡，发送SD卡命令CMD55+ACMD41
  {
   for(i=0;i<10;i++)                              //循环10次，如果为SD卡，一般2次即可正确返回0x00
     454:	8a 81       	ldd	r24, Y+2	; 0x02
     456:	8f 5f       	subi	r24, 0xFF	; 255
     458:	8a 83       	std	Y+2, r24	; 0x02
     45a:	8a 81       	ldd	r24, Y+2	; 0x02
     45c:	8a 30       	cpi	r24, 0x0A	; 10
     45e:	b0 f2       	brcs	.-84     	; 0x40c <mmcGoIdle+0x6c>
      CS_HIGH();
      spiSendByte(0xff);
      return (MMC_SUCCESS);                       //返回初始化成功代码
     }
   }
   sdcard=0x01;                                   //为1表示SD卡命令无效，卡为MMC卡，准备下面发送CMD1命令
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	89 83       	std	Y+1, r24	; 0x01
  }
    response=0x01;                                //准备发送MMC卡命令CMD1
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	8b 83       	std	Y+3, r24	; 0x03
    mmcSendCmd(MMC_SEND_OP_COND,0x00,0xff);       //发送MMC卡CMD1命令，成功则返回0x00
     468:	81 e4       	ldi	r24, 0x41	; 65
     46a:	40 e0       	ldi	r20, 0x00	; 0
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	2f ef       	ldi	r18, 0xFF	; 255
     474:	0e 94 7d 04 	call	0x8fa	; 0x8fa <mmcSendCmd>
    response=mmcGetResponse();                    //返回值为0x00，则表示MMC卡初始化成功
     478:	0e 94 56 02 	call	0x4ac	; 0x4ac <mmcGetResponse>
     47c:	8b 83       	std	Y+3, r24	; 0x03
  mmcSendCmd(MMC_GO_IDLE_STATE,0,0x95);            //发送CMD0，复位MMC/SD卡，0x95为CRC值

  if(mmcGetResponse()!=0x01)                       //CMD0命令的返回值为0x01则继续下一个命令
    return MMC_INIT_ERROR;

  while(response==0x01)
     47e:	8b 81       	ldd	r24, Y+3	; 0x03
     480:	81 30       	cpi	r24, 0x01	; 1
     482:	09 f4       	brne	.+2      	; 0x486 <mmcGoIdle+0xe6>
     484:	ad cf       	rjmp	.-166    	; 0x3e0 <mmcGoIdle+0x40>
    response=0x01;                                //准备发送MMC卡命令CMD1
    mmcSendCmd(MMC_SEND_OP_COND,0x00,0xff);       //发送MMC卡CMD1命令，成功则返回0x00
    response=mmcGetResponse();                    //返回值为0x00，则表示MMC卡初始化成功
  }
  
  CS_HIGH();                                      //MMC/SD卡片选无效
     486:	a5 e6       	ldi	r26, 0x65	; 101
     488:	b0 e0       	ldi	r27, 0x00	; 0
     48a:	e5 e6       	ldi	r30, 0x65	; 101
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	80 81       	ld	r24, Z
     490:	88 60       	ori	r24, 0x08	; 8
     492:	8c 93       	st	X, r24
  spiSendByte(0xff);
     494:	8f ef       	ldi	r24, 0xFF	; 255
     496:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
  return (MMC_SUCCESS);                           //返回初始化成功代码
     49a:	1c 82       	std	Y+4, r1	; 0x04
     49c:	8c 81       	ldd	r24, Y+4	; 0x04
}
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	cf 91       	pop	r28
     4a8:	df 91       	pop	r29
     4aa:	08 95       	ret

000004ac <mmcGetResponse>:
操作内容：1、SPI模式下响应值长度1~8bytes，参考SD卡手册关于响应值的描述
          2、响应值最高位总是为0，紧跟着为错误代码
          3、如果响应值为FF，则表示命令无效或超时
***********************************************************************/
uint8 mmcGetResponse(void)
{
     4ac:	df 93       	push	r29
     4ae:	cf 93       	push	r28
     4b0:	00 d0       	rcall	.+0      	; 0x4b2 <mmcGetResponse+0x6>
     4b2:	0f 92       	push	r0
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
  int i=0;
     4b8:	1b 82       	std	Y+3, r1	; 0x03
     4ba:	1a 82       	std	Y+2, r1	; 0x02
     4bc:	0f c0       	rjmp	.+30     	; 0x4dc <mmcGetResponse+0x30>
  uint8 response;

  while(i<=64)
  {
    response=spiSendByte(0xff);
     4be:	8f ef       	ldi	r24, 0xFF	; 255
     4c0:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     4c4:	89 83       	std	Y+1, r24	; 0x01
    if(response==0x00)break;
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	88 23       	and	r24, r24
     4ca:	69 f0       	breq	.+26     	; 0x4e6 <mmcGetResponse+0x3a>
    if(response==0x01)break;
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
     4ce:	81 30       	cpi	r24, 0x01	; 1
     4d0:	51 f0       	breq	.+20     	; 0x4e6 <mmcGetResponse+0x3a>
    i++;
     4d2:	8a 81       	ldd	r24, Y+2	; 0x02
     4d4:	9b 81       	ldd	r25, Y+3	; 0x03
     4d6:	01 96       	adiw	r24, 0x01	; 1
     4d8:	9b 83       	std	Y+3, r25	; 0x03
     4da:	8a 83       	std	Y+2, r24	; 0x02
uint8 mmcGetResponse(void)
{
  int i=0;
  uint8 response;

  while(i<=64)
     4dc:	8a 81       	ldd	r24, Y+2	; 0x02
     4de:	9b 81       	ldd	r25, Y+3	; 0x03
     4e0:	81 34       	cpi	r24, 0x41	; 65
     4e2:	91 05       	cpc	r25, r1
     4e4:	64 f3       	brlt	.-40     	; 0x4be <mmcGetResponse+0x12>
    response=spiSendByte(0xff);
    if(response==0x00)break;
    if(response==0x01)break;
    i++;
  }
  return response;
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
}
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	cf 91       	pop	r28
     4f0:	df 91       	pop	r29
     4f2:	08 95       	ret

000004f4 <mmcGetXXResponse>:
          2、响应值最高位总是为0，紧跟着为错误代码
          3、响应之前，数据一直为0xff
***********************************************************************/

uint8 mmcGetXXResponse(uint8 resp)
{
     4f4:	df 93       	push	r29
     4f6:	cf 93       	push	r28
     4f8:	00 d0       	rcall	.+0      	; 0x4fa <mmcGetXXResponse+0x6>
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <mmcGetXXResponse+0x8>
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	8c 83       	std	Y+4, r24	; 0x04
  int i=0;
     502:	1b 82       	std	Y+3, r1	; 0x03
     504:	1a 82       	std	Y+2, r1	; 0x02
     506:	0d c0       	rjmp	.+26     	; 0x522 <mmcGetXXResponse+0x2e>
  uint8 response;

  while(i<=1000)
  {
    response=spiSendByte(0xff);
     508:	8f ef       	ldi	r24, 0xFF	; 255
     50a:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     50e:	89 83       	std	Y+1, r24	; 0x01
    if(response==resp)break;
     510:	99 81       	ldd	r25, Y+1	; 0x01
     512:	8c 81       	ldd	r24, Y+4	; 0x04
     514:	98 17       	cp	r25, r24
     516:	59 f0       	breq	.+22     	; 0x52e <mmcGetXXResponse+0x3a>
    i++;
     518:	8a 81       	ldd	r24, Y+2	; 0x02
     51a:	9b 81       	ldd	r25, Y+3	; 0x03
     51c:	01 96       	adiw	r24, 0x01	; 1
     51e:	9b 83       	std	Y+3, r25	; 0x03
     520:	8a 83       	std	Y+2, r24	; 0x02
uint8 mmcGetXXResponse(uint8 resp)
{
  int i=0;
  uint8 response;

  while(i<=1000)
     522:	8a 81       	ldd	r24, Y+2	; 0x02
     524:	9b 81       	ldd	r25, Y+3	; 0x03
     526:	23 e0       	ldi	r18, 0x03	; 3
     528:	89 3e       	cpi	r24, 0xE9	; 233
     52a:	92 07       	cpc	r25, r18
     52c:	6c f3       	brlt	.-38     	; 0x508 <mmcGetXXResponse+0x14>
  {
    response=spiSendByte(0xff);
    if(response==resp)break;
    i++;
  }
  return response;
     52e:	89 81       	ldd	r24, Y+1	; 0x01
}
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	cf 91       	pop	r28
     53a:	df 91       	pop	r29
     53c:	08 95       	ret

0000053e <mmcCheckBusy>:
          3、如果响应值为FF，则表示命令无效或超时
          4、进行数据块写入的时候，写入数据后都会有响应值，定义了错误代码
***********************************************************************/

uint8 mmcCheckBusy(void)
{
     53e:	df 93       	push	r29
     540:	cf 93       	push	r28
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	27 97       	sbiw	r28, 0x07	; 7
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61

  int i=0;
     552:	1c 82       	std	Y+4, r1	; 0x04
     554:	1b 82       	std	Y+3, r1	; 0x03
     556:	2d c0       	rjmp	.+90     	; 0x5b2 <mmcCheckBusy+0x74>

  uint8 response;
  uint8 rvalue;
  while(i<=64)
  {
    response=spiSendByte(0xff);
     558:	8f ef       	ldi	r24, 0xFF	; 255
     55a:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     55e:	8a 83       	std	Y+2, r24	; 0x02
    response &= 0x1f;
     560:	8a 81       	ldd	r24, Y+2	; 0x02
     562:	8f 71       	andi	r24, 0x1F	; 31
     564:	8a 83       	std	Y+2, r24	; 0x02
    switch(response)
     566:	8a 81       	ldd	r24, Y+2	; 0x02
     568:	28 2f       	mov	r18, r24
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	3f 83       	std	Y+7, r19	; 0x07
     56e:	2e 83       	std	Y+6, r18	; 0x06
     570:	8e 81       	ldd	r24, Y+6	; 0x06
     572:	9f 81       	ldd	r25, Y+7	; 0x07
     574:	8b 3e       	cpi	r24, 0xEB	; 235
     576:	91 05       	cpc	r25, r1
     578:	61 f0       	breq	.+24     	; 0x592 <mmcCheckBusy+0x54>
     57a:	2e 81       	ldd	r18, Y+6	; 0x06
     57c:	3f 81       	ldd	r19, Y+7	; 0x07
     57e:	2d 3e       	cpi	r18, 0xED	; 237
     580:	31 05       	cpc	r19, r1
     582:	51 f0       	breq	.+20     	; 0x598 <mmcCheckBusy+0x5a>
     584:	8e 81       	ldd	r24, Y+6	; 0x06
     586:	9f 81       	ldd	r25, Y+7	; 0x07
     588:	85 3e       	cpi	r24, 0xE5	; 229
     58a:	91 05       	cpc	r25, r1
     58c:	41 f4       	brne	.+16     	; 0x59e <mmcCheckBusy+0x60>
    {
      case 0xe5: rvalue=MMC_SUCCESS;break;      //表示MMC/SD卡正确成功接收数据
     58e:	19 82       	std	Y+1, r1	; 0x01
     590:	08 c0       	rjmp	.+16     	; 0x5a2 <mmcCheckBusy+0x64>
      case 0xeb: return(MMC_CRC_ERROR);         //表示CRC校验错误，数据被拒绝
     592:	90 e1       	ldi	r25, 0x10	; 16
     594:	9d 83       	std	Y+5, r25	; 0x05
     596:	22 c0       	rjmp	.+68     	; 0x5dc <mmcCheckBusy+0x9e>
      case 0xed: return(MMC_WRITE_ERROR);       //表示MMC/SD卡写错误，数据被拒绝
     598:	21 e1       	ldi	r18, 0x11	; 17
     59a:	2d 83       	std	Y+5, r18	; 0x05
     59c:	1f c0       	rjmp	.+62     	; 0x5dc <mmcCheckBusy+0x9e>
      default:
        rvalue = MMC_OTHER_ERROR;               //其他错误
     59e:	82 e1       	ldi	r24, 0x12	; 18
     5a0:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    if(rvalue==MMC_SUCCESS)break;
     5a2:	89 81       	ldd	r24, Y+1	; 0x01
     5a4:	88 23       	and	r24, r24
     5a6:	51 f0       	breq	.+20     	; 0x5bc <mmcCheckBusy+0x7e>
    i++;
     5a8:	8b 81       	ldd	r24, Y+3	; 0x03
     5aa:	9c 81       	ldd	r25, Y+4	; 0x04
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	9c 83       	std	Y+4, r25	; 0x04
     5b0:	8b 83       	std	Y+3, r24	; 0x03

  int i=0;

  uint8 response;
  uint8 rvalue;
  while(i<=64)
     5b2:	8b 81       	ldd	r24, Y+3	; 0x03
     5b4:	9c 81       	ldd	r25, Y+4	; 0x04
     5b6:	81 34       	cpi	r24, 0x41	; 65
     5b8:	91 05       	cpc	r25, r1
     5ba:	74 f2       	brlt	.-100    	; 0x558 <mmcCheckBusy+0x1a>
        break;
    }
    if(rvalue==MMC_SUCCESS)break;
    i++;
  }
  i=0;
     5bc:	1c 82       	std	Y+4, r1	; 0x04
     5be:	1b 82       	std	Y+3, r1	; 0x03
  do
  {
    response=spiSendByte(0xff);
     5c0:	8f ef       	ldi	r24, 0xFF	; 255
     5c2:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     5c6:	8a 83       	std	Y+2, r24	; 0x02
    i++;
     5c8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ca:	9c 81       	ldd	r25, Y+4	; 0x04
     5cc:	01 96       	adiw	r24, 0x01	; 1
     5ce:	9c 83       	std	Y+4, r25	; 0x04
     5d0:	8b 83       	std	Y+3, r24	; 0x03
  }while(response==0);
     5d2:	8a 81       	ldd	r24, Y+2	; 0x02
     5d4:	88 23       	and	r24, r24
     5d6:	a1 f3       	breq	.-24     	; 0x5c0 <mmcCheckBusy+0x82>
  return response;
     5d8:	3a 81       	ldd	r19, Y+2	; 0x02
     5da:	3d 83       	std	Y+5, r19	; 0x05
     5dc:	8d 81       	ldd	r24, Y+5	; 0x05
}
     5de:	27 96       	adiw	r28, 0x07	; 7
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	de bf       	out	0x3e, r29	; 62
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	cd bf       	out	0x3d, r28	; 61
     5ea:	cf 91       	pop	r28
     5ec:	df 91       	pop	r29
     5ee:	08 95       	ret

000005f0 <mmcEreaseBlock>:
		  2、数据擦除需要设定块区间，没有直接全盘擦除命令
          3、数据后面是16位CRC值
		  4、块大小要大于512个字节，擦除后数据可能是0x00或0xff
***********************************************************************/
uint8 mmcEreaseBlock(uint32 Sector)
{
     5f0:	df 93       	push	r29
     5f2:	cf 93       	push	r28
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <mmcEreaseBlock+0x6>
     5f6:	00 d0       	rcall	.+0      	; 0x5f8 <mmcEreaseBlock+0x8>
     5f8:	0f 92       	push	r0
     5fa:	cd b7       	in	r28, 0x3d	; 61
     5fc:	de b7       	in	r29, 0x3e	; 62
     5fe:	6a 83       	std	Y+2, r22	; 0x02
     600:	7b 83       	std	Y+3, r23	; 0x03
     602:	8c 83       	std	Y+4, r24	; 0x04
     604:	9d 83       	std	Y+5, r25	; 0x05
	uint8 response=0x01;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	89 83       	std	Y+1, r24	; 0x01

    CS_LOW ();
     60a:	a5 e6       	ldi	r26, 0x65	; 101
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e5 e6       	ldi	r30, 0x65	; 101
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	80 81       	ld	r24, Z
     614:	87 7f       	andi	r24, 0xF7	; 247
     616:	8c 93       	st	X, r24
	
	mmcSendCmd(MMC_TAG_SECTOR_START,Sector*512,0xff);         //需要擦除的起始地址
     618:	8a 81       	ldd	r24, Y+2	; 0x02
     61a:	9b 81       	ldd	r25, Y+3	; 0x03
     61c:	ac 81       	ldd	r26, Y+4	; 0x04
     61e:	bd 81       	ldd	r27, Y+5	; 0x05
     620:	9c 01       	movw	r18, r24
     622:	ad 01       	movw	r20, r26
     624:	01 2e       	mov	r0, r17
     626:	19 e0       	ldi	r17, 0x09	; 9
     628:	22 0f       	add	r18, r18
     62a:	33 1f       	adc	r19, r19
     62c:	44 1f       	adc	r20, r20
     62e:	55 1f       	adc	r21, r21
     630:	1a 95       	dec	r17
     632:	d1 f7       	brne	.-12     	; 0x628 <mmcEreaseBlock+0x38>
     634:	10 2d       	mov	r17, r0
     636:	80 e6       	ldi	r24, 0x60	; 96
     638:	ba 01       	movw	r22, r20
     63a:	a9 01       	movw	r20, r18
     63c:	2f ef       	ldi	r18, 0xFF	; 255
     63e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <mmcSendCmd>

	mmcSendCmd(MMC_TAG_SECTOR_END,(Sector+1)*512,0xff);       //需要擦除的结束地址
     642:	8a 81       	ldd	r24, Y+2	; 0x02
     644:	9b 81       	ldd	r25, Y+3	; 0x03
     646:	ac 81       	ldd	r26, Y+4	; 0x04
     648:	bd 81       	ldd	r27, Y+5	; 0x05
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	a1 1d       	adc	r26, r1
     64e:	b1 1d       	adc	r27, r1
     650:	9c 01       	movw	r18, r24
     652:	ad 01       	movw	r20, r26
     654:	01 2e       	mov	r0, r17
     656:	19 e0       	ldi	r17, 0x09	; 9
     658:	22 0f       	add	r18, r18
     65a:	33 1f       	adc	r19, r19
     65c:	44 1f       	adc	r20, r20
     65e:	55 1f       	adc	r21, r21
     660:	1a 95       	dec	r17
     662:	d1 f7       	brne	.-12     	; 0x658 <mmcEreaseBlock+0x68>
     664:	10 2d       	mov	r17, r0
     666:	81 e6       	ldi	r24, 0x61	; 97
     668:	ba 01       	movw	r22, r20
     66a:	a9 01       	movw	r20, r18
     66c:	2f ef       	ldi	r18, 0xFF	; 255
     66e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <mmcSendCmd>

	mmcSendCmd(MMC_EREASE,0x00,0xff);                         //发送块擦除命令，使用CMD38命令    
     672:	86 e6       	ldi	r24, 0x66	; 102
     674:	40 e0       	ldi	r20, 0x00	; 0
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	2f ef       	ldi	r18, 0xFF	; 255
     67e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <mmcSendCmd>
 
  while(mmcGetResponse()!=0);
     682:	0e 94 56 02 	call	0x4ac	; 0x4ac <mmcGetResponse>
     686:	88 23       	and	r24, r24
     688:	e1 f7       	brne	.-8      	; 0x682 <mmcEreaseBlock+0x92>

    response=0;
     68a:	19 82       	std	Y+1, r1	; 0x01
  
	CS_HIGH();
     68c:	a5 e6       	ldi	r26, 0x65	; 101
     68e:	b0 e0       	ldi	r27, 0x00	; 0
     690:	e5 e6       	ldi	r30, 0x65	; 101
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	80 81       	ld	r24, Z
     696:	88 60       	ori	r24, 0x08	; 8
     698:	8c 93       	st	X, r24
	
	return response;
     69a:	89 81       	ldd	r24, Y+1	; 0x01
}
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	cf 91       	pop	r28
     6a8:	df 91       	pop	r29
     6aa:	08 95       	ret

000006ac <mmcReadBlock>:
		  2、块大小可以设置，若为512，可以认为是一个标准扇区大小
          3、数据后面是16位CRC值
***********************************************************************/

uint8 mmcReadBlock(uint32 address, uint16 count, uint8 *pBuffer)
{
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	df 93       	push	r29
     6b2:	cf 93       	push	r28
     6b4:	cd b7       	in	r28, 0x3d	; 61
     6b6:	de b7       	in	r29, 0x3e	; 62
     6b8:	2d 97       	sbiw	r28, 0x0d	; 13
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	f8 94       	cli
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	cd bf       	out	0x3d, r28	; 61
     6c4:	6e 83       	std	Y+6, r22	; 0x06
     6c6:	7f 83       	std	Y+7, r23	; 0x07
     6c8:	88 87       	std	Y+8, r24	; 0x08
     6ca:	99 87       	std	Y+9, r25	; 0x09
     6cc:	5b 87       	std	Y+11, r21	; 0x0b
     6ce:	4a 87       	std	Y+10, r20	; 0x0a
     6d0:	3d 87       	std	Y+13, r19	; 0x0d
     6d2:	2c 87       	std	Y+12, r18	; 0x0c
  unsigned long i = 0;
     6d4:	1a 82       	std	Y+2, r1	; 0x02
     6d6:	1b 82       	std	Y+3, r1	; 0x03
     6d8:	1c 82       	std	Y+4, r1	; 0x04
     6da:	1d 82       	std	Y+5, r1	; 0x05
  uint8 rvalue = MMC_RESPONSE_ERROR;
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	89 83       	std	Y+1, r24	; 0x01

  if (mmcSetBlockLength (count) == MMC_SUCCESS)  //设置MMC/SD卡块长度,全局变量BlockLength
     6e0:	8a 85       	ldd	r24, Y+10	; 0x0a
     6e2:	9b 85       	ldd	r25, Y+11	; 0x0b
     6e4:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <mmcSetBlockLength>
     6e8:	88 23       	and	r24, r24
     6ea:	09 f0       	breq	.+2      	; 0x6ee <mmcReadBlock+0x42>
     6ec:	5d c0       	rjmp	.+186    	; 0x7a8 <mmcReadBlock+0xfc>
  {

    CS_LOW ();
     6ee:	a5 e6       	ldi	r26, 0x65	; 101
     6f0:	b0 e0       	ldi	r27, 0x00	; 0
     6f2:	e5 e6       	ldi	r30, 0x65	; 101
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	80 81       	ld	r24, Z
     6f8:	87 7f       	andi	r24, 0xF7	; 247
     6fa:	8c 93       	st	X, r24

    mmcSendCmd (MMC_READ_SINGLE_BLOCK,address*512, 0xFF); //发送读单块操作命令CMD17，实际地址是扇区号numSector*512
     6fc:	8e 81       	ldd	r24, Y+6	; 0x06
     6fe:	9f 81       	ldd	r25, Y+7	; 0x07
     700:	a8 85       	ldd	r26, Y+8	; 0x08
     702:	b9 85       	ldd	r27, Y+9	; 0x09
     704:	9c 01       	movw	r18, r24
     706:	ad 01       	movw	r20, r26
     708:	01 2e       	mov	r0, r17
     70a:	19 e0       	ldi	r17, 0x09	; 9
     70c:	22 0f       	add	r18, r18
     70e:	33 1f       	adc	r19, r19
     710:	44 1f       	adc	r20, r20
     712:	55 1f       	adc	r21, r21
     714:	1a 95       	dec	r17
     716:	d1 f7       	brne	.-12     	; 0x70c <mmcReadBlock+0x60>
     718:	10 2d       	mov	r17, r0
     71a:	81 e5       	ldi	r24, 0x51	; 81
     71c:	ba 01       	movw	r22, r20
     71e:	a9 01       	movw	r20, r18
     720:	2f ef       	ldi	r18, 0xFF	; 255
     722:	0e 94 7d 04 	call	0x8fa	; 0x8fa <mmcSendCmd>
    if (mmcGetResponse() == 0x00)                         //返回值为00，表示发送命令被成功接收
     726:	0e 94 56 02 	call	0x4ac	; 0x4ac <mmcGetResponse>
     72a:	88 23       	and	r24, r24
     72c:	d1 f5       	brne	.+116    	; 0x7a2 <mmcReadBlock+0xf6>
    {
      if (mmcGetXXResponse(MMC_START_DATA_BLOCK_TOKEN) == MMC_START_DATA_BLOCK_TOKEN) //接收数据包开始标志，为0xfe
     72e:	8e ef       	ldi	r24, 0xFE	; 254
     730:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <mmcGetXXResponse>
     734:	8e 3f       	cpi	r24, 0xFE	; 254
     736:	91 f5       	brne	.+100    	; 0x79c <mmcReadBlock+0xf0>
      {
        for (i = 0; i < count; i++)
     738:	1a 82       	std	Y+2, r1	; 0x02
     73a:	1b 82       	std	Y+3, r1	; 0x03
     73c:	1c 82       	std	Y+4, r1	; 0x04
     73e:	1d 82       	std	Y+5, r1	; 0x05
     740:	17 c0       	rjmp	.+46     	; 0x770 <mmcReadBlock+0xc4>
          pBuffer[i] = spiSendByte(0xff);   // 接收读出的数据
     742:	2a 81       	ldd	r18, Y+2	; 0x02
     744:	3b 81       	ldd	r19, Y+3	; 0x03
     746:	8c 85       	ldd	r24, Y+12	; 0x0c
     748:	9d 85       	ldd	r25, Y+13	; 0x0d
     74a:	8c 01       	movw	r16, r24
     74c:	02 0f       	add	r16, r18
     74e:	13 1f       	adc	r17, r19
     750:	8f ef       	ldi	r24, 0xFF	; 255
     752:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     756:	f8 01       	movw	r30, r16
     758:	80 83       	st	Z, r24
    mmcSendCmd (MMC_READ_SINGLE_BLOCK,address*512, 0xFF); //发送读单块操作命令CMD17，实际地址是扇区号numSector*512
    if (mmcGetResponse() == 0x00)                         //返回值为00，表示发送命令被成功接收
    {
      if (mmcGetXXResponse(MMC_START_DATA_BLOCK_TOKEN) == MMC_START_DATA_BLOCK_TOKEN) //接收数据包开始标志，为0xfe
      {
        for (i = 0; i < count; i++)
     75a:	8a 81       	ldd	r24, Y+2	; 0x02
     75c:	9b 81       	ldd	r25, Y+3	; 0x03
     75e:	ac 81       	ldd	r26, Y+4	; 0x04
     760:	bd 81       	ldd	r27, Y+5	; 0x05
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	a1 1d       	adc	r26, r1
     766:	b1 1d       	adc	r27, r1
     768:	8a 83       	std	Y+2, r24	; 0x02
     76a:	9b 83       	std	Y+3, r25	; 0x03
     76c:	ac 83       	std	Y+4, r26	; 0x04
     76e:	bd 83       	std	Y+5, r27	; 0x05
     770:	8a 85       	ldd	r24, Y+10	; 0x0a
     772:	9b 85       	ldd	r25, Y+11	; 0x0b
     774:	9c 01       	movw	r18, r24
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	8a 81       	ldd	r24, Y+2	; 0x02
     77c:	9b 81       	ldd	r25, Y+3	; 0x03
     77e:	ac 81       	ldd	r26, Y+4	; 0x04
     780:	bd 81       	ldd	r27, Y+5	; 0x05
     782:	82 17       	cp	r24, r18
     784:	93 07       	cpc	r25, r19
     786:	a4 07       	cpc	r26, r20
     788:	b5 07       	cpc	r27, r21
     78a:	d8 f2       	brcs	.-74     	; 0x742 <mmcReadBlock+0x96>
          pBuffer[i] = spiSendByte(0xff);   // 接收读出的数据

        spiSendByte(0xff);                  //16位CRC值
     78c:	8f ef       	ldi	r24, 0xFF	; 255
     78e:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
        spiSendByte(0xff);                  //16位CRC值，不是真正的CRC值，这里忽略，但是实际数据后面跟16位CRC值
     792:	8f ef       	ldi	r24, 0xFF	; 255
     794:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
        rvalue = MMC_SUCCESS;               //接收成功，返回成功代码
     798:	19 82       	std	Y+1, r1	; 0x01
     79a:	08 c0       	rjmp	.+16     	; 0x7ac <mmcReadBlock+0x100>
      }
      else
      {
        rvalue = MMC_DATA_TOKEN_ERROR;      // 如果没有收到数据包的开始标志，则返回错误代码
     79c:	83 e0       	ldi	r24, 0x03	; 3
     79e:	89 83       	std	Y+1, r24	; 0x01
     7a0:	05 c0       	rjmp	.+10     	; 0x7ac <mmcReadBlock+0x100>
      }
    }
    else
    {
      rvalue = MMC_RESPONSE_ERROR;          //返回命令未成功接收错误代码
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	89 83       	std	Y+1, r24	; 0x01
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <mmcReadBlock+0x100>
    }
  }
  else
  {
    rvalue = MMC_BLOCK_SET_ERROR;           //返回卡块长度设置失败错误代码
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	89 83       	std	Y+1, r24	; 0x01
  }
  CS_HIGH ();
     7ac:	a5 e6       	ldi	r26, 0x65	; 101
     7ae:	b0 e0       	ldi	r27, 0x00	; 0
     7b0:	e5 e6       	ldi	r30, 0x65	; 101
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	80 81       	ld	r24, Z
     7b6:	88 60       	ori	r24, 0x08	; 8
     7b8:	8c 93       	st	X, r24
  spiSendByte(0xff);
     7ba:	8f ef       	ldi	r24, 0xFF	; 255
     7bc:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
  return rvalue;                            //返回读取函数代码
     7c0:	89 81       	ldd	r24, Y+1	; 0x01
}
     7c2:	2d 96       	adiw	r28, 0x0d	; 13
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	f8 94       	cli
     7c8:	de bf       	out	0x3e, r29	; 62
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	cd bf       	out	0x3d, r28	; 61
     7ce:	cf 91       	pop	r28
     7d0:	df 91       	pop	r29
     7d2:	1f 91       	pop	r17
     7d4:	0f 91       	pop	r16
     7d6:	08 95       	ret

000007d8 <mmcWriteBlock>:
		  2、块大小可以设置，若为512，可以认为是一个标准扇区大小
          3、数据后面是16位CRC值
***********************************************************************/

uint8 mmcWriteBlock(uint32 address, uint16 count, uint8 *pBuffer)
{
     7d8:	df 93       	push	r29
     7da:	cf 93       	push	r28
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
     7e0:	2d 97       	sbiw	r28, 0x0d	; 13
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	6e 83       	std	Y+6, r22	; 0x06
     7ee:	7f 83       	std	Y+7, r23	; 0x07
     7f0:	88 87       	std	Y+8, r24	; 0x08
     7f2:	99 87       	std	Y+9, r25	; 0x09
     7f4:	5b 87       	std	Y+11, r21	; 0x0b
     7f6:	4a 87       	std	Y+10, r20	; 0x0a
     7f8:	3d 87       	std	Y+13, r19	; 0x0d
     7fa:	2c 87       	std	Y+12, r18	; 0x0c
  unsigned long i = 0;
     7fc:	1a 82       	std	Y+2, r1	; 0x02
     7fe:	1b 82       	std	Y+3, r1	; 0x03
     800:	1c 82       	std	Y+4, r1	; 0x04
     802:	1d 82       	std	Y+5, r1	; 0x05
  uint8 rvalue = MMC_RESPONSE_ERROR;         
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01

  if (mmcSetBlockLength (count) == MMC_SUCCESS)    //设置MMC/SD块的长度，全局变量BlockLength
     808:	8a 85       	ldd	r24, Y+10	; 0x0a
     80a:	9b 85       	ldd	r25, Y+11	; 0x0b
     80c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <mmcSetBlockLength>
     810:	88 23       	and	r24, r24
     812:	09 f0       	breq	.+2      	; 0x816 <mmcWriteBlock+0x3e>
     814:	5c c0       	rjmp	.+184    	; 0x8ce <mmcWriteBlock+0xf6>
  {
    CS_LOW ();									   //拉低片选信号，多个卡，选择需要操作的片选拉低
     816:	a5 e6       	ldi	r26, 0x65	; 101
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	e5 e6       	ldi	r30, 0x65	; 101
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	80 81       	ld	r24, Z
     820:	87 7f       	andi	r24, 0xF7	; 247
     822:	8c 93       	st	X, r24
    mmcSendCmd (MMC_WRITE_BLOCK,address*512, 0xFF);//发送单块写数据命令CMD24，地址为扇区numSector*512
     824:	8e 81       	ldd	r24, Y+6	; 0x06
     826:	9f 81       	ldd	r25, Y+7	; 0x07
     828:	a8 85       	ldd	r26, Y+8	; 0x08
     82a:	b9 85       	ldd	r27, Y+9	; 0x09
     82c:	9c 01       	movw	r18, r24
     82e:	ad 01       	movw	r20, r26
     830:	01 2e       	mov	r0, r17
     832:	19 e0       	ldi	r17, 0x09	; 9
     834:	22 0f       	add	r18, r18
     836:	33 1f       	adc	r19, r19
     838:	44 1f       	adc	r20, r20
     83a:	55 1f       	adc	r21, r21
     83c:	1a 95       	dec	r17
     83e:	d1 f7       	brne	.-12     	; 0x834 <mmcWriteBlock+0x5c>
     840:	10 2d       	mov	r17, r0
     842:	88 e5       	ldi	r24, 0x58	; 88
     844:	ba 01       	movw	r22, r20
     846:	a9 01       	movw	r20, r18
     848:	2f ef       	ldi	r18, 0xFF	; 255
     84a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <mmcSendCmd>

    if (mmcGetXXResponse(MMC_R1_RESPONSE) == MMC_R1_RESPONSE) //收到返回值，检查MMC/SD卡是否正确接收命令
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <mmcGetXXResponse>
     854:	88 23       	and	r24, r24
     856:	c1 f5       	brne	.+112    	; 0x8c8 <mmcWriteBlock+0xf0>
    {
      spiSendByte(0xff);
     858:	8f ef       	ldi	r24, 0xFF	; 255
     85a:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
      spiSendByte(0xfe);                           //发送数据起始标志0xfe，表示接下来是数据包，一个块长度的数据
     85e:	8e ef       	ldi	r24, 0xFE	; 254
     860:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>

      for (i = 0; i < count; i++)                  //写一个块长度的数据到MMC/SD卡
     864:	1a 82       	std	Y+2, r1	; 0x02
     866:	1b 82       	std	Y+3, r1	; 0x03
     868:	1c 82       	std	Y+4, r1	; 0x04
     86a:	1d 82       	std	Y+5, r1	; 0x05
     86c:	15 c0       	rjmp	.+42     	; 0x898 <mmcWriteBlock+0xc0>
        spiSendByte(pBuffer[i]);            
     86e:	2a 81       	ldd	r18, Y+2	; 0x02
     870:	3b 81       	ldd	r19, Y+3	; 0x03
     872:	8c 85       	ldd	r24, Y+12	; 0x0c
     874:	9d 85       	ldd	r25, Y+13	; 0x0d
     876:	fc 01       	movw	r30, r24
     878:	e2 0f       	add	r30, r18
     87a:	f3 1f       	adc	r31, r19
     87c:	80 81       	ld	r24, Z
     87e:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
    if (mmcGetXXResponse(MMC_R1_RESPONSE) == MMC_R1_RESPONSE) //收到返回值，检查MMC/SD卡是否正确接收命令
    {
      spiSendByte(0xff);
      spiSendByte(0xfe);                           //发送数据起始标志0xfe，表示接下来是数据包，一个块长度的数据

      for (i = 0; i < count; i++)                  //写一个块长度的数据到MMC/SD卡
     882:	8a 81       	ldd	r24, Y+2	; 0x02
     884:	9b 81       	ldd	r25, Y+3	; 0x03
     886:	ac 81       	ldd	r26, Y+4	; 0x04
     888:	bd 81       	ldd	r27, Y+5	; 0x05
     88a:	01 96       	adiw	r24, 0x01	; 1
     88c:	a1 1d       	adc	r26, r1
     88e:	b1 1d       	adc	r27, r1
     890:	8a 83       	std	Y+2, r24	; 0x02
     892:	9b 83       	std	Y+3, r25	; 0x03
     894:	ac 83       	std	Y+4, r26	; 0x04
     896:	bd 83       	std	Y+5, r27	; 0x05
     898:	8a 85       	ldd	r24, Y+10	; 0x0a
     89a:	9b 85       	ldd	r25, Y+11	; 0x0b
     89c:	9c 01       	movw	r18, r24
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	8a 81       	ldd	r24, Y+2	; 0x02
     8a4:	9b 81       	ldd	r25, Y+3	; 0x03
     8a6:	ac 81       	ldd	r26, Y+4	; 0x04
     8a8:	bd 81       	ldd	r27, Y+5	; 0x05
     8aa:	82 17       	cp	r24, r18
     8ac:	93 07       	cpc	r25, r19
     8ae:	a4 07       	cpc	r26, r20
     8b0:	b5 07       	cpc	r27, r21
     8b2:	e8 f2       	brcs	.-70     	; 0x86e <mmcWriteBlock+0x96>
        spiSendByte(pBuffer[i]);            

      spiSendByte(0xff);                           //传送16位CRC值，不是必须的，可以不用些真实CRC值
     8b4:	8f ef       	ldi	r24, 0xFF	; 255
     8b6:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
      spiSendByte(0xff);
     8ba:	8f ef       	ldi	r24, 0xFF	; 255
     8bc:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
      mmcCheckBusy();                              //MMC/SD卡判忙，返回参数参考对应函数，这里不存取
     8c0:	0e 94 9f 02 	call	0x53e	; 0x53e <mmcCheckBusy>
      rvalue = MMC_SUCCESS;                        //操作成功
     8c4:	19 82       	std	Y+1, r1	; 0x01
     8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <mmcWriteBlock+0xfa>
    }
    else
    {
      rvalue = MMC_RESPONSE_ERROR;   			   //接收命令失败，返回错误代码
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	89 83       	std	Y+1, r24	; 0x01
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <mmcWriteBlock+0xfa>
    }
  }
  else
  {
    rvalue = MMC_BLOCK_SET_ERROR;                  //设置块长度失败，返回错误代码
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	89 83       	std	Y+1, r24	; 0x01
  }

  CS_HIGH ();                                      //拉高片选，释放SD卡
     8d2:	a5 e6       	ldi	r26, 0x65	; 101
     8d4:	b0 e0       	ldi	r27, 0x00	; 0
     8d6:	e5 e6       	ldi	r30, 0x65	; 101
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	80 81       	ld	r24, Z
     8dc:	88 60       	ori	r24, 0x08	; 8
     8de:	8c 93       	st	X, r24
  spiSendByte(0xff);                               //小延时
     8e0:	8f ef       	ldi	r24, 0xFF	; 255
     8e2:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
  return rvalue;                                   //函数状态返回值
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
} 
     8e8:	2d 96       	adiw	r28, 0x0d	; 13
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	cf 91       	pop	r28
     8f6:	df 91       	pop	r29
     8f8:	08 95       	ret

000008fa <mmcSendCmd>:
操作内容：1、发送整个长度为48位的MMC/SD卡命令
		  2、实际命令长度是6位，48位中还包括命令的参数，不同命令参数不同
***********************************************************************/

void mmcSendCmd (uint8 cmd, uint32 data, uint8 crc)
{
     8fa:	df 93       	push	r29
     8fc:	cf 93       	push	r28
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
     902:	2f 97       	sbiw	r28, 0x0f	; 15
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	cd bf       	out	0x3d, r28	; 61
     90e:	8a 87       	std	Y+10, r24	; 0x0a
     910:	4b 87       	std	Y+11, r20	; 0x0b
     912:	5c 87       	std	Y+12, r21	; 0x0c
     914:	6d 87       	std	Y+13, r22	; 0x0d
     916:	7e 87       	std	Y+14, r23	; 0x0e
     918:	2f 87       	std	Y+15, r18	; 0x0f
  uint8 frame[6];                                  //MMC/SD卡命令长度为48位,6个字节
  uint8 temp;
  int i;
  frame[0]=(cmd|0x40);                             //命令格式中最高的两位为01，对于单字节来说，"或"上0x40
     91a:	8a 85       	ldd	r24, Y+10	; 0x0a
     91c:	80 64       	ori	r24, 0x40	; 64
     91e:	8c 83       	std	Y+4, r24	; 0x04
  for(i=3;i>=0;i--)                                //4个字节长度的参数，或没有，或为地址，不同命令下参数不同
     920:	83 e0       	ldi	r24, 0x03	; 3
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	9a 83       	std	Y+2, r25	; 0x02
     926:	89 83       	std	Y+1, r24	; 0x01
     928:	27 c0       	rjmp	.+78     	; 0x978 <mmcSendCmd+0x7e>
  	{
    	temp=(uint8)(data>>(8*i));
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	9a 81       	ldd	r25, Y+2	; 0x02
     92e:	9c 01       	movw	r18, r24
     930:	22 0f       	add	r18, r18
     932:	33 1f       	adc	r19, r19
     934:	22 0f       	add	r18, r18
     936:	33 1f       	adc	r19, r19
     938:	22 0f       	add	r18, r18
     93a:	33 1f       	adc	r19, r19
     93c:	8b 85       	ldd	r24, Y+11	; 0x0b
     93e:	9c 85       	ldd	r25, Y+12	; 0x0c
     940:	ad 85       	ldd	r26, Y+13	; 0x0d
     942:	be 85       	ldd	r27, Y+14	; 0x0e
     944:	04 c0       	rjmp	.+8      	; 0x94e <mmcSendCmd+0x54>
     946:	b6 95       	lsr	r27
     948:	a7 95       	ror	r26
     94a:	97 95       	ror	r25
     94c:	87 95       	ror	r24
     94e:	2a 95       	dec	r18
     950:	d2 f7       	brpl	.-12     	; 0x946 <mmcSendCmd+0x4c>
     952:	8b 83       	std	Y+3, r24	; 0x03
    	frame[4-i]=(temp);
     954:	24 e0       	ldi	r18, 0x04	; 4
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	89 81       	ldd	r24, Y+1	; 0x01
     95a:	9a 81       	ldd	r25, Y+2	; 0x02
     95c:	28 1b       	sub	r18, r24
     95e:	39 0b       	sbc	r19, r25
     960:	ce 01       	movw	r24, r28
     962:	04 96       	adiw	r24, 0x04	; 4
     964:	fc 01       	movw	r30, r24
     966:	e2 0f       	add	r30, r18
     968:	f3 1f       	adc	r31, r19
     96a:	8b 81       	ldd	r24, Y+3	; 0x03
     96c:	80 83       	st	Z, r24
{
  uint8 frame[6];                                  //MMC/SD卡命令长度为48位,6个字节
  uint8 temp;
  int i;
  frame[0]=(cmd|0x40);                             //命令格式中最高的两位为01，对于单字节来说，"或"上0x40
  for(i=3;i>=0;i--)                                //4个字节长度的参数，或没有，或为地址，不同命令下参数不同
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	9a 81       	ldd	r25, Y+2	; 0x02
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	9a 83       	std	Y+2, r25	; 0x02
     976:	89 83       	std	Y+1, r24	; 0x01
     978:	89 81       	ldd	r24, Y+1	; 0x01
     97a:	9a 81       	ldd	r25, Y+2	; 0x02
     97c:	99 23       	and	r25, r25
     97e:	ac f6       	brge	.-86     	; 0x92a <mmcSendCmd+0x30>
  	{
    	temp=(uint8)(data>>(8*i));
    	frame[4-i]=(temp);
  	}
  frame[5]=(crc);                                  //1个字节的CRC值
     980:	8f 85       	ldd	r24, Y+15	; 0x0f
     982:	89 87       	std	Y+9, r24	; 0x09
  for(i=0;i<6;i++)
     984:	1a 82       	std	Y+2, r1	; 0x02
     986:	19 82       	std	Y+1, r1	; 0x01
     988:	0f c0       	rjmp	.+30     	; 0x9a8 <mmcSendCmd+0xae>
    	spiSendByte(frame[i]);                     //传送命令
     98a:	29 81       	ldd	r18, Y+1	; 0x01
     98c:	3a 81       	ldd	r19, Y+2	; 0x02
     98e:	ce 01       	movw	r24, r28
     990:	04 96       	adiw	r24, 0x04	; 4
     992:	fc 01       	movw	r30, r24
     994:	e2 0f       	add	r30, r18
     996:	f3 1f       	adc	r31, r19
     998:	80 81       	ld	r24, Z
     99a:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
  	{
    	temp=(uint8)(data>>(8*i));
    	frame[4-i]=(temp);
  	}
  frame[5]=(crc);                                  //1个字节的CRC值
  for(i=0;i<6;i++)
     99e:	89 81       	ldd	r24, Y+1	; 0x01
     9a0:	9a 81       	ldd	r25, Y+2	; 0x02
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	9a 83       	std	Y+2, r25	; 0x02
     9a6:	89 83       	std	Y+1, r24	; 0x01
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	9a 81       	ldd	r25, Y+2	; 0x02
     9ac:	86 30       	cpi	r24, 0x06	; 6
     9ae:	91 05       	cpc	r25, r1
     9b0:	64 f3       	brlt	.-40     	; 0x98a <mmcSendCmd+0x90>
    	spiSendByte(frame[i]);                     //传送命令
}
     9b2:	2f 96       	adiw	r28, 0x0f	; 15
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	cd bf       	out	0x3d, r28	; 61
     9be:	cf 91       	pop	r28
     9c0:	df 91       	pop	r29
     9c2:	08 95       	ret

000009c4 <mmcSetBlockLength>:
操作内容：1、设置块长度，必须为2^n大小，一般为512
		  2、对于RAM小的单片机，可以定义小的块长度，这样节省数据空间
***********************************************************************/

uint8 mmcSetBlockLength (uint16 blocklength)
{
     9c4:	df 93       	push	r29
     9c6:	cf 93       	push	r28
     9c8:	00 d0       	rcall	.+0      	; 0x9ca <mmcSetBlockLength+0x6>
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
     9ce:	9a 83       	std	Y+2, r25	; 0x02
     9d0:	89 83       	std	Y+1, r24	; 0x01

  CS_LOW ();                                       //选中SD卡片选信号
     9d2:	a5 e6       	ldi	r26, 0x65	; 101
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	e5 e6       	ldi	r30, 0x65	; 101
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	80 81       	ld	r24, Z
     9dc:	87 7f       	andi	r24, 0xF7	; 247
     9de:	8c 93       	st	X, r24
  mmcSendCmd(MMC_SET_BLOCKLEN, blocklength, 0xFF); //传送设置块长度命令CMD16
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	9a 81       	ldd	r25, Y+2	; 0x02
     9e4:	9c 01       	movw	r18, r24
     9e6:	40 e0       	ldi	r20, 0x00	; 0
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	80 e5       	ldi	r24, 0x50	; 80
     9ec:	ba 01       	movw	r22, r20
     9ee:	a9 01       	movw	r20, r18
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	0e 94 7d 04 	call	0x8fa	; 0x8fa <mmcSendCmd>
  if(mmcGetResponse()!=0x00)                       //命令传送不成功，则重新复位MMC/SD卡，然后重新设置
     9f6:	0e 94 56 02 	call	0x4ac	; 0x4ac <mmcGetResponse>
     9fa:	88 23       	and	r24, r24
     9fc:	79 f0       	breq	.+30     	; 0xa1c <mmcSetBlockLength+0x58>
  	{ 
  		initMMC();
     9fe:	0e 94 a4 01 	call	0x348	; 0x348 <initMMC>
    	mmcSendCmd(MMC_SET_BLOCKLEN, blocklength, 0xFF);
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	9a 81       	ldd	r25, Y+2	; 0x02
     a06:	9c 01       	movw	r18, r24
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	50 e0       	ldi	r21, 0x00	; 0
     a0c:	80 e5       	ldi	r24, 0x50	; 80
     a0e:	ba 01       	movw	r22, r20
     a10:	a9 01       	movw	r20, r18
     a12:	2f ef       	ldi	r18, 0xFF	; 255
     a14:	0e 94 7d 04 	call	0x8fa	; 0x8fa <mmcSendCmd>
    	mmcGetResponse();
     a18:	0e 94 56 02 	call	0x4ac	; 0x4ac <mmcGetResponse>
  	}

  CS_HIGH ();                                      //释放MMC/SD卡
     a1c:	a5 e6       	ldi	r26, 0x65	; 101
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	e5 e6       	ldi	r30, 0x65	; 101
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	88 60       	ori	r24, 0x08	; 8
     a28:	8c 93       	st	X, r24
 
  spiSendByte(0xff);                               //8个时钟的延时
     a2a:	8f ef       	ldi	r24, 0xFF	; 255
     a2c:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>

  return MMC_SUCCESS;                              //返回操作成功命令
     a30:	80 e0       	ldi	r24, 0x00	; 0
} 
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	cf 91       	pop	r28
     a38:	df 91       	pop	r29
     a3a:	08 95       	ret

00000a3c <mmcReadRegister>:
操作内容：1、CSD和CID寄存器记录了卡的相关信息
		  2、可以通过CSD卡获取卡的容量
***********************************************************************/

uint8 mmcReadRegister (uint8 cmd_register, uint8 length, uint8 *pBuffer)
{
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	df 93       	push	r29
     a42:	cf 93       	push	r28
     a44:	00 d0       	rcall	.+0      	; 0xa46 <mmcReadRegister+0xa>
     a46:	00 d0       	rcall	.+0      	; 0xa48 <mmcReadRegister+0xc>
     a48:	00 d0       	rcall	.+0      	; 0xa4a <mmcReadRegister+0xe>
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	8b 83       	std	Y+3, r24	; 0x03
     a50:	6c 83       	std	Y+4, r22	; 0x04
     a52:	5e 83       	std	Y+6, r21	; 0x06
     a54:	4d 83       	std	Y+5, r20	; 0x05
  uint8 i = 0;
     a56:	1a 82       	std	Y+2, r1	; 0x02
  uint8 rvalue = MMC_TIMEOUT_ERROR;
     a58:	8f ef       	ldi	r24, 0xFF	; 255
     a5a:	89 83       	std	Y+1, r24	; 0x01

  if (mmcSetBlockLength (length) == MMC_SUCCESS)   //设置块长度
     a5c:	8c 81       	ldd	r24, Y+4	; 0x04
     a5e:	88 2f       	mov	r24, r24
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <mmcSetBlockLength>
     a66:	88 23       	and	r24, r24
     a68:	09 f0       	breq	.+2      	; 0xa6c <mmcReadRegister+0x30>
     a6a:	42 c0       	rjmp	.+132    	; 0xaf0 <mmcReadRegister+0xb4>
  {
    CS_LOW ();
     a6c:	a5 e6       	ldi	r26, 0x65	; 101
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	e5 e6       	ldi	r30, 0x65	; 101
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	80 81       	ld	r24, Z
     a76:	87 7f       	andi	r24, 0xF7	; 247
     a78:	8c 93       	st	X, r24

    mmcSendCmd(cmd_register, 0x00, 0xff);          //发送对寄存器操作命令
     a7a:	8b 81       	ldd	r24, Y+3	; 0x03
     a7c:	40 e0       	ldi	r20, 0x00	; 0
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	2f ef       	ldi	r18, 0xFF	; 255
     a86:	0e 94 7d 04 	call	0x8fa	; 0x8fa <mmcSendCmd>

    if (mmcGetResponse() == 0x00)                  //返回成功代码
     a8a:	0e 94 56 02 	call	0x4ac	; 0x4ac <mmcGetResponse>
     a8e:	88 23       	and	r24, r24
     a90:	19 f5       	brne	.+70     	; 0xad8 <mmcReadRegister+0x9c>
    {
      if (mmcGetXXResponse(MMC_START_DATA_BLOCK_TOKEN)==MMC_START_DATA_BLOCK_TOKEN) //数据起始标志位，0xfe
     a92:	8e ef       	ldi	r24, 0xFE	; 254
     a94:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <mmcGetXXResponse>
     a98:	8e 3f       	cpi	r24, 0xFE	; 254
     a9a:	b1 f4       	brne	.+44     	; 0xac8 <mmcReadRegister+0x8c>
        for (i = 0; i < length; i++)
     a9c:	1a 82       	std	Y+2, r1	; 0x02
     a9e:	10 c0       	rjmp	.+32     	; 0xac0 <mmcReadRegister+0x84>
          pBuffer[i] = spiSendByte(0xff);          //读取数据，即寄存器的值
     aa0:	8a 81       	ldd	r24, Y+2	; 0x02
     aa2:	28 2f       	mov	r18, r24
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	8d 81       	ldd	r24, Y+5	; 0x05
     aa8:	9e 81       	ldd	r25, Y+6	; 0x06
     aaa:	8c 01       	movw	r16, r24
     aac:	02 0f       	add	r16, r18
     aae:	13 1f       	adc	r17, r19
     ab0:	8f ef       	ldi	r24, 0xFF	; 255
     ab2:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     ab6:	f8 01       	movw	r30, r16
     ab8:	80 83       	st	Z, r24
    mmcSendCmd(cmd_register, 0x00, 0xff);          //发送对寄存器操作命令

    if (mmcGetResponse() == 0x00)                  //返回成功代码
    {
      if (mmcGetXXResponse(MMC_START_DATA_BLOCK_TOKEN)==MMC_START_DATA_BLOCK_TOKEN) //数据起始标志位，0xfe
        for (i = 0; i < length; i++)
     aba:	8a 81       	ldd	r24, Y+2	; 0x02
     abc:	8f 5f       	subi	r24, 0xFF	; 255
     abe:	8a 83       	std	Y+2, r24	; 0x02
     ac0:	9a 81       	ldd	r25, Y+2	; 0x02
     ac2:	8c 81       	ldd	r24, Y+4	; 0x04
     ac4:	98 17       	cp	r25, r24
     ac6:	60 f3       	brcs	.-40     	; 0xaa0 <mmcReadRegister+0x64>
          pBuffer[i] = spiSendByte(0xff);          //读取数据，即寄存器的值
      spiSendByte(0xff);                           //16位CRC值，不是必须的
     ac8:	8f ef       	ldi	r24, 0xFF	; 255
     aca:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
      spiSendByte(0xff);
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
      rvalue = MMC_SUCCESS;                        //返回成功代码
     ad4:	19 82       	std	Y+1, r1	; 0x01
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <mmcReadRegister+0xa0>
    }
    else
      rvalue = MMC_RESPONSE_ERROR;                 //操作命令不成功，返回错误代码
     ad8:	82 e0       	ldi	r24, 0x02	; 2
     ada:	89 83       	std	Y+1, r24	; 0x01

    CS_HIGH ();                                    //释放MMC/SD卡
     adc:	a5 e6       	ldi	r26, 0x65	; 101
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	e5 e6       	ldi	r30, 0x65	; 101
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	80 81       	ld	r24, Z
     ae6:	88 60       	ori	r24, 0x08	; 8
     ae8:	8c 93       	st	X, r24

    spiSendByte(0xff);							   //延时8个时钟周期
     aea:	8f ef       	ldi	r24, 0xFF	; 255
     aec:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
  }
  CS_HIGH ();                                      //释放MMC/SD卡
     af0:	a5 e6       	ldi	r26, 0x65	; 101
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	e5 e6       	ldi	r30, 0x65	; 101
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	80 81       	ld	r24, Z
     afa:	88 60       	ori	r24, 0x08	; 8
     afc:	8c 93       	st	X, r24
  return rvalue;                                   //返回状态值
     afe:	89 81       	ldd	r24, Y+1	; 0x01
} 
     b00:	26 96       	adiw	r28, 0x06	; 6
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	cf 91       	pop	r28
     b0e:	df 91       	pop	r29
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	08 95       	ret

00000b16 <MMC_ReadCardSize>:
		  2、根据容量计算公式获取容量大小
		  3、容量大小为用户使用空间大小，不包括保护区
***********************************************************************/

uint32 MMC_ReadCardSize(void)
{
     b16:	df 93       	push	r29
     b18:	cf 93       	push	r28
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	60 97       	sbiw	r28, 0x10	; 16
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61

  uint32 MMC_CardSize;
  uint16 i, j,b,response,mmc_C_SIZE=0;     
     b2a:	1c 82       	std	Y+4, r1	; 0x04
     b2c:	1b 82       	std	Y+3, r1	; 0x03

  uint8 mmc_READ_BL_LEN=0;         				  //块大小
     b2e:	1a 82       	std	Y+2, r1	; 0x02
  uint8 mmc_C_SIZE_MULT=0;         				  //乘数大小
     b30:	19 82       	std	Y+1, r1	; 0x01

  CS_LOW ();
     b32:	a5 e6       	ldi	r26, 0x65	; 101
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	e5 e6       	ldi	r30, 0x65	; 101
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	87 7f       	andi	r24, 0xF7	; 247
     b3e:	8c 93       	st	X, r24
  
  mmcSendCmd(MMC_READ_CSD, 0x00, 0xff);			  //发送读取CSD寄存器命令CMD9
     b40:	89 e4       	ldi	r24, 0x49	; 73
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	2f ef       	ldi	r18, 0xFF	; 255
     b4c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <mmcSendCmd>

  response = mmcGetResponse();
     b50:	0e 94 56 02 	call	0x4ac	; 0x4ac <mmcGetResponse>
     b54:	88 2f       	mov	r24, r24
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	9e 83       	std	Y+6, r25	; 0x06
     b5a:	8d 83       	std	Y+5, r24	; 0x05

  b = spiSendByte(0xFF);                          //读取返回值，数据开始标志总是0xfe
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     b62:	88 2f       	mov	r24, r24
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	98 87       	std	Y+8, r25	; 0x08
     b68:	8f 83       	std	Y+7, r24	; 0x07

  if( !response )
     b6a:	8d 81       	ldd	r24, Y+5	; 0x05
     b6c:	9e 81       	ldd	r25, Y+6	; 0x06
     b6e:	00 97       	sbiw	r24, 0x00	; 0
     b70:	09 f0       	breq	.+2      	; 0xb74 <MMC_ReadCardSize+0x5e>
     b72:	aa c0       	rjmp	.+340    	; 0xcc8 <MMC_ReadCardSize+0x1b2>
     b74:	07 c0       	rjmp	.+14     	; 0xb84 <MMC_ReadCardSize+0x6e>
  {
    while (b != 0xfe) b = spiSendByte(0xff);      //等待接收到数据起始标志位
     b76:	8f ef       	ldi	r24, 0xFF	; 255
     b78:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     b7c:	88 2f       	mov	r24, r24
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	98 87       	std	Y+8, r25	; 0x08
     b82:	8f 83       	std	Y+7, r24	; 0x07
     b84:	8f 81       	ldd	r24, Y+7	; 0x07
     b86:	98 85       	ldd	r25, Y+8	; 0x08
     b88:	8e 3f       	cpi	r24, 0xFE	; 254
     b8a:	91 05       	cpc	r25, r1
     b8c:	a1 f7       	brne	.-24     	; 0xb76 <MMC_ReadCardSize+0x60>

    for(j=5; j>0; j--)                            //前5个字节的数据不用，Bit[127:88]
     b8e:	85 e0       	ldi	r24, 0x05	; 5
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	9a 87       	std	Y+10, r25	; 0x0a
     b94:	89 87       	std	Y+9, r24	; 0x09
     b96:	0c c0       	rjmp	.+24     	; 0xbb0 <MMC_ReadCardSize+0x9a>
      b = spiSendByte(0xff);
     b98:	8f ef       	ldi	r24, 0xFF	; 255
     b9a:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	98 87       	std	Y+8, r25	; 0x08
     ba4:	8f 83       	std	Y+7, r24	; 0x07

  if( !response )
  {
    while (b != 0xfe) b = spiSendByte(0xff);      //等待接收到数据起始标志位

    for(j=5; j>0; j--)                            //前5个字节的数据不用，Bit[127:88]
     ba6:	89 85       	ldd	r24, Y+9	; 0x09
     ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	9a 87       	std	Y+10, r25	; 0x0a
     bae:	89 87       	std	Y+9, r24	; 0x09
     bb0:	89 85       	ldd	r24, Y+9	; 0x09
     bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb4:	00 97       	sbiw	r24, 0x00	; 0
     bb6:	81 f7       	brne	.-32     	; 0xb98 <MMC_ReadCardSize+0x82>
      b = spiSendByte(0xff);

    b =spiSendByte(0xff);                         
     bb8:	8f ef       	ldi	r24, 0xFF	; 255
     bba:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     bbe:	88 2f       	mov	r24, r24
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	98 87       	std	Y+8, r25	; 0x08
     bc4:	8f 83       	std	Y+7, r24	; 0x07
    mmc_READ_BL_LEN = b & 0x0F;                   //Bit[83:80]记录了块大小，参考CSD寄存器相关说明
     bc6:	8f 81       	ldd	r24, Y+7	; 0x07
     bc8:	8f 70       	andi	r24, 0x0F	; 15
     bca:	8a 83       	std	Y+2, r24	; 0x02

    b = spiSendByte(0xff);
     bcc:	8f ef       	ldi	r24, 0xFF	; 255
     bce:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     bd2:	88 2f       	mov	r24, r24
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	98 87       	std	Y+8, r25	; 0x08
     bd8:	8f 83       	std	Y+7, r24	; 0x07

    mmc_C_SIZE = (b & 0x03) << 10;               //Bit[73:62]记录了C_SIZE的大小，参考CSD寄存器说明
     bda:	8f 81       	ldd	r24, Y+7	; 0x07
     bdc:	98 85       	ldd	r25, Y+8	; 0x08
     bde:	83 70       	andi	r24, 0x03	; 3
     be0:	90 70       	andi	r25, 0x00	; 0
     be2:	98 2f       	mov	r25, r24
     be4:	88 27       	eor	r24, r24
     be6:	99 0f       	add	r25, r25
     be8:	99 0f       	add	r25, r25
     bea:	9c 83       	std	Y+4, r25	; 0x04
     bec:	8b 83       	std	Y+3, r24	; 0x03
    b = spiSendByte(0xff);
     bee:	8f ef       	ldi	r24, 0xFF	; 255
     bf0:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     bf4:	88 2f       	mov	r24, r24
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	98 87       	std	Y+8, r25	; 0x08
     bfa:	8f 83       	std	Y+7, r24	; 0x07
    mmc_C_SIZE += b << 2;
     bfc:	8f 81       	ldd	r24, Y+7	; 0x07
     bfe:	98 85       	ldd	r25, Y+8	; 0x08
     c00:	9c 01       	movw	r18, r24
     c02:	22 0f       	add	r18, r18
     c04:	33 1f       	adc	r19, r19
     c06:	22 0f       	add	r18, r18
     c08:	33 1f       	adc	r19, r19
     c0a:	8b 81       	ldd	r24, Y+3	; 0x03
     c0c:	9c 81       	ldd	r25, Y+4	; 0x04
     c0e:	82 0f       	add	r24, r18
     c10:	93 1f       	adc	r25, r19
     c12:	9c 83       	std	Y+4, r25	; 0x04
     c14:	8b 83       	std	Y+3, r24	; 0x03
    b = spiSendByte(0xff);
     c16:	8f ef       	ldi	r24, 0xFF	; 255
     c18:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     c1c:	88 2f       	mov	r24, r24
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	98 87       	std	Y+8, r25	; 0x08
     c22:	8f 83       	std	Y+7, r24	; 0x07
    mmc_C_SIZE += b >> 6;
     c24:	8f 81       	ldd	r24, Y+7	; 0x07
     c26:	98 85       	ldd	r25, Y+8	; 0x08
     c28:	9c 01       	movw	r18, r24
     c2a:	00 24       	eor	r0, r0
     c2c:	22 0f       	add	r18, r18
     c2e:	33 1f       	adc	r19, r19
     c30:	00 1c       	adc	r0, r0
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	00 1c       	adc	r0, r0
     c38:	23 2f       	mov	r18, r19
     c3a:	30 2d       	mov	r19, r0
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	9c 81       	ldd	r25, Y+4	; 0x04
     c40:	82 0f       	add	r24, r18
     c42:	93 1f       	adc	r25, r19
     c44:	9c 83       	std	Y+4, r25	; 0x04
     c46:	8b 83       	std	Y+3, r24	; 0x03

    b = spiSendByte(0xff);
     c48:	8f ef       	ldi	r24, 0xFF	; 255
     c4a:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     c4e:	88 2f       	mov	r24, r24
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	98 87       	std	Y+8, r25	; 0x08
     c54:	8f 83       	std	Y+7, r24	; 0x07


    mmc_C_SIZE_MULT = (b & 0x03) << 1;           //Bit[49:47]记录了乘数的大小
     c56:	8f 81       	ldd	r24, Y+7	; 0x07
     c58:	83 70       	andi	r24, 0x03	; 3
     c5a:	88 0f       	add	r24, r24
     c5c:	89 83       	std	Y+1, r24	; 0x01
    b = spiSendByte(0xff);
     c5e:	8f ef       	ldi	r24, 0xFF	; 255
     c60:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     c64:	88 2f       	mov	r24, r24
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	98 87       	std	Y+8, r25	; 0x08
     c6a:	8f 83       	std	Y+7, r24	; 0x07
    mmc_C_SIZE_MULT += b >> 7;
     c6c:	8f 81       	ldd	r24, Y+7	; 0x07
     c6e:	98 85       	ldd	r25, Y+8	; 0x08
     c70:	88 0f       	add	r24, r24
     c72:	89 2f       	mov	r24, r25
     c74:	88 1f       	adc	r24, r24
     c76:	99 0b       	sbc	r25, r25
     c78:	91 95       	neg	r25
     c7a:	98 2f       	mov	r25, r24
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	89 0f       	add	r24, r25
     c80:	89 83       	std	Y+1, r24	; 0x01


    b = spiSendByte(0xff);                       //之后的数据与容量无关
     c82:	8f ef       	ldi	r24, 0xFF	; 255
     c84:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     c88:	88 2f       	mov	r24, r24
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	98 87       	std	Y+8, r25	; 0x08
     c8e:	8f 83       	std	Y+7, r24	; 0x07

    b = spiSendByte(0xff);
     c90:	8f ef       	ldi	r24, 0xFF	; 255
     c92:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     c96:	88 2f       	mov	r24, r24
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	98 87       	std	Y+8, r25	; 0x08
     c9c:	8f 83       	std	Y+7, r24	; 0x07

    b = spiSendByte(0xff);
     c9e:	8f ef       	ldi	r24, 0xFF	; 255
     ca0:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     ca4:	88 2f       	mov	r24, r24
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	98 87       	std	Y+8, r25	; 0x08
     caa:	8f 83       	std	Y+7, r24	; 0x07

    b = spiSendByte(0xff);
     cac:	8f ef       	ldi	r24, 0xFF	; 255
     cae:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     cb2:	88 2f       	mov	r24, r24
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	98 87       	std	Y+8, r25	; 0x08
     cb8:	8f 83       	std	Y+7, r24	; 0x07

    b = spiSendByte(0xff);
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     cc0:	88 2f       	mov	r24, r24
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	98 87       	std	Y+8, r25	; 0x08
     cc6:	8f 83       	std	Y+7, r24	; 0x07

  }

  for(j=4; j>0; j--)          					// 主机至少保持32个时钟周期的SCK
     cc8:	84 e0       	ldi	r24, 0x04	; 4
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	9a 87       	std	Y+10, r25	; 0x0a
     cce:	89 87       	std	Y+9, r24	; 0x09
     cd0:	0c c0       	rjmp	.+24     	; 0xcea <MMC_ReadCardSize+0x1d4>
    b = spiSendByte(0xff);  					 
     cd2:	8f ef       	ldi	r24, 0xFF	; 255
     cd4:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     cd8:	88 2f       	mov	r24, r24
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	98 87       	std	Y+8, r25	; 0x08
     cde:	8f 83       	std	Y+7, r24	; 0x07

    b = spiSendByte(0xff);

  }

  for(j=4; j>0; j--)          					// 主机至少保持32个时钟周期的SCK
     ce0:	89 85       	ldd	r24, Y+9	; 0x09
     ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	9a 87       	std	Y+10, r25	; 0x0a
     ce8:	89 87       	std	Y+9, r24	; 0x09
     cea:	89 85       	ldd	r24, Y+9	; 0x09
     cec:	9a 85       	ldd	r25, Y+10	; 0x0a
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	81 f7       	brne	.-32     	; 0xcd2 <MMC_ReadCardSize+0x1bc>
    b = spiSendByte(0xff);  					 
                               					
  b = spiSendByte(0xff);
     cf2:	8f ef       	ldi	r24, 0xFF	; 255
     cf4:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     cf8:	88 2f       	mov	r24, r24
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	98 87       	std	Y+8, r25	; 0x08
     cfe:	8f 83       	std	Y+7, r24	; 0x07
  CS_LOW ();
     d00:	a5 e6       	ldi	r26, 0x65	; 101
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e5 e6       	ldi	r30, 0x65	; 101
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	87 7f       	andi	r24, 0xF7	; 247
     d0c:	8c 93       	st	X, r24

  MMC_CardSize = (mmc_C_SIZE + 1);              //卡容量计算，参考容量计算公式
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	9c 81       	ldd	r25, Y+4	; 0x04
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	cc 01       	movw	r24, r24
     d16:	a0 e0       	ldi	r26, 0x00	; 0
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	8d 87       	std	Y+13, r24	; 0x0d
     d1c:	9e 87       	std	Y+14, r25	; 0x0e
     d1e:	af 87       	std	Y+15, r26	; 0x0f
     d20:	b8 8b       	std	Y+16, r27	; 0x10

  for(i = 2,j=mmc_C_SIZE_MULT+2; j>1; j--)      //容量大小：块长度×块数量，不含保护区，一般保护区为总大小的1%
     d22:	82 e0       	ldi	r24, 0x02	; 2
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	9c 87       	std	Y+12, r25	; 0x0c
     d28:	8b 87       	std	Y+11, r24	; 0x0b
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	88 2f       	mov	r24, r24
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	02 96       	adiw	r24, 0x02	; 2
     d32:	9a 87       	std	Y+10, r25	; 0x0a
     d34:	89 87       	std	Y+9, r24	; 0x09
     d36:	0b c0       	rjmp	.+22     	; 0xd4e <MMC_ReadCardSize+0x238>
    i <<= 1;
     d38:	8b 85       	ldd	r24, Y+11	; 0x0b
     d3a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	9c 87       	std	Y+12, r25	; 0x0c
     d42:	8b 87       	std	Y+11, r24	; 0x0b
  b = spiSendByte(0xff);
  CS_LOW ();

  MMC_CardSize = (mmc_C_SIZE + 1);              //卡容量计算，参考容量计算公式

  for(i = 2,j=mmc_C_SIZE_MULT+2; j>1; j--)      //容量大小：块长度×块数量，不含保护区，一般保护区为总大小的1%
     d44:	89 85       	ldd	r24, Y+9	; 0x09
     d46:	9a 85       	ldd	r25, Y+10	; 0x0a
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	9a 87       	std	Y+10, r25	; 0x0a
     d4c:	89 87       	std	Y+9, r24	; 0x09
     d4e:	89 85       	ldd	r24, Y+9	; 0x09
     d50:	9a 85       	ldd	r25, Y+10	; 0x0a
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	91 05       	cpc	r25, r1
     d56:	80 f7       	brcc	.-32     	; 0xd38 <MMC_ReadCardSize+0x222>
    i <<= 1;
  MMC_CardSize *= i;
     d58:	8b 85       	ldd	r24, Y+11	; 0x0b
     d5a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d5c:	9c 01       	movw	r18, r24
     d5e:	40 e0       	ldi	r20, 0x00	; 0
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	8d 85       	ldd	r24, Y+13	; 0x0d
     d64:	9e 85       	ldd	r25, Y+14	; 0x0e
     d66:	af 85       	ldd	r26, Y+15	; 0x0f
     d68:	b8 89       	ldd	r27, Y+16	; 0x10
     d6a:	bc 01       	movw	r22, r24
     d6c:	cd 01       	movw	r24, r26
     d6e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsi3>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	8d 87       	std	Y+13, r24	; 0x0d
     d78:	9e 87       	std	Y+14, r25	; 0x0e
     d7a:	af 87       	std	Y+15, r26	; 0x0f
     d7c:	b8 8b       	std	Y+16, r27	; 0x10

  for(i = 2,j=mmc_READ_BL_LEN; j>1; j--)
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	9c 87       	std	Y+12, r25	; 0x0c
     d84:	8b 87       	std	Y+11, r24	; 0x0b
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	88 2f       	mov	r24, r24
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	9a 87       	std	Y+10, r25	; 0x0a
     d8e:	89 87       	std	Y+9, r24	; 0x09
     d90:	0b c0       	rjmp	.+22     	; 0xda8 <MMC_ReadCardSize+0x292>
    i <<= 1;
     d92:	8b 85       	ldd	r24, Y+11	; 0x0b
     d94:	9c 85       	ldd	r25, Y+12	; 0x0c
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	9c 87       	std	Y+12, r25	; 0x0c
     d9c:	8b 87       	std	Y+11, r24	; 0x0b

  for(i = 2,j=mmc_C_SIZE_MULT+2; j>1; j--)      //容量大小：块长度×块数量，不含保护区，一般保护区为总大小的1%
    i <<= 1;
  MMC_CardSize *= i;

  for(i = 2,j=mmc_READ_BL_LEN; j>1; j--)
     d9e:	89 85       	ldd	r24, Y+9	; 0x09
     da0:	9a 85       	ldd	r25, Y+10	; 0x0a
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	9a 87       	std	Y+10, r25	; 0x0a
     da6:	89 87       	std	Y+9, r24	; 0x09
     da8:	89 85       	ldd	r24, Y+9	; 0x09
     daa:	9a 85       	ldd	r25, Y+10	; 0x0a
     dac:	82 30       	cpi	r24, 0x02	; 2
     dae:	91 05       	cpc	r25, r1
     db0:	80 f7       	brcc	.-32     	; 0xd92 <MMC_ReadCardSize+0x27c>
    i <<= 1;
  MMC_CardSize *= i;
     db2:	8b 85       	ldd	r24, Y+11	; 0x0b
     db4:	9c 85       	ldd	r25, Y+12	; 0x0c
     db6:	9c 01       	movw	r18, r24
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc0:	af 85       	ldd	r26, Y+15	; 0x0f
     dc2:	b8 89       	ldd	r27, Y+16	; 0x10
     dc4:	bc 01       	movw	r22, r24
     dc6:	cd 01       	movw	r24, r26
     dc8:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsi3>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	8d 87       	std	Y+13, r24	; 0x0d
     dd2:	9e 87       	std	Y+14, r25	; 0x0e
     dd4:	af 87       	std	Y+15, r26	; 0x0f
     dd6:	b8 8b       	std	Y+16, r27	; 0x10

  return (MMC_CardSize);                        //返回容量值大小，单位为字节
     dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dda:	9e 85       	ldd	r25, Y+14	; 0x0e
     ddc:	af 85       	ldd	r26, Y+15	; 0x0f
     dde:	b8 89       	ldd	r27, Y+16	; 0x10

}
     de0:	bc 01       	movw	r22, r24
     de2:	cd 01       	movw	r24, r26
     de4:	60 96       	adiw	r28, 0x10	; 16
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	f8 94       	cli
     dea:	de bf       	out	0x3e, r29	; 62
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	cd bf       	out	0x3d, r28	; 61
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <spiInit>:
		  2、设置SPI接口相关寄存器
          3、支持常用AVR单片机接口，兼容性增强，可扩展
***********************************************************************/

void spiInit()
{
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
#ifdef __AVR_ATmega128__ /*ATmega128单片机SPI接口初始化*/     

	PORTB |= (1 << PB1);  //设置SCK为1
     dfe:	a8 e3       	ldi	r26, 0x38	; 56
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e8 e3       	ldi	r30, 0x38	; 56
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	82 60       	ori	r24, 0x02	; 2
     e0a:	8c 93       	st	X, r24
    DDRB |= (1<<DDB1);    //设置SCK为输出
     e0c:	a7 e3       	ldi	r26, 0x37	; 55
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e7 e3       	ldi	r30, 0x37	; 55
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	82 60       	ori	r24, 0x02	; 2
     e18:	8c 93       	st	X, r24
	DDRB &= ~(1<<DDB3);   //设置MISO为输入
     e1a:	a7 e3       	ldi	r26, 0x37	; 55
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e7 e3       	ldi	r30, 0x37	; 55
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	87 7f       	andi	r24, 0xF7	; 247
     e26:	8c 93       	st	X, r24
	DDRB |= (1<<DDB2);    //设置MOSI为输出
     e28:	a7 e3       	ldi	r26, 0x37	; 55
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e7 e3       	ldi	r30, 0x37	; 55
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	84 60       	ori	r24, 0x04	; 4
     e34:	8c 93       	st	X, r24
	DDRB |= (1<<DDB0);    //主机模式下，设置SS为输出，可以控制SPI外设的片选信号
     e36:	a7 e3       	ldi	r26, 0x37	; 55
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e3       	ldi	r30, 0x37	; 55
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	81 60       	ori	r24, 0x01	; 1
     e42:	8c 93       	st	X, r24
    PORTB |= (1 << PB0);  //拉高SS信号
     e44:	a8 e3       	ldi	r26, 0x38	; 56
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e8 e3       	ldi	r30, 0x38	; 56
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	81 60       	ori	r24, 0x01	; 1
     e50:	8c 93       	st	X, r24
    PORTB |= (1 << PB4);  //拉高SS信号


#endif

    SPCR = (1<<MSTR)| (1<<SPR1) | (1<<SPE);  //SPI允许，主机模式，数据MSB在前，16分频
     e52:	ed e2       	ldi	r30, 0x2D	; 45
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	82 e5       	ldi	r24, 0x52	; 82
     e58:	80 83       	st	Z, r24
	
	spiTransferComplete = 1;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	80 93 46 06 	sts	0x0646, r24

#ifdef SPI_USEINT        //如果选择使用中断方式
	SPCR |=(1<<SPIE);    //打开中断允许     
#endif
}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <spiLow>:
操作内容：1、晶振64分频
		  2、非倍速模式
***********************************************************************/

void spiLow(void)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	 SPCR = (1<<MSTR)| (1<<SPR1) | (1<<SPE);  //SPI允许，主机模式，数据MSB在前，16分频
     e6e:	ed e2       	ldi	r30, 0x2D	; 45
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	82 e5       	ldi	r24, 0x52	; 82
     e74:	80 83       	st	Z, r24
	 SPSR &= ~(1<<SPI2X);                     //SPI2X为0，非倍速模式
     e76:	ae e2       	ldi	r26, 0x2E	; 46
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	ee e2       	ldi	r30, 0x2E	; 46
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	8e 7f       	andi	r24, 0xFE	; 254
     e82:	8c 93       	st	X, r24
}
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <spiHigh>:
操作内容：1、晶振8分频
		  2、倍速模式
***********************************************************************/

void spiHigh(void)
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
	SPCR = (1<<MSTR)| (1<<SPR0) | (1<<SPE);  //SPI允许，主机模式，数据MSB在前，8分频
     e92:	ed e2       	ldi	r30, 0x2D	; 45
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	81 e5       	ldi	r24, 0x51	; 81
     e98:	80 83       	st	Z, r24
	SPSR |= (1<<SPI2X);                      //SPI2X为1，倍速模式
     e9a:	ae e2       	ldi	r26, 0x2E	; 46
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	ee e2       	ldi	r30, 0x2E	; 46
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	81 60       	ori	r24, 0x01	; 1
     ea6:	8c 93       	st	X, r24
}
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <spiSendByte>:
函数功能：SPI字节传输函数
操作内容：数据从SPDR读出或者读入
***********************************************************************/

uint8 spiSendByte(uint8 data)
{
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	0f 92       	push	r0
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	89 83       	std	Y+1, r24	; 0x01
#ifdef SPI_USEINT                    //如果启用中断模式
	while(!spiTransferComplete);
	SPDR=data;                      //数据输出到SPDR
	spiTransferComplete = 0;
#else
    SPDR=data;                      //数据输出到SPDR
     eba:	ef e2       	ldi	r30, 0x2F	; 47
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	80 83       	st	Z, r24
	while(!(SPSR & (1<<SPIF)));     //等待上次传输完成
     ec2:	ee e2       	ldi	r30, 0x2E	; 46
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	88 23       	and	r24, r24
     eca:	dc f7       	brge	.-10     	; 0xec2 <spiSendByte+0x14>
#endif
    return SPDR;                     //返回SPDR值
     ecc:	ef e2       	ldi	r30, 0x2F	; 47
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
	
}
     ed2:	0f 90       	pop	r0
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <spiTransferWord>:
函数功能：SPI双字节传输函数
操作内容：先传输高字节，再传输低字节
***********************************************************************/

uint16 spiTransferWord(uint16 data)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <spiTransferWord+0x6>
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <spiTransferWord+0x8>
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	9c 83       	std	Y+4, r25	; 0x04
     ee8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 rxData = 0;
     eea:	1a 82       	std	Y+2, r1	; 0x02
     eec:	19 82       	std	Y+1, r1	; 0x01

	rxData = (spiSendByte((data>>8) & 0x00FF))<<8;   //先传输高字节
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	9c 81       	ldd	r25, Y+4	; 0x04
     ef2:	89 2f       	mov	r24, r25
     ef4:	99 27       	eor	r25, r25
     ef6:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     efa:	88 2f       	mov	r24, r24
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	98 2f       	mov	r25, r24
     f00:	88 27       	eor	r24, r24
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01
	rxData |= (spiSendByte(data & 0x00FF));          //再传输低字节
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	0e 94 57 07 	call	0xeae	; 0xeae <spiSendByte>
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	9a 81       	ldd	r25, Y+2	; 0x02
     f14:	82 2b       	or	r24, r18
     f16:	93 2b       	or	r25, r19
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	89 83       	std	Y+1, r24	; 0x01
	return rxData;
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <uart_putchar>:
// 声明I/O指针并初始化
static FILE mystd = FDEV_SETUP_STREAM(uart_putchar, uart_getchar, _FDEV_SETUP_RW);

// 用于输出的标准格式函数
static int uart_putchar(char c, FILE *stream)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	00 d0       	rcall	.+0      	; 0xf34 <uart_putchar+0x6>
     f34:	0f 92       	push	r0
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	89 83       	std	Y+1, r24	; 0x01
     f3c:	7b 83       	std	Y+3, r23	; 0x03
     f3e:	6a 83       	std	Y+2, r22	; 0x02
 if(c == '\n')
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	8a 30       	cpi	r24, 0x0A	; 10
     f44:	31 f4       	brne	.+12     	; 0xf52 <uart_putchar+0x24>
  uart_putchar('\r', stream);
     f46:	2a 81       	ldd	r18, Y+2	; 0x02
     f48:	3b 81       	ldd	r19, Y+3	; 0x03
     f4a:	8d e0       	ldi	r24, 0x0D	; 13
     f4c:	b9 01       	movw	r22, r18
     f4e:	0e 94 97 07 	call	0xf2e	; 0xf2e <uart_putchar>
 loop_until_bit_is_set(UCSR1A, UDRE1);  //实际是查询方式发送数据
     f52:	eb e9       	ldi	r30, 0x9B	; 155
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	80 72       	andi	r24, 0x20	; 32
     f5e:	90 70       	andi	r25, 0x00	; 0
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	b9 f3       	breq	.-18     	; 0xf52 <uart_putchar+0x24>
 UDR1 = c;
     f64:	ec e9       	ldi	r30, 0x9C	; 156
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	80 83       	st	Z, r24
 return 0;
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <uart_getchar>:

// 用于输入的标准格式函数
static int uart_getchar(FILE *stream)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	00 d0       	rcall	.+0      	; 0xf82 <uart_getchar+0x6>
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
 loop_until_bit_is_set(UCSR1A, RXC1);  //实际是查询方式接收数据
     f8a:	eb e9       	ldi	r30, 0x9B	; 155
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	88 23       	and	r24, r24
     f92:	dc f7       	brge	.-10     	; 0xf8a <uart_getchar+0xe>
 return UDR1;
     f94:	ec e9       	ldi	r30, 0x9C	; 156
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	88 2f       	mov	r24, r24
     f9c:	90 e0       	ldi	r25, 0x00	; 0
}
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <uartInit>:
//***********************************************************************
// 串口初始化接口函数
// 初始化uart,查询方式读写
//***********************************************************************
void uartInit(void)
{
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
 
  UCSR1B = _BV(RXEN1) | _BV(TXEN1);             		//发送接收使能，等价于(1<<RXEN1)|(1<<TXEN1)
     fb0:	ea e9       	ldi	r30, 0x9A	; 154
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	88 e1       	ldi	r24, 0x18	; 24
     fb6:	80 83       	st	Z, r24
  UBRR1H=baud_h;                                		//写波特率的值
     fb8:	e8 e9       	ldi	r30, 0x98	; 152
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	10 82       	st	Z, r1
  UBRR1L=baud_l; 
     fbe:	e9 e9       	ldi	r30, 0x99	; 153
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	8f e2       	ldi	r24, 0x2F	; 47
     fc4:	80 83       	st	Z, r24

  stdout = &mystd;
     fc6:	81 e3       	ldi	r24, 0x31	; 49
     fc8:	92 e0       	ldi	r25, 0x02	; 2
     fca:	90 93 4a 06 	sts	0x064A, r25
     fce:	80 93 49 06 	sts	0x0649, r24
  stdin = &mystd;
     fd2:	81 e3       	ldi	r24, 0x31	; 49
     fd4:	92 e0       	ldi	r25, 0x02	; 2
     fd6:	90 93 48 06 	sts	0x0648, r25
     fda:	80 93 47 06 	sts	0x0647, r24
  stderr = &mystd;
     fde:	81 e3       	ldi	r24, 0x31	; 49
     fe0:	92 e0       	ldi	r25, 0x02	; 2
     fe2:	90 93 4c 06 	sts	0x064C, r25
     fe6:	80 93 4b 06 	sts	0x064B, r24
}
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <printf>:
     ff0:	a0 e0       	ldi	r26, 0x00	; 0
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ee ef       	ldi	r30, 0xFE	; 254
     ff6:	f7 e0       	ldi	r31, 0x07	; 7
     ff8:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <__prologue_saves__+0x20>
     ffc:	fe 01       	movw	r30, r28
     ffe:	35 96       	adiw	r30, 0x05	; 5
    1000:	61 91       	ld	r22, Z+
    1002:	71 91       	ld	r23, Z+
    1004:	80 91 49 06 	lds	r24, 0x0649
    1008:	90 91 4a 06 	lds	r25, 0x064A
    100c:	af 01       	movw	r20, r30
    100e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <vfprintf>
    1012:	20 96       	adiw	r28, 0x00	; 0
    1014:	e2 e0       	ldi	r30, 0x02	; 2
    1016:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__epilogue_restores__+0x20>

0000101a <putchar>:
    101a:	60 91 49 06 	lds	r22, 0x0649
    101e:	70 91 4a 06 	lds	r23, 0x064A
    1022:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <fputc>
    1026:	08 95       	ret

00001028 <puts>:
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	8c 01       	movw	r16, r24
    1032:	e0 91 49 06 	lds	r30, 0x0649
    1036:	f0 91 4a 06 	lds	r31, 0x064A
    103a:	83 81       	ldd	r24, Z+3	; 0x03
    103c:	81 ff       	sbrs	r24, 1
    103e:	21 c0       	rjmp	.+66     	; 0x1082 <puts+0x5a>
    1040:	c0 e0       	ldi	r28, 0x00	; 0
    1042:	d0 e0       	ldi	r29, 0x00	; 0
    1044:	0d c0       	rjmp	.+26     	; 0x1060 <puts+0x38>
    1046:	e0 91 49 06 	lds	r30, 0x0649
    104a:	f0 91 4a 06 	lds	r31, 0x064A
    104e:	20 85       	ldd	r18, Z+8	; 0x08
    1050:	31 85       	ldd	r19, Z+9	; 0x09
    1052:	bf 01       	movw	r22, r30
    1054:	f9 01       	movw	r30, r18
    1056:	09 95       	icall
    1058:	89 2b       	or	r24, r25
    105a:	11 f0       	breq	.+4      	; 0x1060 <puts+0x38>
    105c:	cf ef       	ldi	r28, 0xFF	; 255
    105e:	df ef       	ldi	r29, 0xFF	; 255
    1060:	f8 01       	movw	r30, r16
    1062:	81 91       	ld	r24, Z+
    1064:	8f 01       	movw	r16, r30
    1066:	88 23       	and	r24, r24
    1068:	71 f7       	brne	.-36     	; 0x1046 <puts+0x1e>
    106a:	e0 91 49 06 	lds	r30, 0x0649
    106e:	f0 91 4a 06 	lds	r31, 0x064A
    1072:	20 85       	ldd	r18, Z+8	; 0x08
    1074:	31 85       	ldd	r19, Z+9	; 0x09
    1076:	8a e0       	ldi	r24, 0x0A	; 10
    1078:	bf 01       	movw	r22, r30
    107a:	f9 01       	movw	r30, r18
    107c:	09 95       	icall
    107e:	89 2b       	or	r24, r25
    1080:	11 f0       	breq	.+4      	; 0x1086 <puts+0x5e>
    1082:	cf ef       	ldi	r28, 0xFF	; 255
    1084:	df ef       	ldi	r29, 0xFF	; 255
    1086:	ce 01       	movw	r24, r28
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	08 95       	ret

00001092 <scanf>:
    1092:	a0 e0       	ldi	r26, 0x00	; 0
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	ef e4       	ldi	r30, 0x4F	; 79
    1098:	f8 e0       	ldi	r31, 0x08	; 8
    109a:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <__prologue_saves__+0x20>
    109e:	fe 01       	movw	r30, r28
    10a0:	35 96       	adiw	r30, 0x05	; 5
    10a2:	61 91       	ld	r22, Z+
    10a4:	71 91       	ld	r23, Z+
    10a6:	80 91 47 06 	lds	r24, 0x0647
    10aa:	90 91 48 06 	lds	r25, 0x0648
    10ae:	af 01       	movw	r20, r30
    10b0:	0e 94 bf 0b 	call	0x177e	; 0x177e <vfscanf>
    10b4:	20 96       	adiw	r28, 0x00	; 0
    10b6:	e2 e0       	ldi	r30, 0x02	; 2
    10b8:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__epilogue_restores__+0x20>

000010bc <vfprintf>:
    10bc:	ab e0       	ldi	r26, 0x0B	; 11
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e4 e6       	ldi	r30, 0x64	; 100
    10c2:	f8 e0       	ldi	r31, 0x08	; 8
    10c4:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__prologue_saves__>
    10c8:	3c 01       	movw	r6, r24
    10ca:	2b 01       	movw	r4, r22
    10cc:	5a 01       	movw	r10, r20
    10ce:	fc 01       	movw	r30, r24
    10d0:	17 82       	std	Z+7, r1	; 0x07
    10d2:	16 82       	std	Z+6, r1	; 0x06
    10d4:	83 81       	ldd	r24, Z+3	; 0x03
    10d6:	81 fd       	sbrc	r24, 1
    10d8:	03 c0       	rjmp	.+6      	; 0x10e0 <vfprintf+0x24>
    10da:	6f ef       	ldi	r22, 0xFF	; 255
    10dc:	7f ef       	ldi	r23, 0xFF	; 255
    10de:	c6 c1       	rjmp	.+908    	; 0x146c <__stack+0x36d>
    10e0:	9a e0       	ldi	r25, 0x0A	; 10
    10e2:	89 2e       	mov	r8, r25
    10e4:	1e 01       	movw	r2, r28
    10e6:	08 94       	sec
    10e8:	21 1c       	adc	r2, r1
    10ea:	31 1c       	adc	r3, r1
    10ec:	f3 01       	movw	r30, r6
    10ee:	23 81       	ldd	r18, Z+3	; 0x03
    10f0:	f2 01       	movw	r30, r4
    10f2:	23 fd       	sbrc	r18, 3
    10f4:	85 91       	lpm	r24, Z+
    10f6:	23 ff       	sbrs	r18, 3
    10f8:	81 91       	ld	r24, Z+
    10fa:	2f 01       	movw	r4, r30
    10fc:	88 23       	and	r24, r24
    10fe:	09 f4       	brne	.+2      	; 0x1102 <__stack+0x3>
    1100:	b2 c1       	rjmp	.+868    	; 0x1466 <__stack+0x367>
    1102:	85 32       	cpi	r24, 0x25	; 37
    1104:	39 f4       	brne	.+14     	; 0x1114 <__stack+0x15>
    1106:	23 fd       	sbrc	r18, 3
    1108:	85 91       	lpm	r24, Z+
    110a:	23 ff       	sbrs	r18, 3
    110c:	81 91       	ld	r24, Z+
    110e:	2f 01       	movw	r4, r30
    1110:	85 32       	cpi	r24, 0x25	; 37
    1112:	29 f4       	brne	.+10     	; 0x111e <__stack+0x1f>
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	b3 01       	movw	r22, r6
    1118:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <fputc>
    111c:	e7 cf       	rjmp	.-50     	; 0x10ec <vfprintf+0x30>
    111e:	98 2f       	mov	r25, r24
    1120:	ff 24       	eor	r15, r15
    1122:	ee 24       	eor	r14, r14
    1124:	99 24       	eor	r9, r9
    1126:	ff e1       	ldi	r31, 0x1F	; 31
    1128:	ff 15       	cp	r31, r15
    112a:	d0 f0       	brcs	.+52     	; 0x1160 <__stack+0x61>
    112c:	9b 32       	cpi	r25, 0x2B	; 43
    112e:	69 f0       	breq	.+26     	; 0x114a <__stack+0x4b>
    1130:	9c 32       	cpi	r25, 0x2C	; 44
    1132:	28 f4       	brcc	.+10     	; 0x113e <__stack+0x3f>
    1134:	90 32       	cpi	r25, 0x20	; 32
    1136:	59 f0       	breq	.+22     	; 0x114e <__stack+0x4f>
    1138:	93 32       	cpi	r25, 0x23	; 35
    113a:	91 f4       	brne	.+36     	; 0x1160 <__stack+0x61>
    113c:	0e c0       	rjmp	.+28     	; 0x115a <__stack+0x5b>
    113e:	9d 32       	cpi	r25, 0x2D	; 45
    1140:	49 f0       	breq	.+18     	; 0x1154 <__stack+0x55>
    1142:	90 33       	cpi	r25, 0x30	; 48
    1144:	69 f4       	brne	.+26     	; 0x1160 <__stack+0x61>
    1146:	41 e0       	ldi	r20, 0x01	; 1
    1148:	24 c0       	rjmp	.+72     	; 0x1192 <__stack+0x93>
    114a:	52 e0       	ldi	r21, 0x02	; 2
    114c:	f5 2a       	or	r15, r21
    114e:	84 e0       	ldi	r24, 0x04	; 4
    1150:	f8 2a       	or	r15, r24
    1152:	28 c0       	rjmp	.+80     	; 0x11a4 <__stack+0xa5>
    1154:	98 e0       	ldi	r25, 0x08	; 8
    1156:	f9 2a       	or	r15, r25
    1158:	25 c0       	rjmp	.+74     	; 0x11a4 <__stack+0xa5>
    115a:	e0 e1       	ldi	r30, 0x10	; 16
    115c:	fe 2a       	or	r15, r30
    115e:	22 c0       	rjmp	.+68     	; 0x11a4 <__stack+0xa5>
    1160:	f7 fc       	sbrc	r15, 7
    1162:	29 c0       	rjmp	.+82     	; 0x11b6 <__stack+0xb7>
    1164:	89 2f       	mov	r24, r25
    1166:	80 53       	subi	r24, 0x30	; 48
    1168:	8a 30       	cpi	r24, 0x0A	; 10
    116a:	70 f4       	brcc	.+28     	; 0x1188 <__stack+0x89>
    116c:	f6 fe       	sbrs	r15, 6
    116e:	05 c0       	rjmp	.+10     	; 0x117a <__stack+0x7b>
    1170:	98 9c       	mul	r9, r8
    1172:	90 2c       	mov	r9, r0
    1174:	11 24       	eor	r1, r1
    1176:	98 0e       	add	r9, r24
    1178:	15 c0       	rjmp	.+42     	; 0x11a4 <__stack+0xa5>
    117a:	e8 9c       	mul	r14, r8
    117c:	e0 2c       	mov	r14, r0
    117e:	11 24       	eor	r1, r1
    1180:	e8 0e       	add	r14, r24
    1182:	f0 e2       	ldi	r31, 0x20	; 32
    1184:	ff 2a       	or	r15, r31
    1186:	0e c0       	rjmp	.+28     	; 0x11a4 <__stack+0xa5>
    1188:	9e 32       	cpi	r25, 0x2E	; 46
    118a:	29 f4       	brne	.+10     	; 0x1196 <__stack+0x97>
    118c:	f6 fc       	sbrc	r15, 6
    118e:	6b c1       	rjmp	.+726    	; 0x1466 <__stack+0x367>
    1190:	40 e4       	ldi	r20, 0x40	; 64
    1192:	f4 2a       	or	r15, r20
    1194:	07 c0       	rjmp	.+14     	; 0x11a4 <__stack+0xa5>
    1196:	9c 36       	cpi	r25, 0x6C	; 108
    1198:	19 f4       	brne	.+6      	; 0x11a0 <__stack+0xa1>
    119a:	50 e8       	ldi	r21, 0x80	; 128
    119c:	f5 2a       	or	r15, r21
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <__stack+0xa5>
    11a0:	98 36       	cpi	r25, 0x68	; 104
    11a2:	49 f4       	brne	.+18     	; 0x11b6 <__stack+0xb7>
    11a4:	f2 01       	movw	r30, r4
    11a6:	23 fd       	sbrc	r18, 3
    11a8:	95 91       	lpm	r25, Z+
    11aa:	23 ff       	sbrs	r18, 3
    11ac:	91 91       	ld	r25, Z+
    11ae:	2f 01       	movw	r4, r30
    11b0:	99 23       	and	r25, r25
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <__stack+0xb7>
    11b4:	b8 cf       	rjmp	.-144    	; 0x1126 <__stack+0x27>
    11b6:	89 2f       	mov	r24, r25
    11b8:	85 54       	subi	r24, 0x45	; 69
    11ba:	83 30       	cpi	r24, 0x03	; 3
    11bc:	18 f0       	brcs	.+6      	; 0x11c4 <__stack+0xc5>
    11be:	80 52       	subi	r24, 0x20	; 32
    11c0:	83 30       	cpi	r24, 0x03	; 3
    11c2:	38 f4       	brcc	.+14     	; 0x11d2 <__stack+0xd3>
    11c4:	44 e0       	ldi	r20, 0x04	; 4
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	a4 0e       	add	r10, r20
    11ca:	b5 1e       	adc	r11, r21
    11cc:	5f e3       	ldi	r21, 0x3F	; 63
    11ce:	59 83       	std	Y+1, r21	; 0x01
    11d0:	0f c0       	rjmp	.+30     	; 0x11f0 <__stack+0xf1>
    11d2:	93 36       	cpi	r25, 0x63	; 99
    11d4:	31 f0       	breq	.+12     	; 0x11e2 <__stack+0xe3>
    11d6:	93 37       	cpi	r25, 0x73	; 115
    11d8:	79 f0       	breq	.+30     	; 0x11f8 <__stack+0xf9>
    11da:	93 35       	cpi	r25, 0x53	; 83
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <__stack+0xe1>
    11de:	56 c0       	rjmp	.+172    	; 0x128c <__stack+0x18d>
    11e0:	20 c0       	rjmp	.+64     	; 0x1222 <__stack+0x123>
    11e2:	f5 01       	movw	r30, r10
    11e4:	80 81       	ld	r24, Z
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	42 e0       	ldi	r20, 0x02	; 2
    11ea:	50 e0       	ldi	r21, 0x00	; 0
    11ec:	a4 0e       	add	r10, r20
    11ee:	b5 1e       	adc	r11, r21
    11f0:	61 01       	movw	r12, r2
    11f2:	01 e0       	ldi	r16, 0x01	; 1
    11f4:	10 e0       	ldi	r17, 0x00	; 0
    11f6:	12 c0       	rjmp	.+36     	; 0x121c <__stack+0x11d>
    11f8:	f5 01       	movw	r30, r10
    11fa:	c0 80       	ld	r12, Z
    11fc:	d1 80       	ldd	r13, Z+1	; 0x01
    11fe:	f6 fc       	sbrc	r15, 6
    1200:	03 c0       	rjmp	.+6      	; 0x1208 <__stack+0x109>
    1202:	6f ef       	ldi	r22, 0xFF	; 255
    1204:	7f ef       	ldi	r23, 0xFF	; 255
    1206:	02 c0       	rjmp	.+4      	; 0x120c <__stack+0x10d>
    1208:	69 2d       	mov	r22, r9
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	42 e0       	ldi	r20, 0x02	; 2
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	a4 0e       	add	r10, r20
    1212:	b5 1e       	adc	r11, r21
    1214:	c6 01       	movw	r24, r12
    1216:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <strnlen>
    121a:	8c 01       	movw	r16, r24
    121c:	5f e7       	ldi	r21, 0x7F	; 127
    121e:	f5 22       	and	r15, r21
    1220:	14 c0       	rjmp	.+40     	; 0x124a <__stack+0x14b>
    1222:	f5 01       	movw	r30, r10
    1224:	c0 80       	ld	r12, Z
    1226:	d1 80       	ldd	r13, Z+1	; 0x01
    1228:	f6 fc       	sbrc	r15, 6
    122a:	03 c0       	rjmp	.+6      	; 0x1232 <__stack+0x133>
    122c:	6f ef       	ldi	r22, 0xFF	; 255
    122e:	7f ef       	ldi	r23, 0xFF	; 255
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <__stack+0x137>
    1232:	69 2d       	mov	r22, r9
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	42 e0       	ldi	r20, 0x02	; 2
    1238:	50 e0       	ldi	r21, 0x00	; 0
    123a:	a4 0e       	add	r10, r20
    123c:	b5 1e       	adc	r11, r21
    123e:	c6 01       	movw	r24, r12
    1240:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <strnlen_P>
    1244:	8c 01       	movw	r16, r24
    1246:	50 e8       	ldi	r21, 0x80	; 128
    1248:	f5 2a       	or	r15, r21
    124a:	f3 fe       	sbrs	r15, 3
    124c:	07 c0       	rjmp	.+14     	; 0x125c <__stack+0x15d>
    124e:	1a c0       	rjmp	.+52     	; 0x1284 <__stack+0x185>
    1250:	80 e2       	ldi	r24, 0x20	; 32
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	b3 01       	movw	r22, r6
    1256:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <fputc>
    125a:	ea 94       	dec	r14
    125c:	8e 2d       	mov	r24, r14
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	08 17       	cp	r16, r24
    1262:	19 07       	cpc	r17, r25
    1264:	a8 f3       	brcs	.-22     	; 0x1250 <__stack+0x151>
    1266:	0e c0       	rjmp	.+28     	; 0x1284 <__stack+0x185>
    1268:	f6 01       	movw	r30, r12
    126a:	f7 fc       	sbrc	r15, 7
    126c:	85 91       	lpm	r24, Z+
    126e:	f7 fe       	sbrs	r15, 7
    1270:	81 91       	ld	r24, Z+
    1272:	6f 01       	movw	r12, r30
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	b3 01       	movw	r22, r6
    1278:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <fputc>
    127c:	e1 10       	cpse	r14, r1
    127e:	ea 94       	dec	r14
    1280:	01 50       	subi	r16, 0x01	; 1
    1282:	10 40       	sbci	r17, 0x00	; 0
    1284:	01 15       	cp	r16, r1
    1286:	11 05       	cpc	r17, r1
    1288:	79 f7       	brne	.-34     	; 0x1268 <__stack+0x169>
    128a:	ea c0       	rjmp	.+468    	; 0x1460 <__stack+0x361>
    128c:	94 36       	cpi	r25, 0x64	; 100
    128e:	11 f0       	breq	.+4      	; 0x1294 <__stack+0x195>
    1290:	99 36       	cpi	r25, 0x69	; 105
    1292:	69 f5       	brne	.+90     	; 0x12ee <__stack+0x1ef>
    1294:	f7 fe       	sbrs	r15, 7
    1296:	08 c0       	rjmp	.+16     	; 0x12a8 <__stack+0x1a9>
    1298:	f5 01       	movw	r30, r10
    129a:	20 81       	ld	r18, Z
    129c:	31 81       	ldd	r19, Z+1	; 0x01
    129e:	42 81       	ldd	r20, Z+2	; 0x02
    12a0:	53 81       	ldd	r21, Z+3	; 0x03
    12a2:	84 e0       	ldi	r24, 0x04	; 4
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0a c0       	rjmp	.+20     	; 0x12bc <__stack+0x1bd>
    12a8:	f5 01       	movw	r30, r10
    12aa:	80 81       	ld	r24, Z
    12ac:	91 81       	ldd	r25, Z+1	; 0x01
    12ae:	9c 01       	movw	r18, r24
    12b0:	44 27       	eor	r20, r20
    12b2:	37 fd       	sbrc	r19, 7
    12b4:	40 95       	com	r20
    12b6:	54 2f       	mov	r21, r20
    12b8:	82 e0       	ldi	r24, 0x02	; 2
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	a8 0e       	add	r10, r24
    12be:	b9 1e       	adc	r11, r25
    12c0:	9f e6       	ldi	r25, 0x6F	; 111
    12c2:	f9 22       	and	r15, r25
    12c4:	57 ff       	sbrs	r21, 7
    12c6:	09 c0       	rjmp	.+18     	; 0x12da <__stack+0x1db>
    12c8:	50 95       	com	r21
    12ca:	40 95       	com	r20
    12cc:	30 95       	com	r19
    12ce:	21 95       	neg	r18
    12d0:	3f 4f       	sbci	r19, 0xFF	; 255
    12d2:	4f 4f       	sbci	r20, 0xFF	; 255
    12d4:	5f 4f       	sbci	r21, 0xFF	; 255
    12d6:	e0 e8       	ldi	r30, 0x80	; 128
    12d8:	fe 2a       	or	r15, r30
    12da:	ca 01       	movw	r24, r20
    12dc:	b9 01       	movw	r22, r18
    12de:	a1 01       	movw	r20, r2
    12e0:	2a e0       	ldi	r18, 0x0A	; 10
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__ultoa_invert>
    12e8:	d8 2e       	mov	r13, r24
    12ea:	d2 18       	sub	r13, r2
    12ec:	40 c0       	rjmp	.+128    	; 0x136e <__stack+0x26f>
    12ee:	95 37       	cpi	r25, 0x75	; 117
    12f0:	29 f4       	brne	.+10     	; 0x12fc <__stack+0x1fd>
    12f2:	1f 2d       	mov	r17, r15
    12f4:	1f 7e       	andi	r17, 0xEF	; 239
    12f6:	2a e0       	ldi	r18, 0x0A	; 10
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	1d c0       	rjmp	.+58     	; 0x1336 <__stack+0x237>
    12fc:	1f 2d       	mov	r17, r15
    12fe:	19 7f       	andi	r17, 0xF9	; 249
    1300:	9f 36       	cpi	r25, 0x6F	; 111
    1302:	61 f0       	breq	.+24     	; 0x131c <__stack+0x21d>
    1304:	90 37       	cpi	r25, 0x70	; 112
    1306:	20 f4       	brcc	.+8      	; 0x1310 <__stack+0x211>
    1308:	98 35       	cpi	r25, 0x58	; 88
    130a:	09 f0       	breq	.+2      	; 0x130e <__stack+0x20f>
    130c:	ac c0       	rjmp	.+344    	; 0x1466 <__stack+0x367>
    130e:	0f c0       	rjmp	.+30     	; 0x132e <__stack+0x22f>
    1310:	90 37       	cpi	r25, 0x70	; 112
    1312:	39 f0       	breq	.+14     	; 0x1322 <__stack+0x223>
    1314:	98 37       	cpi	r25, 0x78	; 120
    1316:	09 f0       	breq	.+2      	; 0x131a <__stack+0x21b>
    1318:	a6 c0       	rjmp	.+332    	; 0x1466 <__stack+0x367>
    131a:	04 c0       	rjmp	.+8      	; 0x1324 <__stack+0x225>
    131c:	28 e0       	ldi	r18, 0x08	; 8
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	0a c0       	rjmp	.+20     	; 0x1336 <__stack+0x237>
    1322:	10 61       	ori	r17, 0x10	; 16
    1324:	14 fd       	sbrc	r17, 4
    1326:	14 60       	ori	r17, 0x04	; 4
    1328:	20 e1       	ldi	r18, 0x10	; 16
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	04 c0       	rjmp	.+8      	; 0x1336 <__stack+0x237>
    132e:	14 fd       	sbrc	r17, 4
    1330:	16 60       	ori	r17, 0x06	; 6
    1332:	20 e1       	ldi	r18, 0x10	; 16
    1334:	32 e0       	ldi	r19, 0x02	; 2
    1336:	17 ff       	sbrs	r17, 7
    1338:	08 c0       	rjmp	.+16     	; 0x134a <__stack+0x24b>
    133a:	f5 01       	movw	r30, r10
    133c:	60 81       	ld	r22, Z
    133e:	71 81       	ldd	r23, Z+1	; 0x01
    1340:	82 81       	ldd	r24, Z+2	; 0x02
    1342:	93 81       	ldd	r25, Z+3	; 0x03
    1344:	44 e0       	ldi	r20, 0x04	; 4
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	08 c0       	rjmp	.+16     	; 0x135a <__stack+0x25b>
    134a:	f5 01       	movw	r30, r10
    134c:	80 81       	ld	r24, Z
    134e:	91 81       	ldd	r25, Z+1	; 0x01
    1350:	bc 01       	movw	r22, r24
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	42 e0       	ldi	r20, 0x02	; 2
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	a4 0e       	add	r10, r20
    135c:	b5 1e       	adc	r11, r21
    135e:	a1 01       	movw	r20, r2
    1360:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__ultoa_invert>
    1364:	d8 2e       	mov	r13, r24
    1366:	d2 18       	sub	r13, r2
    1368:	8f e7       	ldi	r24, 0x7F	; 127
    136a:	f8 2e       	mov	r15, r24
    136c:	f1 22       	and	r15, r17
    136e:	f6 fe       	sbrs	r15, 6
    1370:	0b c0       	rjmp	.+22     	; 0x1388 <__stack+0x289>
    1372:	5e ef       	ldi	r21, 0xFE	; 254
    1374:	f5 22       	and	r15, r21
    1376:	d9 14       	cp	r13, r9
    1378:	38 f4       	brcc	.+14     	; 0x1388 <__stack+0x289>
    137a:	f4 fe       	sbrs	r15, 4
    137c:	07 c0       	rjmp	.+14     	; 0x138c <__stack+0x28d>
    137e:	f2 fc       	sbrc	r15, 2
    1380:	05 c0       	rjmp	.+10     	; 0x138c <__stack+0x28d>
    1382:	8f ee       	ldi	r24, 0xEF	; 239
    1384:	f8 22       	and	r15, r24
    1386:	02 c0       	rjmp	.+4      	; 0x138c <__stack+0x28d>
    1388:	1d 2d       	mov	r17, r13
    138a:	01 c0       	rjmp	.+2      	; 0x138e <__stack+0x28f>
    138c:	19 2d       	mov	r17, r9
    138e:	f4 fe       	sbrs	r15, 4
    1390:	0d c0       	rjmp	.+26     	; 0x13ac <__stack+0x2ad>
    1392:	fe 01       	movw	r30, r28
    1394:	ed 0d       	add	r30, r13
    1396:	f1 1d       	adc	r31, r1
    1398:	80 81       	ld	r24, Z
    139a:	80 33       	cpi	r24, 0x30	; 48
    139c:	19 f4       	brne	.+6      	; 0x13a4 <__stack+0x2a5>
    139e:	99 ee       	ldi	r25, 0xE9	; 233
    13a0:	f9 22       	and	r15, r25
    13a2:	08 c0       	rjmp	.+16     	; 0x13b4 <__stack+0x2b5>
    13a4:	1f 5f       	subi	r17, 0xFF	; 255
    13a6:	f2 fe       	sbrs	r15, 2
    13a8:	05 c0       	rjmp	.+10     	; 0x13b4 <__stack+0x2b5>
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <__stack+0x2b3>
    13ac:	8f 2d       	mov	r24, r15
    13ae:	86 78       	andi	r24, 0x86	; 134
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <__stack+0x2b5>
    13b2:	1f 5f       	subi	r17, 0xFF	; 255
    13b4:	0f 2d       	mov	r16, r15
    13b6:	f3 fc       	sbrc	r15, 3
    13b8:	14 c0       	rjmp	.+40     	; 0x13e2 <__stack+0x2e3>
    13ba:	f0 fe       	sbrs	r15, 0
    13bc:	0f c0       	rjmp	.+30     	; 0x13dc <__stack+0x2dd>
    13be:	1e 15       	cp	r17, r14
    13c0:	10 f0       	brcs	.+4      	; 0x13c6 <__stack+0x2c7>
    13c2:	9d 2c       	mov	r9, r13
    13c4:	0b c0       	rjmp	.+22     	; 0x13dc <__stack+0x2dd>
    13c6:	9d 2c       	mov	r9, r13
    13c8:	9e 0c       	add	r9, r14
    13ca:	91 1a       	sub	r9, r17
    13cc:	1e 2d       	mov	r17, r14
    13ce:	06 c0       	rjmp	.+12     	; 0x13dc <__stack+0x2dd>
    13d0:	80 e2       	ldi	r24, 0x20	; 32
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	b3 01       	movw	r22, r6
    13d6:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <fputc>
    13da:	1f 5f       	subi	r17, 0xFF	; 255
    13dc:	1e 15       	cp	r17, r14
    13de:	c0 f3       	brcs	.-16     	; 0x13d0 <__stack+0x2d1>
    13e0:	04 c0       	rjmp	.+8      	; 0x13ea <__stack+0x2eb>
    13e2:	1e 15       	cp	r17, r14
    13e4:	10 f4       	brcc	.+4      	; 0x13ea <__stack+0x2eb>
    13e6:	e1 1a       	sub	r14, r17
    13e8:	01 c0       	rjmp	.+2      	; 0x13ec <__stack+0x2ed>
    13ea:	ee 24       	eor	r14, r14
    13ec:	04 ff       	sbrs	r16, 4
    13ee:	0f c0       	rjmp	.+30     	; 0x140e <__stack+0x30f>
    13f0:	80 e3       	ldi	r24, 0x30	; 48
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	b3 01       	movw	r22, r6
    13f6:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <fputc>
    13fa:	02 ff       	sbrs	r16, 2
    13fc:	1d c0       	rjmp	.+58     	; 0x1438 <__stack+0x339>
    13fe:	01 fd       	sbrc	r16, 1
    1400:	03 c0       	rjmp	.+6      	; 0x1408 <__stack+0x309>
    1402:	88 e7       	ldi	r24, 0x78	; 120
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e c0       	rjmp	.+28     	; 0x1424 <__stack+0x325>
    1408:	88 e5       	ldi	r24, 0x58	; 88
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0b c0       	rjmp	.+22     	; 0x1424 <__stack+0x325>
    140e:	80 2f       	mov	r24, r16
    1410:	86 78       	andi	r24, 0x86	; 134
    1412:	91 f0       	breq	.+36     	; 0x1438 <__stack+0x339>
    1414:	01 ff       	sbrs	r16, 1
    1416:	02 c0       	rjmp	.+4      	; 0x141c <__stack+0x31d>
    1418:	8b e2       	ldi	r24, 0x2B	; 43
    141a:	01 c0       	rjmp	.+2      	; 0x141e <__stack+0x31f>
    141c:	80 e2       	ldi	r24, 0x20	; 32
    141e:	f7 fc       	sbrc	r15, 7
    1420:	8d e2       	ldi	r24, 0x2D	; 45
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	b3 01       	movw	r22, r6
    1426:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <fputc>
    142a:	06 c0       	rjmp	.+12     	; 0x1438 <__stack+0x339>
    142c:	80 e3       	ldi	r24, 0x30	; 48
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	b3 01       	movw	r22, r6
    1432:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <fputc>
    1436:	9a 94       	dec	r9
    1438:	d9 14       	cp	r13, r9
    143a:	c0 f3       	brcs	.-16     	; 0x142c <__stack+0x32d>
    143c:	da 94       	dec	r13
    143e:	f1 01       	movw	r30, r2
    1440:	ed 0d       	add	r30, r13
    1442:	f1 1d       	adc	r31, r1
    1444:	80 81       	ld	r24, Z
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	b3 01       	movw	r22, r6
    144a:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <fputc>
    144e:	dd 20       	and	r13, r13
    1450:	a9 f7       	brne	.-22     	; 0x143c <__stack+0x33d>
    1452:	06 c0       	rjmp	.+12     	; 0x1460 <__stack+0x361>
    1454:	80 e2       	ldi	r24, 0x20	; 32
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	b3 01       	movw	r22, r6
    145a:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <fputc>
    145e:	ea 94       	dec	r14
    1460:	ee 20       	and	r14, r14
    1462:	c1 f7       	brne	.-16     	; 0x1454 <__stack+0x355>
    1464:	43 ce       	rjmp	.-890    	; 0x10ec <vfprintf+0x30>
    1466:	f3 01       	movw	r30, r6
    1468:	66 81       	ldd	r22, Z+6	; 0x06
    146a:	77 81       	ldd	r23, Z+7	; 0x07
    146c:	cb 01       	movw	r24, r22
    146e:	2b 96       	adiw	r28, 0x0b	; 11
    1470:	e2 e1       	ldi	r30, 0x12	; 18
    1472:	0c 94 1d 0e 	jmp	0x1c3a	; 0x1c3a <__epilogue_restores__>

00001476 <putval>:
    1476:	fc 01       	movw	r30, r24
    1478:	20 fd       	sbrc	r18, 0
    147a:	08 c0       	rjmp	.+16     	; 0x148c <putval+0x16>
    147c:	23 fd       	sbrc	r18, 3
    147e:	05 c0       	rjmp	.+10     	; 0x148a <putval+0x14>
    1480:	22 ff       	sbrs	r18, 2
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <putval+0x12>
    1484:	73 83       	std	Z+3, r23	; 0x03
    1486:	62 83       	std	Z+2, r22	; 0x02
    1488:	51 83       	std	Z+1, r21	; 0x01
    148a:	40 83       	st	Z, r20
    148c:	08 95       	ret

0000148e <mulacc>:
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	44 ff       	sbrs	r20, 4
    1498:	02 c0       	rjmp	.+4      	; 0x149e <mulacc+0x10>
    149a:	33 e0       	ldi	r19, 0x03	; 3
    149c:	11 c0       	rjmp	.+34     	; 0x14c0 <mulacc+0x32>
    149e:	46 ff       	sbrs	r20, 6
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <mulacc+0x18>
    14a2:	34 e0       	ldi	r19, 0x04	; 4
    14a4:	0d c0       	rjmp	.+26     	; 0x14c0 <mulacc+0x32>
    14a6:	db 01       	movw	r26, r22
    14a8:	fc 01       	movw	r30, r24
    14aa:	aa 0f       	add	r26, r26
    14ac:	bb 1f       	adc	r27, r27
    14ae:	ee 1f       	adc	r30, r30
    14b0:	ff 1f       	adc	r31, r31
    14b2:	10 94       	com	r1
    14b4:	d1 f7       	brne	.-12     	; 0x14aa <mulacc+0x1c>
    14b6:	6a 0f       	add	r22, r26
    14b8:	7b 1f       	adc	r23, r27
    14ba:	8e 1f       	adc	r24, r30
    14bc:	9f 1f       	adc	r25, r31
    14be:	31 e0       	ldi	r19, 0x01	; 1
    14c0:	66 0f       	add	r22, r22
    14c2:	77 1f       	adc	r23, r23
    14c4:	88 1f       	adc	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	31 50       	subi	r19, 0x01	; 1
    14ca:	d1 f7       	brne	.-12     	; 0x14c0 <mulacc+0x32>
    14cc:	7b 01       	movw	r14, r22
    14ce:	8c 01       	movw	r16, r24
    14d0:	e2 0e       	add	r14, r18
    14d2:	f1 1c       	adc	r15, r1
    14d4:	01 1d       	adc	r16, r1
    14d6:	11 1d       	adc	r17, r1
    14d8:	a8 01       	movw	r20, r16
    14da:	97 01       	movw	r18, r14
    14dc:	b7 01       	movw	r22, r14
    14de:	ca 01       	movw	r24, r20
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	ff 90       	pop	r15
    14e6:	ef 90       	pop	r14
    14e8:	08 95       	ret

000014ea <skip_spaces>:
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	8c 01       	movw	r16, r24
    14f4:	c8 01       	movw	r24, r16
    14f6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <fgetc>
    14fa:	ec 01       	movw	r28, r24
    14fc:	97 fd       	sbrc	r25, 7
    14fe:	08 c0       	rjmp	.+16     	; 0x1510 <skip_spaces+0x26>
    1500:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <isspace>
    1504:	89 2b       	or	r24, r25
    1506:	b1 f7       	brne	.-20     	; 0x14f4 <skip_spaces+0xa>
    1508:	ce 01       	movw	r24, r28
    150a:	b8 01       	movw	r22, r16
    150c:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <ungetc>
    1510:	ce 01       	movw	r24, r28
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	08 95       	ret

0000151c <conv_int>:
    151c:	a0 e0       	ldi	r26, 0x00	; 0
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e4 e9       	ldi	r30, 0x94	; 148
    1522:	fa e0       	ldi	r31, 0x0A	; 10
    1524:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__prologue_saves__+0x10>
    1528:	ec 01       	movw	r28, r24
    152a:	c6 2e       	mov	r12, r22
    152c:	5a 01       	movw	r10, r20
    152e:	12 2f       	mov	r17, r18
    1530:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <fgetc>
    1534:	ac 01       	movw	r20, r24
    1536:	8b 32       	cpi	r24, 0x2B	; 43
    1538:	19 f0       	breq	.+6      	; 0x1540 <conv_int+0x24>
    153a:	8d 32       	cpi	r24, 0x2D	; 45
    153c:	51 f4       	brne	.+20     	; 0x1552 <conv_int+0x36>
    153e:	10 68       	ori	r17, 0x80	; 128
    1540:	ca 94       	dec	r12
    1542:	09 f4       	brne	.+2      	; 0x1546 <conv_int+0x2a>
    1544:	6d c0       	rjmp	.+218    	; 0x1620 <conv_int+0x104>
    1546:	ce 01       	movw	r24, r28
    1548:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <fgetc>
    154c:	ac 01       	movw	r20, r24
    154e:	97 fd       	sbrc	r25, 7
    1550:	67 c0       	rjmp	.+206    	; 0x1620 <conv_int+0x104>
    1552:	6d ef       	ldi	r22, 0xFD	; 253
    1554:	d6 2e       	mov	r13, r22
    1556:	d1 22       	and	r13, r17
    1558:	8d 2d       	mov	r24, r13
    155a:	80 73       	andi	r24, 0x30	; 48
    155c:	01 f5       	brne	.+64     	; 0x159e <conv_int+0x82>
    155e:	40 33       	cpi	r20, 0x30	; 48
    1560:	f1 f4       	brne	.+60     	; 0x159e <conv_int+0x82>
    1562:	ca 94       	dec	r12
    1564:	09 f4       	brne	.+2      	; 0x1568 <conv_int+0x4c>
    1566:	47 c0       	rjmp	.+142    	; 0x15f6 <conv_int+0xda>
    1568:	ce 01       	movw	r24, r28
    156a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <fgetc>
    156e:	ac 01       	movw	r20, r24
    1570:	97 fd       	sbrc	r25, 7
    1572:	41 c0       	rjmp	.+130    	; 0x15f6 <conv_int+0xda>
    1574:	82 e0       	ldi	r24, 0x02	; 2
    1576:	d8 2a       	or	r13, r24
    1578:	48 37       	cpi	r20, 0x78	; 120
    157a:	11 f0       	breq	.+4      	; 0x1580 <conv_int+0x64>
    157c:	48 35       	cpi	r20, 0x58	; 88
    157e:	59 f4       	brne	.+22     	; 0x1596 <conv_int+0x7a>
    1580:	80 e4       	ldi	r24, 0x40	; 64
    1582:	d8 2a       	or	r13, r24
    1584:	ca 94       	dec	r12
    1586:	b9 f1       	breq	.+110    	; 0x15f6 <conv_int+0xda>
    1588:	ce 01       	movw	r24, r28
    158a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <fgetc>
    158e:	ac 01       	movw	r20, r24
    1590:	99 23       	and	r25, r25
    1592:	2c f4       	brge	.+10     	; 0x159e <conv_int+0x82>
    1594:	30 c0       	rjmp	.+96     	; 0x15f6 <conv_int+0xda>
    1596:	d6 fc       	sbrc	r13, 6
    1598:	02 c0       	rjmp	.+4      	; 0x159e <conv_int+0x82>
    159a:	80 e1       	ldi	r24, 0x10	; 16
    159c:	d8 2a       	or	r13, r24
    159e:	ee 24       	eor	r14, r14
    15a0:	ff 24       	eor	r15, r15
    15a2:	87 01       	movw	r16, r14
    15a4:	24 2f       	mov	r18, r20
    15a6:	20 53       	subi	r18, 0x30	; 48
    15a8:	28 30       	cpi	r18, 0x08	; 8
    15aa:	88 f0       	brcs	.+34     	; 0x15ce <conv_int+0xb2>
    15ac:	d4 fc       	sbrc	r13, 4
    15ae:	09 c0       	rjmp	.+18     	; 0x15c2 <conv_int+0xa6>
    15b0:	2a 30       	cpi	r18, 0x0A	; 10
    15b2:	68 f0       	brcs	.+26     	; 0x15ce <conv_int+0xb2>
    15b4:	d6 fe       	sbrs	r13, 6
    15b6:	05 c0       	rjmp	.+10     	; 0x15c2 <conv_int+0xa6>
    15b8:	2f 7d       	andi	r18, 0xDF	; 223
    15ba:	82 2f       	mov	r24, r18
    15bc:	81 51       	subi	r24, 0x11	; 17
    15be:	86 30       	cpi	r24, 0x06	; 6
    15c0:	28 f0       	brcs	.+10     	; 0x15cc <conv_int+0xb0>
    15c2:	ca 01       	movw	r24, r20
    15c4:	be 01       	movw	r22, r28
    15c6:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <ungetc>
    15ca:	12 c0       	rjmp	.+36     	; 0x15f0 <conv_int+0xd4>
    15cc:	27 50       	subi	r18, 0x07	; 7
    15ce:	c8 01       	movw	r24, r16
    15d0:	b7 01       	movw	r22, r14
    15d2:	4d 2d       	mov	r20, r13
    15d4:	0e 94 47 0a 	call	0x148e	; 0x148e <mulacc>
    15d8:	7b 01       	movw	r14, r22
    15da:	8c 01       	movw	r16, r24
    15dc:	82 e0       	ldi	r24, 0x02	; 2
    15de:	d8 2a       	or	r13, r24
    15e0:	ca 94       	dec	r12
    15e2:	61 f0       	breq	.+24     	; 0x15fc <conv_int+0xe0>
    15e4:	ce 01       	movw	r24, r28
    15e6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <fgetc>
    15ea:	ac 01       	movw	r20, r24
    15ec:	97 ff       	sbrs	r25, 7
    15ee:	da cf       	rjmp	.-76     	; 0x15a4 <conv_int+0x88>
    15f0:	d1 fc       	sbrc	r13, 1
    15f2:	04 c0       	rjmp	.+8      	; 0x15fc <conv_int+0xe0>
    15f4:	15 c0       	rjmp	.+42     	; 0x1620 <conv_int+0x104>
    15f6:	ee 24       	eor	r14, r14
    15f8:	ff 24       	eor	r15, r15
    15fa:	87 01       	movw	r16, r14
    15fc:	d7 fe       	sbrs	r13, 7
    15fe:	08 c0       	rjmp	.+16     	; 0x1610 <conv_int+0xf4>
    1600:	10 95       	com	r17
    1602:	00 95       	com	r16
    1604:	f0 94       	com	r15
    1606:	e0 94       	com	r14
    1608:	e1 1c       	adc	r14, r1
    160a:	f1 1c       	adc	r15, r1
    160c:	01 1d       	adc	r16, r1
    160e:	11 1d       	adc	r17, r1
    1610:	c5 01       	movw	r24, r10
    1612:	b8 01       	movw	r22, r16
    1614:	a7 01       	movw	r20, r14
    1616:	2d 2d       	mov	r18, r13
    1618:	0e 94 3b 0a 	call	0x1476	; 0x1476 <putval>
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <conv_int+0x106>
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	ea e0       	ldi	r30, 0x0A	; 10
    1628:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__epilogue_restores__+0x10>

0000162c <conv_brk>:
    162c:	a0 e2       	ldi	r26, 0x20	; 32
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	ec e1       	ldi	r30, 0x1C	; 28
    1632:	fb e0       	ldi	r31, 0x0B	; 11
    1634:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__prologue_saves__+0x8>
    1638:	6c 01       	movw	r12, r24
    163a:	a6 2e       	mov	r10, r22
    163c:	8a 01       	movw	r16, r20
    163e:	79 01       	movw	r14, r18
    1640:	fe 01       	movw	r30, r28
    1642:	31 96       	adiw	r30, 0x01	; 1
    1644:	80 e2       	ldi	r24, 0x20	; 32
    1646:	df 01       	movw	r26, r30
    1648:	1d 92       	st	X+, r1
    164a:	8a 95       	dec	r24
    164c:	e9 f7       	brne	.-6      	; 0x1648 <conv_brk+0x1c>
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	40 e0       	ldi	r20, 0x00	; 0
    1656:	50 e0       	ldi	r21, 0x00	; 0
    1658:	4f 01       	movw	r8, r30
    165a:	a1 e0       	ldi	r26, 0x01	; 1
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	f6 01       	movw	r30, r12
    1660:	83 81       	ldd	r24, Z+3	; 0x03
    1662:	f7 01       	movw	r30, r14
    1664:	83 fd       	sbrc	r24, 3
    1666:	25 91       	lpm	r18, Z+
    1668:	83 ff       	sbrs	r24, 3
    166a:	21 91       	ld	r18, Z+
    166c:	7f 01       	movw	r14, r30
    166e:	22 23       	and	r18, r18
    1670:	09 f4       	brne	.+2      	; 0x1674 <conv_brk+0x48>
    1672:	7e c0       	rjmp	.+252    	; 0x1770 <conv_brk+0x144>
    1674:	2e 35       	cpi	r18, 0x5E	; 94
    1676:	19 f4       	brne	.+6      	; 0x167e <conv_brk+0x52>
    1678:	41 15       	cp	r20, r1
    167a:	51 05       	cpc	r21, r1
    167c:	69 f1       	breq	.+90     	; 0x16d8 <conv_brk+0xac>
    167e:	87 2f       	mov	r24, r23
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	84 17       	cp	r24, r20
    1684:	95 07       	cpc	r25, r21
    1686:	44 f4       	brge	.+16     	; 0x1698 <conv_brk+0x6c>
    1688:	2d 35       	cpi	r18, 0x5D	; 93
    168a:	51 f1       	breq	.+84     	; 0x16e0 <conv_brk+0xb4>
    168c:	2d 32       	cpi	r18, 0x2D	; 45
    168e:	21 f4       	brne	.+8      	; 0x1698 <conv_brk+0x6c>
    1690:	33 23       	and	r19, r19
    1692:	29 f4       	brne	.+10     	; 0x169e <conv_brk+0x72>
    1694:	31 e0       	ldi	r19, 0x01	; 1
    1696:	21 c0       	rjmp	.+66     	; 0x16da <conv_brk+0xae>
    1698:	33 23       	and	r19, r19
    169a:	09 f4       	brne	.+2      	; 0x169e <conv_brk+0x72>
    169c:	62 2f       	mov	r22, r18
    169e:	32 2f       	mov	r19, r18
    16a0:	83 2f       	mov	r24, r19
    16a2:	86 95       	lsr	r24
    16a4:	86 95       	lsr	r24
    16a6:	86 95       	lsr	r24
    16a8:	f4 01       	movw	r30, r8
    16aa:	e8 0f       	add	r30, r24
    16ac:	f1 1d       	adc	r31, r1
    16ae:	83 2f       	mov	r24, r19
    16b0:	87 70       	andi	r24, 0x07	; 7
    16b2:	3d 01       	movw	r6, r26
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <conv_brk+0x8e>
    16b6:	66 0c       	add	r6, r6
    16b8:	77 1c       	adc	r7, r7
    16ba:	8a 95       	dec	r24
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <conv_brk+0x8a>
    16be:	20 81       	ld	r18, Z
    16c0:	26 29       	or	r18, r6
    16c2:	20 83       	st	Z, r18
    16c4:	36 17       	cp	r19, r22
    16c6:	11 f4       	brne	.+4      	; 0x16cc <conv_brk+0xa0>
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	07 c0       	rjmp	.+14     	; 0x16da <conv_brk+0xae>
    16cc:	36 17       	cp	r19, r22
    16ce:	10 f4       	brcc	.+4      	; 0x16d4 <conv_brk+0xa8>
    16d0:	3f 5f       	subi	r19, 0xFF	; 255
    16d2:	e6 cf       	rjmp	.-52     	; 0x16a0 <conv_brk+0x74>
    16d4:	31 50       	subi	r19, 0x01	; 1
    16d6:	e4 cf       	rjmp	.-56     	; 0x16a0 <conv_brk+0x74>
    16d8:	71 e0       	ldi	r23, 0x01	; 1
    16da:	4f 5f       	subi	r20, 0xFF	; 255
    16dc:	5f 4f       	sbci	r21, 0xFF	; 255
    16de:	bf cf       	rjmp	.-130    	; 0x165e <conv_brk+0x32>
    16e0:	33 23       	and	r19, r19
    16e2:	19 f0       	breq	.+6      	; 0x16ea <conv_brk+0xbe>
    16e4:	8e 81       	ldd	r24, Y+6	; 0x06
    16e6:	80 62       	ori	r24, 0x20	; 32
    16e8:	8e 83       	std	Y+6, r24	; 0x06
    16ea:	77 23       	and	r23, r23
    16ec:	59 f0       	breq	.+22     	; 0x1704 <conv_brk+0xd8>
    16ee:	fe 01       	movw	r30, r28
    16f0:	31 96       	adiw	r30, 0x01	; 1
    16f2:	9e 01       	movw	r18, r28
    16f4:	2f 5d       	subi	r18, 0xDF	; 223
    16f6:	3f 4f       	sbci	r19, 0xFF	; 255
    16f8:	80 81       	ld	r24, Z
    16fa:	80 95       	com	r24
    16fc:	81 93       	st	Z+, r24
    16fe:	e2 17       	cp	r30, r18
    1700:	f3 07       	cpc	r31, r19
    1702:	d1 f7       	brne	.-12     	; 0x16f8 <conv_brk+0xcc>
    1704:	bb 24       	eor	r11, r11
    1706:	b3 94       	inc	r11
    1708:	4e 01       	movw	r8, r28
    170a:	08 94       	sec
    170c:	81 1c       	adc	r8, r1
    170e:	91 1c       	adc	r9, r1
    1710:	c6 01       	movw	r24, r12
    1712:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <fgetc>
    1716:	ac 01       	movw	r20, r24
    1718:	97 fd       	sbrc	r25, 7
    171a:	22 c0       	rjmp	.+68     	; 0x1760 <conv_brk+0x134>
    171c:	86 95       	lsr	r24
    171e:	86 95       	lsr	r24
    1720:	86 95       	lsr	r24
    1722:	f4 01       	movw	r30, r8
    1724:	e8 0f       	add	r30, r24
    1726:	f1 1d       	adc	r31, r1
    1728:	80 81       	ld	r24, Z
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9a 01       	movw	r18, r20
    172e:	27 70       	andi	r18, 0x07	; 7
    1730:	30 70       	andi	r19, 0x00	; 0
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <conv_brk+0x10c>
    1734:	95 95       	asr	r25
    1736:	87 95       	ror	r24
    1738:	2a 95       	dec	r18
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <conv_brk+0x108>
    173c:	80 fd       	sbrc	r24, 0
    173e:	05 c0       	rjmp	.+10     	; 0x174a <conv_brk+0x11e>
    1740:	ca 01       	movw	r24, r20
    1742:	b6 01       	movw	r22, r12
    1744:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <ungetc>
    1748:	0b c0       	rjmp	.+22     	; 0x1760 <conv_brk+0x134>
    174a:	01 15       	cp	r16, r1
    174c:	11 05       	cpc	r17, r1
    174e:	19 f0       	breq	.+6      	; 0x1756 <conv_brk+0x12a>
    1750:	d8 01       	movw	r26, r16
    1752:	4d 93       	st	X+, r20
    1754:	8d 01       	movw	r16, r26
    1756:	aa 94       	dec	r10
    1758:	bb 24       	eor	r11, r11
    175a:	aa 20       	and	r10, r10
    175c:	c9 f6       	brne	.-78     	; 0x1710 <conv_brk+0xe4>
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <conv_brk+0x138>
    1760:	bb 20       	and	r11, r11
    1762:	31 f4       	brne	.+12     	; 0x1770 <conv_brk+0x144>
    1764:	01 15       	cp	r16, r1
    1766:	11 05       	cpc	r17, r1
    1768:	29 f0       	breq	.+10     	; 0x1774 <conv_brk+0x148>
    176a:	f8 01       	movw	r30, r16
    176c:	10 82       	st	Z, r1
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <conv_brk+0x148>
    1770:	ee 24       	eor	r14, r14
    1772:	ff 24       	eor	r15, r15
    1774:	c7 01       	movw	r24, r14
    1776:	a0 96       	adiw	r28, 0x20	; 32
    1778:	ee e0       	ldi	r30, 0x0E	; 14
    177a:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <__epilogue_restores__+0x8>

0000177e <vfscanf>:
    177e:	a0 e0       	ldi	r26, 0x00	; 0
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e5 ec       	ldi	r30, 0xC5	; 197
    1784:	fb e0       	ldi	r31, 0x0B	; 11
    1786:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__prologue_saves__+0x8>
    178a:	5c 01       	movw	r10, r24
    178c:	6b 01       	movw	r12, r22
    178e:	3a 01       	movw	r6, r20
    1790:	fc 01       	movw	r30, r24
    1792:	17 82       	std	Z+7, r1	; 0x07
    1794:	16 82       	std	Z+6, r1	; 0x06
    1796:	88 24       	eor	r8, r8
    1798:	ea c0       	rjmp	.+468    	; 0x196e <vfscanf+0x1f0>
    179a:	81 2f       	mov	r24, r17
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <isspace>
    17a2:	89 2b       	or	r24, r25
    17a4:	21 f0       	breq	.+8      	; 0x17ae <vfscanf+0x30>
    17a6:	c5 01       	movw	r24, r10
    17a8:	0e 94 75 0a 	call	0x14ea	; 0x14ea <skip_spaces>
    17ac:	e0 c0       	rjmp	.+448    	; 0x196e <vfscanf+0x1f0>
    17ae:	15 32       	cpi	r17, 0x25	; 37
    17b0:	49 f4       	brne	.+18     	; 0x17c4 <vfscanf+0x46>
    17b2:	f6 01       	movw	r30, r12
    17b4:	f3 fc       	sbrc	r15, 3
    17b6:	65 91       	lpm	r22, Z+
    17b8:	f3 fe       	sbrs	r15, 3
    17ba:	61 91       	ld	r22, Z+
    17bc:	6f 01       	movw	r12, r30
    17be:	65 32       	cpi	r22, 0x25	; 37
    17c0:	69 f4       	brne	.+26     	; 0x17dc <vfscanf+0x5e>
    17c2:	15 e2       	ldi	r17, 0x25	; 37
    17c4:	c5 01       	movw	r24, r10
    17c6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <fgetc>
    17ca:	97 fd       	sbrc	r25, 7
    17cc:	dc c0       	rjmp	.+440    	; 0x1986 <vfscanf+0x208>
    17ce:	18 17       	cp	r17, r24
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <vfscanf+0x56>
    17d2:	cd c0       	rjmp	.+410    	; 0x196e <vfscanf+0x1f0>
    17d4:	b5 01       	movw	r22, r10
    17d6:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <ungetc>
    17da:	da c0       	rjmp	.+436    	; 0x1990 <vfscanf+0x212>
    17dc:	6a 32       	cpi	r22, 0x2A	; 42
    17de:	19 f0       	breq	.+6      	; 0x17e6 <vfscanf+0x68>
    17e0:	16 2f       	mov	r17, r22
    17e2:	00 e0       	ldi	r16, 0x00	; 0
    17e4:	06 c0       	rjmp	.+12     	; 0x17f2 <vfscanf+0x74>
    17e6:	f3 fc       	sbrc	r15, 3
    17e8:	15 91       	lpm	r17, Z+
    17ea:	f3 fe       	sbrs	r15, 3
    17ec:	11 91       	ld	r17, Z+
    17ee:	6f 01       	movw	r12, r30
    17f0:	01 e0       	ldi	r16, 0x01	; 1
    17f2:	99 24       	eor	r9, r9
    17f4:	0f c0       	rjmp	.+30     	; 0x1814 <vfscanf+0x96>
    17f6:	02 60       	ori	r16, 0x02	; 2
    17f8:	69 2d       	mov	r22, r9
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	40 e2       	ldi	r20, 0x20	; 32
    1802:	0e 94 47 0a 	call	0x148e	; 0x148e <mulacc>
    1806:	96 2e       	mov	r9, r22
    1808:	f6 01       	movw	r30, r12
    180a:	f3 fc       	sbrc	r15, 3
    180c:	15 91       	lpm	r17, Z+
    180e:	f3 fe       	sbrs	r15, 3
    1810:	11 91       	ld	r17, Z+
    1812:	6f 01       	movw	r12, r30
    1814:	21 2f       	mov	r18, r17
    1816:	20 53       	subi	r18, 0x30	; 48
    1818:	2a 30       	cpi	r18, 0x0A	; 10
    181a:	68 f3       	brcs	.-38     	; 0x17f6 <vfscanf+0x78>
    181c:	01 fd       	sbrc	r16, 1
    181e:	03 c0       	rjmp	.+6      	; 0x1826 <vfscanf+0xa8>
    1820:	99 24       	eor	r9, r9
    1822:	9a 94       	dec	r9
    1824:	03 c0       	rjmp	.+6      	; 0x182c <vfscanf+0xae>
    1826:	99 20       	and	r9, r9
    1828:	09 f4       	brne	.+2      	; 0x182c <vfscanf+0xae>
    182a:	b2 c0       	rjmp	.+356    	; 0x1990 <vfscanf+0x212>
    182c:	18 36       	cpi	r17, 0x68	; 104
    182e:	21 f0       	breq	.+8      	; 0x1838 <vfscanf+0xba>
    1830:	1c 36       	cpi	r17, 0x6C	; 108
    1832:	99 f4       	brne	.+38     	; 0x185a <vfscanf+0xdc>
    1834:	f6 01       	movw	r30, r12
    1836:	0b c0       	rjmp	.+22     	; 0x184e <vfscanf+0xd0>
    1838:	f6 01       	movw	r30, r12
    183a:	f3 fc       	sbrc	r15, 3
    183c:	65 91       	lpm	r22, Z+
    183e:	f3 fe       	sbrs	r15, 3
    1840:	61 91       	ld	r22, Z+
    1842:	68 36       	cpi	r22, 0x68	; 104
    1844:	19 f0       	breq	.+6      	; 0x184c <vfscanf+0xce>
    1846:	6f 01       	movw	r12, r30
    1848:	16 2f       	mov	r17, r22
    184a:	07 c0       	rjmp	.+14     	; 0x185a <vfscanf+0xdc>
    184c:	08 60       	ori	r16, 0x08	; 8
    184e:	04 60       	ori	r16, 0x04	; 4
    1850:	f3 fc       	sbrc	r15, 3
    1852:	15 91       	lpm	r17, Z+
    1854:	f3 fe       	sbrs	r15, 3
    1856:	11 91       	ld	r17, Z+
    1858:	6f 01       	movw	r12, r30
    185a:	11 23       	and	r17, r17
    185c:	09 f4       	brne	.+2      	; 0x1860 <vfscanf+0xe2>
    185e:	98 c0       	rjmp	.+304    	; 0x1990 <vfscanf+0x212>
    1860:	8c e8       	ldi	r24, 0x8C	; 140
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	61 2f       	mov	r22, r17
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <strchr_P>
    186c:	89 2b       	or	r24, r25
    186e:	09 f4       	brne	.+2      	; 0x1872 <vfscanf+0xf4>
    1870:	8f c0       	rjmp	.+286    	; 0x1990 <vfscanf+0x212>
    1872:	80 2f       	mov	r24, r16
    1874:	00 ff       	sbrs	r16, 0
    1876:	03 c0       	rjmp	.+6      	; 0x187e <vfscanf+0x100>
    1878:	ee 24       	eor	r14, r14
    187a:	ff 24       	eor	r15, r15
    187c:	07 c0       	rjmp	.+14     	; 0x188c <vfscanf+0x10e>
    187e:	f3 01       	movw	r30, r6
    1880:	e0 80       	ld	r14, Z
    1882:	f1 80       	ldd	r15, Z+1	; 0x01
    1884:	22 e0       	ldi	r18, 0x02	; 2
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	62 0e       	add	r6, r18
    188a:	73 1e       	adc	r7, r19
    188c:	1e 36       	cpi	r17, 0x6E	; 110
    188e:	51 f4       	brne	.+20     	; 0x18a4 <vfscanf+0x126>
    1890:	f5 01       	movw	r30, r10
    1892:	46 81       	ldd	r20, Z+6	; 0x06
    1894:	57 81       	ldd	r21, Z+7	; 0x07
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	c7 01       	movw	r24, r14
    189c:	20 2f       	mov	r18, r16
    189e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <putval>
    18a2:	65 c0       	rjmp	.+202    	; 0x196e <vfscanf+0x1f0>
    18a4:	13 36       	cpi	r17, 0x63	; 99
    18a6:	91 f4       	brne	.+36     	; 0x18cc <vfscanf+0x14e>
    18a8:	81 fd       	sbrc	r24, 1
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <vfscanf+0x132>
    18ac:	99 24       	eor	r9, r9
    18ae:	93 94       	inc	r9
    18b0:	c5 01       	movw	r24, r10
    18b2:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <fgetc>
    18b6:	97 fd       	sbrc	r25, 7
    18b8:	66 c0       	rjmp	.+204    	; 0x1986 <vfscanf+0x208>
    18ba:	e1 14       	cp	r14, r1
    18bc:	f1 04       	cpc	r15, r1
    18be:	19 f0       	breq	.+6      	; 0x18c6 <vfscanf+0x148>
    18c0:	f7 01       	movw	r30, r14
    18c2:	81 93       	st	Z+, r24
    18c4:	7f 01       	movw	r14, r30
    18c6:	9a 94       	dec	r9
    18c8:	99 f7       	brne	.-26     	; 0x18b0 <vfscanf+0x132>
    18ca:	4f c0       	rjmp	.+158    	; 0x196a <vfscanf+0x1ec>
    18cc:	1b 35       	cpi	r17, 0x5B	; 91
    18ce:	59 f4       	brne	.+22     	; 0x18e6 <vfscanf+0x168>
    18d0:	c5 01       	movw	r24, r10
    18d2:	69 2d       	mov	r22, r9
    18d4:	a7 01       	movw	r20, r14
    18d6:	96 01       	movw	r18, r12
    18d8:	0e 94 16 0b 	call	0x162c	; 0x162c <conv_brk>
    18dc:	6c 01       	movw	r12, r24
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	09 f0       	breq	.+2      	; 0x18e4 <vfscanf+0x166>
    18e2:	43 c0       	rjmp	.+134    	; 0x196a <vfscanf+0x1ec>
    18e4:	3d c0       	rjmp	.+122    	; 0x1960 <vfscanf+0x1e2>
    18e6:	c5 01       	movw	r24, r10
    18e8:	0e 94 75 0a 	call	0x14ea	; 0x14ea <skip_spaces>
    18ec:	97 fd       	sbrc	r25, 7
    18ee:	4b c0       	rjmp	.+150    	; 0x1986 <vfscanf+0x208>
    18f0:	1f 36       	cpi	r17, 0x6F	; 111
    18f2:	59 f1       	breq	.+86     	; 0x194a <vfscanf+0x1cc>
    18f4:	10 37       	cpi	r17, 0x70	; 112
    18f6:	28 f4       	brcc	.+10     	; 0x1902 <vfscanf+0x184>
    18f8:	14 36       	cpi	r17, 0x64	; 100
    18fa:	29 f1       	breq	.+74     	; 0x1946 <vfscanf+0x1c8>
    18fc:	19 36       	cpi	r17, 0x69	; 105
    18fe:	39 f5       	brne	.+78     	; 0x194e <vfscanf+0x1d0>
    1900:	27 c0       	rjmp	.+78     	; 0x1950 <vfscanf+0x1d2>
    1902:	13 37       	cpi	r17, 0x73	; 115
    1904:	19 f0       	breq	.+6      	; 0x190c <vfscanf+0x18e>
    1906:	15 37       	cpi	r17, 0x75	; 117
    1908:	11 f5       	brne	.+68     	; 0x194e <vfscanf+0x1d0>
    190a:	1d c0       	rjmp	.+58     	; 0x1946 <vfscanf+0x1c8>
    190c:	c5 01       	movw	r24, r10
    190e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <fgetc>
    1912:	ec 01       	movw	r28, r24
    1914:	97 fd       	sbrc	r25, 7
    1916:	11 c0       	rjmp	.+34     	; 0x193a <vfscanf+0x1bc>
    1918:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <isspace>
    191c:	89 2b       	or	r24, r25
    191e:	29 f0       	breq	.+10     	; 0x192a <vfscanf+0x1ac>
    1920:	ce 01       	movw	r24, r28
    1922:	b5 01       	movw	r22, r10
    1924:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <ungetc>
    1928:	08 c0       	rjmp	.+16     	; 0x193a <vfscanf+0x1bc>
    192a:	e1 14       	cp	r14, r1
    192c:	f1 04       	cpc	r15, r1
    192e:	19 f0       	breq	.+6      	; 0x1936 <vfscanf+0x1b8>
    1930:	f7 01       	movw	r30, r14
    1932:	c1 93       	st	Z+, r28
    1934:	7f 01       	movw	r14, r30
    1936:	9a 94       	dec	r9
    1938:	49 f7       	brne	.-46     	; 0x190c <vfscanf+0x18e>
    193a:	e1 14       	cp	r14, r1
    193c:	f1 04       	cpc	r15, r1
    193e:	a9 f0       	breq	.+42     	; 0x196a <vfscanf+0x1ec>
    1940:	f7 01       	movw	r30, r14
    1942:	10 82       	st	Z, r1
    1944:	12 c0       	rjmp	.+36     	; 0x196a <vfscanf+0x1ec>
    1946:	00 62       	ori	r16, 0x20	; 32
    1948:	03 c0       	rjmp	.+6      	; 0x1950 <vfscanf+0x1d2>
    194a:	00 61       	ori	r16, 0x10	; 16
    194c:	01 c0       	rjmp	.+2      	; 0x1950 <vfscanf+0x1d2>
    194e:	00 64       	ori	r16, 0x40	; 64
    1950:	c5 01       	movw	r24, r10
    1952:	69 2d       	mov	r22, r9
    1954:	a7 01       	movw	r20, r14
    1956:	20 2f       	mov	r18, r16
    1958:	0e 94 8e 0a 	call	0x151c	; 0x151c <conv_int>
    195c:	88 23       	and	r24, r24
    195e:	29 f4       	brne	.+10     	; 0x196a <vfscanf+0x1ec>
    1960:	f5 01       	movw	r30, r10
    1962:	83 81       	ldd	r24, Z+3	; 0x03
    1964:	80 73       	andi	r24, 0x30	; 48
    1966:	79 f4       	brne	.+30     	; 0x1986 <vfscanf+0x208>
    1968:	13 c0       	rjmp	.+38     	; 0x1990 <vfscanf+0x212>
    196a:	00 ff       	sbrs	r16, 0
    196c:	83 94       	inc	r8
    196e:	f5 01       	movw	r30, r10
    1970:	f3 80       	ldd	r15, Z+3	; 0x03
    1972:	f6 01       	movw	r30, r12
    1974:	f3 fc       	sbrc	r15, 3
    1976:	15 91       	lpm	r17, Z+
    1978:	f3 fe       	sbrs	r15, 3
    197a:	11 91       	ld	r17, Z+
    197c:	6f 01       	movw	r12, r30
    197e:	11 23       	and	r17, r17
    1980:	09 f0       	breq	.+2      	; 0x1984 <vfscanf+0x206>
    1982:	0b cf       	rjmp	.-490    	; 0x179a <vfscanf+0x1c>
    1984:	05 c0       	rjmp	.+10     	; 0x1990 <vfscanf+0x212>
    1986:	88 20       	and	r8, r8
    1988:	19 f4       	brne	.+6      	; 0x1990 <vfscanf+0x212>
    198a:	2f ef       	ldi	r18, 0xFF	; 255
    198c:	3f ef       	ldi	r19, 0xFF	; 255
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <vfscanf+0x216>
    1990:	28 2d       	mov	r18, r8
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	c9 01       	movw	r24, r18
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	ee e0       	ldi	r30, 0x0E	; 14
    199c:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <__epilogue_restores__+0x8>

000019a0 <strchr_P>:
    19a0:	fc 01       	movw	r30, r24
    19a2:	05 90       	lpm	r0, Z+
    19a4:	06 16       	cp	r0, r22
    19a6:	21 f0       	breq	.+8      	; 0x19b0 <strchr_P+0x10>
    19a8:	00 20       	and	r0, r0
    19aa:	d9 f7       	brne	.-10     	; 0x19a2 <strchr_P+0x2>
    19ac:	c0 01       	movw	r24, r0
    19ae:	08 95       	ret
    19b0:	31 97       	sbiw	r30, 0x01	; 1
    19b2:	cf 01       	movw	r24, r30
    19b4:	08 95       	ret

000019b6 <strnlen_P>:
    19b6:	fc 01       	movw	r30, r24
    19b8:	05 90       	lpm	r0, Z+
    19ba:	61 50       	subi	r22, 0x01	; 1
    19bc:	70 40       	sbci	r23, 0x00	; 0
    19be:	01 10       	cpse	r0, r1
    19c0:	d8 f7       	brcc	.-10     	; 0x19b8 <strnlen_P+0x2>
    19c2:	80 95       	com	r24
    19c4:	90 95       	com	r25
    19c6:	8e 0f       	add	r24, r30
    19c8:	9f 1f       	adc	r25, r31
    19ca:	08 95       	ret

000019cc <strnlen>:
    19cc:	fc 01       	movw	r30, r24
    19ce:	61 50       	subi	r22, 0x01	; 1
    19d0:	70 40       	sbci	r23, 0x00	; 0
    19d2:	01 90       	ld	r0, Z+
    19d4:	01 10       	cpse	r0, r1
    19d6:	d8 f7       	brcc	.-10     	; 0x19ce <strnlen+0x2>
    19d8:	80 95       	com	r24
    19da:	90 95       	com	r25
    19dc:	8e 0f       	add	r24, r30
    19de:	9f 1f       	adc	r25, r31
    19e0:	08 95       	ret

000019e2 <fgetc>:
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	ec 01       	movw	r28, r24
    19e8:	4b 81       	ldd	r20, Y+3	; 0x03
    19ea:	40 ff       	sbrs	r20, 0
    19ec:	1a c0       	rjmp	.+52     	; 0x1a22 <fgetc+0x40>
    19ee:	46 ff       	sbrs	r20, 6
    19f0:	0a c0       	rjmp	.+20     	; 0x1a06 <fgetc+0x24>
    19f2:	4f 7b       	andi	r20, 0xBF	; 191
    19f4:	4b 83       	std	Y+3, r20	; 0x03
    19f6:	8e 81       	ldd	r24, Y+6	; 0x06
    19f8:	9f 81       	ldd	r25, Y+7	; 0x07
    19fa:	01 96       	adiw	r24, 0x01	; 1
    19fc:	9f 83       	std	Y+7, r25	; 0x07
    19fe:	8e 83       	std	Y+6, r24	; 0x06
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	28 2f       	mov	r18, r24
    1a04:	2b c0       	rjmp	.+86     	; 0x1a5c <fgetc+0x7a>
    1a06:	42 ff       	sbrs	r20, 2
    1a08:	13 c0       	rjmp	.+38     	; 0x1a30 <fgetc+0x4e>
    1a0a:	e8 81       	ld	r30, Y
    1a0c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a0e:	80 81       	ld	r24, Z
    1a10:	28 2f       	mov	r18, r24
    1a12:	33 27       	eor	r19, r19
    1a14:	27 fd       	sbrc	r18, 7
    1a16:	30 95       	com	r19
    1a18:	21 15       	cp	r18, r1
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	29 f4       	brne	.+10     	; 0x1a28 <fgetc+0x46>
    1a1e:	40 62       	ori	r20, 0x20	; 32
    1a20:	4b 83       	std	Y+3, r20	; 0x03
    1a22:	2f ef       	ldi	r18, 0xFF	; 255
    1a24:	3f ef       	ldi	r19, 0xFF	; 255
    1a26:	1b c0       	rjmp	.+54     	; 0x1a5e <fgetc+0x7c>
    1a28:	31 96       	adiw	r30, 0x01	; 1
    1a2a:	f9 83       	std	Y+1, r31	; 0x01
    1a2c:	e8 83       	st	Y, r30
    1a2e:	11 c0       	rjmp	.+34     	; 0x1a52 <fgetc+0x70>
    1a30:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a32:	fb 85       	ldd	r31, Y+11	; 0x0b
    1a34:	ce 01       	movw	r24, r28
    1a36:	09 95       	icall
    1a38:	9c 01       	movw	r18, r24
    1a3a:	97 ff       	sbrs	r25, 7
    1a3c:	0a c0       	rjmp	.+20     	; 0x1a52 <fgetc+0x70>
    1a3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a40:	2f 5f       	subi	r18, 0xFF	; 255
    1a42:	3f 4f       	sbci	r19, 0xFF	; 255
    1a44:	11 f0       	breq	.+4      	; 0x1a4a <fgetc+0x68>
    1a46:	80 e2       	ldi	r24, 0x20	; 32
    1a48:	01 c0       	rjmp	.+2      	; 0x1a4c <fgetc+0x6a>
    1a4a:	80 e1       	ldi	r24, 0x10	; 16
    1a4c:	89 2b       	or	r24, r25
    1a4e:	8b 83       	std	Y+3, r24	; 0x03
    1a50:	e8 cf       	rjmp	.-48     	; 0x1a22 <fgetc+0x40>
    1a52:	8e 81       	ldd	r24, Y+6	; 0x06
    1a54:	9f 81       	ldd	r25, Y+7	; 0x07
    1a56:	01 96       	adiw	r24, 0x01	; 1
    1a58:	9f 83       	std	Y+7, r25	; 0x07
    1a5a:	8e 83       	std	Y+6, r24	; 0x06
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	c9 01       	movw	r24, r18
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	08 95       	ret

00001a66 <fputc>:
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	8c 01       	movw	r16, r24
    1a70:	eb 01       	movw	r28, r22
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	81 ff       	sbrs	r24, 1
    1a76:	1b c0       	rjmp	.+54     	; 0x1aae <fputc+0x48>
    1a78:	82 ff       	sbrs	r24, 2
    1a7a:	0d c0       	rjmp	.+26     	; 0x1a96 <fputc+0x30>
    1a7c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a7e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a80:	8c 81       	ldd	r24, Y+4	; 0x04
    1a82:	9d 81       	ldd	r25, Y+5	; 0x05
    1a84:	28 17       	cp	r18, r24
    1a86:	39 07       	cpc	r19, r25
    1a88:	64 f4       	brge	.+24     	; 0x1aa2 <fputc+0x3c>
    1a8a:	e8 81       	ld	r30, Y
    1a8c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a8e:	01 93       	st	Z+, r16
    1a90:	f9 83       	std	Y+1, r31	; 0x01
    1a92:	e8 83       	st	Y, r30
    1a94:	06 c0       	rjmp	.+12     	; 0x1aa2 <fputc+0x3c>
    1a96:	e8 85       	ldd	r30, Y+8	; 0x08
    1a98:	f9 85       	ldd	r31, Y+9	; 0x09
    1a9a:	80 2f       	mov	r24, r16
    1a9c:	09 95       	icall
    1a9e:	89 2b       	or	r24, r25
    1aa0:	31 f4       	brne	.+12     	; 0x1aae <fputc+0x48>
    1aa2:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa4:	9f 81       	ldd	r25, Y+7	; 0x07
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	9f 83       	std	Y+7, r25	; 0x07
    1aaa:	8e 83       	std	Y+6, r24	; 0x06
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <fputc+0x4c>
    1aae:	0f ef       	ldi	r16, 0xFF	; 255
    1ab0:	1f ef       	ldi	r17, 0xFF	; 255
    1ab2:	c8 01       	movw	r24, r16
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	08 95       	ret

00001abe <ungetc>:
    1abe:	9c 01       	movw	r18, r24
    1ac0:	fb 01       	movw	r30, r22
    1ac2:	83 81       	ldd	r24, Z+3	; 0x03
    1ac4:	80 ff       	sbrs	r24, 0
    1ac6:	11 c0       	rjmp	.+34     	; 0x1aea <ungetc+0x2c>
    1ac8:	86 fd       	sbrc	r24, 6
    1aca:	0f c0       	rjmp	.+30     	; 0x1aea <ungetc+0x2c>
    1acc:	9f ef       	ldi	r25, 0xFF	; 255
    1ace:	2f 3f       	cpi	r18, 0xFF	; 255
    1ad0:	39 07       	cpc	r19, r25
    1ad2:	59 f0       	breq	.+22     	; 0x1aea <ungetc+0x2c>
    1ad4:	22 83       	std	Z+2, r18	; 0x02
    1ad6:	80 64       	ori	r24, 0x40	; 64
    1ad8:	8f 7d       	andi	r24, 0xDF	; 223
    1ada:	83 83       	std	Z+3, r24	; 0x03
    1adc:	86 81       	ldd	r24, Z+6	; 0x06
    1ade:	97 81       	ldd	r25, Z+7	; 0x07
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	97 83       	std	Z+7, r25	; 0x07
    1ae4:	86 83       	std	Z+6, r24	; 0x06
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <ungetc+0x30>
    1aea:	2f ef       	ldi	r18, 0xFF	; 255
    1aec:	3f ef       	ldi	r19, 0xFF	; 255
    1aee:	c9 01       	movw	r24, r18
    1af0:	08 95       	ret

00001af2 <__ultoa_invert>:
    1af2:	fa 01       	movw	r30, r20
    1af4:	aa 27       	eor	r26, r26
    1af6:	28 30       	cpi	r18, 0x08	; 8
    1af8:	51 f1       	breq	.+84     	; 0x1b4e <__ultoa_invert+0x5c>
    1afa:	20 31       	cpi	r18, 0x10	; 16
    1afc:	81 f1       	breq	.+96     	; 0x1b5e <__ultoa_invert+0x6c>
    1afe:	e8 94       	clt
    1b00:	6f 93       	push	r22
    1b02:	6e 7f       	andi	r22, 0xFE	; 254
    1b04:	6e 5f       	subi	r22, 0xFE	; 254
    1b06:	7f 4f       	sbci	r23, 0xFF	; 255
    1b08:	8f 4f       	sbci	r24, 0xFF	; 255
    1b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0c:	af 4f       	sbci	r26, 0xFF	; 255
    1b0e:	b1 e0       	ldi	r27, 0x01	; 1
    1b10:	3e d0       	rcall	.+124    	; 0x1b8e <__ultoa_invert+0x9c>
    1b12:	b4 e0       	ldi	r27, 0x04	; 4
    1b14:	3c d0       	rcall	.+120    	; 0x1b8e <__ultoa_invert+0x9c>
    1b16:	67 0f       	add	r22, r23
    1b18:	78 1f       	adc	r23, r24
    1b1a:	89 1f       	adc	r24, r25
    1b1c:	9a 1f       	adc	r25, r26
    1b1e:	a1 1d       	adc	r26, r1
    1b20:	68 0f       	add	r22, r24
    1b22:	79 1f       	adc	r23, r25
    1b24:	8a 1f       	adc	r24, r26
    1b26:	91 1d       	adc	r25, r1
    1b28:	a1 1d       	adc	r26, r1
    1b2a:	6a 0f       	add	r22, r26
    1b2c:	71 1d       	adc	r23, r1
    1b2e:	81 1d       	adc	r24, r1
    1b30:	91 1d       	adc	r25, r1
    1b32:	a1 1d       	adc	r26, r1
    1b34:	20 d0       	rcall	.+64     	; 0x1b76 <__ultoa_invert+0x84>
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <__ultoa_invert+0x48>
    1b38:	68 94       	set
    1b3a:	3f 91       	pop	r19
    1b3c:	2a e0       	ldi	r18, 0x0A	; 10
    1b3e:	26 9f       	mul	r18, r22
    1b40:	11 24       	eor	r1, r1
    1b42:	30 19       	sub	r19, r0
    1b44:	30 5d       	subi	r19, 0xD0	; 208
    1b46:	31 93       	st	Z+, r19
    1b48:	de f6       	brtc	.-74     	; 0x1b00 <__ultoa_invert+0xe>
    1b4a:	cf 01       	movw	r24, r30
    1b4c:	08 95       	ret
    1b4e:	46 2f       	mov	r20, r22
    1b50:	47 70       	andi	r20, 0x07	; 7
    1b52:	40 5d       	subi	r20, 0xD0	; 208
    1b54:	41 93       	st	Z+, r20
    1b56:	b3 e0       	ldi	r27, 0x03	; 3
    1b58:	0f d0       	rcall	.+30     	; 0x1b78 <__ultoa_invert+0x86>
    1b5a:	c9 f7       	brne	.-14     	; 0x1b4e <__ultoa_invert+0x5c>
    1b5c:	f6 cf       	rjmp	.-20     	; 0x1b4a <__ultoa_invert+0x58>
    1b5e:	46 2f       	mov	r20, r22
    1b60:	4f 70       	andi	r20, 0x0F	; 15
    1b62:	40 5d       	subi	r20, 0xD0	; 208
    1b64:	4a 33       	cpi	r20, 0x3A	; 58
    1b66:	18 f0       	brcs	.+6      	; 0x1b6e <__ultoa_invert+0x7c>
    1b68:	49 5d       	subi	r20, 0xD9	; 217
    1b6a:	31 fd       	sbrc	r19, 1
    1b6c:	40 52       	subi	r20, 0x20	; 32
    1b6e:	41 93       	st	Z+, r20
    1b70:	02 d0       	rcall	.+4      	; 0x1b76 <__ultoa_invert+0x84>
    1b72:	a9 f7       	brne	.-22     	; 0x1b5e <__ultoa_invert+0x6c>
    1b74:	ea cf       	rjmp	.-44     	; 0x1b4a <__ultoa_invert+0x58>
    1b76:	b4 e0       	ldi	r27, 0x04	; 4
    1b78:	a6 95       	lsr	r26
    1b7a:	97 95       	ror	r25
    1b7c:	87 95       	ror	r24
    1b7e:	77 95       	ror	r23
    1b80:	67 95       	ror	r22
    1b82:	ba 95       	dec	r27
    1b84:	c9 f7       	brne	.-14     	; 0x1b78 <__ultoa_invert+0x86>
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	61 05       	cpc	r22, r1
    1b8a:	71 05       	cpc	r23, r1
    1b8c:	08 95       	ret
    1b8e:	9b 01       	movw	r18, r22
    1b90:	ac 01       	movw	r20, r24
    1b92:	0a 2e       	mov	r0, r26
    1b94:	06 94       	lsr	r0
    1b96:	57 95       	ror	r21
    1b98:	47 95       	ror	r20
    1b9a:	37 95       	ror	r19
    1b9c:	27 95       	ror	r18
    1b9e:	ba 95       	dec	r27
    1ba0:	c9 f7       	brne	.-14     	; 0x1b94 <__ultoa_invert+0xa2>
    1ba2:	62 0f       	add	r22, r18
    1ba4:	73 1f       	adc	r23, r19
    1ba6:	84 1f       	adc	r24, r20
    1ba8:	95 1f       	adc	r25, r21
    1baa:	a0 1d       	adc	r26, r0
    1bac:	08 95       	ret

00001bae <__mulsi3>:
    1bae:	62 9f       	mul	r22, r18
    1bb0:	d0 01       	movw	r26, r0
    1bb2:	73 9f       	mul	r23, r19
    1bb4:	f0 01       	movw	r30, r0
    1bb6:	82 9f       	mul	r24, r18
    1bb8:	e0 0d       	add	r30, r0
    1bba:	f1 1d       	adc	r31, r1
    1bbc:	64 9f       	mul	r22, r20
    1bbe:	e0 0d       	add	r30, r0
    1bc0:	f1 1d       	adc	r31, r1
    1bc2:	92 9f       	mul	r25, r18
    1bc4:	f0 0d       	add	r31, r0
    1bc6:	83 9f       	mul	r24, r19
    1bc8:	f0 0d       	add	r31, r0
    1bca:	74 9f       	mul	r23, r20
    1bcc:	f0 0d       	add	r31, r0
    1bce:	65 9f       	mul	r22, r21
    1bd0:	f0 0d       	add	r31, r0
    1bd2:	99 27       	eor	r25, r25
    1bd4:	72 9f       	mul	r23, r18
    1bd6:	b0 0d       	add	r27, r0
    1bd8:	e1 1d       	adc	r30, r1
    1bda:	f9 1f       	adc	r31, r25
    1bdc:	63 9f       	mul	r22, r19
    1bde:	b0 0d       	add	r27, r0
    1be0:	e1 1d       	adc	r30, r1
    1be2:	f9 1f       	adc	r31, r25
    1be4:	bd 01       	movw	r22, r26
    1be6:	cf 01       	movw	r24, r30
    1be8:	11 24       	eor	r1, r1
    1bea:	08 95       	ret

00001bec <isspace>:
    1bec:	91 11       	cpse	r25, r1
    1bee:	06 c0       	rjmp	.+12     	; 0x1bfc <__ctype_isfalse>
    1bf0:	80 32       	cpi	r24, 0x20	; 32
    1bf2:	19 f0       	breq	.+6      	; 0x1bfa <isspace+0xe>
    1bf4:	89 50       	subi	r24, 0x09	; 9
    1bf6:	85 50       	subi	r24, 0x05	; 5
    1bf8:	d0 f7       	brcc	.-12     	; 0x1bee <isspace+0x2>
    1bfa:	08 95       	ret

00001bfc <__ctype_isfalse>:
    1bfc:	99 27       	eor	r25, r25
    1bfe:	88 27       	eor	r24, r24

00001c00 <__ctype_istrue>:
    1c00:	08 95       	ret

00001c02 <__prologue_saves__>:
    1c02:	2f 92       	push	r2
    1c04:	3f 92       	push	r3
    1c06:	4f 92       	push	r4
    1c08:	5f 92       	push	r5
    1c0a:	6f 92       	push	r6
    1c0c:	7f 92       	push	r7
    1c0e:	8f 92       	push	r8
    1c10:	9f 92       	push	r9
    1c12:	af 92       	push	r10
    1c14:	bf 92       	push	r11
    1c16:	cf 92       	push	r12
    1c18:	df 92       	push	r13
    1c1a:	ef 92       	push	r14
    1c1c:	ff 92       	push	r15
    1c1e:	0f 93       	push	r16
    1c20:	1f 93       	push	r17
    1c22:	cf 93       	push	r28
    1c24:	df 93       	push	r29
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	ca 1b       	sub	r28, r26
    1c2c:	db 0b       	sbc	r29, r27
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	cd bf       	out	0x3d, r28	; 61
    1c38:	09 94       	ijmp

00001c3a <__epilogue_restores__>:
    1c3a:	2a 88       	ldd	r2, Y+18	; 0x12
    1c3c:	39 88       	ldd	r3, Y+17	; 0x11
    1c3e:	48 88       	ldd	r4, Y+16	; 0x10
    1c40:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c42:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c44:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c46:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c48:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c4a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c4c:	b9 84       	ldd	r11, Y+9	; 0x09
    1c4e:	c8 84       	ldd	r12, Y+8	; 0x08
    1c50:	df 80       	ldd	r13, Y+7	; 0x07
    1c52:	ee 80       	ldd	r14, Y+6	; 0x06
    1c54:	fd 80       	ldd	r15, Y+5	; 0x05
    1c56:	0c 81       	ldd	r16, Y+4	; 0x04
    1c58:	1b 81       	ldd	r17, Y+3	; 0x03
    1c5a:	aa 81       	ldd	r26, Y+2	; 0x02
    1c5c:	b9 81       	ldd	r27, Y+1	; 0x01
    1c5e:	ce 0f       	add	r28, r30
    1c60:	d1 1d       	adc	r29, r1
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	ed 01       	movw	r28, r26
    1c6e:	08 95       	ret

00001c70 <_exit>:
    1c70:	f8 94       	cli

00001c72 <__stop_program>:
    1c72:	ff cf       	rjmp	.-2      	; 0x1c72 <__stop_program>
