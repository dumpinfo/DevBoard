__start:
__text_start:
    004E EFCF      LDI	R28,0xFF
    004F E1D0      LDI	R29,0x10
    0050 BFCD      OUT	0x3D,R28
    0051 BFDE      OUT	0x3E,R29
    0052 51CE      SUBI	R28,0x1E
    0053 40D0      SBCI	R29,0
    0054 EA0A      LDI	R16,0xAA
    0055 8308      STD	Y+0,R16
    0056 2400      CLR	R0
    0057 E1E0      LDI	R30,0x10
    0058 E0F1      LDI	R31,1
    0059 E011      LDI	R17,1
    005A 31E1      CPI	R30,0x11
    005B 07F1      CPC	R31,R17
    005C F011      BEQ	0x005F
    005D 9201      ST	R0,Z+
    005E CFFB      RJMP	0x005A
    005F 8300      STD	Z+0,R16
    0060 E8EC      LDI	R30,0x8C
    0061 E0F0      LDI	R31,0
    0062 E0A0      LDI	R26,0
    0063 E0B1      LDI	R27,1
    0064 E010      LDI	R17,0
    0065 39EC      CPI	R30,0x9C
    0066 07F1      CPC	R31,R17
    0067 F021      BEQ	0x006C
    0068 95C8      LPM
    0069 9631      ADIW	R30,1
    006A 920D      ST	R0,X+
    006B CFF9      RJMP	0x0065
    006C 940E0121  CALL	_main
_exit:
    006E CFFF      RJMP	_exit
FILE: C:\icc\include\delay.h
(0001) //********************************************************************
(0002) /*函 数 名：delay_us
(0003) 建立日期：2010年1月28日
(0004) 编译环境：ICCAVR7.16A
(0005) 函数作用：微秒级的延时程序
(0006) 说    明：7.3728M晶振下
(0007) ********************************************************************/
(0008) void delay_1us(void);
(0009) void delay_3us(void);
(0010) void delay_10us(void);
(0011) void delay_50us(void);
(0012) void delay_100us(void);
(0013) void delay_n100us(unsigned char n100us);
(0014) void delay_1ms(void);
(0015) void delay_nms(unsigned int nms);
(0016) void delay_ns(unsigned char ns);
(0017) 
(0018) 
(0019) void delay_1us(void)                 //1us延时函数，不能连续调用， 
(0020) { 
(0021)    asm("nop");                       //1时钟周期
_delay_1us:
    006F 0000      NOP
(0022)    asm("nop");
    0070 0000      NOP
(0023)    asm("nop");
    0071 0000      NOP
(0024)    asm("nop");
    0072 0000      NOP
(0025)    asm("nop");                       //1T
    0073 0000      NOP
(0026)    asm("nop");
    0074 0000      NOP
    0075 9508      RET
(0027) 
(0028) }
(0029) void delay_3us(void)                 //3us延时函数,,可重复调用不影响精度
(0030) { 
(0031)    
(0032)    asm("nop");
_delay_3us:
    0076 0000      NOP
(0033)    asm("nop");
    0077 0000      NOP
(0034)    asm("nop");                       
    0078 0000      NOP
(0035)    asm("nop");
    0079 0000      NOP
(0036)    asm("nop");
    007A 0000      NOP
(0037)    asm("nop");
    007B 0000      NOP
(0038)    asm("nop");                       
    007C 0000      NOP
(0039)    asm("nop");
    007D 0000      NOP
(0040)    asm("nop");
    007E 0000      NOP
(0041)    asm("nop");
    007F 0000      NOP
(0042)    asm("nop");                       
    0080 0000      NOP
(0043)    asm("nop");
    0081 0000      NOP
(0044)    asm("nop");
    0082 0000      NOP
(0045)    asm("nop");
    0083 0000      NOP
(0046)    asm("nop");                       
    0084 0000      NOP
(0047)    asm("nop");
    0085 0000      NOP
(0048)    asm("nop");
    0086 0000      NOP
(0049)    asm("nop");
    0087 0000      NOP
(0050)    asm("nop");
    0088 0000      NOP
(0051)    asm("nop");
    0089 0000      NOP
(0052)    asm("nop");                       
    008A 0000      NOP
    008B 9508      RET
(0053) } 
(0054) 
(0055) void delay_10us(void)                 //10us延时函数,,可重复调用不影响精度
(0056) {
(0057)    delay_3us();
_delay_10us:
    008C DFE9      RCALL	_delay_3us
(0058)    delay_3us(); 
    008D DFE8      RCALL	_delay_3us
(0059)    delay_3us();  
    008E DFE7      RCALL	_delay_3us
    008F 9508      RET
(0060) }
(0061)   
(0062) void delay_50us(void)                 //48us延时函数,,可重复调用不影响精度
(0063) { 
(0064)    delay_10us();
_delay_50us:
    0090 DFFB      RCALL	_delay_10us
(0065)    delay_10us(); 
    0091 DFFA      RCALL	_delay_10us
(0066)    delay_10us();
    0092 DFF9      RCALL	_delay_10us
(0067)    delay_10us();
    0093 DFF8      RCALL	_delay_10us
    0094 9508      RET
(0068) }
(0069) void delay_100us(void)     //exactly 98us延时函数,,可重复调用不影响精度
(0070) {
(0071)  delay_50us();
_delay_100us:
    0095 DFFA      RCALL	_delay_50us
(0072)  delay_50us();
    0096 DFF9      RCALL	_delay_50us
    0097 9508      RET
_delay_n100us:
  n100us               --> R20
    0098 940E0151  CALL	push_gset1
    009A 2F40      MOV	R20,R16
(0073) }
(0074) void delay_n100us(unsigned char n100us)
(0075) {
    009B C001      RJMP	0x009D
(0076)  while(n100us--)                          
(0077)  delay_100us();
    009C DFF8      RCALL	_delay_100us
    009D 2E24      MOV	R2,R20
    009E 2433      CLR	R3
    009F 5041      SUBI	R20,1
    00A0 2022      TST	R2
    00A1 F7D1      BNE	0x009C
    00A2 940E0154  CALL	pop_gset1
    00A4 9508      RET
(0078) }
(0079) /*delay_n100us(2)        250us
(0080) delay_n100us(3)          360us
(0081) delay_n100us(4)          470us
(0082) delay_n100us(5)          580us
(0083) delay_n100us(6)          690us
(0084) delay_n100us(7)       800us
(0085) delay_n100us(8)          900us              主要是由于函数声明及while,,,大概6us
(0086) 
(0087) */
(0088) void delay_1ms()
(0089) {
(0090)  delay_100us();
_delay_1ms:
    00A5 DFEF      RCALL	_delay_100us
(0091)  delay_100us();
    00A6 DFEE      RCALL	_delay_100us
(0092)  delay_100us();
    00A7 DFED      RCALL	_delay_100us
(0093)  delay_100us();
    00A8 DFEC      RCALL	_delay_100us
(0094)  delay_100us();
    00A9 DFEB      RCALL	_delay_100us
(0095)  delay_100us();
    00AA DFEA      RCALL	_delay_100us
(0096)  delay_100us();
    00AB DFE9      RCALL	_delay_100us
(0097)  delay_100us();
    00AC DFE8      RCALL	_delay_100us
(0098)  delay_100us();
    00AD DFE7      RCALL	_delay_100us
(0099)  delay_100us();
    00AE DFE6      RCALL	_delay_100us
    00AF 9508      RET
_delay_nms:
  nms                  --> R20
    00B0 940E0151  CALL	push_gset1
    00B2 01A8      MOVW	R20,R16
(0100) }
(0101) /********************************************************************
(0102) 函 数 名：Delay_ms
(0103) 建立日期：2010年1月28日
(0104) 修改日期：
(0105) 函数作用：毫秒级的精确延时程序
(0106) 说    明：
(0107) ********************************************************************/
(0108) void delay_nms(unsigned int nms)
(0109) {
    00B3 C001      RJMP	0x00B5
(0110)  while(nms--) 
(0111)  delay_1ms();
    00B4 DFF0      RCALL	_delay_1ms
    00B5 011A      MOVW	R2,R20
    00B6 5041      SUBI	R20,1
    00B7 4050      SBCI	R21,0
    00B8 2022      TST	R2
    00B9 F7D1      BNE	0x00B4
    00BA 2033      TST	R3
    00BB F7C1      BNE	0x00B4
    00BC 940E0154  CALL	pop_gset1
    00BE 9508      RET
_delay_ns:
  ns                   --> R20
    00BF 940E0151  CALL	push_gset1
    00C1 2F40      MOV	R20,R16
(0112) }
(0113) void delay_ns(unsigned char ns)
(0114) {
    00C2 C003      RJMP	0x00C6
(0115)  while(ns--) 
(0116)  delay_nms(1000);
    00C3 EE08      LDI	R16,0xE8
    00C4 E013      LDI	R17,3
    00C5 DFEA      RCALL	_delay_nms
    00C6 2E24      MOV	R2,R20
    00C7 2433      CLR	R3
    00C8 5041      SUBI	R20,1
    00C9 2022      TST	R2
    00CA F7C1      BNE	0x00C3
    00CB 940E0154  CALL	pop_gset1
    00CD 9508      RET
FILE: E:\ATMEGA128开发板\我的ATMEGA128最小系统板\M128_ZZX_1配套资料\4.两位独立键盘实验\2KEY程序\2KEY.C
(0001) //ATMEGA128的2位独立键盘控制程序，显示键值1和2
(0002) //编译环境 ICCAVR 
(0003) //系统时钟7.3728MHZ，设置熔丝位为外部高频石英晶体振荡
(0004) //作者：忠兴电子元件店
(0005) //日期：2010.05.24
(0006) //***********************************************************************
(0007) //			包含文件
(0008) //***********************************************************************
(0009) #include <string.h>
(0010) #include <stdio.h>
(0011) #include <delay.h>
(0012) #include <iom128v.h>
(0013) #define uchar           unsigned char
(0014) #define uint            unsigned int
(0015) 
(0016) #define key_io          PORTC               //独立键盘与PC4和PC5连接
(0017) #define key_ior         PINC                //读取IO口值为PINC的值
(0018) #define Data_IO	        PORTA                //数据口
(0019) #define Data_DDR        DDRA                 //数据口方向寄存器
(0020) #define D_LE0	        PORTD &= ~(1 << PD4) //数码管段控制位为0
(0021) #define D_LE1           PORTD |= (1 << PD4)  //数码管段控制位为1
(0022) #define W_LE0	        PORTD &= ~(1 << PD5) //数码管位控制位为0
(0023) #define W_LE1           PORTD |= (1 << PD5)  //数码管位控制位为1
(0024) 
(0025) 
(0026) //***********************************************************************
(0027) //			共阴数码管显示的断码表
(0028) //***********************************************************************
(0029) 
(0030) uchar table[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,
(0031) 	  		   0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};
(0032) uchar key;
(0033) 
(0034) //***********************************************************************
(0035) //			IO端口初始化
(0036) //***********************************************************************
(0037) 
(0038) void System_Init()
(0039) {
(0040)     Data_IO=0xFF;             //数据口为输出
_System_Init:
    00CE EF8F      LDI	R24,0xFF
    00CF BB8B      OUT	0x1B,R24
(0041)     Data_DDR=0xFF;
    00D0 BB8A      OUT	0x1A,R24
(0042) 
(0043)     PORTD=0xFF;               //74HC573的控制口，设置为输出
    00D1 BB82      OUT	0x12,R24
(0044)     DDRD=0xFF;
    00D2 BB81      OUT	0x11,R24
(0045) 	
(0046) 	PORTB=0xFF;
    00D3 BB88      OUT	0x18,R24
(0047) 	DDRB=0xFF; 				  //关闭发光二极管
    00D4 BB87      OUT	0x17,R24
    00D5 9508      RET
_Display_Key:
  j                    --> R20
  i                    --> R22
  num                  --> R10
    00D6 940E014D  CALL	push_gset3
    00D8 2EA0      MOV	R10,R16
(0048) }
(0049) 
(0050) //*************************************************************************
(0051) //			74HC573控制数码管动态扫描显示函数
(0052) //*************************************************************************
(0053) 
(0054) void Display_Key(uchar num)
(0055) {
(0056)  uchar i,j;
(0057)  System_Init();
    00D9 DFF4      RCALL	_System_Init
(0058)  j=0x01;                    //此数据用来控制位选
    00DA E041      LDI	R20,1
(0059)   for(i=0;i<8;i++)
    00DB 2766      CLR	R22
    00DC C013      RJMP	0x00F0
(0060)   {
(0061)     D_LE1;                    //控制数码管段数据的74HC573的LE管脚置高
    00DD 9A94      SBI	0x12,4
(0062)     W_LE1;                    //控制数码管位的74HC573的LE管脚置高
    00DE 9A95      SBI	0x12,5
(0063)     Data_IO=0x00;               //设置要显示的位，也就是哪一个数码管亮，这里是八个一起显示
    00DF 2422      CLR	R2
    00E0 BA2B      OUT	0x1B,R2
(0064)     W_LE0;                    //锁存位数据，下面送上段数据以后，就显示出来了
    00E1 9895      CBI	0x12,5
(0065) 	j=(j<<1);
    00E2 0F44      LSL	R20
(0066)     Data_IO=table[num];         //送要显示的数据，就是段数据，如显示0送的是0x3f
    00E3 E080      LDI	R24,0
    00E4 E091      LDI	R25,1
    00E5 2DEA      MOV	R30,R10
    00E6 27FF      CLR	R31
    00E7 0FE8      ADD	R30,R24
    00E8 1FF9      ADC	R31,R25
    00E9 8020      LDD	R2,Z+0
    00EA BA2B      OUT	0x1B,R2
(0067)     D_LE0;                    //锁存段数据，数码管亮一个时间片刻
    00EB 9894      CBI	0x12,4
(0068)     delay_nms(1);              //显示一个时间片刻，会影响亮度和闪烁性
    00EC E001      LDI	R16,1
    00ED E010      LDI	R17,0
    00EE DFC1      RCALL	_delay_nms
    00EF 9563      INC	R22
    00F0 3068      CPI	R22,0x8
    00F1 F358      BCS	0x00DD
    00F2 940E0146  CALL	pop_gset3
    00F4 9508      RET
_KeyboardScan:
  key_check            --> R20
  statevalue           --> R20
  key_checkin          --> R20
    00F5 940E0151  CALL	push_gset1
(0069) 
(0070)   }
(0071) 
(0072) }
(0073) 
(0074) //**********************************************************************
(0075) //	键盘扫描子程序，采用逐键扫描的方式
(0076) //**********************************************************************
(0077) 
(0078) uchar KeyboardScan() 
(0079) {
(0080)   uchar statevalue,key_checkin,key_check;
(0081)   key_io=0xf0;                    //在IO口由输出方式变为输入方式时要延迟一个周期
    00F7 EF80      LDI	R24,0xF0
    00F8 BB85      OUT	0x15,R24
(0082)   key_io=0xf0;                    //采取写两次的方法延时
    00F9 BB85      OUT	0x15,R24
(0083)   key_checkin=key_ior;            //读取IO口状态，判断是否有键按下
    00FA B343      IN	R20,0x13
(0084)   if(key_checkin!=0xf0)           //IO口值发生变化则表示有键按下
    00FB 3F40      CPI	R20,0xF0
    00FC F0E9      BEQ	0x011A
(0085)   {
(0086)     delay_nms(20);                 //键盘消抖，延时20MS
    00FD E104      LDI	R16,0x14
    00FE E010      LDI	R17,0
    00FF DFB0      RCALL	_delay_nms
(0087)     key_checkin=key_ior;
    0100 B343      IN	R20,0x13
(0088)     if(key_checkin!=0xf0)
    0101 3F40      CPI	R20,0xF0
    0102 F0D9      BEQ	0x011E
(0089)     {
(0090)      
(0091)      key_check=key_ior;
    0103 B343      IN	R20,0x13
(0092)      switch (key_check)
    0104 2755      CLR	R21
    0105 3D40      CPI	R20,0xD0
    0106 E0E0      LDI	R30,0
    0107 075E      CPC	R21,R30
    0108 F049      BEQ	0x0112
    0109 3D40      CPI	R20,0xD0
    010A E0E0      LDI	R30,0
    010B 075E      CPC	R21,R30
    010C F08C      BLT	0x011E
    010D 3E40      CPI	R20,0xE0
    010E E0E0      LDI	R30,0
    010F 075E      CPC	R21,R30
    0110 F029      BEQ	0x0116
    0111 C00C      RJMP	0x011E
(0093)      {
(0094)      case 0xd0:key=2;break;
    0112 E082      LDI	R24,2
    0113 93800110  STS	key,R24
    0115 C008      RJMP	0x011E
(0095)      case 0xe0:key=1;break;
    0116 E081      LDI	R24,1
    0117 93800110  STS	key,R24
(0096)      }
(0097)           
(0098)     }
(0099)   }
    0119 C004      RJMP	0x011E
(0100)   else
(0101)   {
(0102)   statevalue=0xff;                      //无按键时返回值
    011A EF4F      LDI	R20,0xFF
(0103)   key=statevalue;
    011B 93400110  STS	key,R20
(0104)   return(key);
    011D 2F04      MOV	R16,R20
    011E 940E0154  CALL	pop_gset1
    0120 9508      RET
(0105)   }
(0106) }
(0107) 
(0108) //*************************************************************************
(0109) //			主程序
(0110) //*************************************************************************
(0111) 
(0112) void main()
(0113) 
(0114) {         
(0115)      
(0116) 	  uint key_store;
(0117) 	  DDRC=0x0f;                        //PC口上拉电阻使能
_main:
  key_store            --> R20
    0121 E08F      LDI	R24,0xF
    0122 BB84      OUT	0x14,R24
(0118)       PORTC=0xf0;                       //PC高四位输入低四位输出
    0123 EF80      LDI	R24,0xF0
    0124 BB85      OUT	0x15,R24
(0119)       key_store=0;
    0125 2744      CLR	R20
    0126 2755      CLR	R21
    0127 C01C      RJMP	0x0144
(0120) 
(0121) while(1)
(0122)   {
(0123) 
(0124)  KeyboardScan();                         //键盘扫描，看是否有按键按下
    0128 DFCC      RCALL	_KeyboardScan
(0125)     if(key!=0xff)                        //如果有按键按下，则显示该按键键值0~15
    0129 91800110  LDS	R24,key
    012B 3F8F      CPI	R24,0xFF
    012C F0A9      BEQ	0x0142
(0126)       {
(0127) 	      { switch(key)
    012D 2F68      MOV	R22,R24
    012E 2777      CLR	R23
    012F 3061      CPI	R22,1
    0130 E0E0      LDI	R30,0
    0131 077E      CPC	R23,R30
    0132 F029      BEQ	0x0138
    0133 3062      CPI	R22,2
    0134 E0E0      LDI	R30,0
    0135 077E      CPC	R23,R30
    0136 F031      BEQ	0x013D
    0137 C00C      RJMP	0x0144
(0128) 		   { case 1: Display_Key(0x01);key_store=0x01;break;   //给不同的键赋键值
    0138 E001      LDI	R16,1
    0139 DF9C      RCALL	_Display_Key
    013A E041      LDI	R20,1
    013B E050      LDI	R21,0
    013C C007      RJMP	0x0144
(0129) 		     case 2: Display_Key(0x02);key_store=0x02;break;
    013D E002      LDI	R16,2
    013E DF97      RCALL	_Display_Key
    013F E042      LDI	R20,2
    0140 E050      LDI	R21,0
(0130)            }
(0131) 
(0132)           }
(0133) 	
(0134)        }
    0141 C002      RJMP	0x0144
(0135)      else
(0136) 	 {
(0137) 	 Display_Key(key_store);              //没有按键的时候显示上次的键值
FILE: <library>
    0142 2F04      MOV	R16,R20
    0143 DF92      RCALL	_Display_Key
    0144 CFE3      RJMP	0x0128
    0145 9508      RET
pop_gset3:
    0146 E0E4      LDI	R30,4
    0147 940C0155  JMP	pop
push_gset5:
    0149 92FA      ST	R15,-Y
    014A 92EA      ST	R14,-Y
push_gset4:
    014B 92DA      ST	R13,-Y
    014C 92CA      ST	R12,-Y
push_gset3:
    014D 92BA      ST	R11,-Y
    014E 92AA      ST	R10,-Y
push_gset2:
    014F 937A      ST	R23,-Y
    0150 936A      ST	R22,-Y
push_gset1:
    0151 935A      ST	R21,-Y
    0152 934A      ST	R20,-Y
    0153 9508      RET
pop_gset1:
    0154 E0E1      LDI	R30,1
pop:
    0155 9149      LD	R20,Y+
    0156 9159      LD	R21,Y+
    0157 FDE0      SBRC	R30,0
    0158 9508      RET
    0159 9169      LD	R22,Y+
    015A 9179      LD	R23,Y+
    015B FDE1      SBRC	R30,1
    015C 9508      RET
    015D 90A9      LD	R10,Y+
    015E 90B9      LD	R11,Y+
    015F FDE2      SBRC	R30,2
    0160 9508      RET
    0161 90C9      LD	R12,Y+
    0162 90D9      LD	R13,Y+
    0163 FDE3      SBRC	R30,3
    0164 9508      RET
    0165 90E9      LD	R14,Y+
    0166 90F9      LD	R15,Y+
    0167 9508      RET
