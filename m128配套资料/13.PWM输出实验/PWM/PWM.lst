__start:
__text_start:
    0030 EFCF      LDI	R28,0xFF
    0031 E0DF      LDI	R29,0xF
    0032 BFCD      OUT	0x3D,R28
    0033 BFDE      OUT	0x3E,R29
    0034 51CE      SUBI	R28,0x1E
    0035 40D0      SBCI	R29,0
    0036 EA0A      LDI	R16,0xAA
    0037 8308      STD	Y+0,R16
    0038 2400      CLR	R0
    0039 E6E0      LDI	R30,0x60
    003A E0F0      LDI	R31,0
    003B E010      LDI	R17,0
    003C 36E0      CPI	R30,0x60
    003D 07F1      CPC	R31,R17
    003E F011      BEQ	0x0041
    003F 9201      ST	R0,Z+
    0040 CFFB      RJMP	0x003C
    0041 8300      STD	Z+0,R16
    0042 E6E0      LDI	R30,0x60
    0043 E0F0      LDI	R31,0
    0044 E6A0      LDI	R26,0x60
    0045 E0B0      LDI	R27,0
    0046 E010      LDI	R17,0
    0047 36E0      CPI	R30,0x60
    0048 07F1      CPC	R31,R17
    0049 F021      BEQ	0x004E
    004A 95C8      LPM
    004B 9631      ADIW	R30,1
    004C 920D      ST	R0,X+
    004D CFF9      RJMP	0x0047
    004E 940E00C9  CALL	_main
_exit:
    0050 CFFF      RJMP	_exit
FILE: C:\icc\include\delay.h
(0001) //********************************************************************
(0002) /*函 数 名：delay_us
(0003) 建立日期：2010年1月28日
(0004) 编译环境：ICCAVR7.16A
(0005) 函数作用：微秒级的延时程序
(0006) 说    明：7.3728M晶振下
(0007) ********************************************************************/
(0008) void delay_1us(void);
(0009) void delay_3us(void);
(0010) void delay_10us(void);
(0011) void delay_50us(void);
(0012) void delay_100us(void);
(0013) void delay_n100us(unsigned char n100us);
(0014) void delay_1ms(void);
(0015) void delay_nms(unsigned int nms);
(0016) void delay_ns(unsigned char ns);
(0017) 
(0018) 
(0019) void delay_1us(void)                 //1us延时函数，不能连续调用， 
(0020) { 
(0021)    asm("nop");                       //1时钟周期
_delay_1us:
    0051 0000      NOP
(0022)    asm("nop");
    0052 0000      NOP
(0023)    asm("nop");
    0053 0000      NOP
(0024)    asm("nop");
    0054 0000      NOP
(0025)    asm("nop");                       //1T
    0055 0000      NOP
(0026)    asm("nop");
    0056 0000      NOP
    0057 9508      RET
(0027) 
(0028) }
(0029) void delay_3us(void)                 //3us延时函数,,可重复调用不影响精度
(0030) { 
(0031)    
(0032)    asm("nop");
_delay_3us:
    0058 0000      NOP
(0033)    asm("nop");
    0059 0000      NOP
(0034)    asm("nop");                       
    005A 0000      NOP
(0035)    asm("nop");
    005B 0000      NOP
(0036)    asm("nop");
    005C 0000      NOP
(0037)    asm("nop");
    005D 0000      NOP
(0038)    asm("nop");                       
    005E 0000      NOP
(0039)    asm("nop");
    005F 0000      NOP
(0040)    asm("nop");
    0060 0000      NOP
(0041)    asm("nop");
    0061 0000      NOP
(0042)    asm("nop");                       
    0062 0000      NOP
(0043)    asm("nop");
    0063 0000      NOP
(0044)    asm("nop");
    0064 0000      NOP
(0045)    asm("nop");
    0065 0000      NOP
(0046)    asm("nop");                       
    0066 0000      NOP
(0047)    asm("nop");
    0067 0000      NOP
(0048)    asm("nop");
    0068 0000      NOP
(0049)    asm("nop");
    0069 0000      NOP
(0050)    asm("nop");
    006A 0000      NOP
(0051)    asm("nop");
    006B 0000      NOP
(0052)    asm("nop");                       
    006C 0000      NOP
    006D 9508      RET
(0053) } 
(0054) 
(0055) void delay_10us(void)                 //10us延时函数,,可重复调用不影响精度
(0056) {
(0057)    delay_3us();
_delay_10us:
    006E DFE9      RCALL	_delay_3us
(0058)    delay_3us(); 
    006F DFE8      RCALL	_delay_3us
(0059)    delay_3us();  
    0070 DFE7      RCALL	_delay_3us
    0071 9508      RET
(0060) }
(0061)   
(0062) void delay_50us(void)                 //48us延时函数,,可重复调用不影响精度
(0063) { 
(0064)    delay_10us();
_delay_50us:
    0072 DFFB      RCALL	_delay_10us
(0065)    delay_10us(); 
    0073 DFFA      RCALL	_delay_10us
(0066)    delay_10us();
    0074 DFF9      RCALL	_delay_10us
(0067)    delay_10us();
    0075 DFF8      RCALL	_delay_10us
    0076 9508      RET
(0068) }
(0069) void delay_100us(void)     //exactly 98us延时函数,,可重复调用不影响精度
(0070) {
(0071)  delay_50us();
_delay_100us:
    0077 DFFA      RCALL	_delay_50us
(0072)  delay_50us();
    0078 DFF9      RCALL	_delay_50us
    0079 9508      RET
_delay_n100us:
  n100us               --> R20
    007A 940E00D6  CALL	push_gset1
    007C 2F40      MOV	R20,R16
(0073) }
(0074) void delay_n100us(unsigned char n100us)
(0075) {
    007D C001      RJMP	0x007F
(0076)  while(n100us--)                          
(0077)  delay_100us();
    007E DFF8      RCALL	_delay_100us
    007F 2E24      MOV	R2,R20
    0080 2433      CLR	R3
    0081 5041      SUBI	R20,1
    0082 2022      TST	R2
    0083 F7D1      BNE	0x007E
    0084 940E00D9  CALL	pop_gset1
    0086 9508      RET
(0078) }
(0079) /*delay_n100us(2)        250us
(0080) delay_n100us(3)          360us
(0081) delay_n100us(4)          470us
(0082) delay_n100us(5)          580us
(0083) delay_n100us(6)          690us
(0084) delay_n100us(7)       800us
(0085) delay_n100us(8)          900us              主要是由于函数声明及while,,,大概6us
(0086) 
(0087) */
(0088) void delay_1ms()
(0089) {
(0090)  delay_100us();
_delay_1ms:
    0087 DFEF      RCALL	_delay_100us
(0091)  delay_100us();
    0088 DFEE      RCALL	_delay_100us
(0092)  delay_100us();
    0089 DFED      RCALL	_delay_100us
(0093)  delay_100us();
    008A DFEC      RCALL	_delay_100us
(0094)  delay_100us();
    008B DFEB      RCALL	_delay_100us
(0095)  delay_100us();
    008C DFEA      RCALL	_delay_100us
(0096)  delay_100us();
    008D DFE9      RCALL	_delay_100us
(0097)  delay_100us();
    008E DFE8      RCALL	_delay_100us
(0098)  delay_100us();
    008F DFE7      RCALL	_delay_100us
(0099)  delay_100us();
    0090 DFE6      RCALL	_delay_100us
    0091 9508      RET
_delay_nms:
  nms                  --> R20
    0092 940E00D6  CALL	push_gset1
    0094 01A8      MOVW	R20,R16
(0100) }
(0101) /********************************************************************
(0102) 函 数 名：Delay_ms
(0103) 建立日期：2010年1月28日
(0104) 修改日期：
(0105) 函数作用：毫秒级的精确延时程序
(0106) 说    明：
(0107) ********************************************************************/
(0108) void delay_nms(unsigned int nms)
(0109) {
    0095 C001      RJMP	0x0097
(0110)  while(nms--) 
(0111)  delay_1ms();
    0096 DFF0      RCALL	_delay_1ms
    0097 011A      MOVW	R2,R20
    0098 5041      SUBI	R20,1
    0099 4050      SBCI	R21,0
    009A 2022      TST	R2
    009B F7D1      BNE	0x0096
    009C 2033      TST	R3
    009D F7C1      BNE	0x0096
    009E 940E00D9  CALL	pop_gset1
    00A0 9508      RET
_delay_ns:
  ns                   --> R20
    00A1 940E00D6  CALL	push_gset1
    00A3 2F40      MOV	R20,R16
(0112) }
(0113) void delay_ns(unsigned char ns)
(0114) {
    00A4 C003      RJMP	0x00A8
(0115)  while(ns--) 
(0116)  delay_nms(1000);
    00A5 EE08      LDI	R16,0xE8
    00A6 E013      LDI	R17,3
    00A7 DFEA      RCALL	_delay_nms
    00A8 2E24      MOV	R2,R20
    00A9 2433      CLR	R3
    00AA 5041      SUBI	R20,1
    00AB 2022      TST	R2
    00AC F7C1      BNE	0x00A5
    00AD 940E00D9  CALL	pop_gset1
    00AF 9508      RET
FILE: E:\ATMEGA128开发板\我的ATMEGA128最小系统板\M128_ZZX_1配套资料\15.PWM输出实验\PWM\PWM.C
(0001) //ATMEGA128的定时器实现快速PWM输出示例程序，定时器0溢出中断的方式
(0002) //PWM输出通过控制LED发光来直观的看到效果，改变OCR0的值，可以控制亮度
(0003) //编译环境 ICCAVR 7.16A
(0004) //系统时钟7.3728MHZ，设置熔丝位为外部高频石英晶体振荡，启动时间4.1ms
(0005) //忠兴电子元件店编辑
(0006) //日期：2010.01.14
(0007) 
(0008) //***********************************************************************
(0009) //			包含文件
(0010) //***********************************************************************
(0011) 
(0012) #include <string.h>
(0013) #include <stdio.h>
(0014) #include <delay.h>
(0015) #include <iom128v.h>
(0016) 
(0017) //***********************************************************************
(0018) //			定义变量区
(0019) //***********************************************************************
(0020) #define f_count         25                    //0CR0寄存器初始值
(0021) #define timer_clk       0x07
(0022) 
(0023) #define uchar           unsigned char
(0024) #define uint            unsigned int
(0025) 
(0026) #define Data_IO	        PORTA                //数码管数据口
(0027) #define Data_DDR        DDRA                 //数码管数据口方向寄存器
(0028) #define D_LE0	        PORTD &= ~(1 << PD4) //数码管段控制位为0，锁存端口数据
(0029) #define D_LE1           PORTD |= (1 << PD4)  //数码管段控制位为1，锁存器输出与端口一致
(0030) #define W_LE0	        PORTD &= ~(1 << PD5) //数码管位控制位为0
(0031) #define W_LE1           PORTD |= (1 << PD5)  //数码管位控制位为1
(0032) 
(0033) //*************************************************************************
(0034) //			初始化子程序
(0035) //*************************************************************************
(0036) void system_init()                                   //IO口初始化
(0037) {
(0038)   
(0039)   PORTB=0xff;                                       //PB设置为输出
_system_init:
    00B0 EF8F      LDI	R24,0xFF
    00B1 BB88      OUT	0x18,R24
(0040)   DDRB=0xff;                                        //上拉电阻无效
    00B2 BB87      OUT	0x17,R24
(0041)   
(0042)   D_LE1;//关掉数码管，以免显示乱码                   
    00B3 9A94      SBI	0x12,4
(0043)   W_LE1;
    00B4 9A95      SBI	0x12,5
(0044)   Data_IO=0xFF;//关数码管            
    00B5 BB8B      OUT	0x1B,R24
(0045)   W_LE0;
    00B6 9895      CBI	0x12,5
    00B7 9508      RET
(0046) 
(0047) }
(0048) 
(0049) void timer0_init()                                 //定时器初始化
(0050) {
(0051)   TCCR0=0x68|timer_clk;                            //快读PWM模式，OC0输出，1024分频
_timer0_init:
    00B8 E68F      LDI	R24,0x6F
    00B9 BF83      OUT	0x33,R24
(0052)   OCR0=f_count;                                    //OCR0比较匹配寄存器值
    00BA E189      LDI	R24,0x19
    00BB BF81      OUT	0x31,R24
(0053)   TIFR=0x01;                                       //清中断标志位
    00BC E081      LDI	R24,1
    00BD BF86      OUT	0x36,R24
(0054)   TIMSK=0x01;                                      //使能定时器0溢出中断
    00BE BF87      OUT	0x37,R24
    00BF 9508      RET
_TIMER0_ISR:
    00C0 938A      ST	R24,-Y
    00C1 B78F      IN	R24,0x3F
    00C2 938A      ST	R24,-Y
(0055) }
(0056) 
(0057) 
(0058) //*************************************************************************
(0059) //		定时器0中断服务子程序
(0060) //*************************************************************************
(0061) #pragma interrupt_handler  TIMER0_ISR:17
(0062) void TIMER0_ISR() 	 	
(0063) {
(0064)   OCR0=f_count;                                 //改变OCR0的值可以改变PWM输出
    00C3 E189      LDI	R24,0x19
    00C4 BF81      OUT	0x31,R24
    00C5 9189      LD	R24,Y+
    00C6 BF8F      OUT	0x3F,R24
    00C7 9189      LD	R24,Y+
    00C8 9518      RETI
(0065) }
(0066) 
(0067) //*************************************************************************
(0068) //		主程序
(0069) //*************************************************************************
(0070) 
(0071) void main(void)
(0072) {
(0073)   system_init();                             //系统初始化.PB4输出PWM波形
_main:
    00C9 DFE6      RCALL	_system_init
(0074)   timer0_init();                             //定时器0初始化，完成PWM相关配置
    00CA DFED      RCALL	_timer0_init
(0075)   SREG|=0x80;                                //开启全局中断
    00CB 9478      BSET	7
(0076)   while(1)
FILE: <library>
    00CC CFFF      RJMP	0x00CC
    00CD 9508      RET
push_gset5:
    00CE 92FA      ST	R15,-Y
    00CF 92EA      ST	R14,-Y
push_gset4:
    00D0 92DA      ST	R13,-Y
    00D1 92CA      ST	R12,-Y
push_gset3:
    00D2 92BA      ST	R11,-Y
    00D3 92AA      ST	R10,-Y
push_gset2:
    00D4 937A      ST	R23,-Y
    00D5 936A      ST	R22,-Y
push_gset1:
    00D6 935A      ST	R21,-Y
    00D7 934A      ST	R20,-Y
    00D8 9508      RET
pop_gset1:
    00D9 E0E1      LDI	R30,1
pop:
    00DA 9149      LD	R20,Y+
    00DB 9159      LD	R21,Y+
    00DC FDE0      SBRC	R30,0
    00DD 9508      RET
    00DE 9169      LD	R22,Y+
    00DF 9179      LD	R23,Y+
    00E0 FDE1      SBRC	R30,1
    00E1 9508      RET
    00E2 90A9      LD	R10,Y+
    00E3 90B9      LD	R11,Y+
    00E4 FDE2      SBRC	R30,2
    00E5 9508      RET
    00E6 90C9      LD	R12,Y+
    00E7 90D9      LD	R13,Y+
    00E8 FDE3      SBRC	R30,3
    00E9 9508      RET
    00EA 90E9      LD	R14,Y+
    00EB 90F9      LD	R15,Y+
    00EC 9508      RET
