__start:
__text_start:
    004E EFCF      LDI	R28,0xFF
    004F E1D0      LDI	R29,0x10
    0050 BFCD      OUT	0x3D,R28
    0051 BFDE      OUT	0x3E,R29
    0052 51CE      SUBI	R28,0x1E
    0053 40D0      SBCI	R29,0
    0054 EA0A      LDI	R16,0xAA
    0055 8308      STD	Y+0,R16
    0056 2400      CLR	R0
    0057 E1E0      LDI	R30,0x10
    0058 E0F1      LDI	R31,1
    0059 E011      LDI	R17,1
    005A 31E6      CPI	R30,0x16
    005B 07F1      CPC	R31,R17
    005C F011      BEQ	0x005F
    005D 9201      ST	R0,Z+
    005E CFFB      RJMP	0x005A
    005F 8300      STD	Z+0,R16
    0060 E8EC      LDI	R30,0x8C
    0061 E0F0      LDI	R31,0
    0062 E0A0      LDI	R26,0
    0063 E0B1      LDI	R27,1
    0064 E010      LDI	R17,0
    0065 39EC      CPI	R30,0x9C
    0066 07F1      CPC	R31,R17
    0067 F021      BEQ	0x006C
    0068 95C8      LPM
    0069 9631      ADIW	R30,1
    006A 920D      ST	R0,X+
    006B CFF9      RJMP	0x0065
    006C 940E0191  CALL	_main
_exit:
    006E CFFF      RJMP	_exit
FILE: C:\icc\include\delay.h
(0001) //********************************************************************
(0002) /*函 数 名：delay_us
(0003) 建立日期：2010年1月28日
(0004) 编译环境：ICCAVR7.16A
(0005) 函数作用：微秒级的延时程序
(0006) 说    明：7.3728M晶振下
(0007) ********************************************************************/
(0008) void delay_1us(void);
(0009) void delay_3us(void);
(0010) void delay_10us(void);
(0011) void delay_50us(void);
(0012) void delay_100us(void);
(0013) void delay_n100us(unsigned char n100us);
(0014) void delay_1ms(void);
(0015) void delay_nms(unsigned int nms);
(0016) void delay_ns(unsigned char ns);
(0017) 
(0018) 
(0019) void delay_1us(void)                 //1us延时函数，不能连续调用， 
(0020) { 
(0021)    asm("nop");                       //1时钟周期
_delay_1us:
    006F 0000      NOP
(0022)    asm("nop");
    0070 0000      NOP
(0023)    asm("nop");
    0071 0000      NOP
(0024)    asm("nop");
    0072 0000      NOP
(0025)    asm("nop");                       //1T
    0073 0000      NOP
(0026)    asm("nop");
    0074 0000      NOP
    0075 9508      RET
(0027) 
(0028) }
(0029) void delay_3us(void)                 //3us延时函数,,可重复调用不影响精度
(0030) { 
(0031)    
(0032)    asm("nop");
_delay_3us:
    0076 0000      NOP
(0033)    asm("nop");
    0077 0000      NOP
(0034)    asm("nop");                       
    0078 0000      NOP
(0035)    asm("nop");
    0079 0000      NOP
(0036)    asm("nop");
    007A 0000      NOP
(0037)    asm("nop");
    007B 0000      NOP
(0038)    asm("nop");                       
    007C 0000      NOP
(0039)    asm("nop");
    007D 0000      NOP
(0040)    asm("nop");
    007E 0000      NOP
(0041)    asm("nop");
    007F 0000      NOP
(0042)    asm("nop");                       
    0080 0000      NOP
(0043)    asm("nop");
    0081 0000      NOP
(0044)    asm("nop");
    0082 0000      NOP
(0045)    asm("nop");
    0083 0000      NOP
(0046)    asm("nop");                       
    0084 0000      NOP
(0047)    asm("nop");
    0085 0000      NOP
(0048)    asm("nop");
    0086 0000      NOP
(0049)    asm("nop");
    0087 0000      NOP
(0050)    asm("nop");
    0088 0000      NOP
(0051)    asm("nop");
    0089 0000      NOP
(0052)    asm("nop");                       
    008A 0000      NOP
    008B 9508      RET
(0053) } 
(0054) 
(0055) void delay_10us(void)                 //10us延时函数,,可重复调用不影响精度
(0056) {
(0057)    delay_3us();
_delay_10us:
    008C DFE9      RCALL	_delay_3us
(0058)    delay_3us(); 
    008D DFE8      RCALL	_delay_3us
(0059)    delay_3us();  
    008E DFE7      RCALL	_delay_3us
    008F 9508      RET
(0060) }
(0061)   
(0062) void delay_50us(void)                 //48us延时函数,,可重复调用不影响精度
(0063) { 
(0064)    delay_10us();
_delay_50us:
    0090 DFFB      RCALL	_delay_10us
(0065)    delay_10us(); 
    0091 DFFA      RCALL	_delay_10us
(0066)    delay_10us();
    0092 DFF9      RCALL	_delay_10us
(0067)    delay_10us();
    0093 DFF8      RCALL	_delay_10us
    0094 9508      RET
(0068) }
(0069) void delay_100us(void)     //exactly 98us延时函数,,可重复调用不影响精度
(0070) {
(0071)  delay_50us();
_delay_100us:
    0095 DFFA      RCALL	_delay_50us
(0072)  delay_50us();
    0096 DFF9      RCALL	_delay_50us
    0097 9508      RET
_delay_n100us:
  n100us               --> R20
    0098 940E01F8  CALL	push_gset1
    009A 2F40      MOV	R20,R16
(0073) }
(0074) void delay_n100us(unsigned char n100us)
(0075) {
    009B C001      RJMP	0x009D
(0076)  while(n100us--)                          
(0077)  delay_100us();
    009C DFF8      RCALL	_delay_100us
    009D 2E24      MOV	R2,R20
    009E 2433      CLR	R3
    009F 5041      SUBI	R20,1
    00A0 2022      TST	R2
    00A1 F7D1      BNE	0x009C
    00A2 940E01FB  CALL	pop_gset1
    00A4 9508      RET
(0078) }
(0079) /*delay_n100us(2)        250us
(0080) delay_n100us(3)          360us
(0081) delay_n100us(4)          470us
(0082) delay_n100us(5)          580us
(0083) delay_n100us(6)          690us
(0084) delay_n100us(7)       800us
(0085) delay_n100us(8)          900us              主要是由于函数声明及while,,,大概6us
(0086) 
(0087) */
(0088) void delay_1ms()
(0089) {
(0090)  delay_100us();
_delay_1ms:
    00A5 DFEF      RCALL	_delay_100us
(0091)  delay_100us();
    00A6 DFEE      RCALL	_delay_100us
(0092)  delay_100us();
    00A7 DFED      RCALL	_delay_100us
(0093)  delay_100us();
    00A8 DFEC      RCALL	_delay_100us
(0094)  delay_100us();
    00A9 DFEB      RCALL	_delay_100us
(0095)  delay_100us();
    00AA DFEA      RCALL	_delay_100us
(0096)  delay_100us();
    00AB DFE9      RCALL	_delay_100us
(0097)  delay_100us();
    00AC DFE8      RCALL	_delay_100us
(0098)  delay_100us();
    00AD DFE7      RCALL	_delay_100us
(0099)  delay_100us();
    00AE DFE6      RCALL	_delay_100us
    00AF 9508      RET
_delay_nms:
  nms                  --> R20
    00B0 940E01F8  CALL	push_gset1
    00B2 01A8      MOVW	R20,R16
(0100) }
(0101) /********************************************************************
(0102) 函 数 名：Delay_ms
(0103) 建立日期：2010年1月28日
(0104) 修改日期：
(0105) 函数作用：毫秒级的精确延时程序
(0106) 说    明：
(0107) ********************************************************************/
(0108) void delay_nms(unsigned int nms)
(0109) {
    00B3 C001      RJMP	0x00B5
(0110)  while(nms--) 
(0111)  delay_1ms();
    00B4 DFF0      RCALL	_delay_1ms
    00B5 011A      MOVW	R2,R20
    00B6 5041      SUBI	R20,1
    00B7 4050      SBCI	R21,0
    00B8 2022      TST	R2
    00B9 F7D1      BNE	0x00B4
    00BA 2033      TST	R3
    00BB F7C1      BNE	0x00B4
    00BC 940E01FB  CALL	pop_gset1
    00BE 9508      RET
_delay_ns:
  ns                   --> R20
    00BF 940E01F8  CALL	push_gset1
    00C1 2F40      MOV	R20,R16
(0112) }
(0113) void delay_ns(unsigned char ns)
(0114) {
    00C2 C003      RJMP	0x00C6
(0115)  while(ns--) 
(0116)  delay_nms(1000);
    00C3 EE08      LDI	R16,0xE8
    00C4 E013      LDI	R17,3
    00C5 DFEA      RCALL	_delay_nms
    00C6 2E24      MOV	R2,R20
    00C7 2433      CLR	R3
    00C8 5041      SUBI	R20,1
    00C9 2022      TST	R2
    00CA F7C1      BNE	0x00C3
    00CB 940E01FB  CALL	pop_gset1
    00CD 9508      RET
FILE: E:\ATMEGA128开发板\我的ATMEGA128开发板\配套资料\17.EEPROM读写实验\EEPROM\EEPROM.C
(0001) //ATMEGA128的读写EEPROM示例程序
(0002) //记录CPU启动的次数到EEPROM中
(0003) //在LED数码管上显示读出的数据,可用复位键刷新显示
(0004) //编译环境 ICCAVR 
(0005) //系统时钟7.3728MHZ，设置熔丝位为外部高频石英晶体振荡，启动时间4.1ms
(0006) //忠兴电子元件店
(0007) //日期：2010.01.14
(0008) //***********************************************************************
(0009) //			包含文件
(0010) //***********************************************************************
(0011) 
(0012) #include <string.h>
(0013) #include <stdio.h>
(0014) #define	 F_CPU	7372800							// 单片机主频为7.3728MHz,用于延时子程序
(0015) #include <delay.h>
(0016) #include <iom128v.h>
(0017) 
(0018) 
(0019) //***********************************************************************
(0020) //			定义变量区
(0021) //***********************************************************************
(0022) 
(0023) #define Data_IO	        PORTA                	//数码管数据口
(0024) #define Data_DDR        DDRA                 	//数码管数据口方向寄存器
(0025) #define D_LE0	        PORTD &= ~(1 << PD4) 	//数码管段控制位为0，锁存端口数据
(0026) #define D_LE1           PORTD |= (1 << PD4)  	//数码管段控制位为1，锁存器输出与端口一致
(0027) #define W_LE0	        PORTD &= ~(1 << PD5) 	//数码管位控制位为0
(0028) #define W_LE1           PORTD |= (1 << PD5)  	//数码管位控制位为1
(0029) 
(0030) #define uchar           unsigned char
(0031) #define uint            unsigned int
(0032) 
(0033) //***********************************************************************
(0034) //			共阴数码管显示的断码表0～F
(0035) //***********************************************************************
(0036) 
(0037) uchar table[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,
(0038) 	           0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};
(0039) uint A1,A2,A3;             		      			//定义的变量,显示数据处理
(0040) 
(0041) 
(0042) 
(0043) //***********************************************************************
(0044) //			IO端口初始化
(0045) //***********************************************************************
(0046) 
(0047) void system_init()
(0048) {
(0049)     Data_IO=0xFF;             						//数据口为输出
_system_init:
    00CE EF8F      LDI	R24,0xFF
    00CF BB8B      OUT	0x1B,R24
(0050)     Data_DDR=0xFF;
    00D0 BB8A      OUT	0x1A,R24
(0051) 
(0052)     PORTD=0xFF;               						//74HC573的控制口，设置为输出
    00D1 BB82      OUT	0x12,R24
(0053)     DDRD=0xFF;
    00D2 BB81      OUT	0x11,R24
(0054) 	PORTB=0XFF;
    00D3 BB88      OUT	0x18,R24
(0055) 	DDRB=0XFF;
    00D4 BB87      OUT	0x17,R24
    00D5 9508      RET
_Display_EEPROM:
  i                    --> R20
  j                    --> R22
    00D6 940E01F6  CALL	push_gset2
(0056) }
(0057) 
(0058) //*************************************************************************
(0059) //			74HC573控制数码管动态扫描显示函数，显示采集到的温度
(0060) //*************************************************************************
(0061) 
(0062) void Display_EEPROM(void)
(0063) {
(0064) 	 uchar i,j;
(0065) 	 system_init();
    00D8 DFF5      RCALL	_system_init
(0066)      j=0x01;                    			//此数据用来控制位选
    00D9 E061      LDI	R22,1
(0067)  for(i=0;i<5;i++)               			//用后3位数码管来显示
    00DA 2744      CLR	R20
    00DB C00E      RJMP	0x00EA
(0068)   {
(0069)      D_LE1;                     
    00DC 9A94      SBI	0x12,4
(0070)      W_LE1;                     
    00DD 9A95      SBI	0x12,5
(0071)      Data_IO=~j;                
    00DE 2E26      MOV	R2,R22
    00DF 9420      COM	R2
    00E0 BA2B      OUT	0x1B,R2
(0072)      W_LE0;                      
    00E1 9895      CBI	0x12,5
(0073) 	 j=(j<<1);
    00E2 0F66      LSL	R22
(0074)      Data_IO=0x00;           
    00E3 2422      CLR	R2
    00E4 BA2B      OUT	0x1B,R2
(0075)      D_LE0;                      
    00E5 9894      CBI	0x12,4
(0076)      delay_nms(1);                
    00E6 E001      LDI	R16,1
    00E7 E010      LDI	R17,0
    00E8 DFC7      RCALL	_delay_nms
    00E9 9543      INC	R20
    00EA 3045      CPI	R20,5
    00EB F380      BCS	0x00DC
(0077)   }
(0078)      D_LE1;                    
    00EC 9A94      SBI	0x12,4
(0079)      W_LE1;                    
    00ED 9A95      SBI	0x12,5
(0080)      Data_IO=~j;               
    00EE 2E26      MOV	R2,R22
    00EF 9420      COM	R2
    00F0 BA2B      OUT	0x1B,R2
(0081)      W_LE0;                    
    00F1 9895      CBI	0x12,5
(0082) 	 j=(j<<1);
    00F2 0F66      LSL	R22
(0083)      Data_IO=table[A1];         
    00F3 E080      LDI	R24,0
    00F4 E091      LDI	R25,1
    00F5 91E00114  LDS	R30,A1
    00F7 91F00115  LDS	R31,A1+1
    00F9 0FE8      ADD	R30,R24
    00FA 1FF9      ADC	R31,R25
    00FB 8020      LDD	R2,Z+0
    00FC BA2B      OUT	0x1B,R2
(0084)      D_LE0;                    
    00FD 9894      CBI	0x12,4
(0085)      delay_nms(1);              
    00FE E001      LDI	R16,1
    00FF E010      LDI	R17,0
    0100 DFAF      RCALL	_delay_nms
(0086) 
(0087)      D_LE1;                     
    0101 9A94      SBI	0x12,4
(0088)      W_LE1;                     
    0102 9A95      SBI	0x12,5
(0089)      Data_IO=~j;                
    0103 2E26      MOV	R2,R22
    0104 9420      COM	R2
    0105 BA2B      OUT	0x1B,R2
(0090)      W_LE0;                      
    0106 9895      CBI	0x12,5
(0091) 	 j=(j<<1);
    0107 0F66      LSL	R22
(0092)      Data_IO=table[A2];             
    0108 E080      LDI	R24,0
    0109 E091      LDI	R25,1
    010A 91E00112  LDS	R30,A2
    010C 91F00113  LDS	R31,A2+1
    010E 0FE8      ADD	R30,R24
    010F 1FF9      ADC	R31,R25
    0110 8020      LDD	R2,Z+0
    0111 BA2B      OUT	0x1B,R2
(0093)      D_LE0;                      
    0112 9894      CBI	0x12,4
(0094)      delay_nms(1);                
    0113 E001      LDI	R16,1
    0114 E010      LDI	R17,0
    0115 DF9A      RCALL	_delay_nms
(0095) 
(0096) 	 D_LE1;                     
    0116 9A94      SBI	0x12,4
(0097)      W_LE1;                     
    0117 9A95      SBI	0x12,5
(0098)      Data_IO=~j;                
    0118 2E26      MOV	R2,R22
    0119 9420      COM	R2
    011A BA2B      OUT	0x1B,R2
(0099)      W_LE0;                      
    011B 9895      CBI	0x12,5
(0100) 	 j=(j<<1);
    011C 0F66      LSL	R22
(0101)      Data_IO=table[A3];           
    011D E080      LDI	R24,0
    011E E091      LDI	R25,1
    011F 91E00110  LDS	R30,A3
    0121 91F00111  LDS	R31,A3+1
    0123 0FE8      ADD	R30,R24
    0124 1FF9      ADC	R31,R25
    0125 8020      LDD	R2,Z+0
    0126 BA2B      OUT	0x1B,R2
(0102)      D_LE0;                      
    0127 9894      CBI	0x12,4
(0103)      delay_nms(1);                
    0128 E001      LDI	R16,1
    0129 E010      LDI	R17,0
    012A DF85      RCALL	_delay_nms
(0104) 
(0105) 	 D_LE1;                     
    012B 9A94      SBI	0x12,4
(0106)      W_LE1;                     
    012C 9A95      SBI	0x12,5
(0107)      Data_IO=0xff;                
    012D EF8F      LDI	R24,0xFF
    012E BB8B      OUT	0x1B,R24
(0108)      W_LE0;                      
    012F 9895      CBI	0x12,5
    0130 940E01ED  CALL	pop_gset2
    0132 9508      RET
_data_do:
  A2t                  --> R20
  temp_d               --> R20
    0133 940E01F8  CALL	push_gset1
    0135 2F40      MOV	R20,R16
(0109) 
(0110) }
(0111) 
(0112) 
(0113) //*************************************************************************
(0114) //		数据处理函数
(0115) //*************************************************************************
(0116)  void data_do(uchar temp_d)
(0117)  {
(0118)      uint A2t;
(0119)      A1=temp_d/100;                       //分出百，十，和个位
    0136 E624      LDI	R18,0x64
    0137 E030      LDI	R19,0
    0138 2F04      MOV	R16,R20
    0139 2711      CLR	R17
    013A 940E01B7  CALL	div16s
    013C 93100115  STS	A1+1,R17
    013E 93000114  STS	A1,R16
(0120)      A2t=temp_d%100;
    0140 E624      LDI	R18,0x64
    0141 E030      LDI	R19,0
    0142 2F04      MOV	R16,R20
    0143 2711      CLR	R17
    0144 940E01B3  CALL	mod16s
    0146 01A8      MOVW	R20,R16
(0121)      A2=A2t/10;
    0147 E02A      LDI	R18,0xA
    0148 E030      LDI	R19,0
    0149 940E01D3  CALL	div16u
    014B 93100113  STS	A2+1,R17
    014D 93000112  STS	A2,R16
(0122)      A3=A2t%10;
    014F E02A      LDI	R18,0xA
    0150 E030      LDI	R19,0
    0151 018A      MOVW	R16,R20
    0152 940E01D1  CALL	mod16u
    0154 93100111  STS	A3+1,R17
    0156 93000110  STS	A3,R16
    0158 940E01FB  CALL	pop_gset1
    015A 9508      RET
_eprom_read:
  p_buff               --> R20
  number               --> R18
  addr                 --> R16
    015B 940E01F8  CALL	push_gset1
    015D 814A      LDD	R20,Y+2
    015E 815B      LDD	R21,Y+3
(0123) }
(0124) 
(0125) 
(0126) //***********************************************************************
(0127) //                EEPROM读取函数*/
(0128) //            addr：地址；number：长度；p_buff：读出数据存放指针
(0129) //***********************************************************************
(0130) void eprom_read(unsigned int addr, unsigned char number, unsigned char *p_buff) {
(0131) 
(0132) 	while(EECR & (1 << EEWE));               //等待前面的写完成
    015F 99E1      SBIC	0x1C,1
    0160 CFFE      RJMP	0x015F
(0133) 
(0134) 	EEARH = 0x00;                           //写高字节地址
    0161 2422      CLR	R2
    0162 BA2F      OUT	0x1F,R2
    0163 C009      RJMP	0x016D
(0135) 	
(0136) 	while(number --) {
(0137) 		EEARL = addr ++;                 	//写地址低字节
    0164 0118      MOVW	R2,R16
    0165 5F0F      SUBI	R16,0xFF
    0166 4F1F      SBCI	R17,0xFF
    0167 BA2E      OUT	0x1E,R2
(0138) 		EECR |= (1 << EERE);            	//读允许位置1
    0168 9AE0      SBI	0x1C,0
(0139) 		*p_buff++ = EEDR;               	//读出EEDR中的数据
    0169 B22D      IN	R2,0x1D
    016A 01FA      MOVW	R30,R20
    016B 9221      ST	R2,Z+
    016C 01AF      MOVW	R20,R30
    016D 2E22      MOV	R2,R18
    016E 2433      CLR	R3
    016F 5021      SUBI	R18,1
    0170 2022      TST	R2
    0171 F791      BNE	0x0164
    0172 940E01FB  CALL	pop_gset1
    0174 9508      RET
_eprom_write:
  p_buff               --> R20
  number               --> R18
  addr                 --> R16
    0175 940E01F8  CALL	push_gset1
    0177 814A      LDD	R20,Y+2
    0178 815B      LDD	R21,Y+3
(0140) 		}
(0141) }
(0142) //***********************************************************************
(0143) //              EEPROM写入函数
(0144) //          addr：地址；number：长度；p_buff：写入数据存放指针
(0145) //***********************************************************************
(0146) void eprom_write(unsigned int addr, unsigned char number, unsigned char *p_buff) {
(0147) 
(0148) 	EEARH = 0x00;
    0179 2422      CLR	R2
    017A BA2F      OUT	0x1F,R2
    017B C00D      RJMP	0x0189
(0149) 	
(0150) 	while(number --) {
(0151) 		while(EECR & (1 << EEWE));       //等待前面的写完成
    017C 99E1      SBIC	0x1C,1
    017D CFFE      RJMP	0x017C
(0152) 		EEARL = addr ++;                 //写地址
    017E 0118      MOVW	R2,R16
    017F 5F0F      SUBI	R16,0xFF
    0180 4F1F      SBCI	R17,0xFF
    0181 BA2E      OUT	0x1E,R2
(0153) 		EEDR = *p_buff ++;               //写数据到EEDR
    0182 01FA      MOVW	R30,R20
    0183 9021      LD	R2,Z+
    0184 01AF      MOVW	R20,R30
    0185 BA2D      OUT	0x1D,R2
(0154) 		EECR |= (1 << EEMWE);            //主机写入允许位
    0186 9AE2      SBI	0x1C,2
(0155) 		EECR&=~(1<<EEWE);
    0187 98E1      CBI	0x1C,1
(0156) 		EECR |= (1 << EEWE);             //EEWE为1，执行写操作
    0188 9AE1      SBI	0x1C,1
    0189 2E22      MOV	R2,R18
    018A 2433      CLR	R3
    018B 5021      SUBI	R18,1
    018C 2022      TST	R2
    018D F771      BNE	0x017C
    018E 940E01FB  CALL	pop_gset1
    0190 9508      RET
_main:
  temp                 --> Y+2
    0191 9723      SBIW	R28,3
(0157) 		}
(0158) }
(0159) 
(0160) 
(0161) //***********************************************************************
(0162) //                       主函数
(0163) //***********************************************************************
(0164) void main(void) 
(0165) {
(0166) 
(0167) 	unsigned char temp;
(0168)     system_init();                      //系统初始化
    0192 DF3B      RCALL	_system_init
(0169)     eprom_read(0x10, 0x01, &temp);		//读出记录
    0193 01CE      MOVW	R24,R28
    0194 9602      ADIW	R24,2
    0195 8399      STD	Y+1,R25
    0196 8388      STD	Y+0,R24
    0197 E021      LDI	R18,1
    0198 E100      LDI	R16,0x10
    0199 E010      LDI	R17,0
    019A DFC0      RCALL	_eprom_read
(0170)     delay_nms(10);
    019B E00A      LDI	R16,0xA
    019C E010      LDI	R17,0
    019D DF12      RCALL	_delay_nms
(0171) 	temp ++;                            //计数值加1
    019E 818A      LDD	R24,Y+2
    019F 5F8F      SUBI	R24,0xFF
    01A0 838A      STD	Y+2,R24
(0172)     eprom_write(0x10, 0x01, &temp);		//写入记录	
    01A1 01CE      MOVW	R24,R28
    01A2 9602      ADIW	R24,2
    01A3 8399      STD	Y+1,R25
    01A4 8388      STD	Y+0,R24
    01A5 E021      LDI	R18,1
    01A6 E100      LDI	R16,0x10
    01A7 E010      LDI	R17,0
    01A8 DFCC      RCALL	_eprom_write
(0173)     delay_nms(10);              
    01A9 E00A      LDI	R16,0xA
    01AA E010      LDI	R17,0
    01AB DF04      RCALL	_delay_nms
    01AC C003      RJMP	0x01B0
(0174) 				             	
(0175) 	while (1)
(0176) 	 {
(0177) 	data_do(temp);                      //每启动一次temp加1，记录到EEPROM中
    01AD 810A      LDD	R16,Y+2
    01AE DF84      RCALL	_data_do
(0178) 	Display_EEPROM();					//显示计数值
FILE: <library>
    01AF DF26      RCALL	_Display_EEPROM
    01B0 CFFC      RJMP	0x01AD
    01B1 9623      ADIW	R28,3
    01B2 9508      RET
mod16s:
    01B3 9468      BSET	6
    01B4 92DA      ST	R13,-Y
    01B5 2ED1      MOV	R13,R17
    01B6 C004      RJMP	0x01BB
div16s:
    01B7 94E8      BCLR	6
    01B8 92DA      ST	R13,-Y
    01B9 2ED1      MOV	R13,R17
    01BA 26D3      EOR	R13,R19
    01BB FF17      SBRS	R17,7
    01BC C004      RJMP	0x01C1
    01BD 9510      COM	R17
    01BE 9500      COM	R16
    01BF 5F0F      SUBI	R16,0xFF
    01C0 4F1F      SBCI	R17,0xFF
    01C1 FF37      SBRS	R19,7
    01C2 C004      RJMP	0x01C7
    01C3 9530      COM	R19
    01C4 9520      COM	R18
    01C5 5F2F      SUBI	R18,0xFF
    01C6 4F3F      SBCI	R19,0xFF
    01C7 940E01D4  CALL	xdiv16u
    01C9 FED7      SBRS	R13,7
    01CA C004      RJMP	0x01CF
    01CB 9510      COM	R17
    01CC 9500      COM	R16
    01CD 5F0F      SUBI	R16,0xFF
    01CE 4F1F      SBCI	R17,0xFF
    01CF 90D9      LD	R13,Y+
    01D0 9508      RET
mod16u:
    01D1 9468      BSET	6
    01D2 C001      RJMP	xdiv16u
div16u:
    01D3 94E8      BCLR	6
xdiv16u:
    01D4 92EA      ST	R14,-Y
    01D5 92FA      ST	R15,-Y
    01D6 938A      ST	R24,-Y
    01D7 24EE      CLR	R14
    01D8 24FF      CLR	R15
    01D9 E180      LDI	R24,0x10
    01DA 0F00      LSL	R16
    01DB 1F11      ROL	R17
    01DC 1CEE      ROL	R14
    01DD 1CFF      ROL	R15
    01DE 16E2      CP	R14,R18
    01DF 06F3      CPC	R15,R19
    01E0 F018      BCS	0x01E4
    01E1 1AE2      SUB	R14,R18
    01E2 0AF3      SBC	R15,R19
    01E3 9503      INC	R16
    01E4 958A      DEC	R24
    01E5 F7A1      BNE	0x01DA
    01E6 F416      BRTC	0x01E9
    01E7 2D0E      MOV	R16,R14
    01E8 2D1F      MOV	R17,R15
    01E9 9189      LD	R24,Y+
    01EA 90F9      LD	R15,Y+
    01EB 90E9      LD	R14,Y+
    01EC 9508      RET
pop_gset2:
    01ED E0E2      LDI	R30,2
    01EE 940C01FC  JMP	pop
push_gset5:
    01F0 92FA      ST	R15,-Y
    01F1 92EA      ST	R14,-Y
push_gset4:
    01F2 92DA      ST	R13,-Y
    01F3 92CA      ST	R12,-Y
push_gset3:
    01F4 92BA      ST	R11,-Y
    01F5 92AA      ST	R10,-Y
push_gset2:
    01F6 937A      ST	R23,-Y
    01F7 936A      ST	R22,-Y
push_gset1:
    01F8 935A      ST	R21,-Y
    01F9 934A      ST	R20,-Y
    01FA 9508      RET
pop_gset1:
    01FB E0E1      LDI	R30,1
pop:
    01FC 9149      LD	R20,Y+
    01FD 9159      LD	R21,Y+
    01FE FDE0      SBRC	R30,0
    01FF 9508      RET
    0200 9169      LD	R22,Y+
    0201 9179      LD	R23,Y+
    0202 FDE1      SBRC	R30,1
    0203 9508      RET
    0204 90A9      LD	R10,Y+
    0205 90B9      LD	R11,Y+
    0206 FDE2      SBRC	R30,2
    0207 9508      RET
    0208 90C9      LD	R12,Y+
    0209 90D9      LD	R13,Y+
    020A FDE3      SBRC	R30,3
    020B 9508      RET
    020C 90E9      LD	R14,Y+
    020D 90F9      LD	R15,Y+
    020E 9508      RET
