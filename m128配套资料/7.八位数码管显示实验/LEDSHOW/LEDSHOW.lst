__start:
__text_start:
    004E EFCF      LDI	R28,0xFF
    004F E1D0      LDI	R29,0x10
    0050 BFCD      OUT	0x3D,R28
    0051 BFDE      OUT	0x3E,R29
    0052 51CE      SUBI	R28,0x1E
    0053 40D0      SBCI	R29,0
    0054 EA0A      LDI	R16,0xAA
    0055 8308      STD	Y+0,R16
    0056 2400      CLR	R0
    0057 E1E0      LDI	R30,0x10
    0058 E0F1      LDI	R31,1
    0059 E011      LDI	R17,1
    005A 31E0      CPI	R30,0x10
    005B 07F1      CPC	R31,R17
    005C F011      BEQ	0x005F
    005D 9201      ST	R0,Z+
    005E CFFB      RJMP	0x005A
    005F 8300      STD	Z+0,R16
    0060 E8EC      LDI	R30,0x8C
    0061 E0F0      LDI	R31,0
    0062 E0A0      LDI	R26,0
    0063 E0B1      LDI	R27,1
    0064 E010      LDI	R17,0
    0065 39EC      CPI	R30,0x9C
    0066 07F1      CPC	R31,R17
    0067 F021      BEQ	0x006C
    0068 95C8      LPM
    0069 9631      ADIW	R30,1
    006A 920D      ST	R0,X+
    006B CFF9      RJMP	0x0065
    006C 940E00F4  CALL	_main
_exit:
    006E CFFF      RJMP	_exit
FILE: C:\icc\include\delay.h
(0001) //********************************************************************
(0002) /*函 数 名：delay_us
(0003) 建立日期：2010年1月28日
(0004) 编译环境：ICCAVR7.16A
(0005) 函数作用：微秒级的延时程序
(0006) 说    明：7.3728M晶振下
(0007) ********************************************************************/
(0008) void delay_1us(void);
(0009) void delay_3us(void);
(0010) void delay_10us(void);
(0011) void delay_50us(void);
(0012) void delay_100us(void);
(0013) void delay_n100us(unsigned char n100us);
(0014) void delay_1ms(void);
(0015) void delay_nms(unsigned int nms);
(0016) void delay_ns(unsigned char ns);
(0017) 
(0018) 
(0019) void delay_1us(void)                 //1us延时函数，不能连续调用， 
(0020) { 
(0021)    asm("nop");                       //1时钟周期
_delay_1us:
    006F 0000      NOP
(0022)    asm("nop");
    0070 0000      NOP
(0023)    asm("nop");
    0071 0000      NOP
(0024)    asm("nop");
    0072 0000      NOP
(0025)    asm("nop");                       //1T
    0073 0000      NOP
(0026)    asm("nop");
    0074 0000      NOP
    0075 9508      RET
(0027) 
(0028) }
(0029) void delay_3us(void)                 //3us延时函数,,可重复调用不影响精度
(0030) { 
(0031)    
(0032)    asm("nop");
_delay_3us:
    0076 0000      NOP
(0033)    asm("nop");
    0077 0000      NOP
(0034)    asm("nop");                       
    0078 0000      NOP
(0035)    asm("nop");
    0079 0000      NOP
(0036)    asm("nop");
    007A 0000      NOP
(0037)    asm("nop");
    007B 0000      NOP
(0038)    asm("nop");                       
    007C 0000      NOP
(0039)    asm("nop");
    007D 0000      NOP
(0040)    asm("nop");
    007E 0000      NOP
(0041)    asm("nop");
    007F 0000      NOP
(0042)    asm("nop");                       
    0080 0000      NOP
(0043)    asm("nop");
    0081 0000      NOP
(0044)    asm("nop");
    0082 0000      NOP
(0045)    asm("nop");
    0083 0000      NOP
(0046)    asm("nop");                       
    0084 0000      NOP
(0047)    asm("nop");
    0085 0000      NOP
(0048)    asm("nop");
    0086 0000      NOP
(0049)    asm("nop");
    0087 0000      NOP
(0050)    asm("nop");
    0088 0000      NOP
(0051)    asm("nop");
    0089 0000      NOP
(0052)    asm("nop");                       
    008A 0000      NOP
    008B 9508      RET
(0053) } 
(0054) 
(0055) void delay_10us(void)                 //10us延时函数,,可重复调用不影响精度
(0056) {
(0057)    delay_3us();
_delay_10us:
    008C DFE9      RCALL	_delay_3us
(0058)    delay_3us(); 
    008D DFE8      RCALL	_delay_3us
(0059)    delay_3us();  
    008E DFE7      RCALL	_delay_3us
    008F 9508      RET
(0060) }
(0061)   
(0062) void delay_50us(void)                 //48us延时函数,,可重复调用不影响精度
(0063) { 
(0064)    delay_10us();
_delay_50us:
    0090 DFFB      RCALL	_delay_10us
(0065)    delay_10us(); 
    0091 DFFA      RCALL	_delay_10us
(0066)    delay_10us();
    0092 DFF9      RCALL	_delay_10us
(0067)    delay_10us();
    0093 DFF8      RCALL	_delay_10us
    0094 9508      RET
(0068) }
(0069) void delay_100us(void)     //exactly 98us延时函数,,可重复调用不影响精度
(0070) {
(0071)  delay_50us();
_delay_100us:
    0095 DFFA      RCALL	_delay_50us
(0072)  delay_50us();
    0096 DFF9      RCALL	_delay_50us
    0097 9508      RET
_delay_n100us:
  n100us               --> R20
    0098 940E0104  CALL	push_gset1
    009A 2F40      MOV	R20,R16
(0073) }
(0074) void delay_n100us(unsigned char n100us)
(0075) {
    009B C001      RJMP	0x009D
(0076)  while(n100us--)                          
(0077)  delay_100us();
    009C DFF8      RCALL	_delay_100us
    009D 2E24      MOV	R2,R20
    009E 2433      CLR	R3
    009F 5041      SUBI	R20,1
    00A0 2022      TST	R2
    00A1 F7D1      BNE	0x009C
    00A2 940E0107  CALL	pop_gset1
    00A4 9508      RET
(0078) }
(0079) /*delay_n100us(2)        250us
(0080) delay_n100us(3)          360us
(0081) delay_n100us(4)          470us
(0082) delay_n100us(5)          580us
(0083) delay_n100us(6)          690us
(0084) delay_n100us(7)       800us
(0085) delay_n100us(8)          900us              主要是由于函数声明及while,,,大概6us
(0086) 
(0087) */
(0088) void delay_1ms()
(0089) {
(0090)  delay_100us();
_delay_1ms:
    00A5 DFEF      RCALL	_delay_100us
(0091)  delay_100us();
    00A6 DFEE      RCALL	_delay_100us
(0092)  delay_100us();
    00A7 DFED      RCALL	_delay_100us
(0093)  delay_100us();
    00A8 DFEC      RCALL	_delay_100us
(0094)  delay_100us();
    00A9 DFEB      RCALL	_delay_100us
(0095)  delay_100us();
    00AA DFEA      RCALL	_delay_100us
(0096)  delay_100us();
    00AB DFE9      RCALL	_delay_100us
(0097)  delay_100us();
    00AC DFE8      RCALL	_delay_100us
(0098)  delay_100us();
    00AD DFE7      RCALL	_delay_100us
(0099)  delay_100us();
    00AE DFE6      RCALL	_delay_100us
    00AF 9508      RET
_delay_nms:
  nms                  --> R20
    00B0 940E0104  CALL	push_gset1
    00B2 01A8      MOVW	R20,R16
(0100) }
(0101) /********************************************************************
(0102) 函 数 名：Delay_ms
(0103) 建立日期：2010年1月28日
(0104) 修改日期：
(0105) 函数作用：毫秒级的精确延时程序
(0106) 说    明：
(0107) ********************************************************************/
(0108) void delay_nms(unsigned int nms)
(0109) {
    00B3 C001      RJMP	0x00B5
(0110)  while(nms--) 
(0111)  delay_1ms();
    00B4 DFF0      RCALL	_delay_1ms
    00B5 011A      MOVW	R2,R20
    00B6 5041      SUBI	R20,1
    00B7 4050      SBCI	R21,0
    00B8 2022      TST	R2
    00B9 F7D1      BNE	0x00B4
    00BA 2033      TST	R3
    00BB F7C1      BNE	0x00B4
    00BC 940E0107  CALL	pop_gset1
    00BE 9508      RET
_delay_ns:
  ns                   --> R20
    00BF 940E0104  CALL	push_gset1
    00C1 2F40      MOV	R20,R16
(0112) }
(0113) void delay_ns(unsigned char ns)
(0114) {
    00C2 C003      RJMP	0x00C6
(0115)  while(ns--) 
(0116)  delay_nms(1000);
    00C3 EE08      LDI	R16,0xE8
    00C4 E013      LDI	R17,3
    00C5 DFEA      RCALL	_delay_nms
    00C6 2E24      MOV	R2,R20
    00C7 2433      CLR	R3
    00C8 5041      SUBI	R20,1
    00C9 2022      TST	R2
    00CA F7C1      BNE	0x00C3
    00CB 940E0107  CALL	pop_gset1
    00CD 9508      RET
FILE: E:\ATMEGA128开发板\我的ATMEGA128最小系统板\M128_ZZX_1配套资料\9.八位数码管显示实验\LEDSHOW\LEDSHOW.C
(0001) //ATMEGA128的8位数码管动态显示程序，显示01234567
(0002) //编译环境 ICCAVR 7.16A
(0003) //系统时钟7.3728MHZ，设置熔丝位为外部高频石英晶体振荡，启动时间4.1ms
(0004) //忠兴电子元件店编辑
(0005) //日期：2010.01.14
(0006) //***********************************************************************
(0007) //			包含文件
(0008) //***********************************************************************
(0009) 
(0010) #include <string.h>
(0011) #include <stdio.h>
(0012) #include <delay.h>
(0013) #include <iom128v.h>
(0014) 
(0015) //***********************************************************************
(0016) //			定义变量区
(0017) //***********************************************************************
(0018) 
(0019) #define uchar           unsigned char
(0020) #define uint            unsigned int
(0021) 
(0022) #define Data_IO	        PORTA                //数据口
(0023) #define Data_DDR        DDRA                 //数据口方向寄存器
(0024) #define D_LE0	        PORTD &= ~(1 << PD4) //数码管段控制位为0
(0025) #define D_LE1           PORTD |= (1 << PD4)  //数码管段控制位为1
(0026) #define W_LE0	        PORTD &= ~(1 << PD5) //数码管位控制位为0
(0027) #define W_LE1           PORTD |= (1 << PD5)  //数码管位控制位为1
(0028) 
(0029) #define W0 				0xfe                 //数码管各位单独选中时应送的位数据
(0030) #define W1              0xfd
(0031) #define W2 				0xfb
(0032) #define W3              0xf7
(0033) #define W4 				0xef
(0034) #define W5              0xdf
(0035) #define W6 				0xbf
(0036) #define W7              0x7f
(0037) 
(0038) //***********************************************************************
(0039) //			共阴数码管显示的断码表
(0040) //***********************************************************************
(0041) 
(0042) uchar table[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,
(0043)                0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};
(0044) 
(0045) //***********************************************************************
(0046) //			IO端口初始化
(0047) //***********************************************************************
(0048) 
(0049) void System_Init()
(0050) {
(0051)     Data_IO=0xFF;             //数据口为输出
_System_Init:
    00CE EF8F      LDI	R24,0xFF
    00CF BB8B      OUT	0x1B,R24
(0052)     Data_DDR=0xFF;
    00D0 BB8A      OUT	0x1A,R24
(0053) 
(0054)     PORTD=0xFF;               //74HC573的控制口，设置为输出
    00D1 BB82      OUT	0x12,R24
(0055)     DDRD=0xFF;
    00D2 BB81      OUT	0x11,R24
(0056) 	
(0057) 	PORTB=0xFF;				  //关闭发光二极管
    00D3 BB88      OUT	0x18,R24
(0058) 	DDRB=0xFF;
    00D4 BB87      OUT	0x17,R24
    00D5 9508      RET
_Write_LED:
  j                    --> R20
  i                    --> R22
    00D6 940E0102  CALL	push_gset2
(0059) }
(0060) 
(0061) //***********************************************************************
(0062) //			74HC573控制数码管动态扫描
(0063) //***********************************************************************
(0064) 
(0065) void Write_LED()
(0066) {
(0067)    uchar i,j;
(0068)    j=0x01;                    //此数据用来控制位选
    00D8 E041      LDI	R20,1
(0069)   for(i=0;i<8;i++)
    00D9 2766      CLR	R22
    00DA C014      RJMP	0x00EF
(0070)   {
(0071)     D_LE1;                    //控制数码管段数据的74HC573的LE管脚置高
    00DB 9A94      SBI	0x12,4
(0072)     W_LE1;                    //控制数码管位的74HC573的LE管脚置高
    00DC 9A95      SBI	0x12,5
(0073)     Data_IO=~j;               //设置要显示的位，也就是哪一个数码管亮
    00DD 2E24      MOV	R2,R20
    00DE 9420      COM	R2
    00DF BA2B      OUT	0x1B,R2
(0074)     W_LE0;                    //锁存位数据，下面送上段数据以后，就显示出来了
    00E0 9895      CBI	0x12,5
(0075) 	j=(j<<1);
    00E1 0F44      LSL	R20
(0076)     Data_IO=table[i];         //送要显示的数据，就是段数据，如显示0送的是0x3f
    00E2 E080      LDI	R24,0
    00E3 E091      LDI	R25,1
    00E4 2FE6      MOV	R30,R22
    00E5 27FF      CLR	R31
    00E6 0FE8      ADD	R30,R24
    00E7 1FF9      ADC	R31,R25
    00E8 8020      LDD	R2,Z+0
    00E9 BA2B      OUT	0x1B,R2
(0077)     D_LE0;                    //锁存段数据，数码管亮一个时间片刻
    00EA 9894      CBI	0x12,4
(0078)     delay_nms(1);              //显示一个时间片刻，会影响亮度和闪烁性
    00EB E001      LDI	R16,1
    00EC E010      LDI	R17,0
    00ED DFC2      RCALL	_delay_nms
    00EE 9563      INC	R22
    00EF 3068      CPI	R22,0x8
    00F0 F350      BCS	0x00DB
    00F1 940E00F9  CALL	pop_gset2
    00F3 9508      RET
(0079) 
(0080)   }
(0081) }
(0082) 
(0083) //***********************************************************************
(0084) //			主程序
(0085) //***********************************************************************
(0086) 
(0087) void main(void)
(0088) {
(0089) 
(0090)      System_Init();             //初始化
_main:
    00F4 DFD9      RCALL	_System_Init
    00F5 C001      RJMP	0x00F7
(0091) 
(0092)  while(1)
(0093)    {
(0094)      Write_LED();               //调用函数，显示
FILE: <library>
    00F6 DFDF      RCALL	_Write_LED
    00F7 CFFE      RJMP	0x00F6
    00F8 9508      RET
pop_gset2:
    00F9 E0E2      LDI	R30,2
    00FA 940C0108  JMP	pop
push_gset5:
    00FC 92FA      ST	R15,-Y
    00FD 92EA      ST	R14,-Y
push_gset4:
    00FE 92DA      ST	R13,-Y
    00FF 92CA      ST	R12,-Y
push_gset3:
    0100 92BA      ST	R11,-Y
    0101 92AA      ST	R10,-Y
push_gset2:
    0102 937A      ST	R23,-Y
    0103 936A      ST	R22,-Y
push_gset1:
    0104 935A      ST	R21,-Y
    0105 934A      ST	R20,-Y
    0106 9508      RET
pop_gset1:
    0107 E0E1      LDI	R30,1
pop:
    0108 9149      LD	R20,Y+
    0109 9159      LD	R21,Y+
    010A FDE0      SBRC	R30,0
    010B 9508      RET
    010C 9169      LD	R22,Y+
    010D 9179      LD	R23,Y+
    010E FDE1      SBRC	R30,1
    010F 9508      RET
    0110 90A9      LD	R10,Y+
    0111 90B9      LD	R11,Y+
    0112 FDE2      SBRC	R30,2
    0113 9508      RET
    0114 90C9      LD	R12,Y+
    0115 90D9      LD	R13,Y+
    0116 FDE3      SBRC	R30,3
    0117 9508      RET
    0118 90E9      LD	R14,Y+
    0119 90F9      LD	R15,Y+
    011A 9508      RET
