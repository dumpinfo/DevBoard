                        .module _1602.c
                        .area text(rom, con, rel)
 0000                   .dbfile E:\DMAVR-~3\1602\1602.c
 0000                   .dbfile F:\PROGRA~1\iccavr\include\delay.h
 0000                   .dbfunc e delay_1us _delay_1us fV
                        .even
 0000           _delay_1us::
 0000                   .dbline -1
 0000                   .dbline 9
 0000           ; //********************************************************************
 0000           ; /*函 数 名：delay_us
 0000           ; 建立日期：2010年1月28日
 0000           ; 编译环境：ICCAVR7.16A
 0000           ; 函数作用：微秒级的延时程序
 0000           ; 说    明：7.3728M晶振下
 0000           ; ********************************************************************/
 0000           ; void delay_1us(void)                 //1us延时函数，不能连续调用， 
 0000           ; { 
 0000                   .dbline 10
 0000           ;    asm("nop");                       //1时钟周期
 0000 0000              nop
 0002                   .dbline 11
 0002           ;    asm("nop");
 0002 0000              nop
 0004                   .dbline 12
 0004           ;    asm("nop");
 0004 0000              nop
 0006                   .dbline 13
 0006           ;    asm("nop");
 0006 0000              nop
 0008                   .dbline 14
 0008           ;    asm("nop");                       //1T
 0008 0000              nop
 000A                   .dbline 15
 000A           ;    asm("nop");
 000A 0000              nop
 000C                   .dbline -2
 000C           L1:
 000C                   .dbline 0 ; func end
 000C 0895              ret
 000E                   .dbend
 000E                   .dbfunc e delay_3us _delay_3us fV
                        .even
 000E           _delay_3us::
 000E                   .dbline -1
 000E                   .dbline 19
 000E           ; 
 000E           ; }
 000E           ; void delay_3us(void)                 //3us延时函数,,可重复调用不影响精度
 000E           ; { 
 000E                   .dbline 21
 000E           ;    
 000E           ;    asm("nop");
 000E 0000              nop
 0010                   .dbline 22
 0010           ;    asm("nop");
 0010 0000              nop
 0012                   .dbline 23
 0012           ;    asm("nop");                       
 0012 0000              nop
 0014                   .dbline 24
 0014           ;    asm("nop");
 0014 0000              nop
 0016                   .dbline 25
 0016           ;    asm("nop");
 0016 0000              nop
 0018                   .dbline 26
 0018           ;    asm("nop");
 0018 0000              nop
 001A                   .dbline 27
 001A           ;    asm("nop");                       
 001A 0000              nop
 001C                   .dbline 28
 001C           ;    asm("nop");
 001C 0000              nop
 001E                   .dbline 29
 001E           ;    asm("nop");
 001E 0000              nop
 0020                   .dbline 30
 0020           ;    asm("nop");
 0020 0000              nop
 0022                   .dbline 31
 0022           ;    asm("nop");                       
 0022 0000              nop
 0024                   .dbline 32
 0024           ;    asm("nop");
 0024 0000              nop
 0026                   .dbline 33
 0026           ;    asm("nop");
 0026 0000              nop
 0028                   .dbline 34
 0028           ;    asm("nop");
 0028 0000              nop
 002A                   .dbline 35
 002A           ;    asm("nop");                       
 002A 0000              nop
 002C                   .dbline 36
 002C           ;    asm("nop");
 002C 0000              nop
 002E                   .dbline 37
 002E           ;    asm("nop");
 002E 0000              nop
 0030                   .dbline 38
 0030           ;    asm("nop");
 0030 0000              nop
 0032                   .dbline 39
 0032           ;    asm("nop");
 0032 0000              nop
 0034                   .dbline 40
 0034           ;    asm("nop");
 0034 0000              nop
 0036                   .dbline 41
 0036           ;    asm("nop");                       
 0036 0000              nop
 0038                   .dbline -2
 0038           L2:
 0038                   .dbline 0 ; func end
 0038 0895              ret
 003A                   .dbend
 003A                   .dbfunc e delay_10us _delay_10us fV
                        .even
 003A           _delay_10us::
 003A                   .dbline -1
 003A                   .dbline 45
 003A           ; } 
 003A           ; 
 003A           ; void delay_10us(void)                 //10us延时函数,,可重复调用不影响精度
 003A           ; {
 003A                   .dbline 46
 003A           ;    delay_3us();
 003A E9DF              xcall _delay_3us
 003C                   .dbline 47
 003C           ;    delay_3us(); 
 003C E8DF              xcall _delay_3us
 003E                   .dbline 48
 003E           ;    delay_3us();  
 003E                   .dbline -2
 003E           L3:
 003E                   .dbline 0 ; func end
 003E E7CF              xjmp _delay_3us
 0040                   .dbend
 0040                   .dbfunc e delay_50us _delay_50us fV
                        .even
 0040           _delay_50us::
 0040                   .dbline -1
 0040                   .dbline 52
 0040           ; }
 0040           ;   
 0040           ; void delay_50us(void)                 //48us延时函数,,可重复调用不影响精度
 0040           ; { 
 0040                   .dbline 53
 0040           ;    delay_10us();
 0040 FCDF              xcall _delay_10us
 0042                   .dbline 54
 0042           ;    delay_10us(); 
 0042 FBDF              xcall _delay_10us
 0044                   .dbline 55
 0044           ;    delay_10us();
 0044 FADF              xcall _delay_10us
 0046                   .dbline 56
 0046           ;    delay_10us();
 0046                   .dbline -2
 0046           L4:
 0046                   .dbline 0 ; func end
 0046 F9CF              xjmp _delay_10us
 0048                   .dbend
 0048                   .dbfunc e delay_100us _delay_100us fV
                        .even
 0048           _delay_100us::
 0048                   .dbline -1
 0048                   .dbline 59
 0048           ; }
 0048           ; void delay_100us(void)     //exactly 98us延时函数,,可重复调用不影响精度
 0048           ; {
 0048                   .dbline 60
 0048           ;  delay_50us();
 0048 FBDF              xcall _delay_50us
 004A                   .dbline 61
 004A           ;  delay_50us();
 004A                   .dbline -2
 004A           L5:
 004A                   .dbline 0 ; func end
 004A FACF              xjmp _delay_50us
 004C                   .dbend
 004C                   .dbfunc e delay_n100us _delay_n100us fV
 004C           ;         n100us -> R20
                        .even
 004C           _delay_n100us::
 004C 4A93              st -y,R20
 004E 402F              mov R20,R16
 0050                   .dbline -1
 0050                   .dbline 64
 0050           ; }
 0050           ; void delay_n100us(unsigned char n100us)
 0050           ; {
 0050 01C0              xjmp L8
 0052           L7:
 0052                   .dbline 66
 0052           ;  while(n100us--)                          
 0052           ;  delay_100us();
 0052 FADF              xcall _delay_100us
 0054           L8:
 0054                   .dbline 65
 0054 242E              mov R2,R20
 0056 3324              clr R3
 0058 4150              subi R20,1
 005A 2220              tst R2
 005C D1F7              brne L7
 005E           X0:
 005E                   .dbline -2
 005E           L6:
 005E                   .dbline 0 ; func end
 005E 4991              ld R20,y+
 0060 0895              ret
 0062                   .dbsym r n100us 20 c
 0062                   .dbend
 0062                   .dbfunc e delay_1ms _delay_1ms fV
                        .even
 0062           _delay_1ms::
 0062                   .dbline -1
 0062                   .dbline 78
 0062           ; }
 0062           ; /*delay_n100us(2)        250us
 0062           ; delay_n100us(3)          360us
 0062           ; delay_n100us(4)          470us
 0062           ; delay_n100us(5)          580us
 0062           ; delay_n100us(6)          690us
 0062           ; delay_n100us(7)       800us
 0062           ; delay_n100us(8)          900us              主要是由于函数声明及while,,,大概6us
 0062           ; 
 0062           ; */
 0062           ; void delay_1ms()
 0062           ; {
 0062                   .dbline 79
 0062           ;  delay_100us();
 0062 F2DF              xcall _delay_100us
 0064                   .dbline 80
 0064           ;  delay_100us();
 0064 F1DF              xcall _delay_100us
 0066                   .dbline 81
 0066           ;  delay_100us();
 0066 F0DF              xcall _delay_100us
 0068                   .dbline 82
 0068           ;  delay_100us();
 0068 EFDF              xcall _delay_100us
 006A                   .dbline 83
 006A           ;  delay_100us();
 006A EEDF              xcall _delay_100us
 006C                   .dbline 84
 006C           ;  delay_100us();
 006C EDDF              xcall _delay_100us
 006E                   .dbline 85
 006E           ;  delay_100us();
 006E ECDF              xcall _delay_100us
 0070                   .dbline 86
 0070           ;  delay_100us();
 0070 EBDF              xcall _delay_100us
 0072                   .dbline 87
 0072           ;  delay_100us();
 0072 EADF              xcall _delay_100us
 0074                   .dbline 88
 0074           ;  delay_100us();
 0074                   .dbline -2
 0074           L10:
 0074                   .dbline 0 ; func end
 0074 E9CF              xjmp _delay_100us
 0076                   .dbend
 0076                   .dbfunc e delay_nms _delay_nms fV
 0076           ;            nms -> R20,R21
                        .even
 0076           _delay_nms::
 0076 4A93              st -y,R20
 0078 5A93              st -y,R21
 007A A801              movw R20,R16
 007C                   .dbline -1
 007C                   .dbline 98
 007C           ; }
 007C           ; /********************************************************************
 007C           ; 函 数 名：Delay_ms
 007C           ; 建立日期：2010年1月28日
 007C           ; 修改日期：
 007C           ; 函数作用：毫秒级的精确延时程序
 007C           ; 说    明：
 007C           ; ********************************************************************/
 007C           ; void delay_nms(unsigned int nms)
 007C           ; {
 007C 01C0              xjmp L13
 007E           L12:
 007E                   .dbline 100
 007E           ;  while(nms--) 
 007E           ;  delay_1ms();
 007E F1DF              xcall _delay_1ms
 0080           L13:
 0080                   .dbline 99
 0080 1A01              movw R2,R20
 0082 4150              subi R20,1
 0084 5040              sbci R21,0
 0086 2220              tst R2
 0088 D1F7              brne L12
 008A 3320              tst R3
 008C C1F7              brne L12
 008E           X1:
 008E                   .dbline -2
 008E           L11:
 008E                   .dbline 0 ; func end
 008E 5991              ld R21,y+
 0090 4991              ld R20,y+
 0092 0895              ret
 0094                   .dbsym r nms 20 i
 0094                   .dbend
 0094                   .dbfunc e delay_ns _delay_ns fV
 0094           ;             ns -> R20
                        .even
 0094           _delay_ns::
 0094 4A93              st -y,R20
 0096 402F              mov R20,R16
 0098                   .dbline -1
 0098                   .dbline 103
 0098           ; }
 0098           ; void delay_ns(unsigned char ns)
 0098           ; {
 0098 03C0              xjmp L17
 009A           L16:
 009A                   .dbline 105
 009A           ;  while(ns--) 
 009A           ;  delay_nms(1000);
 009A 08EE              ldi R16,1000
 009C 13E0              ldi R17,3
 009E EBDF              xcall _delay_nms
 00A0           L17:
 00A0                   .dbline 104
 00A0 242E              mov R2,R20
 00A2 3324              clr R3
 00A4 4150              subi R20,1
 00A6 2220              tst R2
 00A8 C1F7              brne L16
 00AA           X2:
 00AA                   .dbline -2
 00AA           L15:
 00AA                   .dbline 0 ; func end
 00AA 4991              ld R20,y+
 00AC 0895              ret
 00AE                   .dbsym r ns 20 c
 00AE                   .dbend
 00AE                   .dbfile E:\DMAVR-~3\1602\1602.c
 00AE                   .dbfunc e system_init _system_init fV
                        .even
 00AE           _system_init::
 00AE                   .dbline -1
 00AE                   .dbline 39
 00AE           ; //DMAVR-128的1602型LCD显示驱动程序，显示的是welcome和欣世纪电子网站地址
 00AE           ; //编译环境 ICCAVR 7.16A
 00AE           ; //系统时钟7.3728MHZ，设置熔丝位为外部高频石英晶体振荡，启动时间4.1ms
 00AE           ; //作者：阿迪 www.avrgcc.com
 00AE           ; //日期：2010.01.14
 00AE           ; 
 00AE           ; //***********************************************************************
 00AE           ; //                    包含文件
 00AE           ; //***********************************************************************
 00AE           ; 
 00AE           ; #include <string.h>
 00AE           ; #include <stdio.h>
 00AE           ; #include <delay.h>
 00AE           ; #include <iom128v.h>
 00AE           ; 
 00AE           ; #define uchar unsigned char
 00AE           ; #define uint  unsigned int
 00AE           ; 
 00AE           ; #define RS_CLR        PORTF &= ~(1 << PF1)                 //RS置低
 00AE           ; #define RS_SET        PORTF |= (1 << PF1)                  //RS置高
 00AE           ; 
 00AE           ; #define RW_CLR        PORTF &= ~(1 << PF2)                 //RW置低
 00AE           ; #define RW_SET        PORTF |= (1 << PF2)                  //RW置高
 00AE           ; 
 00AE           ; #define EN_CLR        PORTF &= ~(1 << PF3)                 //E置低
 00AE           ; #define EN_SET        PORTF |= (1 << PF3)                  //E置高
 00AE           ; 
 00AE           ; #define Data_IO               PORTA                //液晶数据口
 00AE           ; #define Data_DDR        DDRA                 //数据口方向寄存器
 00AE           ; #define D_LE0         PORTD &= ~(1 << PD4) //数码管段控制位为0，锁存端口数据
 00AE           ; #define D_LE1           PORTD |= (1 << PD4)  //数码管段控制位为1，锁存器输出与端口一致
 00AE           ; #define W_LE0         PORTD &= ~(1 << PD5) //数码管位控制位为0
 00AE           ; #define W_LE1           PORTD |= (1 << PD5)  //数码管位控制位为1
 00AE           ; 
 00AE           ; //*************************************************************************
 00AE           ; //                    初始化子程序
 00AE           ; //*************************************************************************
 00AE           ; void system_init()
 00AE           ; {
 00AE                   .dbline 41
 00AE           ; 
 00AE           ;       Data_IO = 0xFF;                                 //电平设置
 00AE 8FEF              ldi R24,255
 00B0 8BBB              out 0x1b,R24
 00B2                   .dbline 42
 00B2           ;       Data_DDR = 0xFF;                                        //方向输出
 00B2 8ABB              out 0x1a,R24
 00B4                   .dbline 43
 00B4           ;       PORTF = 0xFF;                       //电平设置
 00B4 80936200          sts 98,R24
 00B8                   .dbline 44
 00B8           ;       DDRF = 0xFF;                        //方向输出
 00B8 80936100          sts 97,R24
 00BC                   .dbline 45
 00BC           ;     PORTD=0xFF;
 00BC 82BB              out 0x12,R24
 00BE                   .dbline 46
 00BE           ;       DDRD=0xFF;
 00BE 81BB              out 0x11,R24
 00C0                   .dbline 47
 00C0           ;       D_LE1;                             //关掉数码管，以免显示乱码                   
 00C0 949A              sbi 0x12,4
 00C2                   .dbline 48
 00C2           ;     W_LE1;                     
 00C2 959A              sbi 0x12,5
 00C4                   .dbline 49
 00C4           ;     Data_IO=0xFF;                      //关数码管            
 00C4 8BBB              out 0x1b,R24
 00C6                   .dbline 50
 00C6           ;     W_LE0; 
 00C6 9598              cbi 0x12,5
 00C8                   .dbline -2
 00C8           L19:
 00C8                   .dbline 0 ; func end
 00C8 0895              ret
 00CA                   .dbend
 00CA                   .dbfunc e LCD_write_com _LCD_write_com fV
 00CA           ;            com -> R10
                        .even
 00CA           _LCD_write_com::
 00CA AA92              st -y,R10
 00CC A02E              mov R10,R16
 00CE                   .dbline -1
 00CE                   .dbline 59
 00CE           ; }
 00CE           ; 
 00CE           ; //***********************************************************************
 00CE           ; //    显示屏命令写入函数
 00CE           ; //***********************************************************************
 00CE           ; 
 00CE           ; 
 00CE           ; void LCD_write_com(unsigned char com) 
 00CE           ; {     
 00CE                   .dbline 60
 00CE           ;       RS_CLR;
 00CE 80916200          lds R24,98
 00D2 8D7F              andi R24,253
 00D4 80936200          sts 98,R24
 00D8                   .dbline 61
 00D8           ;       RW_CLR;
 00D8 80916200          lds R24,98
 00DC 8B7F              andi R24,251
 00DE 80936200          sts 98,R24
 00E2                   .dbline 62
 00E2           ;       EN_SET;
 00E2 80916200          lds R24,98
 00E6 8860              ori R24,8
 00E8 80936200          sts 98,R24
 00EC                   .dbline 63
 00EC           ;       Data_IO = com;
 00EC ABBA              out 0x1b,R10
 00EE                   .dbline 64
 00EE           ;       delay_nms(5);
 00EE 05E0              ldi R16,5
 00F0 10E0              ldi R17,0
 00F2 C1DF              xcall _delay_nms
 00F4                   .dbline 65
 00F4           ;       EN_CLR;
 00F4 80916200          lds R24,98
 00F8 877F              andi R24,247
 00FA 80936200          sts 98,R24
 00FE                   .dbline -2
 00FE           L20:
 00FE                   .dbline 0 ; func end
 00FE A990              ld R10,y+
 0100 0895              ret
 0102                   .dbsym r com 10 c
 0102                   .dbend
 0102                   .dbfunc e LCD_write_data _LCD_write_data fV
 0102           ;           data -> R10
                        .even
 0102           _LCD_write_data::
 0102 AA92              st -y,R10
 0104 A02E              mov R10,R16
 0106                   .dbline -1
 0106                   .dbline 72
 0106           ; }
 0106           ; //***********************************************************************
 0106           ; //    显示屏数据写入函数
 0106           ; //***********************************************************************
 0106           ; 
 0106           ; void LCD_write_data(unsigned char data) 
 0106           ; {
 0106                   .dbline 73
 0106           ;       RS_SET;
 0106 80916200          lds R24,98
 010A 8260              ori R24,2
 010C 80936200          sts 98,R24
 0110                   .dbline 74
 0110           ;       RW_CLR;
 0110 80916200          lds R24,98
 0114 8B7F              andi R24,251
 0116 80936200          sts 98,R24
 011A                   .dbline 75
 011A           ;       EN_SET;
 011A 80916200          lds R24,98
 011E 8860              ori R24,8
 0120 80936200          sts 98,R24
 0124                   .dbline 76
 0124           ;       Data_IO = data;
 0124 ABBA              out 0x1b,R10
 0126                   .dbline 77
 0126           ;       delay_nms(5);
 0126 05E0              ldi R16,5
 0128 10E0              ldi R17,0
 012A A5DF              xcall _delay_nms
 012C                   .dbline 78
 012C           ;       EN_CLR;
 012C 80916200          lds R24,98
 0130 877F              andi R24,247
 0132 80936200          sts 98,R24
 0136                   .dbline -2
 0136           L21:
 0136                   .dbline 0 ; func end
 0136 A990              ld R10,y+
 0138 0895              ret
 013A                   .dbsym r data 10 c
 013A                   .dbend
 013A                   .dbfunc e LCD_clear _LCD_clear fV
                        .even
 013A           _LCD_clear::
 013A                   .dbline -1
 013A                   .dbline 85
 013A           ; }
 013A           ; //***********************************************************************
 013A           ; //    显示屏清空显示
 013A           ; //***********************************************************************
 013A           ; 
 013A           ; void LCD_clear(void) 
 013A           ; {
 013A                   .dbline 86
 013A           ;       LCD_write_com(0x01);
 013A 01E0              ldi R16,1
 013C C6DF              xcall _LCD_write_com
 013E                   .dbline 87
 013E           ;       delay_nms(5);
 013E 05E0              ldi R16,5
 0140 10E0              ldi R17,0
 0142                   .dbline -2
 0142           L22:
 0142                   .dbline 0 ; func end
 0142 99CF              xjmp _delay_nms
 0144                   .dbend
 0144                   .dbfunc e LCD_write_str _LCD_write_str fV
 0144           ;              s -> R20,R21
 0144           ;              y -> R10
 0144           ;              x -> R22
                        .even
 0144           _LCD_write_str::
 0144 0E940000          xcall push_xgsetF00C
 0148 A22E              mov R10,R18
 014A 602F              mov R22,R16
 014C 4E81              ldd R20,y+6
 014E 5F81              ldd R21,y+7
 0150                   .dbline -1
 0150                   .dbline 94
 0150           ; }
 0150           ; //***********************************************************************
 0150           ; //    显示屏字符串写入函数
 0150           ; //***********************************************************************
 0150           ; 
 0150           ; void LCD_write_str(unsigned char x,unsigned char y,unsigned char *s) 
 0150           ; {
 0150                   .dbline 96
 0150           ;       
 0150           ;     if (y == 0) 
 0150 AA20              tst R10
 0152 21F4              brne L24
 0154           X3:
 0154                   .dbline 97
 0154           ;     {
 0154                   .dbline 98
 0154           ;       LCD_write_com(0x80 + x);
 0154 062F              mov R16,R22
 0156 0058              subi R16,128    ; addi 128
 0158 B8DF              xcall _LCD_write_com
 015A                   .dbline 99
 015A           ;     }
 015A 09C0              xjmp L27
 015C           L24:
 015C                   .dbline 101
 015C           ;     else 
 015C           ;     {
 015C                   .dbline 102
 015C           ;       LCD_write_com(0xC0 + x);
 015C 062F              mov R16,R22
 015E 0054              subi R16,64    ; addi 192
 0160 B4DF              xcall _LCD_write_com
 0162                   .dbline 103
 0162           ;     }
 0162 05C0              xjmp L27
 0164           L26:
 0164                   .dbline 106
 0164           ;     
 0164           ;     while (*s) 
 0164           ;     {
 0164                   .dbline 107
 0164           ;       LCD_write_data( *s);
 0164 FA01              movw R30,R20
 0166 0081              ldd R16,z+0
 0168 CCDF              xcall _LCD_write_data
 016A                   .dbline 108
 016A           ;       s ++;
 016A 4F5F              subi R20,255  ; offset = 1
 016C 5F4F              sbci R21,255
 016E                   .dbline 109
 016E           ;     }
 016E           L27:
 016E                   .dbline 105
 016E FA01              movw R30,R20
 0170 2080              ldd R2,z+0
 0172 2220              tst R2
 0174 B9F7              brne L26
 0176           X4:
 0176                   .dbline -2
 0176           L23:
 0176                   .dbline 0 ; func end
 0176 0C940000          xjmp pop_xgsetF00C
 017A                   .dbsym r s 20 pc
 017A                   .dbsym r y 10 c
 017A                   .dbsym r x 22 c
 017A                   .dbend
 017A                   .dbfunc e LCD_write_char _LCD_write_char fV
 017A           ;           data -> y+2
 017A           ;              y -> R10
 017A           ;              x -> R20
                        .even
 017A           _LCD_write_char::
 017A AA92              st -y,R10
 017C 4A93              st -y,R20
 017E A22E              mov R10,R18
 0180 402F              mov R20,R16
 0182                   .dbline -1
 0182                   .dbline 116
 0182           ; }
 0182           ; //***********************************************************************
 0182           ; //    显示屏单字符写入函数
 0182           ; //***********************************************************************
 0182           ; 
 0182           ; void LCD_write_char(unsigned char x,unsigned char y,unsigned char data) 
 0182           ; {
 0182                   .dbline 118
 0182           ;       
 0182           ;     if (y == 0) 
 0182 AA20              tst R10
 0184 21F4              brne L30
 0186           X5:
 0186                   .dbline 119
 0186           ;     {
 0186                   .dbline 120
 0186           ;       LCD_write_com(0x80 + x);
 0186 042F              mov R16,R20
 0188 0058              subi R16,128    ; addi 128
 018A 9FDF              xcall _LCD_write_com
 018C                   .dbline 121
 018C           ;     }
 018C 03C0              xjmp L31
 018E           L30:
 018E                   .dbline 123
 018E           ;     else 
 018E           ;     {
 018E                   .dbline 124
 018E           ;       LCD_write_com(0xC0 + x);
 018E 042F              mov R16,R20
 0190 0054              subi R16,64    ; addi 192
 0192 9BDF              xcall _LCD_write_com
 0194                   .dbline 125
 0194           ;     }
 0194           L31:
 0194                   .dbline 127
 0194           ;     
 0194           ;     LCD_write_data( data);  
 0194 0A81              ldd R16,y+2
 0196 B5DF              xcall _LCD_write_data
 0198                   .dbline -2
 0198           L29:
 0198                   .dbline 0 ; func end
 0198 4991              ld R20,y+
 019A A990              ld R10,y+
 019C 0895              ret
 019E                   .dbsym l data 2 c
 019E                   .dbsym r y 10 c
 019E                   .dbsym r x 20 c
 019E                   .dbend
 019E                   .dbfunc e LCD_init _LCD_init fV
                        .even
 019E           _LCD_init::
 019E                   .dbline -1
 019E                   .dbline 134
 019E           ; }
 019E           ; //***********************************************************************
 019E           ; //    显示屏初始化函数
 019E           ; //***********************************************************************
 019E           ; 
 019E           ; void LCD_init(void) 
 019E           ; {
 019E                   .dbline 135
 019E           ;       DDRA = 0xFF;                                    //I/O口方向设置
 019E 8FEF              ldi R24,255
 01A0 8ABB              out 0x1a,R24
 01A2                   .dbline 136
 01A2           ;       DDRA |= (1 << PA5) | (1 << PA6) | (1 << PA7);
 01A2 8AB3              in R24,0x1a
 01A4 806E              ori R24,224
 01A6 8ABB              out 0x1a,R24
 01A8                   .dbline 137
 01A8           ;       LCD_write_com(0x38);                            //显示模式设置
 01A8 08E3              ldi R16,56
 01AA 8FDF              xcall _LCD_write_com
 01AC                   .dbline 138
 01AC           ;       delay_nms(5);
 01AC 05E0              ldi R16,5
 01AE 10E0              ldi R17,0
 01B0 62DF              xcall _delay_nms
 01B2                   .dbline 139
 01B2           ;       LCD_write_com(0x08);                            //显示关闭
 01B2 08E0              ldi R16,8
 01B4 8ADF              xcall _LCD_write_com
 01B6                   .dbline 140
 01B6           ;       delay_nms(5);
 01B6 05E0              ldi R16,5
 01B8 10E0              ldi R17,0
 01BA 5DDF              xcall _delay_nms
 01BC                   .dbline 141
 01BC           ;     LCD_write_com(0x01);                              //显示清屏
 01BC 01E0              ldi R16,1
 01BE 85DF              xcall _LCD_write_com
 01C0                   .dbline 142
 01C0           ;       delay_nms(5);
 01C0 05E0              ldi R16,5
 01C2 10E0              ldi R17,0
 01C4 58DF              xcall _delay_nms
 01C6                   .dbline 143
 01C6           ;     LCD_write_com(0x06);                              //显示光标移动设置
 01C6 06E0              ldi R16,6
 01C8 80DF              xcall _LCD_write_com
 01CA                   .dbline 144
 01CA           ;       delay_nms(5);
 01CA 05E0              ldi R16,5
 01CC 10E0              ldi R17,0
 01CE 53DF              xcall _delay_nms
 01D0                   .dbline 145
 01D0           ;       LCD_write_com(0x0C);                            //显示开及光标设置
 01D0 0CE0              ldi R16,12
 01D2 7BDF              xcall _LCD_write_com
 01D4                   .dbline 146
 01D4           ;     delay_nms(5);
 01D4 05E0              ldi R16,5
 01D6 10E0              ldi R17,0
 01D8                   .dbline -2
 01D8           L32:
 01D8                   .dbline 0 ; func end
 01D8 4ECF              xjmp _delay_nms
 01DA                   .dbend
 01DA                   .dbfunc e main _main fV
 01DA           ;              i -> R22
 01DA           ;              p -> R20,R21
                        .even
 01DA           _main::
 01DA 2297              sbiw R28,2
 01DC                   .dbline -1
 01DC                   .dbline 153
 01DC           ; }
 01DC           ; 
 01DC           ; //*************************************************************************
 01DC           ; //                    主程序
 01DC           ; //*************************************************************************
 01DC           ; void main(void) 
 01DC           ; {
 01DC                   .dbline 157
 01DC           ; 
 01DC           ;       unsigned char i;
 01DC           ;       unsigned char *p;
 01DC           ;     system_init();                                //系统初始化，设置IO口属性
 01DC 68DF              xcall _system_init
 01DE                   .dbline 158
 01DE           ;       delay_nms(100);                                //延时100ms
 01DE 04E6              ldi R16,100
 01E0 10E0              ldi R17,0
 01E2 49DF              xcall _delay_nms
 01E4                   .dbline 159
 01E4           ;       LCD_init();                                   //液晶参数初始化设置
 01E4 DCDF              xcall _LCD_init
 01E6 22C0              xjmp L35
 01E8           L34:
 01E8                   .dbline 162
 01E8           ; 
 01E8           ;  while (1) 
 01E8           ;    {
 01E8                   .dbline 163
 01E8           ;               i = 1;
 01E8 61E0              ldi R22,1
 01EA                   .dbline 164
 01EA           ;               p = "www.avrgcc.com";                    //字符串输出显示
 01EA 40E0              ldi R20,<L37
 01EC 50E0              ldi R21,>L37
 01EE                   .dbline 165
 01EE           ;               LCD_clear();
 01EE A5DF              xcall _LCD_clear
 01F0                   .dbline 166
 01F0           ;               LCD_write_str(0,0,"Welcome");
 01F0 80E0              ldi R24,<L38
 01F2 90E0              ldi R25,>L38
 01F4 9983              std y+1,R25
 01F6 8883              std y+0,R24
 01F8 2227              clr R18
 01FA 0027              clr R16
 01FC A3DF              xcall _LCD_write_str
 01FE                   .dbline 167
 01FE           ;               delay_nms(250);
 01FE 0AEF              ldi R16,250
 0200 10E0              ldi R17,0
 0202 39DF              xcall _delay_nms
 0204 0CC0              xjmp L40
 0206           L39:
 0206                   .dbline 169
 0206           ;               
 0206           ;               while (*p) {
 0206                   .dbline 170
 0206           ;                       LCD_write_char(i,1,*p);          //单个字符输出显示
 0206 FA01              movw R30,R20
 0208 2080              ldd R2,z+0
 020A 2882              std y+0,R2
 020C 21E0              ldi R18,1
 020E 062F              mov R16,R22
 0210 B4DF              xcall _LCD_write_char
 0212                   .dbline 171
 0212           ;                       i ++;
 0212 6395              inc R22
 0214                   .dbline 172
 0214           ;                       p ++;
 0214 4F5F              subi R20,255  ; offset = 1
 0216 5F4F              sbci R21,255
 0218                   .dbline 173
 0218           ;                       delay_nms(250);                   //延时250ms
 0218 0AEF              ldi R16,250
 021A 10E0              ldi R17,0
 021C 2CDF              xcall _delay_nms
 021E                   .dbline 174
 021E           ;                       }
 021E           L40:
 021E                   .dbline 169
 021E FA01              movw R30,R20
 0220 2080              ldd R2,z+0
 0222 2220              tst R2
 0224 81F7              brne L39
 0226           X6:
 0226                   .dbline 175
 0226           ;               delay_nms(250);
 0226 0AEF              ldi R16,250
 0228 10E0              ldi R17,0
 022A 25DF              xcall _delay_nms
 022C                   .dbline 176
 022C           ;   }
 022C           L35:
 022C                   .dbline 161
 022C DDCF              xjmp L34
 022E           X7:
 022E                   .dbline -2
 022E           L33:
 022E                   .dbline 0 ; func end
 022E 2296              adiw R28,2
 0230 0895              ret
 0232                   .dbsym r i 22 c
 0232                   .dbsym r p 20 pc
 0232                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile E:\DMAVR-~3\1602\1602.c
 0000           L38:
 0000                   .blkb 8
                        .area idata
 0000 57656C636F6D6500  .byte 'W,'e,'l,'c,'o,'m,'e,0
                        .area data(ram, con, rel)
 0008                   .dbfile E:\DMAVR-~3\1602\1602.c
 0008           L37:
 0008                   .blkb 15
                        .area idata
 0008 7777772E6176726763632E636F6D00    .byte 'w,'w,'w,46,'a,'v,'r,'g,'c,'c,46,'c,'o,'m,0
                        .area data(ram, con, rel)
 0017                   .dbfile E:\DMAVR-~3\1602\1602.c
 0017           ; }
