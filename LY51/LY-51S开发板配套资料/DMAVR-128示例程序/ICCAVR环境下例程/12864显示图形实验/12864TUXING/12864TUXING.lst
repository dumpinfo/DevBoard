__text_start:
__start:
     44E EFCF      LDI	R28,0xFF
     44F E1D0      LDI	R29,0x10
     450 BFCD      OUT	0x3D,R28
     451 BFDE      OUT	0x3E,R29
     452 51CE      SUBI	R28,0x1E
     453 40D0      SBCI	R29,0
     454 EA0A      LDI	R16,0xAA
     455 8308      STD	Y+0,R16
     456 2400      CLR	R0
     457 E1E0      LDI	R30,0x10
     458 E0F9      LDI	R31,0x9
     459 E019      LDI	R17,0x9
     45A 31E0      CPI	R30,0x10
     45B 07F1      CPC	R31,R17
     45C F011      BEQ	0x045F
     45D 9201      ST	R0,Z+
     45E CFFB      RJMP	0x045A
     45F 8300      STD	Z+0,R16
     460 E8EC      LDI	R30,0x8C
     461 E0F0      LDI	R31,0
     462 E0A0      LDI	R26,0
     463 E0B1      LDI	R27,1
     464 E018      LDI	R17,0x8
     465 E000      LDI	R16,0
     466 BF0B      OUT	0x3B,R16
     467 39EC      CPI	R30,0x9C
     468 07F1      CPC	R31,R17
     469 F021      BEQ	0x046E
     46A 95C8      LPM
     46B 9631      ADIW	R30,1
     46C 920D      ST	R0,X+
     46D CFF9      RJMP	0x0467
     46E 940E 05D0 CALL	_main
_exit:
     470 CFFF      RJMP	_exit
FILE: F:\PROGRA~1\iccavr\include\delay.h
(0001) //********************************************************************
(0002) /*函 数 名：delay_us
(0003) 建立日期：2010年1月28日
(0004) 编译环境：ICCAVR7.16A
(0005) 函数作用：微秒级的延时程序
(0006) 说    明：7.3728M晶振下
(0007) ********************************************************************/
(0008) void delay_1us(void)                 //1us延时函数，不能连续调用， 
(0009) { 
(0010)    asm("nop");                       //1时钟周期
_delay_1us:
     471 0000      NOP
(0011)    asm("nop");
     472 0000      NOP
(0012)    asm("nop");
     473 0000      NOP
(0013)    asm("nop");
     474 0000      NOP
(0014)    asm("nop");                       //1T
     475 0000      NOP
(0015)    asm("nop");
     476 0000      NOP
     477 9508      RET
(0016) 
(0017) }
(0018) void delay_3us(void)                 //3us延时函数,,可重复调用不影响精度
(0019) { 
(0020)    
(0021)    asm("nop");
_delay_3us:
     478 0000      NOP
(0022)    asm("nop");
     479 0000      NOP
(0023)    asm("nop");                       
     47A 0000      NOP
(0024)    asm("nop");
     47B 0000      NOP
(0025)    asm("nop");
     47C 0000      NOP
(0026)    asm("nop");
     47D 0000      NOP
(0027)    asm("nop");                       
     47E 0000      NOP
(0028)    asm("nop");
     47F 0000      NOP
(0029)    asm("nop");
     480 0000      NOP
(0030)    asm("nop");
     481 0000      NOP
(0031)    asm("nop");                       
     482 0000      NOP
(0032)    asm("nop");
     483 0000      NOP
(0033)    asm("nop");
     484 0000      NOP
(0034)    asm("nop");
     485 0000      NOP
(0035)    asm("nop");                       
     486 0000      NOP
(0036)    asm("nop");
     487 0000      NOP
(0037)    asm("nop");
     488 0000      NOP
(0038)    asm("nop");
     489 0000      NOP
(0039)    asm("nop");
     48A 0000      NOP
(0040)    asm("nop");
     48B 0000      NOP
(0041)    asm("nop");                       
     48C 0000      NOP
     48D 9508      RET
(0042) } 
(0043) 
(0044) void delay_10us(void)                 //10us延时函数,,可重复调用不影响精度
(0045) {
(0046)    delay_3us();
_delay_10us:
     48E DFE9      RCALL	_delay_3us
(0047)    delay_3us(); 
     48F DFE8      RCALL	_delay_3us
(0048)    delay_3us();  
     490 CFE7      RJMP	_delay_3us
(0049) }
(0050)   
(0051) void delay_50us(void)                 //48us延时函数,,可重复调用不影响精度
(0052) { 
(0053)    delay_10us();
_delay_50us:
     491 DFFC      RCALL	_delay_10us
(0054)    delay_10us(); 
     492 DFFB      RCALL	_delay_10us
(0055)    delay_10us();
     493 DFFA      RCALL	_delay_10us
(0056)    delay_10us();
     494 CFF9      RJMP	_delay_10us
(0057) }
(0058) void delay_100us(void)     //exactly 98us延时函数,,可重复调用不影响精度
(0059) {
(0060)  delay_50us();
_delay_100us:
     495 DFFB      RCALL	_delay_50us
(0061)  delay_50us();
     496 CFFA      RJMP	_delay_50us
_delay_n100us:
  n100us               --> R20
     497 934A      ST	R20,-Y
     498 2F40      MOV	R20,R16
(0062) }
(0063) void delay_n100us(unsigned char n100us)
(0064) {
     499 C001      RJMP	0x049B
(0065)  while(n100us--)                          
(0066)  delay_100us();
     49A DFFA      RCALL	_delay_100us
     49B 2E24      MOV	R2,R20
     49C 2433      CLR	R3
     49D 5041      SUBI	R20,1
     49E 2022      TST	R2
     49F F7D1      BNE	0x049A
     4A0 9149      LD	R20,Y+
     4A1 9508      RET
(0067) }
(0068) /*delay_n100us(2)        250us
(0069) delay_n100us(3)          360us
(0070) delay_n100us(4)          470us
(0071) delay_n100us(5)          580us
(0072) delay_n100us(6)          690us
(0073) delay_n100us(7)       800us
(0074) delay_n100us(8)          900us              主要是由于函数声明及while,,,大概6us
(0075) 
(0076) */
(0077) void delay_1ms()
(0078) {
(0079)  delay_100us();
_delay_1ms:
     4A2 DFF2      RCALL	_delay_100us
(0080)  delay_100us();
     4A3 DFF1      RCALL	_delay_100us
(0081)  delay_100us();
     4A4 DFF0      RCALL	_delay_100us
(0082)  delay_100us();
     4A5 DFEF      RCALL	_delay_100us
(0083)  delay_100us();
     4A6 DFEE      RCALL	_delay_100us
(0084)  delay_100us();
     4A7 DFED      RCALL	_delay_100us
(0085)  delay_100us();
     4A8 DFEC      RCALL	_delay_100us
(0086)  delay_100us();
     4A9 DFEB      RCALL	_delay_100us
(0087)  delay_100us();
     4AA DFEA      RCALL	_delay_100us
(0088)  delay_100us();
     4AB CFE9      RJMP	_delay_100us
_delay_nms:
  nms                  --> R20
     4AC 934A      ST	R20,-Y
     4AD 935A      ST	R21,-Y
     4AE 01A8      MOVW	R20,R16
(0089) }
(0090) /********************************************************************
(0091) 函 数 名：Delay_ms
(0092) 建立日期：2010年1月28日
(0093) 修改日期：
(0094) 函数作用：毫秒级的精确延时程序
(0095) 说    明：
(0096) ********************************************************************/
(0097) void delay_nms(unsigned int nms)
(0098) {
     4AF C001      RJMP	0x04B1
(0099)  while(nms--) 
(0100)  delay_1ms();
     4B0 DFF1      RCALL	_delay_1ms
     4B1 011A      MOVW	R2,R20
     4B2 5041      SUBI	R20,1
     4B3 4050      SBCI	R21,0
     4B4 2022      TST	R2
     4B5 F7D1      BNE	0x04B0
     4B6 2033      TST	R3
     4B7 F7C1      BNE	0x04B0
     4B8 9159      LD	R21,Y+
     4B9 9149      LD	R20,Y+
     4BA 9508      RET
_delay_ns:
  ns                   --> R20
     4BB 934A      ST	R20,-Y
     4BC 2F40      MOV	R20,R16
(0101) }
(0102) void delay_ns(unsigned char ns)
(0103) {
     4BD C003      RJMP	0x04C1
(0104)  while(ns--) 
(0105)  delay_nms(1000);
     4BE EE08      LDI	R16,0xE8
     4BF E013      LDI	R17,3
     4C0 DFEB      RCALL	_delay_nms
     4C1 2E24      MOV	R2,R20
     4C2 2433      CLR	R3
     4C3 5041      SUBI	R20,1
     4C4 2022      TST	R2
     4C5 F7C1      BNE	0x04BE
     4C6 9149      LD	R20,Y+
     4C7 9508      RET
FILE: E:\DMAVR-~3\12864TUXING\12864TUXING.C
(0001) //DMAVR-128的12864型LCD显示图形驱动程序
(0002) //编译环境 ICCAVR 7.16A
(0003) //系统时钟7.3728MHZ，设置熔丝位为外部高频石英晶体振荡，启动时间4.1ms
(0004) //作者：阿迪 www.avrgcc.com
(0005) //日期：2010.01.14
(0006) 
(0007) //***********************************************************************
(0008) //			包含文件
(0009) //***********************************************************************
(0010) 
(0011) #include <string.h>
(0012) #include <stdio.h>
(0013) #include <delay.h>
(0014) #include <iom128v.h>
(0015) 
(0016) //***********************************************************************
(0017) //	定义变量区
(0018) //***********************************************************************
(0019) #define uchar unsigned char
(0020) #define uint  unsigned int
(0021) 
(0022) 
(0023) #define RS_CLR	PORTF &= ~(1 << PF1)                 //RS置低
(0024) #define RS_SET	PORTF |= (1 << PF1)                  //RS置高
(0025) 
(0026) #define RW_CLR	PORTF &= ~(1 << PF2)                 //RW置低
(0027) #define RW_SET	PORTF |= (1 << PF2)                  //RW置高
(0028) 
(0029) #define EN_CLR	PORTF &= ~(1 << PF3)                 //E置低
(0030) #define EN_SET	PORTF |= (1 << PF3)                  //E置高
(0031) 
(0032) #define LOW		    0
(0033) #define HIGH		1
(0034) #define FIRST_ADDR  0          	     //定义字符/汉字显示起始位置
(0035) 
(0036) //12864相关初始化指令
(0037) #define CLEAR_SCREEN	0x01		//清屏指令：清屏且AC值为00H
(0038) #define AC_INIT		    0x02		//将AC设置为00H。且游标移到原点位置
(0039) #define CURSE_ADD	    0x06		//设定游标移到方向及图像整体移动方向（默认游标右移，图像整体不动）
(0040) #define FUN_MODE	    0x30		//工作模式：8位基本指令集
(0041) #define DISPLAY_ON	    0x0c		//显示开,显示游标，且游标位置反白
(0042) #define DISPLAY_OFF	    0x08		//显示关
(0043) #define CURSE_DIR  	    0x14		//游标向右移动:AC=AC+1
(0044) #define SET_CG_AC	    0x40		//设置AC，范围为：00H~3FH
(0045) #define SET_DD_AC	    0x80
(0046) #define FUN_MODEK	    0x36		//工作模式：8位扩展指令集
(0047) 
(0048) #define X1address       0x80        //12864上半屏X轴起始地址
(0049) #define X2address       0x88        //12864下半屏X轴起始地址
(0050) #define Yaddress        0x80        //Y轴起始地址
(0051) 
(0052) #define Data_IO	        PORTA                //液晶数据口
(0053) #define Data_DDR        DDRA                 //数据口方向寄存器
(0054) #define D_LE0	        PORTD &= ~(1 << PD4) //数码管段控制位为0，锁存端口数据
(0055) #define D_LE1           PORTD |= (1 << PD4)  //数码管段控制位为1，锁存器输出与端口一致
(0056) #define W_LE0	        PORTD &= ~(1 << PD5) //数码管位控制位为0
(0057) #define W_LE1           PORTD |= (1 << PD5)  //数码管位控制位为1
(0058) 
(0059) //图形数据<成功从欣开始图片>
(0060) //#pragma data:code 
(0061)  uchar  photo1[]={
(0062) 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
(0063) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0064) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0065) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0066) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0067) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0068) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0069) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0070) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x38,0x01,
(0071) 0x80,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x00,0x38,0x01,
(0072) 0x80,0x00,0x0C,0x00,0x00,0x80,0x0C,0x10,0x01,0x1E,0x00,0x00,0x00,0x70,0x78,0x01,
(0073) 0x80,0x00,0x1D,0x00,0x01,0x80,0x1C,0x38,0x1F,0x9E,0x07,0xFE,0x00,0x70,0x68,0x01,
(0074) 0x80,0x00,0x1D,0x81,0xC7,0xF0,0x1E,0x78,0x1F,0xBE,0x07,0xFF,0x00,0xF0,0xDC,0x01,
(0075) 0x80,0x1F,0xFC,0x01,0xE3,0xF0,0x1E,0x78,0x1C,0x3C,0x01,0xF8,0x03,0xF9,0x98,0x01,
(0076) 0x80,0x1F,0xF8,0x01,0xE6,0xC0,0x3C,0xF0,0x38,0x6C,0x03,0xB8,0x03,0xF1,0xB8,0x01,
(0077) 0x80,0x1E,0x30,0x01,0xC6,0x80,0x3C,0xF0,0x3F,0x68,0x1B,0x78,0x03,0xBB,0xF0,0x01,
(0078) 0x80,0x1C,0x30,0x01,0x85,0x80,0x78,0xE0,0x3F,0x78,0x1F,0xF0,0x03,0xF3,0xB0,0x01,
(0079) 0x80,0x3F,0xF6,0x01,0x8D,0x80,0x79,0xE0,0x3C,0x78,0x0F,0xC0,0x01,0xE1,0x90,0x01,
(0080) 0x80,0x3C,0xFB,0x0F,0xDD,0x80,0xF1,0xE0,0x3C,0xF0,0x0C,0xC0,0x00,0xC3,0x80,0x01,
(0081) 0x80,0x3C,0xFB,0x07,0x39,0x40,0xF1,0xF0,0x3C,0xE0,0x0C,0xC0,0x01,0xE3,0x80,0x01,
(0082) 0x80,0x38,0xF2,0x00,0x69,0x61,0xF3,0xF0,0x3C,0xA0,0x0C,0xC0,0x03,0x66,0x80,0x01,
(0083) 0x80,0x39,0xF2,0x00,0x52,0x39,0xB3,0x30,0x34,0xB0,0x08,0x80,0x06,0x06,0x80,0x01,
(0084) 0x80,0x10,0x76,0x00,0x10,0x03,0x9E,0x38,0x11,0x18,0x08,0x80,0x18,0x07,0x80,0x01,
(0085) 0x80,0x00,0x7C,0x00,0x00,0x03,0x08,0x18,0x00,0x0C,0x08,0xC0,0x00,0x0D,0x00,0x01,
(0086) 0x80,0x00,0x60,0x00,0x00,0x03,0x00,0x0C,0x00,0x00,0x00,0x40,0x00,0x0F,0x00,0x01,
(0087) 0x80,0x00,0x60,0x00,0x00,0x02,0x00,0x04,0x00,0x00,0x00,0x20,0x00,0x06,0x00,0x01,
(0088) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0089) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0090) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0091) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0092) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0093) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0094) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01
(0095) 
(0096) }; 
(0097) 
(0098)  uchar photo2[]={
(0099) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0100) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0101) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0102) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0103) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0104) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0105) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0106) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0107) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0108) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0109) 0x80,0x03,0x5E,0xBD,0x60,0x0E,0x77,0xEC,0x78,0xF1,0xE0,0x07,0x8E,0x7C,0x00,0x01,
(0110) 0x80,0x01,0x52,0xA5,0x40,0x11,0x22,0x30,0x91,0x12,0x20,0x08,0x91,0x2A,0x00,0x01,
(0111) 0x80,0x01,0x52,0xA5,0x40,0x07,0x14,0x20,0x91,0x02,0x00,0x08,0x11,0x2A,0x00,0x01,
(0112) 0x80,0x01,0x52,0xA5,0x40,0x09,0x14,0x20,0x61,0x02,0x00,0x08,0x11,0x2A,0x00,0x01,
(0113) 0x80,0x00,0xA1,0x42,0x8C,0x11,0x14,0x20,0x81,0x12,0x26,0x08,0x91,0x2A,0x00,0x01,
(0114) 0x80,0x00,0xA1,0x42,0x8C,0x0F,0x88,0xF8,0xF0,0xE1,0xC6,0x07,0x0E,0x6B,0x00,0x01,
(0115) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x88,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0116) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0117) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0118) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0119) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0120) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0121) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0122) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0123) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0124) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0125) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0126) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0127) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0128) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0129) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
(0130) 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
(0131) 
(0132) };
(0133) 
(0134) //图形数据<欣世纪电子>
(0135)  uchar photo3[]={
(0136) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0137) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0138) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0139) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0140) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0141) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0142) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0143) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0144) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0145) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0146) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0147) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0148) 0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0149) 0x00,0x02,0x00,0x00,0x00,0x18,0x03,0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x00,0x00,
(0150) 0x00,0x02,0x00,0x00,0x00,0x30,0x0F,0xC0,0x00,0x00,0x06,0x60,0x00,0x06,0x00,0x00,
(0151) 0x00,0x06,0x00,0x00,0x00,0x70,0x18,0x40,0x00,0x00,0x04,0x10,0x00,0x06,0x00,0x00,
(0152) 0x00,0x0E,0x00,0x00,0x01,0xE0,0x22,0x40,0x00,0x00,0x0C,0x18,0x00,0x05,0x00,0x00,
(0153) 0x00,0x1E,0x00,0x00,0x07,0xE0,0x42,0x00,0x00,0x07,0xF8,0x0C,0x00,0x0D,0x00,0x00,
(0154) 0x00,0x1E,0x00,0x7F,0xFF,0xC0,0x42,0x60,0x00,0x1F,0xDC,0x06,0x00,0xE8,0x80,0x00,
(0155) 0x00,0x3E,0x01,0xFF,0xFF,0x80,0xB3,0xE0,0x00,0x70,0x04,0x08,0x00,0xF8,0xBC,0x00,
(0156) 0x00,0x3E,0x03,0xFF,0xFF,0x00,0xEB,0x20,0x00,0xC0,0x04,0x18,0x00,0xB8,0xFE,0x00,
(0157) 0x00,0x3C,0x07,0xFF,0xFE,0x00,0xCA,0x20,0x01,0x00,0x06,0x30,0x00,0x98,0xC3,0x00,
(0158) 0x00,0x7C,0x0F,0x8F,0xF8,0x00,0x8C,0x20,0x02,0x7F,0x03,0xE0,0x00,0x08,0xC1,0x00,
(0159) 0x00,0x78,0x7F,0xC0,0x00,0x00,0x8C,0x20,0x05,0xFF,0xC1,0xC0,0x00,0x08,0xA0,0x80,
(0160) 0x00,0x79,0xFF,0xF0,0x00,0x00,0xCF,0xA0,0x0F,0x00,0xE0,0x00,0x00,0x88,0xE0,0x80,
(0161) 0x00,0x77,0x00,0x7C,0x00,0x00,0xD8,0xA2,0x1C,0x00,0x38,0x00,0x00,0x89,0xE0,0x40,
(0162) 0x00,0x7F,0x00,0x1E,0x00,0x00,0xD8,0x82,0x1B,0xC0,0x1C,0x00,0x00,0x9A,0x30,0x40,
(0163) 0x00,0xF3,0xC0,0x07,0x00,0x00,0xF8,0xC2,0x3F,0xF0,0x06,0xF0,0x00,0x9E,0x30,0x40,
(0164) 0x00,0xC0,0x70,0x03,0x80,0x00,0xF8,0xC2,0x3C,0x1C,0x03,0xF8,0x00,0xB4,0x28,0x20,
(0165) 0x01,0x80,0x1C,0x01,0x80,0x00,0x7E,0x82,0x60,0x0E,0x00,0xFE,0x00,0xE6,0x2C,0x20,
(0166) 0x03,0x00,0x06,0x00,0xC0,0x00,0x7F,0x06,0xC0,0x02,0x00,0xFF,0xC0,0xE2,0x26,0x20,
(0167) 0x07,0xF0,0x03,0x00,0x70,0x00,0x3F,0x06,0x80,0x01,0x00,0xFF,0xC0,0x42,0x23,0x60,
(0168) 
(0169) };
(0170)  uchar  photo4[]={
(0171) 0x0E,0x1C,0x01,0x80,0x78,0x00,0x7C,0x0F,0x00,0x03,0x8C,0xFF,0x00,0x42,0x67,0xC0,
(0172) 0x18,0x06,0x00,0x80,0x3E,0x00,0xC0,0x0F,0x00,0x02,0x14,0x7C,0x00,0x43,0xFF,0xF0,
(0173) 0x30,0x03,0x00,0x40,0x1F,0xC3,0x80,0x1F,0x80,0x02,0x64,0x7C,0x00,0x43,0xB1,0xFC,
(0174) 0x60,0x03,0x80,0x3C,0x09,0xFE,0x00,0x1F,0xC0,0x72,0x60,0x7E,0x00,0x42,0x10,0x86,
(0175) 0x40,0x03,0x80,0x3E,0x0C,0x00,0x00,0x1F,0xC0,0x7C,0x00,0x3A,0x00,0x44,0x10,0x86,
(0176) 0x80,0x03,0xC0,0x7F,0x06,0x00,0x00,0x1F,0xE0,0x46,0x47,0x9B,0x00,0x64,0x10,0x84,
(0177) 0x00,0x01,0xE0,0x7F,0x82,0x00,0x00,0x30,0x20,0x42,0x46,0xD9,0x00,0x24,0x11,0x04,
(0178) 0x00,0x01,0xE0,0xEF,0xC3,0x00,0x00,0x60,0x00,0x62,0xE4,0x28,0xBF,0xA4,0x1D,0x08,
(0179) 0x00,0x01,0xE0,0xE7,0xC1,0x80,0x00,0xC0,0x00,0x21,0xFC,0x20,0xFF,0xFC,0x1F,0x30,
(0180) 0x00,0x00,0xF0,0xE3,0xC0,0xC0,0x01,0x80,0x01,0xE7,0x32,0x40,0x7F,0xDC,0x23,0xF0,
(0181) 0x00,0x00,0xF0,0xC3,0x80,0x60,0x03,0x00,0x03,0xFE,0x12,0x40,0x7F,0x84,0x21,0xD8,
(0182) 0x00,0x00,0x71,0xC0,0x00,0x30,0x0E,0x00,0x02,0x32,0x13,0x80,0x3F,0x04,0x60,0x88,
(0183) 0x00,0x00,0x39,0xC2,0x40,0x1C,0x1C,0x00,0x04,0x12,0x13,0x80,0x3E,0x03,0xC0,0x8C,
(0184) 0x00,0x00,0x18,0x82,0x40,0x07,0xF8,0x00,0x04,0x13,0x13,0x80,0x18,0x03,0x81,0x04,
(0185) 0x00,0x00,0x08,0x82,0x40,0x01,0xC0,0x00,0x02,0x11,0x32,0x80,0x1C,0x05,0xC6,0x1C,
(0186) 0x00,0x00,0x08,0x42,0x40,0x00,0x00,0x00,0x03,0x32,0xB4,0x40,0x0E,0x0C,0xFE,0x38,
(0187) 0x00,0x00,0x00,0x42,0x40,0x00,0x00,0x00,0x01,0xFA,0x4C,0x40,0x07,0xF8,0x3F,0xE0,
(0188) 0x00,0x00,0x00,0x42,0x40,0x00,0x00,0x00,0x00,0xCE,0x0C,0x40,0x07,0xFE,0x00,0x00,
(0189) 0x00,0x00,0x00,0x26,0x00,0x00,0x00,0x00,0x00,0x8E,0x0B,0xC0,0x07,0xBF,0x00,0x00,
(0190) 0x00,0x00,0x00,0x16,0x80,0x00,0x00,0x00,0x00,0x8B,0x1A,0x00,0x07,0x9F,0x80,0x00,
(0191) 0x00,0x00,0x00,0x15,0x80,0x00,0x00,0x00,0x00,0x91,0xF0,0x00,0x03,0xCF,0xC0,0x00,
(0192) 0x00,0x00,0x00,0x0C,0x80,0x00,0x00,0x00,0x00,0xF1,0xF2,0x00,0x03,0xCF,0xC0,0x00,
(0193) 0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x10,0x12,0x00,0x01,0xC7,0xC0,0x00,
(0194) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x1E,0x00,0x01,0xE3,0xE0,0x00,
(0195) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x17,0x20,0x00,0x00,0xE1,0xE0,0x00,
(0196) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0xE0,0x00,0x00,0xE0,0x00,0x00,
(0197) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x60,0x00,0x00,
(0198) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,
(0199) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,
(0200) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0201) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0202) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0203) };
(0204) //#pragma data:data
(0205) 
(0206) //*************************************************************************
(0207) //			初始化子程序
(0208) //*************************************************************************
(0209) void system_init()
(0210) {
(0211) 
(0212) 	Data_IO = 0xFF;				        //电平设置
_system_init:
     4C8 EF8F      LDI	R24,0xFF
     4C9 BB8B      OUT	0x1B,R24
(0213) 	Data_DDR = 0xFF;				    //方向输出
     4CA BB8A      OUT	0x1A,R24
(0214) 	PORTF = 0xFF;                       //电平设置
     4CB 9380 0062 STS	0x0062,R24
(0215) 	DDRF = 0xFF;                        //方向输出
     4CD 9380 0061 STS	0x0061,R24
(0216)     PORTD=0xFF;
     4CF BB82      OUT	0x12,R24
(0217) 	DDRD=0xFF;
     4D0 BB81      OUT	0x11,R24
(0218) 	D_LE1;                             //关掉数码管，以免显示乱码                   
     4D1 9A94      SBI	0x12,4
(0219)     W_LE1;                     
     4D2 9A95      SBI	0x12,5
(0220)     Data_IO=0xFF;                      //关数码管            
     4D3 BB8B      OUT	0x1B,R24
(0221)     W_LE0; 
     4D4 9895      CBI	0x12,5
     4D5 9508      RET
_LCD_write_com:
  com                  --> R10
     4D6 92AA      ST	R10,-Y
     4D7 2EA0      MOV	R10,R16
(0222) }
(0223) 
(0224) //***********************************************************************
(0225) //	显示屏命令写入函数
(0226) //***********************************************************************
(0227) 
(0228) 
(0229) void LCD_write_com(unsigned char com) 
(0230) {	
(0231) 	RS_CLR;
     4D8 9180 0062 LDS	R24,0x0062
     4DA 7F8D      ANDI	R24,0xFD
     4DB 9380 0062 STS	0x0062,R24
(0232) 	RW_CLR;
     4DD 9180 0062 LDS	R24,0x0062
     4DF 7F8B      ANDI	R24,0xFB
     4E0 9380 0062 STS	0x0062,R24
(0233) 	EN_SET;
     4E2 9180 0062 LDS	R24,0x0062
     4E4 6088      ORI	R24,0x8
     4E5 9380 0062 STS	0x0062,R24
(0234) 	Data_IO = com;
     4E7 BAAB      OUT	0x1B,R10
(0235) 	delay_nms(5);
     4E8 E005      LDI	R16,5
     4E9 E010      LDI	R17,0
     4EA DFC1      RCALL	_delay_nms
(0236) 	EN_CLR;
     4EB 9180 0062 LDS	R24,0x0062
     4ED 7F87      ANDI	R24,0xF7
     4EE 9380 0062 STS	0x0062,R24
     4F0 90A9      LD	R10,Y+
     4F1 9508      RET
_LCD_write_data:
  data                 --> R10
     4F2 92AA      ST	R10,-Y
     4F3 2EA0      MOV	R10,R16
(0237) }
(0238) //***********************************************************************
(0239) //	显示屏数据写入函数
(0240) //***********************************************************************
(0241) 
(0242) void LCD_write_data(unsigned char data) 
(0243) {
(0244) 	RS_SET;
     4F4 9180 0062 LDS	R24,0x0062
     4F6 6082      ORI	R24,2
     4F7 9380 0062 STS	0x0062,R24
(0245) 	RW_CLR;
     4F9 9180 0062 LDS	R24,0x0062
     4FB 7F8B      ANDI	R24,0xFB
     4FC 9380 0062 STS	0x0062,R24
(0246) 	EN_SET;
     4FE 9180 0062 LDS	R24,0x0062
     500 6088      ORI	R24,0x8
     501 9380 0062 STS	0x0062,R24
(0247) 	Data_IO = data;
     503 BAAB      OUT	0x1B,R10
(0248) 	delay_nms(5);
     504 E005      LDI	R16,5
     505 E010      LDI	R17,0
     506 DFA5      RCALL	_delay_nms
(0249) 	EN_CLR;
     507 9180 0062 LDS	R24,0x0062
     509 7F87      ANDI	R24,0xF7
     50A 9380 0062 STS	0x0062,R24
     50C 90A9      LD	R10,Y+
     50D 9508      RET
(0250) }
(0251) 
(0252) //***********************************************************************
(0253) //	显示屏清空显示
(0254) //***********************************************************************
(0255) 
(0256) void LCD_clear(void) 
(0257) {
(0258) 	LCD_write_com(0x01);
_LCD_clear:
     50E E001      LDI	R16,1
     50F DFC6      RCALL	_LCD_write_com
(0259) 	delay_nms(5);
     510 E005      LDI	R16,5
     511 E010      LDI	R17,0
     512 CF99      RJMP	_delay_nms
_DisplayCgrom:
  hz                   --> R20
  addr                 --> R10
     513 940E 0601 CALL	push_xgset300C
     515 01A9      MOVW	R20,R18
     516 2EA0      MOV	R10,R16
(0260) }
(0261) 
(0262) //***********************************************************************
(0263) //函数名称：DisplayCgrom(uchar hz)显示CGROM里的汉字
(0264) //入口参数：无
(0265) //返回参数：无
(0266) //***********************************************************************
(0267) 
(0268) void DisplayCgrom(uchar addr,uchar *hz)
(0269) {
(0270) 
(0271) 	LCD_write_com(addr);
     517 2D0A      MOV	R16,R10
     518 DFBD      RCALL	_LCD_write_com
(0272)     delay_nms(5);
     519 E005      LDI	R16,5
     51A E010      LDI	R17,0
     51B DF90      RCALL	_delay_nms
     51C C008      RJMP	0x0525
(0273) 	while(*hz != '\0')
(0274) 	{
(0275) 		LCD_write_data(*hz);
     51D 01FA      MOVW	R30,R20
     51E 8100      LDD	R16,Z+0
     51F DFD2      RCALL	_LCD_write_data
(0276) 		hz++;
     520 5F4F      SUBI	R20,0xFF
     521 4F5F      SBCI	R21,0xFF
(0277)         delay_nms(5);
     522 E005      LDI	R16,5
     523 E010      LDI	R17,0
     524 DF87      RCALL	_delay_nms
     525 01FA      MOVW	R30,R20
     526 8020      LDD	R2,Z+0
     527 2022      TST	R2
     528 F7A1      BNE	0x051D
     529 940C 0606 JMP	pop_xgset300C
(0278) 	}
(0279) 
(0280) } 
(0281) 
(0282) //***********************************************************************
(0283) //	显示屏初始化函数
(0284) //***********************************************************************
(0285) 
(0286) void LCD_init(void) 
(0287) {
(0288) 	LCD_write_com(FUN_MODE);			//显示模式设置
_LCD_init:
     52B E300      LDI	R16,0x30
     52C DFA9      RCALL	_LCD_write_com
(0289) 	delay_nms(1);
     52D E001      LDI	R16,1
     52E E010      LDI	R17,0
     52F DF7C      RCALL	_delay_nms
(0290) 	LCD_write_com(FUN_MODE);			//显示模式设置
     530 E300      LDI	R16,0x30
     531 DFA4      RCALL	_LCD_write_com
(0291) 	delay_nms(1);
     532 E001      LDI	R16,1
     533 E010      LDI	R17,0
     534 DF77      RCALL	_delay_nms
(0292)     LCD_write_com(DISPLAY_ON);			//显示开
     535 E00C      LDI	R16,0xC
     536 DF9F      RCALL	_LCD_write_com
(0293) 	delay_nms(1);
     537 E001      LDI	R16,1
     538 E010      LDI	R17,0
     539 DF72      RCALL	_delay_nms
(0294)     LCD_write_com(CLEAR_SCREEN);        //清屏
     53A E001      LDI	R16,1
     53B DF9A      RCALL	_LCD_write_com
(0295) 	delay_nms(1);
     53C E001      LDI	R16,1
     53D E010      LDI	R17,0
     53E CF6D      RJMP	_delay_nms
_Display_photo1:
  i                    --> R20
  j                    --> R22
  img1                 --> R10
     53F 940E 060B CALL	push_xgsetF00C
     541 0158      MOVW	R10,R16
(0296) }
(0297) 
(0298) //****************************************************************
(0299) //函数名称：Display_photo(uchar *hz)显示自定义图形，分上下半屏来写
(0300) //****************************************************************
(0301) 
(0302) void Display_photo1( uchar *img1)                      //写上半屏图形数据函数
(0303) {
(0304)    int i,j;     
(0305) 
(0306)    for(i=0;i<32;i++)                                 //上半屏32行
     542 2744      CLR	R20
     543 2755      CLR	R21
(0307)     {  
(0308) 		LCD_write_com(FUN_MODEK);                     //扩展指令，开绘图显示
     544 E306      LDI	R16,0x36
     545 DF90      RCALL	_LCD_write_com
(0309)         delay_nms(1);
     546 E001      LDI	R16,1
     547 E010      LDI	R17,0
     548 DF63      RCALL	_delay_nms
(0310)      
(0311)  		LCD_write_com(Yaddress+i);                   //先写垂直地址，即Y地址，不能自动加一
     549 018A      MOVW	R16,R20
     54A 5800      SUBI	R16,0x80
     54B 4F1F      SBCI	R17,0xFF
     54C DF89      RCALL	_LCD_write_com
(0312)         delay_nms(1);
     54D E001      LDI	R16,1
     54E E010      LDI	R17,0
     54F DF5C      RCALL	_delay_nms
(0313) 
(0314)         LCD_write_com(X1address);                    //再写水平地址，即X地址
     550 E800      LDI	R16,0x80
     551 DF84      RCALL	_LCD_write_com
(0315)         delay_nms(1);
     552 E001      LDI	R16,1
     553 E010      LDI	R17,0
     554 DF57      RCALL	_delay_nms
(0316)       
(0317)  	for(j=0;j<8;j++)                       //连续写入2个字节的数据，一共8次，为一行，即16*8位数据
     555 2766      CLR	R22
     556 2777      CLR	R23
(0318)         {  			                                     
(0319) 		LCD_write_data(img1[i*16+j*2]);
     557 E100      LDI	R16,0x10
     558 E010      LDI	R17,0
     559 019A      MOVW	R18,R20
     55A 940E 05F1 CALL	empy16s
     55C 01F8      MOVW	R30,R16
     55D 011B      MOVW	R2,R22
     55E 0C22      LSL	R2
     55F 1C33      ROL	R3
     560 0DE2      ADD	R30,R2
     561 1DF3      ADC	R31,R3
     562 0DEA      ADD	R30,R10
     563 1DFB      ADC	R31,R11
     564 8100      LDD	R16,Z+0
     565 DF8C      RCALL	_LCD_write_data
(0320) 		delay_nms(2);                       //这个延时是必须的，因为没有对液晶进行判忙操作，所以进行延时
     566 E002      LDI	R16,2
     567 E010      LDI	R17,0
     568 DF43      RCALL	_delay_nms
(0321) 		LCD_write_data(img1[i*16+j*2+1]); 
     569 E100      LDI	R16,0x10
     56A E010      LDI	R17,0
     56B 019A      MOVW	R18,R20
     56C 940E 05F1 CALL	empy16s
     56E 01F8      MOVW	R30,R16
     56F 011B      MOVW	R2,R22
     570 0C22      LSL	R2
     571 1C33      ROL	R3
     572 0DE2      ADD	R30,R2
     573 1DF3      ADC	R31,R3
     574 0DEA      ADD	R30,R10
     575 1DFB      ADC	R31,R11
     576 8101      LDD	R16,Z+1
     577 DF7A      RCALL	_LCD_write_data
(0322) 		delay_nms(2);          
     578 E002      LDI	R16,2
     579 E010      LDI	R17,0
     57A DF31      RCALL	_delay_nms
     57B 5F6F      SUBI	R22,0xFF
     57C 4F7F      SBCI	R23,0xFF
     57D 3068      CPI	R22,0x8
     57E E0E0      LDI	R30,0
     57F 077E      CPC	R23,R30
     580 F2B4      BLT	0x0557
     581 5F4F      SUBI	R20,0xFF
     582 4F5F      SBCI	R21,0xFF
     583 3240      CPI	R20,0x20
     584 E0E0      LDI	R30,0
     585 075E      CPC	R21,R30
     586 F40C      BGE	0x0588
     587 CFBC      RJMP	0x0544
     588 940C 0612 JMP	pop_xgsetF00C
_Display_photo2:
  i                    --> R20
  j                    --> R22
  img2                 --> R10
     58A 940E 060B CALL	push_xgsetF00C
     58C 0158      MOVW	R10,R16
(0323)         }
(0324) 
(0325)     }
(0326) }
(0327) 
(0328) void Display_photo2( uchar *img2)                   //写下半屏图形数据
(0329) {
(0330) 	int i,j;
(0331) 
(0332) 	for(i=0;i<32;i++)                         //下半屏32行
     58D 2744      CLR	R20
     58E 2755      CLR	R21
(0333) 	{  
(0334) 
(0335) 	 	LCD_write_com(Yaddress+i);                //先写垂直地址，即Y地址，不能自动加一
     58F 018A      MOVW	R16,R20
     590 5800      SUBI	R16,0x80
     591 4F1F      SBCI	R17,0xFF
     592 DF43      RCALL	_LCD_write_com
(0336) 	    delay_nms(1);
     593 E001      LDI	R16,1
     594 E010      LDI	R17,0
     595 DF16      RCALL	_delay_nms
(0337) 		LCD_write_com(X2address);                 //再写水平地址，即X地址
     596 E808      LDI	R16,0x88
     597 DF3E      RCALL	_LCD_write_com
(0338) 	    delay_nms(1);
     598 E001      LDI	R16,1
     599 E010      LDI	R17,0
     59A DF11      RCALL	_delay_nms
(0339) 	 	 for(j=0;j<8;j++)                        //连续写入2个字节的数据，一共8次，为一行，即16*8位数据
     59B 2766      CLR	R22
     59C 2777      CLR	R23
(0340) 	    {
(0341) 			
(0342) 			LCD_write_data(img2[i*16+j*2]);
     59D E100      LDI	R16,0x10
     59E E010      LDI	R17,0
     59F 019A      MOVW	R18,R20
     5A0 940E 05F1 CALL	empy16s
     5A2 01F8      MOVW	R30,R16
     5A3 011B      MOVW	R2,R22
     5A4 0C22      LSL	R2
     5A5 1C33      ROL	R3
     5A6 0DE2      ADD	R30,R2
     5A7 1DF3      ADC	R31,R3
     5A8 0DEA      ADD	R30,R10
     5A9 1DFB      ADC	R31,R11
     5AA 8100      LDD	R16,Z+0
     5AB DF46      RCALL	_LCD_write_data
(0343) 			delay_nms(2);                    
     5AC E002      LDI	R16,2
     5AD E010      LDI	R17,0
     5AE DEFD      RCALL	_delay_nms
(0344) 			LCD_write_data(img2[i*16+j*2+1]);  
     5AF E100      LDI	R16,0x10
     5B0 E010      LDI	R17,0
     5B1 019A      MOVW	R18,R20
     5B2 940E 05F1 CALL	empy16s
     5B4 01F8      MOVW	R30,R16
     5B5 011B      MOVW	R2,R22
     5B6 0C22      LSL	R2
     5B7 1C33      ROL	R3
     5B8 0DE2      ADD	R30,R2
     5B9 1DF3      ADC	R31,R3
     5BA 0DEA      ADD	R30,R10
     5BB 1DFB      ADC	R31,R11
     5BC 8101      LDD	R16,Z+1
     5BD DF34      RCALL	_LCD_write_data
(0345) 			delay_nms(2);  
     5BE E002      LDI	R16,2
     5BF E010      LDI	R17,0
     5C0 DEEB      RCALL	_delay_nms
     5C1 5F6F      SUBI	R22,0xFF
     5C2 4F7F      SBCI	R23,0xFF
     5C3 3068      CPI	R22,0x8
     5C4 E0E0      LDI	R30,0
     5C5 077E      CPC	R23,R30
     5C6 F2B4      BLT	0x059D
     5C7 5F4F      SUBI	R20,0xFF
     5C8 4F5F      SBCI	R21,0xFF
     5C9 3240      CPI	R20,0x20
     5CA E0E0      LDI	R30,0
     5CB 075E      CPC	R21,R30
     5CC F40C      BGE	0x05CE
     5CD CFC1      RJMP	0x058F
     5CE 940C 0612 JMP	pop_xgsetF00C
(0346)       
(0347) 		}
(0348) 
(0349) 	}
(0350) 
(0351) }
(0352) 
(0353) //****************************************************************
(0354) //函数名称：主函数，调用相关子程序，显示图形
(0355) //****************************************************************
(0356) 
(0357) void main(void)
(0358) {
(0359) 	int m;
(0360)     system_init();                      //系统初始化，设置IO口属性
_main:
  m                    --> Y,+1
     5D0 DEF7      RCALL	_system_init
(0361) 	delay_nms(1);                        //延时1ms
     5D1 E001      LDI	R16,1
     5D2 E010      LDI	R17,0
     5D3 DED8      RCALL	_delay_nms
(0362) 	LCD_init();                        //液晶参数初始化设置
     5D4 DF56      RCALL	_LCD_init
(0363)     LCD_clear(); 
     5D5 DF38      RCALL	_LCD_clear
     5D6 C018      RJMP	0x05EF
(0364)   while(1)
(0365) 	{
(0366) 	
(0367)     	Display_photo1(photo1);        //显示上半屏数据	
     5D7 E000      LDI	R16,0
     5D8 E011      LDI	R17,1
     5D9 DF65      RCALL	_Display_photo1
(0368) 		Display_photo2(photo2);        //显示下半屏数据
     5DA E100      LDI	R16,0x10
     5DB E013      LDI	R17,3
     5DC DFAD      RCALL	_Display_photo2
(0369) 		delay_nms(1000);
     5DD EE08      LDI	R16,0xE8
     5DE E013      LDI	R17,3
     5DF DECC      RCALL	_delay_nms
(0370) 		delay_nms(1000);
     5E0 EE08      LDI	R16,0xE8
     5E1 E013      LDI	R17,3
     5E2 DEC9      RCALL	_delay_nms
(0371) 
(0372) 	   	Display_photo1(photo3);     //显示上半屏数据
     5E3 E100      LDI	R16,0x10
     5E4 E015      LDI	R17,5
     5E5 DF59      RCALL	_Display_photo1
(0373) 		Display_photo2(photo4);     //显示下半屏数据
     5E6 E100      LDI	R16,0x10
     5E7 E017      LDI	R17,7
     5E8 DFA1      RCALL	_Display_photo2
(0374) 		delay_nms(1000);
     5E9 EE08      LDI	R16,0xE8
     5EA E013      LDI	R17,3
     5EB DEC0      RCALL	_delay_nms
(0375) 		delay_nms(1000);
FILE: <library>
     5EC EE08      LDI	R16,0xE8
     5ED E013      LDI	R17,3
     5EE DEBD      RCALL	_delay_nms
     5EF CFE7      RJMP	0x05D7
     5F0 9508      RET
empy16s:
     5F1 920A      ST	R0,-Y
     5F2 921A      ST	R1,-Y
     5F3 938A      ST	R24,-Y
     5F4 939A      ST	R25,-Y
     5F5 9F02      MUL	R16,R18
     5F6 01C0      MOVW	R24,R0
     5F7 9F12      MUL	R17,R18
     5F8 0D90      ADD	R25,R0
     5F9 9F03      MUL	R16,R19
     5FA 0D90      ADD	R25,R0
     5FB 018C      MOVW	R16,R24
     5FC 9199      LD	R25,Y+
     5FD 9189      LD	R24,Y+
     5FE 9019      LD	R1,Y+
     5FF 9009      LD	R0,Y+
     600 9508      RET
push_xgset300C:
     601 935A      ST	R21,-Y
     602 934A      ST	R20,-Y
     603 92BA      ST	R11,-Y
     604 92AA      ST	R10,-Y
     605 9508      RET
pop_xgset300C:
     606 90A9      LD	R10,Y+
     607 90B9      LD	R11,Y+
     608 9149      LD	R20,Y+
     609 9159      LD	R21,Y+
     60A 9508      RET
push_xgsetF00C:
     60B 937A      ST	R23,-Y
     60C 936A      ST	R22,-Y
     60D 935A      ST	R21,-Y
     60E 934A      ST	R20,-Y
     60F 92BA      ST	R11,-Y
     610 92AA      ST	R10,-Y
     611 9508      RET
pop_xgsetF00C:
     612 90A9      LD	R10,Y+
     613 90B9      LD	R11,Y+
     614 9149      LD	R20,Y+
     615 9159      LD	R21,Y+
     616 9169      LD	R22,Y+
     617 9179      LD	R23,Y+
     618 9508      RET
