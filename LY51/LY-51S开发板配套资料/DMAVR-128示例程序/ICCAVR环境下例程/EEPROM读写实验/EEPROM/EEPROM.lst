__text_start:
__start:
      4E EFCF      LDI	R28,0xFF
      4F E1D0      LDI	R29,0x10
      50 BFCD      OUT	0x3D,R28
      51 BFDE      OUT	0x3E,R29
      52 51CE      SUBI	R28,0x1E
      53 40D0      SBCI	R29,0
      54 EA0A      LDI	R16,0xAA
      55 8308      STD	Y+0,R16
      56 2400      CLR	R0
      57 E1E0      LDI	R30,0x10
      58 E0F1      LDI	R31,1
      59 E011      LDI	R17,1
      5A 31E6      CPI	R30,0x16
      5B 07F1      CPC	R31,R17
      5C F011      BEQ	0x005F
      5D 9201      ST	R0,Z+
      5E CFFB      RJMP	0x005A
      5F 8300      STD	Z+0,R16
      60 E8EC      LDI	R30,0x8C
      61 E0F0      LDI	R31,0
      62 E0A0      LDI	R26,0
      63 E0B1      LDI	R27,1
      64 E010      LDI	R17,0
      65 E000      LDI	R16,0
      66 BF0B      OUT	0x3B,R16
      67 39EC      CPI	R30,0x9C
      68 07F1      CPC	R31,R17
      69 F021      BEQ	0x006E
      6A 95C8      LPM
      6B 9631      ADIW	R30,1
      6C 920D      ST	R0,X+
      6D CFF9      RJMP	0x0067
      6E 940E 018B CALL	_main
_exit:
      70 CFFF      RJMP	_exit
FILE: F:\PROGRA~1\iccavr\include\delay.h
(0001) //********************************************************************
(0002) /*函 数 名：delay_us
(0003) 建立日期：2010年1月28日
(0004) 编译环境：ICCAVR7.16A
(0005) 函数作用：微秒级的延时程序
(0006) 说    明：7.3728M晶振下
(0007) ********************************************************************/
(0008) void delay_1us(void);
(0009) void delay_3us(void);
(0010) void delay_10us(void);
(0011) void delay_50us(void);
(0012) void delay_100us(void);
(0013) void delay_n100us(unsigned char n100us);
(0014) void delay_1ms(void);
(0015) void delay_nms(unsigned int nms);
(0016) void delay_ns(unsigned char ns);
(0017) 
(0018) 
(0019) void delay_1us(void)                 //1us延时函数，不能连续调用， 
(0020) { 
(0021)    asm("nop");                       //1时钟周期
_delay_1us:
      71 0000      NOP
(0022)    asm("nop");
      72 0000      NOP
(0023)    asm("nop");
      73 0000      NOP
(0024)    asm("nop");
      74 0000      NOP
(0025)    asm("nop");                       //1T
      75 0000      NOP
(0026)    asm("nop");
      76 0000      NOP
      77 9508      RET
(0027) 
(0028) }
(0029) void delay_3us(void)                 //3us延时函数,,可重复调用不影响精度
(0030) { 
(0031)    
(0032)    asm("nop");
_delay_3us:
      78 0000      NOP
(0033)    asm("nop");
      79 0000      NOP
(0034)    asm("nop");                       
      7A 0000      NOP
(0035)    asm("nop");
      7B 0000      NOP
(0036)    asm("nop");
      7C 0000      NOP
(0037)    asm("nop");
      7D 0000      NOP
(0038)    asm("nop");                       
      7E 0000      NOP
(0039)    asm("nop");
      7F 0000      NOP
(0040)    asm("nop");
      80 0000      NOP
(0041)    asm("nop");
      81 0000      NOP
(0042)    asm("nop");                       
      82 0000      NOP
(0043)    asm("nop");
      83 0000      NOP
(0044)    asm("nop");
      84 0000      NOP
(0045)    asm("nop");
      85 0000      NOP
(0046)    asm("nop");                       
      86 0000      NOP
(0047)    asm("nop");
      87 0000      NOP
(0048)    asm("nop");
      88 0000      NOP
(0049)    asm("nop");
      89 0000      NOP
(0050)    asm("nop");
      8A 0000      NOP
(0051)    asm("nop");
      8B 0000      NOP
(0052)    asm("nop");                       
      8C 0000      NOP
      8D 9508      RET
(0053) } 
(0054) 
(0055) void delay_10us(void)                 //10us延时函数,,可重复调用不影响精度
(0056) {
(0057)    delay_3us();
_delay_10us:
      8E DFE9      RCALL	_delay_3us
(0058)    delay_3us(); 
      8F DFE8      RCALL	_delay_3us
(0059)    delay_3us();  
      90 CFE7      RJMP	_delay_3us
(0060) }
(0061)   
(0062) void delay_50us(void)                 //48us延时函数,,可重复调用不影响精度
(0063) { 
(0064)    delay_10us();
_delay_50us:
      91 DFFC      RCALL	_delay_10us
(0065)    delay_10us(); 
      92 DFFB      RCALL	_delay_10us
(0066)    delay_10us();
      93 DFFA      RCALL	_delay_10us
(0067)    delay_10us();
      94 CFF9      RJMP	_delay_10us
(0068) }
(0069) void delay_100us(void)     //exactly 98us延时函数,,可重复调用不影响精度
(0070) {
(0071)  delay_50us();
_delay_100us:
      95 DFFB      RCALL	_delay_50us
(0072)  delay_50us();
      96 CFFA      RJMP	_delay_50us
_delay_n100us:
  n100us               --> R20
      97 934A      ST	R20,-Y
      98 2F40      MOV	R20,R16
(0073) }
(0074) void delay_n100us(unsigned char n100us)
(0075) {
      99 C001      RJMP	0x009B
(0076)  while(n100us--)                          
(0077)  delay_100us();
      9A DFFA      RCALL	_delay_100us
      9B 2E24      MOV	R2,R20
      9C 2433      CLR	R3
      9D 5041      SUBI	R20,1
      9E 2022      TST	R2
      9F F7D1      BNE	0x009A
      A0 9149      LD	R20,Y+
      A1 9508      RET
(0078) }
(0079) /*delay_n100us(2)        250us
(0080) delay_n100us(3)          360us
(0081) delay_n100us(4)          470us
(0082) delay_n100us(5)          580us
(0083) delay_n100us(6)          690us
(0084) delay_n100us(7)       800us
(0085) delay_n100us(8)          900us              主要是由于函数声明及while,,,大概6us
(0086) 
(0087) */
(0088) void delay_1ms()
(0089) {
(0090)  delay_100us();
_delay_1ms:
      A2 DFF2      RCALL	_delay_100us
(0091)  delay_100us();
      A3 DFF1      RCALL	_delay_100us
(0092)  delay_100us();
      A4 DFF0      RCALL	_delay_100us
(0093)  delay_100us();
      A5 DFEF      RCALL	_delay_100us
(0094)  delay_100us();
      A6 DFEE      RCALL	_delay_100us
(0095)  delay_100us();
      A7 DFED      RCALL	_delay_100us
(0096)  delay_100us();
      A8 DFEC      RCALL	_delay_100us
(0097)  delay_100us();
      A9 DFEB      RCALL	_delay_100us
(0098)  delay_100us();
      AA DFEA      RCALL	_delay_100us
(0099)  delay_100us();
      AB CFE9      RJMP	_delay_100us
_delay_nms:
  nms                  --> R20
      AC 934A      ST	R20,-Y
      AD 935A      ST	R21,-Y
      AE 01A8      MOVW	R20,R16
(0100) }
(0101) /********************************************************************
(0102) 函 数 名：Delay_ms
(0103) 建立日期：2010年1月28日
(0104) 修改日期：
(0105) 函数作用：毫秒级的精确延时程序
(0106) 说    明：
(0107) ********************************************************************/
(0108) void delay_nms(unsigned int nms)
(0109) {
      AF C001      RJMP	0x00B1
(0110)  while(nms--) 
(0111)  delay_1ms();
      B0 DFF1      RCALL	_delay_1ms
      B1 011A      MOVW	R2,R20
      B2 5041      SUBI	R20,1
      B3 4050      SBCI	R21,0
      B4 2022      TST	R2
      B5 F7D1      BNE	0x00B0
      B6 2033      TST	R3
      B7 F7C1      BNE	0x00B0
      B8 9159      LD	R21,Y+
      B9 9149      LD	R20,Y+
      BA 9508      RET
_delay_ns:
  ns                   --> R20
      BB 934A      ST	R20,-Y
      BC 2F40      MOV	R20,R16
(0112) }
(0113) void delay_ns(unsigned char ns)
(0114) {
      BD C003      RJMP	0x00C1
(0115)  while(ns--) 
(0116)  delay_nms(1000);
      BE EE08      LDI	R16,0xE8
      BF E013      LDI	R17,3
      C0 DFEB      RCALL	_delay_nms
      C1 2E24      MOV	R2,R20
      C2 2433      CLR	R3
      C3 5041      SUBI	R20,1
      C4 2022      TST	R2
      C5 F7C1      BNE	0x00BE
      C6 9149      LD	R20,Y+
      C7 9508      RET
FILE: E:\DMAVR-~3\EEPROM\EEPROM.C
(0001) //DMAVR-128的读写EEPROM示例程序，记录CPU启动的次数到EEPROM中
(0002) //在LED数码管上显示读出的数据,可用复位键刷新显示
(0003) //编译环境 ICCAVR 7.16A
(0004) //系统时钟7.3728MHZ，设置熔丝位为外部高频石英晶体振荡，启动时间4.1ms
(0005) //作者：阿迪 www.avrgcc.com
(0006) //日期：2010.01.14
(0007) //***********************************************************************
(0008) //			包含文件
(0009) //***********************************************************************
(0010) 
(0011) #include <string.h>
(0012) #include <stdio.h>
(0013) #define	 F_CPU	7372800							// 单片机主频为7.3728MHz,用于延时子程序
(0014) #include <delay.h>
(0015) #include <iom128v.h>
(0016) 
(0017) 
(0018) //***********************************************************************
(0019) //			定义变量区
(0020) //***********************************************************************
(0021) 
(0022) #define Data_IO	        PORTA                	//数码管数据口
(0023) #define Data_DDR        DDRA                 	//数码管数据口方向寄存器
(0024) #define D_LE0	        PORTD &= ~(1 << PD4) 	//数码管段控制位为0，锁存端口数据
(0025) #define D_LE1           PORTD |= (1 << PD4)  	//数码管段控制位为1，锁存器输出与端口一致
(0026) #define W_LE0	        PORTD &= ~(1 << PD5) 	//数码管位控制位为0
(0027) #define W_LE1           PORTD |= (1 << PD5)  	//数码管位控制位为1
(0028) 
(0029) #define uchar           unsigned char
(0030) #define uint            unsigned int
(0031) 
(0032) //***********************************************************************
(0033) //			共阴数码管显示的断码表0～F
(0034) //***********************************************************************
(0035) 
(0036) uchar table[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,
(0037) 	           0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};
(0038) uint A1,A2,A3;             		      			//定义的变量,显示数据处理
(0039) 
(0040) 
(0041) 
(0042) //***********************************************************************
(0043) //			IO端口初始化
(0044) //***********************************************************************
(0045) 
(0046) void system_init()
(0047) {
(0048)     Data_IO=0xFF;             						//数据口为输出
_system_init:
      C8 EF8F      LDI	R24,0xFF
      C9 BB8B      OUT	0x1B,R24
(0049)     Data_DDR=0xFF;
      CA BB8A      OUT	0x1A,R24
(0050) 
(0051)     PORTD=0xFF;               						//74HC573的控制口，设置为输出
      CB BB82      OUT	0x12,R24
(0052)     DDRD=0xFF;
      CC BB81      OUT	0x11,R24
(0053) 	PORTB=0XFF;
      CD BB88      OUT	0x18,R24
(0054) 	DDRB=0XFF;
      CE BB87      OUT	0x17,R24
      CF 9508      RET
_Display_EEPROM:
  i                    --> R22
  j                    --> R20
      D0 934A      ST	R20,-Y
      D1 936A      ST	R22,-Y
(0055) }
(0056) 
(0057) //*************************************************************************
(0058) //			74HC573控制数码管动态扫描显示函数，显示采集到的温度
(0059) //*************************************************************************
(0060) 
(0061) void Display_EEPROM(void)
(0062) {
(0063) 	 uchar i,j;
(0064) 	 system_init();
      D2 DFF5      RCALL	_system_init
(0065)      j=0x01;                    			//此数据用来控制位选
      D3 E041      LDI	R20,1
(0066)  for(i=0;i<5;i++)               			//用后3位数码管来显示
      D4 2766      CLR	R22
      D5 C00E      RJMP	0x00E4
(0067)   {
(0068)      D_LE1;                     
      D6 9A94      SBI	0x12,4
(0069)      W_LE1;                     
      D7 9A95      SBI	0x12,5
(0070)      Data_IO=~j;                
      D8 2E24      MOV	R2,R20
      D9 9420      COM	R2
      DA BA2B      OUT	0x1B,R2
(0071)      W_LE0;                      
      DB 9895      CBI	0x12,5
(0072) 	 j=(j<<1);
      DC 0F44      LSL	R20
(0073)      Data_IO=0x00;           
      DD 2422      CLR	R2
      DE BA2B      OUT	0x1B,R2
(0074)      D_LE0;                      
      DF 9894      CBI	0x12,4
(0075)      delay_nms(1);                
      E0 E001      LDI	R16,1
      E1 E010      LDI	R17,0
      E2 DFC9      RCALL	_delay_nms
      E3 9563      INC	R22
      E4 3065      CPI	R22,5
      E5 F380      BCS	0x00D6
(0076)   }
(0077)      D_LE1;                    
      E6 9A94      SBI	0x12,4
(0078)      W_LE1;                    
      E7 9A95      SBI	0x12,5
(0079)      Data_IO=~j;               
      E8 2E24      MOV	R2,R20
      E9 9420      COM	R2
      EA BA2B      OUT	0x1B,R2
(0080)      W_LE0;                    
      EB 9895      CBI	0x12,5
(0081) 	 j=(j<<1);
      EC 0F44      LSL	R20
(0082)      Data_IO=table[A1];         
      ED E080      LDI	R24,0
      EE E091      LDI	R25,1
      EF 91E0 0114 LDS	R30,A1
      F1 91F0 0115 LDS	R31,A1+1
      F3 0FE8      ADD	R30,R24
      F4 1FF9      ADC	R31,R25
      F5 8020      LDD	R2,Z+0
      F6 BA2B      OUT	0x1B,R2
(0083)      D_LE0;                    
      F7 9894      CBI	0x12,4
(0084)      delay_nms(1);              
      F8 E001      LDI	R16,1
      F9 E010      LDI	R17,0
      FA DFB1      RCALL	_delay_nms
(0085) 
(0086)      D_LE1;                     
      FB 9A94      SBI	0x12,4
(0087)      W_LE1;                     
      FC 9A95      SBI	0x12,5
(0088)      Data_IO=~j;                
      FD 2E24      MOV	R2,R20
      FE 9420      COM	R2
      FF BA2B      OUT	0x1B,R2
(0089)      W_LE0;                      
     100 9895      CBI	0x12,5
(0090) 	 j=(j<<1);
     101 0F44      LSL	R20
(0091)      Data_IO=table[A2];             
     102 E080      LDI	R24,0
     103 E091      LDI	R25,1
     104 91E0 0112 LDS	R30,A2
     106 91F0 0113 LDS	R31,A2+1
     108 0FE8      ADD	R30,R24
     109 1FF9      ADC	R31,R25
     10A 8020      LDD	R2,Z+0
     10B BA2B      OUT	0x1B,R2
(0092)      D_LE0;                      
     10C 9894      CBI	0x12,4
(0093)      delay_nms(1);                
     10D E001      LDI	R16,1
     10E E010      LDI	R17,0
     10F DF9C      RCALL	_delay_nms
(0094) 
(0095) 	 D_LE1;                     
     110 9A94      SBI	0x12,4
(0096)      W_LE1;                     
     111 9A95      SBI	0x12,5
(0097)      Data_IO=~j;                
     112 2E24      MOV	R2,R20
     113 9420      COM	R2
     114 BA2B      OUT	0x1B,R2
(0098)      W_LE0;                      
     115 9895      CBI	0x12,5
(0099) 	 j=(j<<1);
     116 0F44      LSL	R20
(0100)      Data_IO=table[A3];           
     117 E080      LDI	R24,0
     118 E091      LDI	R25,1
     119 91E0 0110 LDS	R30,A3
     11B 91F0 0111 LDS	R31,A3+1
     11D 0FE8      ADD	R30,R24
     11E 1FF9      ADC	R31,R25
     11F 8020      LDD	R2,Z+0
     120 BA2B      OUT	0x1B,R2
(0101)      D_LE0;                      
     121 9894      CBI	0x12,4
(0102)      delay_nms(1);                
     122 E001      LDI	R16,1
     123 E010      LDI	R17,0
     124 DF87      RCALL	_delay_nms
(0103) 
(0104) 	 D_LE1;                     
     125 9A94      SBI	0x12,4
(0105)      W_LE1;                     
     126 9A95      SBI	0x12,5
(0106)      Data_IO=0xff;                
     127 EF8F      LDI	R24,0xFF
     128 BB8B      OUT	0x1B,R24
(0107)      W_LE0;                      
     129 9895      CBI	0x12,5
     12A 9169      LD	R22,Y+
     12B 9149      LD	R20,Y+
     12C 9508      RET
_data_do:
  A2t                  --> R10
  temp_d               --> R10
     12D 92AA      ST	R10,-Y
     12E 92BA      ST	R11,-Y
     12F 2EA0      MOV	R10,R16
(0108) 
(0109) }
(0110) 
(0111) 
(0112) //*************************************************************************
(0113) //		数据处理函数
(0114) //*************************************************************************
(0115)  void data_do(uchar temp_d)
(0116)  {
(0117)      uint A2t;
(0118)      A1=temp_d/100;                       //分出百，十，和个位
     130 E624      LDI	R18,0x64
     131 E030      LDI	R19,0
     132 2D0A      MOV	R16,R10
     133 2711      CLR	R17
     134 940E 01B1 CALL	div16s
     136 9310 0115 STS	A1+1,R17
     138 9300 0114 STS	A1,R16
(0119)      A2t=temp_d%100;
     13A E624      LDI	R18,0x64
     13B E030      LDI	R19,0
     13C 2D0A      MOV	R16,R10
     13D 2711      CLR	R17
     13E 940E 01AD CALL	mod16s
     140 0158      MOVW	R10,R16
(0120)      A2=A2t/10;
     141 E02A      LDI	R18,0xA
     142 E030      LDI	R19,0
     143 940E 01CD CALL	div16u
     145 9310 0113 STS	A2+1,R17
     147 9300 0112 STS	A2,R16
(0121)      A3=A2t%10;
     149 E02A      LDI	R18,0xA
     14A E030      LDI	R19,0
     14B 0185      MOVW	R16,R10
     14C 940E 01CB CALL	mod16u
     14E 9310 0111 STS	A3+1,R17
     150 9300 0110 STS	A3,R16
     152 90B9      LD	R11,Y+
     153 90A9      LD	R10,Y+
     154 9508      RET
_eprom_read:
  p_buff               --> R10
  number               --> R18
  addr                 --> R16
     155 92AA      ST	R10,-Y
     156 92BA      ST	R11,-Y
     157 80AA      LDD	R10,Y+2
     158 80BB      LDD	R11,Y+3
(0122) }
(0123) 
(0124) 
(0125) //***********************************************************************
(0126) //                EEPROM读取函数*/
(0127) //            addr：地址；number：长度；p_buff：读出数据存放指针
(0128) //***********************************************************************
(0129) void eprom_read(unsigned int addr, unsigned char number, unsigned char *p_buff) {
(0130) 
(0131) 	while(EECR & (1 << EEWE));               //等待前面的写完成
     159 99E1      SBIC	0x1C,1
     15A CFFE      RJMP	0x0159
(0132) 
(0133) 	EEARH = 0x00;                           //写高字节地址
     15B 2422      CLR	R2
     15C BA2F      OUT	0x1F,R2
     15D C009      RJMP	0x0167
(0134) 	
(0135) 	while(number --) {
(0136) 		EEARL = addr ++;                 	//写地址低字节
     15E 0118      MOVW	R2,R16
     15F 5F0F      SUBI	R16,0xFF
     160 4F1F      SBCI	R17,0xFF
     161 BA2E      OUT	0x1E,R2
(0137) 		EECR |= (1 << EERE);            	//读允许位置1
     162 9AE0      SBI	0x1C,0
(0138) 		*p_buff++ = EEDR;               	//读出EEDR中的数据
     163 B22D      IN	R2,0x1D
     164 01F5      MOVW	R30,R10
     165 9221      ST	R2,Z+
     166 015F      MOVW	R10,R30
     167 2E22      MOV	R2,R18
     168 2433      CLR	R3
     169 5021      SUBI	R18,1
     16A 2022      TST	R2
     16B F791      BNE	0x015E
     16C 90B9      LD	R11,Y+
     16D 90A9      LD	R10,Y+
     16E 9508      RET
_eprom_write:
  p_buff               --> R10
  number               --> R18
  addr                 --> R16
     16F 92AA      ST	R10,-Y
     170 92BA      ST	R11,-Y
     171 80AA      LDD	R10,Y+2
     172 80BB      LDD	R11,Y+3
(0139) 		}
(0140) }
(0141) //***********************************************************************
(0142) //              EEPROM写入函数
(0143) //          addr：地址；number：长度；p_buff：写入数据存放指针
(0144) //***********************************************************************
(0145) void eprom_write(unsigned int addr, unsigned char number, unsigned char *p_buff) {
(0146) 
(0147) 	EEARH = 0x00;
     173 2422      CLR	R2
     174 BA2F      OUT	0x1F,R2
     175 C00D      RJMP	0x0183
(0148) 	
(0149) 	while(number --) {
(0150) 		while(EECR & (1 << EEWE));       //等待前面的写完成
     176 99E1      SBIC	0x1C,1
     177 CFFE      RJMP	0x0176
(0151) 		EEARL = addr ++;                 //写地址
     178 0118      MOVW	R2,R16
     179 5F0F      SUBI	R16,0xFF
     17A 4F1F      SBCI	R17,0xFF
     17B BA2E      OUT	0x1E,R2
(0152) 		EEDR = *p_buff ++;               //写数据到EEDR
     17C 01F5      MOVW	R30,R10
     17D 9021      LD	R2,Z+
     17E 015F      MOVW	R10,R30
     17F BA2D      OUT	0x1D,R2
(0153) 		EECR |= (1 << EEMWE);            //主机写入允许位
     180 9AE2      SBI	0x1C,2
(0154) 		EECR&=~(1<<EEWE);
     181 98E1      CBI	0x1C,1
(0155) 		EECR |= (1 << EEWE);             //EEWE为1，执行写操作
     182 9AE1      SBI	0x1C,1
     183 2E22      MOV	R2,R18
     184 2433      CLR	R3
     185 5021      SUBI	R18,1
     186 2022      TST	R2
     187 F771      BNE	0x0176
     188 90B9      LD	R11,Y+
     189 90A9      LD	R10,Y+
     18A 9508      RET
_main:
  temp                 --> Y,+2
     18B 9723      SBIW	R28,3
(0156) 		}
(0157) }
(0158) 
(0159) 
(0160) //***********************************************************************
(0161) //                       主函数
(0162) //***********************************************************************
(0163) void main(void) 
(0164) {
(0165) 
(0166) 	unsigned char temp;
(0167)     system_init();                      //系统初始化
     18C DF3B      RCALL	_system_init
(0168)     eprom_read(0x10, 0x01, &temp);		//读出记录
     18D 01CE      MOVW	R24,R28
     18E 9602      ADIW	R24,2
     18F 8399      STD	Y+1,R25
     190 8388      STD	Y+0,R24
     191 E021      LDI	R18,1
     192 E100      LDI	R16,0x10
     193 E010      LDI	R17,0
     194 DFC0      RCALL	_eprom_read
(0169)     delay_nms(10);
     195 E00A      LDI	R16,0xA
     196 E010      LDI	R17,0
     197 DF14      RCALL	_delay_nms
(0170) 	temp ++;                            //计数值加1
     198 818A      LDD	R24,Y+2
     199 5F8F      SUBI	R24,0xFF
     19A 838A      STD	Y+2,R24
(0171)     eprom_write(0x10, 0x01, &temp);		//写入记录	
     19B 01CE      MOVW	R24,R28
     19C 9602      ADIW	R24,2
     19D 8399      STD	Y+1,R25
     19E 8388      STD	Y+0,R24
     19F E021      LDI	R18,1
     1A0 E100      LDI	R16,0x10
     1A1 E010      LDI	R17,0
     1A2 DFCC      RCALL	_eprom_write
(0172)     delay_nms(10);              
     1A3 E00A      LDI	R16,0xA
     1A4 E010      LDI	R17,0
     1A5 DF06      RCALL	_delay_nms
     1A6 C003      RJMP	0x01AA
(0173) 				             	
(0174) 	while (1)
(0175) 	 {
(0176) 	data_do(temp);                      //每启动一次temp加1，记录到EEPROM中
     1A7 810A      LDD	R16,Y+2
     1A8 DF84      RCALL	_data_do
(0177) 	Display_EEPROM();					//显示计数值
FILE: <library>
     1A9 DF26      RCALL	_Display_EEPROM
     1AA CFFC      RJMP	0x01A7
     1AB 9623      ADIW	R28,3
     1AC 9508      RET
mod16s:
     1AD 9468      BSET	6
     1AE 92DA      ST	R13,-Y
     1AF 2ED1      MOV	R13,R17
     1B0 C004      RJMP	0x01B5
div16s:
     1B1 94E8      BCLR	6
     1B2 92DA      ST	R13,-Y
     1B3 2ED1      MOV	R13,R17
     1B4 26D3      EOR	R13,R19
     1B5 FF17      SBRS	R17,7
     1B6 C004      RJMP	0x01BB
     1B7 9510      COM	R17
     1B8 9500      COM	R16
     1B9 5F0F      SUBI	R16,0xFF
     1BA 4F1F      SBCI	R17,0xFF
     1BB FF37      SBRS	R19,7
     1BC C004      RJMP	0x01C1
     1BD 9530      COM	R19
     1BE 9520      COM	R18
     1BF 5F2F      SUBI	R18,0xFF
     1C0 4F3F      SBCI	R19,0xFF
     1C1 940E 01CE CALL	xdiv16u
     1C3 FED7      SBRS	R13,7
     1C4 C004      RJMP	0x01C9
     1C5 9510      COM	R17
     1C6 9500      COM	R16
     1C7 5F0F      SUBI	R16,0xFF
     1C8 4F1F      SBCI	R17,0xFF
     1C9 90D9      LD	R13,Y+
     1CA 9508      RET
mod16u:
     1CB 9468      BSET	6
     1CC C001      RJMP	xdiv16u
div16u:
     1CD 94E8      BCLR	6
xdiv16u:
     1CE 92EA      ST	R14,-Y
     1CF 92FA      ST	R15,-Y
     1D0 938A      ST	R24,-Y
     1D1 24EE      CLR	R14
     1D2 24FF      CLR	R15
     1D3 E180      LDI	R24,0x10
     1D4 0F00      LSL	R16
     1D5 1F11      ROL	R17
     1D6 1CEE      ROL	R14
     1D7 1CFF      ROL	R15
     1D8 16E2      CP	R14,R18
     1D9 06F3      CPC	R15,R19
     1DA F018      BCS	0x01DE
     1DB 1AE2      SUB	R14,R18
     1DC 0AF3      SBC	R15,R19
     1DD 9503      INC	R16
     1DE 958A      DEC	R24
     1DF F7A1      BNE	0x01D4
     1E0 F416      BRTC	0x01E3
     1E1 2D0E      MOV	R16,R14
     1E2 2D1F      MOV	R17,R15
     1E3 9189      LD	R24,Y+
     1E4 90F9      LD	R15,Y+
     1E5 90E9      LD	R14,Y+
     1E6 9508      RET
