__text_start:
__start:
      46 EFCF      LDI	R28,0xFF
      47 E1D0      LDI	R29,0x10
      48 BFCD      OUT	0x3D,R28
      49 BFDE      OUT	0x3E,R29
      4A 51CE      SUBI	R28,0x1E
      4B 40D0      SBCI	R29,0
      4C EA0A      LDI	R16,0xAA
      4D 8308      STD	Y+0,R16
      4E 2400      CLR	R0
      4F E0E0      LDI	R30,0
      50 E0F1      LDI	R31,1
      51 E011      LDI	R17,1
      52 30E0      CPI	R30,0
      53 07F1      CPC	R31,R17
      54 F011      BEQ	0x0057
      55 9201      ST	R0,Z+
      56 CFFB      RJMP	0x0052
      57 8300      STD	Z+0,R16
      58 E8EC      LDI	R30,0x8C
      59 E0F0      LDI	R31,0
      5A E0A0      LDI	R26,0
      5B E0B1      LDI	R27,1
      5C E010      LDI	R17,0
      5D E000      LDI	R16,0
      5E BF0B      OUT	0x3B,R16
      5F 38EC      CPI	R30,0x8C
      60 07F1      CPC	R31,R17
      61 F021      BEQ	0x0066
      62 95C8      LPM
      63 9631      ADIW	R30,1
      64 920D      ST	R0,X+
      65 CFF9      RJMP	0x005F
      66 940E 00D2 CALL	_main
_exit:
      68 CFFF      RJMP	_exit
FILE: F:\PROGRA~1\iccavr\include\delay.h
(0001) //********************************************************************
(0002) /*函 数 名：delay_us
(0003) 建立日期：2010年1月28日
(0004) 编译环境：ICCAVR7.16A
(0005) 函数作用：微秒级的延时程序
(0006) 说    明：7.3728M晶振下
(0007) ********************************************************************/
(0008) void delay_1us(void)                 //1us延时函数，不能连续调用， 
(0009) { 
(0010)    asm("nop");                       //1时钟周期
_delay_1us:
      69 0000      NOP
(0011)    asm("nop");
      6A 0000      NOP
(0012)    asm("nop");
      6B 0000      NOP
(0013)    asm("nop");
      6C 0000      NOP
(0014)    asm("nop");                       //1T
      6D 0000      NOP
(0015)    asm("nop");
      6E 0000      NOP
      6F 9508      RET
(0016) 
(0017) }
(0018) void delay_3us(void)                 //3us延时函数,,可重复调用不影响精度
(0019) { 
(0020)    
(0021)    asm("nop");
_delay_3us:
      70 0000      NOP
(0022)    asm("nop");
      71 0000      NOP
(0023)    asm("nop");                       
      72 0000      NOP
(0024)    asm("nop");
      73 0000      NOP
(0025)    asm("nop");
      74 0000      NOP
(0026)    asm("nop");
      75 0000      NOP
(0027)    asm("nop");                       
      76 0000      NOP
(0028)    asm("nop");
      77 0000      NOP
(0029)    asm("nop");
      78 0000      NOP
(0030)    asm("nop");
      79 0000      NOP
(0031)    asm("nop");                       
      7A 0000      NOP
(0032)    asm("nop");
      7B 0000      NOP
(0033)    asm("nop");
      7C 0000      NOP
(0034)    asm("nop");
      7D 0000      NOP
(0035)    asm("nop");                       
      7E 0000      NOP
(0036)    asm("nop");
      7F 0000      NOP
(0037)    asm("nop");
      80 0000      NOP
(0038)    asm("nop");
      81 0000      NOP
(0039)    asm("nop");
      82 0000      NOP
(0040)    asm("nop");
      83 0000      NOP
(0041)    asm("nop");                       
      84 0000      NOP
      85 9508      RET
(0042) } 
(0043) 
(0044) void delay_10us(void)                 //10us延时函数,,可重复调用不影响精度
(0045) {
(0046)    delay_3us();
_delay_10us:
      86 DFE9      RCALL	_delay_3us
(0047)    delay_3us(); 
      87 DFE8      RCALL	_delay_3us
(0048)    delay_3us();  
      88 CFE7      RJMP	_delay_3us
(0049) }
(0050)   
(0051) void delay_50us(void)                 //48us延时函数,,可重复调用不影响精度
(0052) { 
(0053)    delay_10us();
_delay_50us:
      89 DFFC      RCALL	_delay_10us
(0054)    delay_10us(); 
      8A DFFB      RCALL	_delay_10us
(0055)    delay_10us();
      8B DFFA      RCALL	_delay_10us
(0056)    delay_10us();
      8C CFF9      RJMP	_delay_10us
(0057) }
(0058) void delay_100us(void)     //exactly 98us延时函数,,可重复调用不影响精度
(0059) {
(0060)  delay_50us();
_delay_100us:
      8D DFFB      RCALL	_delay_50us
(0061)  delay_50us();
      8E CFFA      RJMP	_delay_50us
_delay_n100us:
  n100us               --> R20
      8F 934A      ST	R20,-Y
      90 2F40      MOV	R20,R16
(0062) }
(0063) void delay_n100us(unsigned char n100us)
(0064) {
      91 C001      RJMP	0x0093
(0065)  while(n100us--)                          
(0066)  delay_100us();
      92 DFFA      RCALL	_delay_100us
      93 2E24      MOV	R2,R20
      94 2433      CLR	R3
      95 5041      SUBI	R20,1
      96 2022      TST	R2
      97 F7D1      BNE	0x0092
      98 9149      LD	R20,Y+
      99 9508      RET
(0067) }
(0068) /*delay_n100us(2)        250us
(0069) delay_n100us(3)          360us
(0070) delay_n100us(4)          470us
(0071) delay_n100us(5)          580us
(0072) delay_n100us(6)          690us
(0073) delay_n100us(7)       800us
(0074) delay_n100us(8)          900us              主要是由于函数声明及while,,,大概6us
(0075) 
(0076) */
(0077) void delay_1ms()
(0078) {
(0079)  delay_100us();
_delay_1ms:
      9A DFF2      RCALL	_delay_100us
(0080)  delay_100us();
      9B DFF1      RCALL	_delay_100us
(0081)  delay_100us();
      9C DFF0      RCALL	_delay_100us
(0082)  delay_100us();
      9D DFEF      RCALL	_delay_100us
(0083)  delay_100us();
      9E DFEE      RCALL	_delay_100us
(0084)  delay_100us();
      9F DFED      RCALL	_delay_100us
(0085)  delay_100us();
      A0 DFEC      RCALL	_delay_100us
(0086)  delay_100us();
      A1 DFEB      RCALL	_delay_100us
(0087)  delay_100us();
      A2 DFEA      RCALL	_delay_100us
(0088)  delay_100us();
      A3 CFE9      RJMP	_delay_100us
_delay_nms:
  nms                  --> R20
      A4 934A      ST	R20,-Y
      A5 935A      ST	R21,-Y
      A6 01A8      MOVW	R20,R16
(0089) }
(0090) /********************************************************************
(0091) 函 数 名：Delay_ms
(0092) 建立日期：2010年1月28日
(0093) 修改日期：
(0094) 函数作用：毫秒级的精确延时程序
(0095) 说    明：
(0096) ********************************************************************/
(0097) void delay_nms(unsigned int nms)
(0098) {
      A7 C001      RJMP	0x00A9
(0099)  while(nms--) 
(0100)  delay_1ms();
      A8 DFF1      RCALL	_delay_1ms
      A9 011A      MOVW	R2,R20
      AA 5041      SUBI	R20,1
      AB 4050      SBCI	R21,0
      AC 2022      TST	R2
      AD F7D1      BNE	0x00A8
      AE 2033      TST	R3
      AF F7C1      BNE	0x00A8
      B0 9159      LD	R21,Y+
      B1 9149      LD	R20,Y+
      B2 9508      RET
_delay_ns:
  ns                   --> R20
      B3 934A      ST	R20,-Y
      B4 2F40      MOV	R20,R16
(0101) }
(0102) void delay_ns(unsigned char ns)
(0103) {
      B5 C003      RJMP	0x00B9
(0104)  while(ns--) 
(0105)  delay_nms(1000);
      B6 EE08      LDI	R16,0xE8
      B7 E013      LDI	R17,3
      B8 DFEB      RCALL	_delay_nms
      B9 2E24      MOV	R2,R20
      BA 2433      CLR	R3
      BB 5041      SUBI	R20,1
      BC 2022      TST	R2
      BD F7C1      BNE	0x00B6
      BE 9149      LD	R20,Y+
      BF 9508      RET
FILE: E:\DMAVR-~3\SOUND\SOUND.C
(0001) //DMAVR-128的蜂鸣器发声示例程序
(0002) //编译环境 ICCAVR 7.16A
(0003) //系统时钟7.3728MHZ，设置熔丝位为外部高频石英晶体振荡，启动时间4.1ms
(0004) //作者：阿迪 www.avrgcc.com
(0005) //日期：2010.01.14
(0006) //***********************************************************************
(0007) //			包含文件
(0008) //***********************************************************************
(0009) 
(0010) #include <string.h>
(0011) #include <stdio.h>
(0012) #include <delay.h>
(0013) #include <iom128v.h>
(0014) //***********************************************************************
(0015) //			定义变量区
(0016) //			CH451各个功能命令值，根据需要写入
(0017) //***********************************************************************
(0018) 
(0019) #define uchar           unsigned char
(0020) #define uint            unsigned int
(0021) 
(0022) #define beep0             PORTD &= ~(1 << PD6)    		//蜂鸣器所在IO口PD6
(0023) #define beep1             PORTD |= (1 << PD6)
(0024) #define led8              PORTB                        //LED控制口PB
(0025) 
(0026) //*************************************************************************
(0027) //			初始化子程序
(0028) //*************************************************************************
(0029) void system_init()
(0030) {
(0031)   PORTD=0xff;                                       //PB设置为输出
_system_init:
      C0 EF8F      LDI	R24,0xFF
      C1 BB82      OUT	0x12,R24
(0032)   DDRD=0xff;
      C2 BB81      OUT	0x11,R24
(0033)   
(0034)   PORTB=0xff;                                       //PB设置为输出
      C3 BB88      OUT	0x18,R24
(0035)   DDRB=0xff;                                        //上拉电阻无效
      C4 BB87      OUT	0x17,R24
      C5 9508      RET
_left_shift:
  count                --> R12
  dat                  --> R10
      C6 92AA      ST	R10,-Y
      C7 92CA      ST	R12,-Y
      C8 2EC2      MOV	R12,R18
      C9 2EA0      MOV	R10,R16
(0036) }
(0037) 
(0038) uint left_shift(uchar dat,uchar count)              //左移
(0039) {
(0040)   dat=dat<<count;
      CA 2D0A      MOV	R16,R10
      CB 2D1C      MOV	R17,R12
      CC 940E 00F4 CALL	lsl8
      CE 2EA0      MOV	R10,R16
      CF 90C9      LD	R12,Y+
      D0 90A9      LD	R10,Y+
      D1 9508      RET
(0041) }
(0042) //********************************************************************
(0043) //			主函数
(0044) //********************************************************************
(0045) 
(0046) 
(0047) void main(void)
(0048) {
(0049)   uint i; 
(0050)   uint  a,b,c,k,j;  
(0051)   system_init();  
_main:
  j                    --> Y,+1
  b                    --> Y,+1
  c                    --> R12
  i                    --> R22
  k                    --> R20
  a                    --> R10
      D2 DFED      RCALL	_system_init
(0052)   k=0x01;             								 //先给k初值00000001等待移位
      D3 E041      LDI	R20,1
      D4 E050      LDI	R21,0
      D5 C01C      RJMP	0x00F2
(0053)   while(1)
(0054)   {
(0055)        for(i=8;i>0;i--)
      D6 E068      LDI	R22,0x8
      D7 E070      LDI	R23,0
      D8 C014      RJMP	0x00ED
(0056)        {     
(0057)         delay_nms(200);
      D9 EC08      LDI	R16,0xC8
      DA E010      LDI	R17,0
      DB DFC8      RCALL	_delay_nms
(0058)         beep1;             							 //打开蜂鸣器
      DC 9A96      SBI	0x12,6
(0059)         delay_nms(300);    							 //让它响
      DD E20C      LDI	R16,0x2C
      DE E011      LDI	R17,1
      DF DFC4      RCALL	_delay_nms
(0060)         beep0;            							 //关闭蜂鸣器 
      E0 9896      CBI	0x12,6
(0061)         a=k;              							 //把移完的值再送给j  
      E1 015A      MOVW	R10,R20
(0062) 		c=~a;     
      E2 0165      MOVW	R12,R10
      E3 94C0      COM	R12
      E4 94D0      COM	R13
(0063)         led8=c;          							 //同时把值送到PB口点亮发二极管        
      E5 BAC8      OUT	0x18,R12
(0064)         a=left_shift(k,1);     						 //把k循环左移一位        
      E6 E021      LDI	R18,1
      E7 2F04      MOV	R16,R20
      E8 DFDD      RCALL	_left_shift
      E9 0158      MOVW	R10,R16
(0065)         k=a;             							 //把移完的值再送给k
      EA 01A5      MOVW	R20,R10
      EB 5061      SUBI	R22,1
      EC 4070      SBCI	R23,0
      ED 3060      CPI	R22,0
      EE 0767      CPC	R22,R23
      EF F749      BNE	0x00D9
(0066)       }
(0067)       k=0x01;
FILE: <library>
      F0 E041      LDI	R20,1
      F1 E050      LDI	R21,0
      F2 CFE3      RJMP	0x00D6
      F3 9508      RET
lsl8:
      F4 2311      TST	R17
      F5 F019      BEQ	0x00F9
      F6 0F00      LSL	R16
      F7 951A      DEC	R17
      F8 CFFB      RJMP	lsl8
      F9 9508      RET
