                        .module SPI.C
                        .area text(rom, con, rel)
 0000                   .dbfile E:\DMAVR-~3\SPI\SPI.C
 0000                   .dbfile F:\PROGRA~1\iccavr\include\delay.h
 0000                   .dbfunc e delay_1us _delay_1us fV
                        .even
 0000           _delay_1us::
 0000                   .dbline -1
 0000                   .dbline 9
 0000           ; //********************************************************************
 0000           ; /*函 数 名：delay_us
 0000           ; 建立日期：2010年1月28日
 0000           ; 编译环境：ICCAVR7.16A
 0000           ; 函数作用：微秒级的延时程序
 0000           ; 说    明：7.3728M晶振下
 0000           ; ********************************************************************/
 0000           ; void delay_1us(void)                 //1us延时函数，不能连续调用， 
 0000           ; { 
 0000                   .dbline 10
 0000           ;    asm("nop");                       //1时钟周期
 0000 0000              nop
 0002                   .dbline 11
 0002           ;    asm("nop");
 0002 0000              nop
 0004                   .dbline 12
 0004           ;    asm("nop");
 0004 0000              nop
 0006                   .dbline 13
 0006           ;    asm("nop");
 0006 0000              nop
 0008                   .dbline 14
 0008           ;    asm("nop");                       //1T
 0008 0000              nop
 000A                   .dbline 15
 000A           ;    asm("nop");
 000A 0000              nop
 000C                   .dbline -2
 000C           L1:
 000C                   .dbline 0 ; func end
 000C 0895              ret
 000E                   .dbend
 000E                   .dbfunc e delay_3us _delay_3us fV
                        .even
 000E           _delay_3us::
 000E                   .dbline -1
 000E                   .dbline 19
 000E           ; 
 000E           ; }
 000E           ; void delay_3us(void)                 //3us延时函数,,可重复调用不影响精度
 000E           ; { 
 000E                   .dbline 21
 000E           ;    
 000E           ;    asm("nop");
 000E 0000              nop
 0010                   .dbline 22
 0010           ;    asm("nop");
 0010 0000              nop
 0012                   .dbline 23
 0012           ;    asm("nop");                       
 0012 0000              nop
 0014                   .dbline 24
 0014           ;    asm("nop");
 0014 0000              nop
 0016                   .dbline 25
 0016           ;    asm("nop");
 0016 0000              nop
 0018                   .dbline 26
 0018           ;    asm("nop");
 0018 0000              nop
 001A                   .dbline 27
 001A           ;    asm("nop");                       
 001A 0000              nop
 001C                   .dbline 28
 001C           ;    asm("nop");
 001C 0000              nop
 001E                   .dbline 29
 001E           ;    asm("nop");
 001E 0000              nop
 0020                   .dbline 30
 0020           ;    asm("nop");
 0020 0000              nop
 0022                   .dbline 31
 0022           ;    asm("nop");                       
 0022 0000              nop
 0024                   .dbline 32
 0024           ;    asm("nop");
 0024 0000              nop
 0026                   .dbline 33
 0026           ;    asm("nop");
 0026 0000              nop
 0028                   .dbline 34
 0028           ;    asm("nop");
 0028 0000              nop
 002A                   .dbline 35
 002A           ;    asm("nop");                       
 002A 0000              nop
 002C                   .dbline 36
 002C           ;    asm("nop");
 002C 0000              nop
 002E                   .dbline 37
 002E           ;    asm("nop");
 002E 0000              nop
 0030                   .dbline 38
 0030           ;    asm("nop");
 0030 0000              nop
 0032                   .dbline 39
 0032           ;    asm("nop");
 0032 0000              nop
 0034                   .dbline 40
 0034           ;    asm("nop");
 0034 0000              nop
 0036                   .dbline 41
 0036           ;    asm("nop");                       
 0036 0000              nop
 0038                   .dbline -2
 0038           L2:
 0038                   .dbline 0 ; func end
 0038 0895              ret
 003A                   .dbend
 003A                   .dbfunc e delay_10us _delay_10us fV
                        .even
 003A           _delay_10us::
 003A                   .dbline -1
 003A                   .dbline 45
 003A           ; } 
 003A           ; 
 003A           ; void delay_10us(void)                 //10us延时函数,,可重复调用不影响精度
 003A           ; {
 003A                   .dbline 46
 003A           ;    delay_3us();
 003A E9DF              xcall _delay_3us
 003C                   .dbline 47
 003C           ;    delay_3us(); 
 003C E8DF              xcall _delay_3us
 003E                   .dbline 48
 003E           ;    delay_3us();  
 003E                   .dbline -2
 003E           L3:
 003E                   .dbline 0 ; func end
 003E E7CF              xjmp _delay_3us
 0040                   .dbend
 0040                   .dbfunc e delay_50us _delay_50us fV
                        .even
 0040           _delay_50us::
 0040                   .dbline -1
 0040                   .dbline 52
 0040           ; }
 0040           ;   
 0040           ; void delay_50us(void)                 //48us延时函数,,可重复调用不影响精度
 0040           ; { 
 0040                   .dbline 53
 0040           ;    delay_10us();
 0040 FCDF              xcall _delay_10us
 0042                   .dbline 54
 0042           ;    delay_10us(); 
 0042 FBDF              xcall _delay_10us
 0044                   .dbline 55
 0044           ;    delay_10us();
 0044 FADF              xcall _delay_10us
 0046                   .dbline 56
 0046           ;    delay_10us();
 0046                   .dbline -2
 0046           L4:
 0046                   .dbline 0 ; func end
 0046 F9CF              xjmp _delay_10us
 0048                   .dbend
 0048                   .dbfunc e delay_100us _delay_100us fV
                        .even
 0048           _delay_100us::
 0048                   .dbline -1
 0048                   .dbline 59
 0048           ; }
 0048           ; void delay_100us(void)     //exactly 98us延时函数,,可重复调用不影响精度
 0048           ; {
 0048                   .dbline 60
 0048           ;  delay_50us();
 0048 FBDF              xcall _delay_50us
 004A                   .dbline 61
 004A           ;  delay_50us();
 004A                   .dbline -2
 004A           L5:
 004A                   .dbline 0 ; func end
 004A FACF              xjmp _delay_50us
 004C                   .dbend
 004C                   .dbfunc e delay_n100us _delay_n100us fV
 004C           ;         n100us -> R20
                        .even
 004C           _delay_n100us::
 004C 4A93              st -y,R20
 004E 402F              mov R20,R16
 0050                   .dbline -1
 0050                   .dbline 64
 0050           ; }
 0050           ; void delay_n100us(unsigned char n100us)
 0050           ; {
 0050 01C0              xjmp L8
 0052           L7:
 0052                   .dbline 66
 0052           ;  while(n100us--)                          
 0052           ;  delay_100us();
 0052 FADF              xcall _delay_100us
 0054           L8:
 0054                   .dbline 65
 0054 242E              mov R2,R20
 0056 3324              clr R3
 0058 4150              subi R20,1
 005A 2220              tst R2
 005C D1F7              brne L7
 005E           X0:
 005E                   .dbline -2
 005E           L6:
 005E                   .dbline 0 ; func end
 005E 4991              ld R20,y+
 0060 0895              ret
 0062                   .dbsym r n100us 20 c
 0062                   .dbend
 0062                   .dbfunc e delay_1ms _delay_1ms fV
                        .even
 0062           _delay_1ms::
 0062                   .dbline -1
 0062                   .dbline 78
 0062           ; }
 0062           ; /*delay_n100us(2)        250us
 0062           ; delay_n100us(3)          360us
 0062           ; delay_n100us(4)          470us
 0062           ; delay_n100us(5)          580us
 0062           ; delay_n100us(6)          690us
 0062           ; delay_n100us(7)       800us
 0062           ; delay_n100us(8)          900us              主要是由于函数声明及while,,,大概6us
 0062           ; 
 0062           ; */
 0062           ; void delay_1ms()
 0062           ; {
 0062                   .dbline 79
 0062           ;  delay_100us();
 0062 F2DF              xcall _delay_100us
 0064                   .dbline 80
 0064           ;  delay_100us();
 0064 F1DF              xcall _delay_100us
 0066                   .dbline 81
 0066           ;  delay_100us();
 0066 F0DF              xcall _delay_100us
 0068                   .dbline 82
 0068           ;  delay_100us();
 0068 EFDF              xcall _delay_100us
 006A                   .dbline 83
 006A           ;  delay_100us();
 006A EEDF              xcall _delay_100us
 006C                   .dbline 84
 006C           ;  delay_100us();
 006C EDDF              xcall _delay_100us
 006E                   .dbline 85
 006E           ;  delay_100us();
 006E ECDF              xcall _delay_100us
 0070                   .dbline 86
 0070           ;  delay_100us();
 0070 EBDF              xcall _delay_100us
 0072                   .dbline 87
 0072           ;  delay_100us();
 0072 EADF              xcall _delay_100us
 0074                   .dbline 88
 0074           ;  delay_100us();
 0074                   .dbline -2
 0074           L10:
 0074                   .dbline 0 ; func end
 0074 E9CF              xjmp _delay_100us
 0076                   .dbend
 0076                   .dbfunc e delay_nms _delay_nms fV
 0076           ;            nms -> R20,R21
                        .even
 0076           _delay_nms::
 0076 4A93              st -y,R20
 0078 5A93              st -y,R21
 007A A801              movw R20,R16
 007C                   .dbline -1
 007C                   .dbline 98
 007C           ; }
 007C           ; /********************************************************************
 007C           ; 函 数 名：Delay_ms
 007C           ; 建立日期：2010年1月28日
 007C           ; 修改日期：
 007C           ; 函数作用：毫秒级的精确延时程序
 007C           ; 说    明：
 007C           ; ********************************************************************/
 007C           ; void delay_nms(unsigned int nms)
 007C           ; {
 007C 01C0              xjmp L13
 007E           L12:
 007E                   .dbline 100
 007E           ;  while(nms--) 
 007E           ;  delay_1ms();
 007E F1DF              xcall _delay_1ms
 0080           L13:
 0080                   .dbline 99
 0080 1A01              movw R2,R20
 0082 4150              subi R20,1
 0084 5040              sbci R21,0
 0086 2220              tst R2
 0088 D1F7              brne L12
 008A 3320              tst R3
 008C C1F7              brne L12
 008E           X1:
 008E                   .dbline -2
 008E           L11:
 008E                   .dbline 0 ; func end
 008E 5991              ld R21,y+
 0090 4991              ld R20,y+
 0092 0895              ret
 0094                   .dbsym r nms 20 i
 0094                   .dbend
 0094                   .dbfunc e delay_ns _delay_ns fV
 0094           ;             ns -> R20
                        .even
 0094           _delay_ns::
 0094 4A93              st -y,R20
 0096 402F              mov R20,R16
 0098                   .dbline -1
 0098                   .dbline 103
 0098           ; }
 0098           ; void delay_ns(unsigned char ns)
 0098           ; {
 0098 03C0              xjmp L17
 009A           L16:
 009A                   .dbline 105
 009A           ;  while(ns--) 
 009A           ;  delay_nms(1000);
 009A 08EE              ldi R16,1000
 009C 13E0              ldi R17,3
 009E EBDF              xcall _delay_nms
 00A0           L17:
 00A0                   .dbline 104
 00A0 242E              mov R2,R20
 00A2 3324              clr R3
 00A4 4150              subi R20,1
 00A6 2220              tst R2
 00A8 C1F7              brne L16
 00AA           X2:
 00AA                   .dbline -2
 00AA           L15:
 00AA                   .dbline 0 ; func end
 00AA 4991              ld R20,y+
 00AC 0895              ret
 00AE                   .dbsym r ns 20 c
 00AE                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile F:\PROGRA~1\iccavr\include\delay.h
 0000           _count::
 0000                   .blkb 1
                        .area idata
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0001                   .dbfile F:\PROGRA~1\iccavr\include\delay.h
 0001                   .dbfile E:\DMAVR-~3\SPI\SPI.C
 0001                   .dbsym e count _count c
                        .area text(rom, con, rel)
 00AE                   .dbfile E:\DMAVR-~3\SPI\SPI.C
 00AE                   .dbfunc e system_init _system_init fV
                        .even
 00AE           _system_init::
 00AE                   .dbline -1
 00AE                   .dbline 42
 00AE           ; //DMAVR-128的SPI应用示例程序，采用SPI接口的DAC芯片TLC5615，连续进行电压转换
 00AE           ; //DAC为TI公司的10位串行电压型输出的DAC芯片TLC5615,SPI接口连接方式
 00AE           ; //驱通过SPI接口，动DAC芯片，使其完成000-FFC(TLC5615后两位的值一直为0)输出的转换
 00AE           ; //LED指示灯DS3对应从暗到亮，表示电压逐渐增大
 00AE           ; //编译环境 ICCAVR 7.16A
 00AE           ; //系统时钟7.3728MHZ，设置熔丝位为外部高频石英晶体振荡，启动时间4.1ms
 00AE           ; //作者：阿迪 www.avrgcc.com
 00AE           ; //日期：2010.01.14
 00AE           ; 
 00AE           ; //***********************************************************************
 00AE           ; //                    包含文件
 00AE           ; //***********************************************************************
 00AE           ; 
 00AE           ; #include <string.h>
 00AE           ; #include <stdio.h>
 00AE           ; #include <delay.h>
 00AE           ; #include <iom128v.h>
 00AE           ; 
 00AE           ; //***********************************************************************
 00AE           ; //    定义变量区
 00AE           ; //***********************************************************************
 00AE           ; #define uchar unsigned char
 00AE           ; #define uint  unsigned int
 00AE           ; 
 00AE           ; #define cs0   PORTB &= ~(1 << PB0)          //片选信号置低
 00AE           ; #define cs1   PORTB |= (1 << PB0)           //片选信号置高
 00AE           ; 
 00AE           ; #define Data_IO               PORTA                //数码管数据口
 00AE           ; #define Data_DDR        DDRA                 //数码管数据口方向寄存器
 00AE           ; #define D_LE0         PORTD &= ~(1 << PD4) //数码管段控制位为0，锁存端口数据
 00AE           ; #define D_LE1           PORTD |= (1 << PD4)  //数码管段控制位为1，锁存器输出与端口一致
 00AE           ; #define W_LE0         PORTD &= ~(1 << PD5) //数码管位控制位为0
 00AE           ; #define W_LE1           PORTD |= (1 << PD5)  //数码管位控制位为1
 00AE           ; 
 00AE           ; uint da_data;
 00AE           ; uchar count=0;
 00AE           ; uint da_data2;
 00AE           ; //*************************************************************************
 00AE           ; //                    初始化子程序
 00AE           ; //*************************************************************************
 00AE           ; void system_init()
 00AE           ; {
 00AE                   .dbline 43
 00AE           ;        D_LE1;                             //关掉数码管，以免显示乱码                   
 00AE 949A              sbi 0x12,4
 00B0                   .dbline 44
 00B0           ;      W_LE1;                     
 00B0 959A              sbi 0x12,5
 00B2                   .dbline 45
 00B2           ;      Data_IO=0xFF;                      //关数码管            
 00B2 8FEF              ldi R24,255
 00B4 8BBB              out 0x1b,R24
 00B6                   .dbline 46
 00B6           ;      W_LE0; 
 00B6 9598              cbi 0x12,5
 00B8                   .dbline 48
 00B8           ; 
 00B8           ;       PORTB = 0x00;                    //电平设置
 00B8 2224              clr R2
 00BA 28BA              out 0x18,R2
 00BC                   .dbline 49
 00BC           ;       DDRB = 0xFF;                     //方向输出
 00BC 87BB              out 0x17,R24
 00BE                   .dbline -2
 00BE           L19:
 00BE                   .dbline 0 ; func end
 00BE 0895              ret
 00C0                   .dbend
 00C0                   .dbfunc e SPI_init _SPI_init fV
                        .even
 00C0           _SPI_init::
 00C0                   .dbline -1
 00C0                   .dbline 53
 00C0           ; 
 00C0           ; }
 00C0           ; void SPI_init()
 00C0           ; {
 00C0                   .dbline 54
 00C0           ;   SPCR=(1<<SPE)|(1<<MSTR);              //主机方式，SPI模式为0，SCK频率为Fosc/4
 00C0 80E5              ldi R24,80
 00C2 8DB9              out 0xd,R24
 00C4                   .dbline -2
 00C4           L20:
 00C4                   .dbline 0 ; func end
 00C4 0895              ret
 00C6                   .dbend
 00C6                   .dbfunc e main _main fV
                        .even
 00C6           _main::
 00C6                   .dbline -1
 00C6                   .dbline 64
 00C6           ;   
 00C6           ; }
 00C6           ; 
 00C6           ; 
 00C6           ; //*************************************************************************
 00C6           ; //                    主程序
 00C6           ; //*************************************************************************
 00C6           ; 
 00C6           ; void main(void)
 00C6           ; { 
 00C6                   .dbline 65
 00C6           ;   system_init();                               //系统IO口初始化
 00C6 F3DF              xcall _system_init
 00C8                   .dbline 66
 00C8           ;   SPI_init();                                  //SPI初始化
 00C8 FBDF              xcall _SPI_init
 00CA 3CC0              xjmp L23
 00CC           L22:
 00CC                   .dbline 68
 00CC           ;   while(1)
 00CC           ;   {
 00CC                   .dbline 69
 00CC           ;     for(da_data=0x0000;da_data<0x0ffc;da_data++)
 00CC 2224              clr R2
 00CE 3324              clr R3
 00D0 30920300          sts _da_data+1,R3
 00D4 20920200          sts _da_data,R2
 00D8 2DC0              xjmp L28
 00DA           L25:
 00DA                   .dbline 70
 00DA           ;     {
 00DA                   .dbline 71
 00DA           ;       cs0;                                     //使能DAC
 00DA C098              cbi 0x18,0
 00DC                   .dbline 72
 00DC           ;       da_data2=(da_data&0xff00);               //提取数据的高8位
 00DC 80910200          lds R24,_da_data
 00E0 90910300          lds R25,_da_data+1
 00E4 8070              andi R24,0
 00E6 90930100          sts _da_data2+1,R25
 00EA 80930000          sts _da_data2,R24
 00EE                   .dbline 73
 00EE           ;       da_data2>>=8;                            //高8位移到低8位，便于赋值
 00EE 1C01              movw R2,R24
 00F0 232C              mov R2,R3
 00F2 3324              clr R3
 00F4 30920100          sts _da_data2+1,R3
 00F8 20920000          sts _da_data2,R2
 00FC                   .dbline 74
 00FC           ;       SPDR=da_data2;                           //写数据的高8位到SPI数据寄存器
 00FC 2FB8              out 0xf,R2
 00FE                   .dbline 75
 00FE           ;       SPDR=da_data&&0x00ff;                    //写数据的低8位到SPI数据寄存器
 00FE 20900200          lds R2,_da_data
 0102 30900300          lds R3,_da_data+1
 0106 2220              tst R2
 0108 11F4              brne X3
 010A 3320              tst R3
 010C 19F0              breq L29
 010E           X3:
 010E 41E0              ldi R20,1
 0110 50E0              ldi R21,0
 0112 02C0              xjmp L30
 0114           L29:
 0114 4427              clr R20
 0116 5527              clr R21
 0118           L30:
 0118 4FB9              out 0xf,R20
 011A                   .dbline 76
 011A           ;       delay_nms(1);
 011A 01E0              ldi R16,1
 011C 10E0              ldi R17,0
 011E ABDF              xcall _delay_nms
 0120                   .dbline 77
 0120           ;       cs1;                                    //关闭使能
 0120 C09A              sbi 0x18,0
 0122                   .dbline 78
 0122           ;     }
 0122           L26:
 0122                   .dbline 69
 0122 80910200          lds R24,_da_data
 0126 90910300          lds R25,_da_data+1
 012A 0196              adiw R24,1
 012C 90930300          sts _da_data+1,R25
 0130 80930200          sts _da_data,R24
 0134           L28:
 0134                   .dbline 69
 0134 80910200          lds R24,_da_data
 0138 90910300          lds R25,_da_data+1
 013C 8C3F              cpi R24,252
 013E EFE0              ldi R30,15
 0140 9E07              cpc R25,R30
 0142 58F2              brlo L25
 0144           X4:
 0144                   .dbline 79
 0144           ;   }
 0144           L23:
 0144                   .dbline 67
 0144 C3CF              xjmp L22
 0146           X5:
 0146                   .dbline -2
 0146           L21:
 0146                   .dbline 0 ; func end
 0146 0895              ret
 0148                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile E:\DMAVR-~3\SPI\SPI.C
 0000           _da_data2::
 0000                   .blkb 2
 0002                   .dbsym e da_data2 _da_data2 i
 0002           _da_data::
 0002                   .blkb 2
 0004                   .dbsym e da_data _da_data i
 0004           ; }
