                        .module PWM.C
                        .area text(rom, con, rel)
 0000                   .dbfile E:\DMAVR-~3\PWM\PWM.C
 0000                   .dbfile F:\PROGRA~1\iccavr\include\delay.h
 0000                   .dbfunc e delay_1us _delay_1us fV
                        .even
 0000           _delay_1us::
 0000                   .dbline -1
 0000                   .dbline 9
 0000           ; //********************************************************************
 0000           ; /*函 数 名：delay_us
 0000           ; 建立日期：2010年1月28日
 0000           ; 编译环境：ICCAVR7.16A
 0000           ; 函数作用：微秒级的延时程序
 0000           ; 说    明：7.3728M晶振下
 0000           ; ********************************************************************/
 0000           ; void delay_1us(void)                 //1us延时函数，不能连续调用， 
 0000           ; { 
 0000                   .dbline 10
 0000           ;    asm("nop");                       //1时钟周期
 0000 0000              nop
 0002                   .dbline 11
 0002           ;    asm("nop");
 0002 0000              nop
 0004                   .dbline 12
 0004           ;    asm("nop");
 0004 0000              nop
 0006                   .dbline 13
 0006           ;    asm("nop");
 0006 0000              nop
 0008                   .dbline 14
 0008           ;    asm("nop");                       //1T
 0008 0000              nop
 000A                   .dbline 15
 000A           ;    asm("nop");
 000A 0000              nop
 000C                   .dbline -2
 000C           L1:
 000C                   .dbline 0 ; func end
 000C 0895              ret
 000E                   .dbend
 000E                   .dbfunc e delay_3us _delay_3us fV
                        .even
 000E           _delay_3us::
 000E                   .dbline -1
 000E                   .dbline 19
 000E           ; 
 000E           ; }
 000E           ; void delay_3us(void)                 //3us延时函数,,可重复调用不影响精度
 000E           ; { 
 000E                   .dbline 21
 000E           ;    
 000E           ;    asm("nop");
 000E 0000              nop
 0010                   .dbline 22
 0010           ;    asm("nop");
 0010 0000              nop
 0012                   .dbline 23
 0012           ;    asm("nop");                       
 0012 0000              nop
 0014                   .dbline 24
 0014           ;    asm("nop");
 0014 0000              nop
 0016                   .dbline 25
 0016           ;    asm("nop");
 0016 0000              nop
 0018                   .dbline 26
 0018           ;    asm("nop");
 0018 0000              nop
 001A                   .dbline 27
 001A           ;    asm("nop");                       
 001A 0000              nop
 001C                   .dbline 28
 001C           ;    asm("nop");
 001C 0000              nop
 001E                   .dbline 29
 001E           ;    asm("nop");
 001E 0000              nop
 0020                   .dbline 30
 0020           ;    asm("nop");
 0020 0000              nop
 0022                   .dbline 31
 0022           ;    asm("nop");                       
 0022 0000              nop
 0024                   .dbline 32
 0024           ;    asm("nop");
 0024 0000              nop
 0026                   .dbline 33
 0026           ;    asm("nop");
 0026 0000              nop
 0028                   .dbline 34
 0028           ;    asm("nop");
 0028 0000              nop
 002A                   .dbline 35
 002A           ;    asm("nop");                       
 002A 0000              nop
 002C                   .dbline 36
 002C           ;    asm("nop");
 002C 0000              nop
 002E                   .dbline 37
 002E           ;    asm("nop");
 002E 0000              nop
 0030                   .dbline 38
 0030           ;    asm("nop");
 0030 0000              nop
 0032                   .dbline 39
 0032           ;    asm("nop");
 0032 0000              nop
 0034                   .dbline 40
 0034           ;    asm("nop");
 0034 0000              nop
 0036                   .dbline 41
 0036           ;    asm("nop");                       
 0036 0000              nop
 0038                   .dbline -2
 0038           L2:
 0038                   .dbline 0 ; func end
 0038 0895              ret
 003A                   .dbend
 003A                   .dbfunc e delay_10us _delay_10us fV
                        .even
 003A           _delay_10us::
 003A                   .dbline -1
 003A                   .dbline 45
 003A           ; } 
 003A           ; 
 003A           ; void delay_10us(void)                 //10us延时函数,,可重复调用不影响精度
 003A           ; {
 003A                   .dbline 46
 003A           ;    delay_3us();
 003A E9DF              xcall _delay_3us
 003C                   .dbline 47
 003C           ;    delay_3us(); 
 003C E8DF              xcall _delay_3us
 003E                   .dbline 48
 003E           ;    delay_3us();  
 003E                   .dbline -2
 003E           L3:
 003E                   .dbline 0 ; func end
 003E E7CF              xjmp _delay_3us
 0040                   .dbend
 0040                   .dbfunc e delay_50us _delay_50us fV
                        .even
 0040           _delay_50us::
 0040                   .dbline -1
 0040                   .dbline 52
 0040           ; }
 0040           ;   
 0040           ; void delay_50us(void)                 //48us延时函数,,可重复调用不影响精度
 0040           ; { 
 0040                   .dbline 53
 0040           ;    delay_10us();
 0040 FCDF              xcall _delay_10us
 0042                   .dbline 54
 0042           ;    delay_10us(); 
 0042 FBDF              xcall _delay_10us
 0044                   .dbline 55
 0044           ;    delay_10us();
 0044 FADF              xcall _delay_10us
 0046                   .dbline 56
 0046           ;    delay_10us();
 0046                   .dbline -2
 0046           L4:
 0046                   .dbline 0 ; func end
 0046 F9CF              xjmp _delay_10us
 0048                   .dbend
 0048                   .dbfunc e delay_100us _delay_100us fV
                        .even
 0048           _delay_100us::
 0048                   .dbline -1
 0048                   .dbline 59
 0048           ; }
 0048           ; void delay_100us(void)     //exactly 98us延时函数,,可重复调用不影响精度
 0048           ; {
 0048                   .dbline 60
 0048           ;  delay_50us();
 0048 FBDF              xcall _delay_50us
 004A                   .dbline 61
 004A           ;  delay_50us();
 004A                   .dbline -2
 004A           L5:
 004A                   .dbline 0 ; func end
 004A FACF              xjmp _delay_50us
 004C                   .dbend
 004C                   .dbfunc e delay_n100us _delay_n100us fV
 004C           ;         n100us -> R20
                        .even
 004C           _delay_n100us::
 004C 4A93              st -y,R20
 004E 402F              mov R20,R16
 0050                   .dbline -1
 0050                   .dbline 64
 0050           ; }
 0050           ; void delay_n100us(unsigned char n100us)
 0050           ; {
 0050 01C0              xjmp L8
 0052           L7:
 0052                   .dbline 66
 0052           ;  while(n100us--)                          
 0052           ;  delay_100us();
 0052 FADF              xcall _delay_100us
 0054           L8:
 0054                   .dbline 65
 0054 242E              mov R2,R20
 0056 3324              clr R3
 0058 4150              subi R20,1
 005A 2220              tst R2
 005C D1F7              brne L7
 005E           X0:
 005E                   .dbline -2
 005E           L6:
 005E                   .dbline 0 ; func end
 005E 4991              ld R20,y+
 0060 0895              ret
 0062                   .dbsym r n100us 20 c
 0062                   .dbend
 0062                   .dbfunc e delay_1ms _delay_1ms fV
                        .even
 0062           _delay_1ms::
 0062                   .dbline -1
 0062                   .dbline 78
 0062           ; }
 0062           ; /*delay_n100us(2)        250us
 0062           ; delay_n100us(3)          360us
 0062           ; delay_n100us(4)          470us
 0062           ; delay_n100us(5)          580us
 0062           ; delay_n100us(6)          690us
 0062           ; delay_n100us(7)       800us
 0062           ; delay_n100us(8)          900us              主要是由于函数声明及while,,,大概6us
 0062           ; 
 0062           ; */
 0062           ; void delay_1ms()
 0062           ; {
 0062                   .dbline 79
 0062           ;  delay_100us();
 0062 F2DF              xcall _delay_100us
 0064                   .dbline 80
 0064           ;  delay_100us();
 0064 F1DF              xcall _delay_100us
 0066                   .dbline 81
 0066           ;  delay_100us();
 0066 F0DF              xcall _delay_100us
 0068                   .dbline 82
 0068           ;  delay_100us();
 0068 EFDF              xcall _delay_100us
 006A                   .dbline 83
 006A           ;  delay_100us();
 006A EEDF              xcall _delay_100us
 006C                   .dbline 84
 006C           ;  delay_100us();
 006C EDDF              xcall _delay_100us
 006E                   .dbline 85
 006E           ;  delay_100us();
 006E ECDF              xcall _delay_100us
 0070                   .dbline 86
 0070           ;  delay_100us();
 0070 EBDF              xcall _delay_100us
 0072                   .dbline 87
 0072           ;  delay_100us();
 0072 EADF              xcall _delay_100us
 0074                   .dbline 88
 0074           ;  delay_100us();
 0074                   .dbline -2
 0074           L10:
 0074                   .dbline 0 ; func end
 0074 E9CF              xjmp _delay_100us
 0076                   .dbend
 0076                   .dbfunc e delay_nms _delay_nms fV
 0076           ;            nms -> R20,R21
                        .even
 0076           _delay_nms::
 0076 4A93              st -y,R20
 0078 5A93              st -y,R21
 007A A801              movw R20,R16
 007C                   .dbline -1
 007C                   .dbline 98
 007C           ; }
 007C           ; /********************************************************************
 007C           ; 函 数 名：Delay_ms
 007C           ; 建立日期：2010年1月28日
 007C           ; 修改日期：
 007C           ; 函数作用：毫秒级的精确延时程序
 007C           ; 说    明：
 007C           ; ********************************************************************/
 007C           ; void delay_nms(unsigned int nms)
 007C           ; {
 007C 01C0              xjmp L13
 007E           L12:
 007E                   .dbline 100
 007E           ;  while(nms--) 
 007E           ;  delay_1ms();
 007E F1DF              xcall _delay_1ms
 0080           L13:
 0080                   .dbline 99
 0080 1A01              movw R2,R20
 0082 4150              subi R20,1
 0084 5040              sbci R21,0
 0086 2220              tst R2
 0088 D1F7              brne L12
 008A 3320              tst R3
 008C C1F7              brne L12
 008E           X1:
 008E                   .dbline -2
 008E           L11:
 008E                   .dbline 0 ; func end
 008E 5991              ld R21,y+
 0090 4991              ld R20,y+
 0092 0895              ret
 0094                   .dbsym r nms 20 i
 0094                   .dbend
 0094                   .dbfunc e delay_ns _delay_ns fV
 0094           ;             ns -> R20
                        .even
 0094           _delay_ns::
 0094 4A93              st -y,R20
 0096 402F              mov R20,R16
 0098                   .dbline -1
 0098                   .dbline 103
 0098           ; }
 0098           ; void delay_ns(unsigned char ns)
 0098           ; {
 0098 03C0              xjmp L17
 009A           L16:
 009A                   .dbline 105
 009A           ;  while(ns--) 
 009A           ;  delay_nms(1000);
 009A 08EE              ldi R16,1000
 009C 13E0              ldi R17,3
 009E EBDF              xcall _delay_nms
 00A0           L17:
 00A0                   .dbline 104
 00A0 242E              mov R2,R20
 00A2 3324              clr R3
 00A4 4150              subi R20,1
 00A6 2220              tst R2
 00A8 C1F7              brne L16
 00AA           X2:
 00AA                   .dbline -2
 00AA           L15:
 00AA                   .dbline 0 ; func end
 00AA 4991              ld R20,y+
 00AC 0895              ret
 00AE                   .dbsym r ns 20 c
 00AE                   .dbend
 00AE                   .dbfile E:\DMAVR-~3\PWM\PWM.C
 00AE                   .dbfunc e system_init _system_init fV
                        .even
 00AE           _system_init::
 00AE                   .dbline -1
 00AE                   .dbline 37
 00AE           ; //DMAVR-128的定时器实现快速PWM输出示例程序，定时器0溢出中断的方式
 00AE           ; //PWM输出通过控制LED发光来直观的看到效果，改变OCR0的值，可以控制亮度
 00AE           ; //编译环境 ICCAVR 7.16A
 00AE           ; //系统时钟7.3728MHZ，设置熔丝位为外部高频石英晶体振荡，启动时间4.1ms
 00AE           ; //作者：阿迪 www.avrgcc.com
 00AE           ; //日期：2010.01.14
 00AE           ; 
 00AE           ; //***********************************************************************
 00AE           ; //                    包含文件
 00AE           ; //***********************************************************************
 00AE           ; 
 00AE           ; #include <string.h>
 00AE           ; #include <stdio.h>
 00AE           ; #include <delay.h>
 00AE           ; #include <iom128v.h>
 00AE           ; 
 00AE           ; //***********************************************************************
 00AE           ; //                    定义变量区
 00AE           ; //***********************************************************************
 00AE           ; #define f_count         25                              //0CR0寄存器初始值
 00AE           ; #define timer_clk       0x07
 00AE           ; 
 00AE           ; #define uchar           unsigned char
 00AE           ; #define uint            unsigned int
 00AE           ; 
 00AE           ; #define Data_IO               PORTA                //数码管数据口
 00AE           ; #define Data_DDR        DDRA                 //数码管数据口方向寄存器
 00AE           ; #define D_LE0         PORTD &= ~(1 << PD4) //数码管段控制位为0，锁存端口数据
 00AE           ; #define D_LE1           PORTD |= (1 << PD4)  //数码管段控制位为1，锁存器输出与端口一致
 00AE           ; #define W_LE0         PORTD &= ~(1 << PD5) //数码管位控制位为0
 00AE           ; #define W_LE1           PORTD |= (1 << PD5)  //数码管位控制位为1
 00AE           ; 
 00AE           ; //*************************************************************************
 00AE           ; //                    初始化子程序
 00AE           ; //*************************************************************************
 00AE           ; void system_init()                                   //IO口初始化
 00AE           ; {
 00AE                   .dbline 39
 00AE           ;   
 00AE           ;   PORTB=0xff;                                       //PB设置为输出
 00AE 8FEF              ldi R24,255
 00B0 88BB              out 0x18,R24
 00B2                   .dbline 40
 00B2           ;   DDRB=0xff;                                        //上拉电阻无效
 00B2 87BB              out 0x17,R24
 00B4                   .dbline 42
 00B4           ;   
 00B4           ;   D_LE1;                                                      //关掉数码管，以免显示乱码                   
 00B4 949A              sbi 0x12,4
 00B6                   .dbline 43
 00B6           ;   W_LE1;                     
 00B6 959A              sbi 0x12,5
 00B8                   .dbline 44
 00B8           ;   Data_IO=0xFF;                                               //关数码管            
 00B8 8BBB              out 0x1b,R24
 00BA                   .dbline 45
 00BA           ;   W_LE0; 
 00BA 9598              cbi 0x12,5
 00BC                   .dbline -2
 00BC           L19:
 00BC                   .dbline 0 ; func end
 00BC 0895              ret
 00BE                   .dbend
 00BE                   .dbfunc e timer0_init _timer0_init fV
                        .even
 00BE           _timer0_init::
 00BE                   .dbline -1
 00BE                   .dbline 50
 00BE           ; 
 00BE           ; }
 00BE           ; 
 00BE           ; void timer0_init()                                 //定时器初始化
 00BE           ; {
 00BE                   .dbline 51
 00BE           ;   TCCR0=0x68|timer_clk;                            //快读PWM模式，OC0输出，1024分频
 00BE 8FE6              ldi R24,111
 00C0 83BF              out 0x33,R24
 00C2                   .dbline 52
 00C2           ;   OCR0=f_count;                                    //OCR0比较匹配寄存器值
 00C2 89E1              ldi R24,25
 00C4 81BF              out 0x31,R24
 00C6                   .dbline 53
 00C6           ;   TIFR=0x01;                                       //清中断标志位
 00C6 81E0              ldi R24,1
 00C8 86BF              out 0x36,R24
 00CA                   .dbline 54
 00CA           ;   TIMSK=0x01;                                      //使能定时器0溢出中断
 00CA 87BF              out 0x37,R24
 00CC                   .dbline -2
 00CC           L20:
 00CC                   .dbline 0 ; func end
 00CC 0895              ret
 00CE                   .dbend
                        .area vector(rom, abs)
                        .org 64
 0040 0C946700          jmp _TIMER0_ISR
                        .area text(rom, con, rel)
 00CE                   .dbfile E:\DMAVR-~3\PWM\PWM.C
 00CE                   .dbfunc e TIMER0_ISR _TIMER0_ISR fV
                        .even
 00CE           _TIMER0_ISR::
 00CE 8A93              st -y,R24
 00D0 8FB7              in R24,0x3f
 00D2 8A93              st -y,R24
 00D4                   .dbline -1
 00D4                   .dbline 63
 00D4           ; }
 00D4           ; 
 00D4           ; 
 00D4           ; //*************************************************************************
 00D4           ; //            定时器0中断服务子程序
 00D4           ; //*************************************************************************
 00D4           ; #pragma interrupt_handler  TIMER0_ISR:iv_TIM0_OVF
 00D4           ; void TIMER0_ISR()             
 00D4           ; {
 00D4                   .dbline 64
 00D4           ;   OCR0=f_count;                                 //改变OCR0的值可以改变PWM输出
 00D4 89E1              ldi R24,25
 00D6 81BF              out 0x31,R24
 00D8                   .dbline -2
 00D8           L21:
 00D8                   .dbline 0 ; func end
 00D8 8991              ld R24,y+
 00DA 8FBF              out 0x3f,R24
 00DC 8991              ld R24,y+
 00DE 1895              reti
 00E0                   .dbend
 00E0                   .dbfunc e main _main fV
                        .even
 00E0           _main::
 00E0                   .dbline -1
 00E0                   .dbline 72
 00E0           ; }
 00E0           ; 
 00E0           ; //*************************************************************************
 00E0           ; //            主程序
 00E0           ; //*************************************************************************
 00E0           ; 
 00E0           ; void main(void)
 00E0           ; {
 00E0                   .dbline 73
 00E0           ;   system_init();                             //系统初始化.PB4输出PWM波形
 00E0 E6DF              xcall _system_init
 00E2                   .dbline 74
 00E2           ;   timer0_init();                             //定时器0初始化，完成PWM相关配置
 00E2 EDDF              xcall _timer0_init
 00E4                   .dbline 75
 00E4           ;   SREG|=0x80;                                //开启全局中断
 00E4 7894              bset 7
 00E6           L23:
 00E6                   .dbline 77
 00E6           ;   while(1)
 00E6           ;   {
 00E6                   .dbline 78
 00E6           ;   }
 00E6           L24:
 00E6                   .dbline 76
 00E6 FFCF              xjmp L23
 00E8           X3:
 00E8                   .dbline -2
 00E8           L22:
 00E8                   .dbline 0 ; func end
 00E8 0895              ret
 00EA                   .dbend
 00EA           ; }
