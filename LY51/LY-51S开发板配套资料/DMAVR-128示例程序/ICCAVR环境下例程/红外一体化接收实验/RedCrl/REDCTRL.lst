Interrupt Vectors
    00000 940C 004F JMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    0004F EFCF      LDI	R28,0xFF
    00050 E1D0      LDI	R29,0x10
    00051 BFCD      OUT	0x3D,R28
    00052 BFDE      OUT	0x3E,R29
    00053 51CE      SUBI	R28,0x1E
    00054 40D0      SBCI	R29,0
    00055 EA0A      LDI	R16,0xAA
    00056 8308      ST	Y,R16
    00057 2400      CLR	R0
    00058 E1E1      LDI	R30,0x11
    00059 E0F1      LDI	R31,1
    0005A E011      LDI	R17,1
    0005B 32E0      CPI	R30,0x20
    0005C 07F1      CPC	R31,R17
    0005D F011      BEQ	0x0060
    0005E 9201      ST	Z+,R0
    0005F CFFB      RJMP	0x005B
    00060 8300      ST	Z,R16
    00061 E8EC      LDI	R30,0x8C
    00062 E0F0      LDI	R31,0
    00063 E0A0      LDI	R26,0
    00064 E0B1      LDI	R27,1
    00065 E010      LDI	R17,0
    00066 E000      LDI	R16,0
    00067 BF0B      OUT	0x3B,R16
    00068 39ED      CPI	R30,0x9D
    00069 07F1      CPC	R31,R17
    0006A F021      BEQ	0x006F
    0006B 95C8      LPM
    0006C 9631      ADIW	R30,1
    0006D 920D      ST	X+,R0
    0006E CFF9      RJMP	0x0068
    0006F 940E 01BC CALL	_main
_exit:
    00071 CFFF      RJMP	_exit
FILE: D:\PROGRA~1\ICCAVR7.22\include\delay.h
(0001) //********************************************************************
(0002) /*函 数 名：delay_us
(0003) 建立日期：2010年1月28日
(0004) 编译环境：ICCAVR7.16A
(0005) 函数作用：微秒级的延时程序
(0006) 说    明：7.3728M晶振下
(0007) ********************************************************************/
(0008) void delay_1us(void);
(0009) void delay_3us(void);
(0010) void delay_10us(void);
(0011) void delay_50us(void);
(0012) void delay_100us(void);
(0013) void delay_n100us(unsigned char n100us);
(0014) void delay_1ms(void);
(0015) void delay_nms(unsigned int nms);
(0016) void delay_ns(unsigned char ns);
(0017) 
(0018) 
(0019) void delay_1us(void)                 //1us延时函数，不能连续调用， 
(0020) { 
(0021)    asm("nop");                       //1时钟周期
_delay_1us:
    00072 0000      NOP
(0022)    asm("nop");
    00073 0000      NOP
(0023)    asm("nop");
    00074 0000      NOP
(0024)    asm("nop");
    00075 0000      NOP
(0025)    asm("nop");                       //1T
    00076 0000      NOP
(0026)    asm("nop");
    00077 0000      NOP
    00078 9508      RET
(0027) 
(0028) }
(0029) void delay_3us(void)                 //3us延时函数,,可重复调用不影响精度
(0030) { 
(0031)    
(0032)    asm("nop");
_delay_3us:
    00079 0000      NOP
(0033)    asm("nop");
    0007A 0000      NOP
(0034)    asm("nop");                       
    0007B 0000      NOP
(0035)    asm("nop");
    0007C 0000      NOP
(0036)    asm("nop");
    0007D 0000      NOP
(0037)    asm("nop");
    0007E 0000      NOP
(0038)    asm("nop");                       
    0007F 0000      NOP
(0039)    asm("nop");
    00080 0000      NOP
(0040)    asm("nop");
    00081 0000      NOP
(0041)    asm("nop");
    00082 0000      NOP
(0042)    asm("nop");                       
    00083 0000      NOP
(0043)    asm("nop");
    00084 0000      NOP
(0044)    asm("nop");
    00085 0000      NOP
(0045)    asm("nop");
    00086 0000      NOP
(0046)    asm("nop");                       
    00087 0000      NOP
(0047)    asm("nop");
    00088 0000      NOP
(0048)    asm("nop");
    00089 0000      NOP
(0049)    asm("nop");
    0008A 0000      NOP
(0050)    asm("nop");
    0008B 0000      NOP
(0051)    asm("nop");
    0008C 0000      NOP
(0052)    asm("nop");                       
    0008D 0000      NOP
    0008E 9508      RET
(0053) } 
(0054) 
(0055) void delay_10us(void)                 //10us延时函数,,可重复调用不影响精度
(0056) {
(0057)    delay_3us();
_delay_10us:
    0008F DFE9      RCALL	_delay_3us
(0058)    delay_3us(); 
    00090 DFE8      RCALL	_delay_3us
(0059)    delay_3us();  
    00091 CFE7      RJMP	_delay_3us
(0060) }
(0061)   
(0062) void delay_50us(void)                 //48us延时函数,,可重复调用不影响精度
(0063) { 
(0064)    delay_10us();
_delay_50us:
    00092 DFFC      RCALL	_delay_10us
(0065)    delay_10us(); 
    00093 DFFB      RCALL	_delay_10us
(0066)    delay_10us();
    00094 DFFA      RCALL	_delay_10us
(0067)    delay_10us();
    00095 CFF9      RJMP	_delay_10us
(0068) }
(0069) void delay_100us(void)     //exactly 98us延时函数,,可重复调用不影响精度
(0070) {
(0071)  delay_50us();
_delay_100us:
    00096 DFFB      RCALL	_delay_50us
(0072)  delay_50us();
    00097 CFFA      RJMP	_delay_50us
_delay_n100us:
  n100us               --> R20
    00098 934A      ST	-Y,R20
    00099 2F40      MOV	R20,R16
(0073) }
(0074) void delay_n100us(unsigned char n100us)
(0075) {
    0009A C001      RJMP	0x009C
(0076)  while(n100us--)                          
(0077)  delay_100us();
    0009B DFFA      RCALL	_delay_100us
    0009C 2E24      MOV	R2,R20
    0009D 2433      CLR	R3
    0009E 5041      SUBI	R20,1
    0009F 2022      TST	R2
    000A0 F7D1      BNE	0x009B
    000A1 9149      LD	R20,Y+
    000A2 9508      RET
(0078) }
(0079) /*delay_n100us(2)        250us
(0080) delay_n100us(3)          360us
(0081) delay_n100us(4)          470us
(0082) delay_n100us(5)          580us
(0083) delay_n100us(6)          690us
(0084) delay_n100us(7)       800us
(0085) delay_n100us(8)          900us              主要是由于函数声明及while,,,大概6us
(0086) 
(0087) */
(0088) void delay_1ms()
(0089) {
(0090)  delay_100us();
_delay_1ms:
    000A3 DFF2      RCALL	_delay_100us
(0091)  delay_100us();
    000A4 DFF1      RCALL	_delay_100us
(0092)  delay_100us();
    000A5 DFF0      RCALL	_delay_100us
(0093)  delay_100us();
    000A6 DFEF      RCALL	_delay_100us
(0094)  delay_100us();
    000A7 DFEE      RCALL	_delay_100us
(0095)  delay_100us();
    000A8 DFED      RCALL	_delay_100us
(0096)  delay_100us();
    000A9 DFEC      RCALL	_delay_100us
(0097)  delay_100us();
    000AA DFEB      RCALL	_delay_100us
(0098)  delay_100us();
    000AB DFEA      RCALL	_delay_100us
(0099)  delay_100us();
    000AC CFE9      RJMP	_delay_100us
_delay_nms:
  nms                  --> R20
    000AD 934A      ST	-Y,R20
    000AE 935A      ST	-Y,R21
    000AF 01A8      MOVW	R20,R16
(0100) }
(0101) /********************************************************************
(0102) 函 数 名：Delay_ms
(0103) 建立日期：2010年1月28日
(0104) 修改日期：
(0105) 函数作用：毫秒级的精确延时程序
(0106) 说    明：
(0107) ********************************************************************/
(0108) void delay_nms(unsigned int nms)
(0109) {
    000B0 C001      RJMP	0x00B2
(0110)  while(nms--) 
(0111)  delay_1ms();
    000B1 DFF1      RCALL	_delay_1ms
    000B2 011A      MOVW	R2,R20
    000B3 5041      SUBI	R20,1
    000B4 4050      SBCI	R21,0
    000B5 2022      TST	R2
    000B6 F7D1      BNE	0x00B1
    000B7 2033      TST	R3
    000B8 F7C1      BNE	0x00B1
    000B9 9159      LD	R21,Y+
    000BA 9149      LD	R20,Y+
    000BB 9508      RET
_delay_ns:
  ns                   --> R20
    000BC 934A      ST	-Y,R20
    000BD 2F40      MOV	R20,R16
(0112) }
(0113) void delay_ns(unsigned char ns)
(0114) {
    000BE C003      RJMP	0x00C2
(0115)  while(ns--) 
(0116)  delay_nms(1000);
    000BF EE08      LDI	R16,0xE8
    000C0 E013      LDI	R17,3
    000C1 DFEB      RCALL	_delay_nms
    000C2 2E24      MOV	R2,R20
    000C3 2433      CLR	R3
    000C4 5041      SUBI	R20,1
    000C5 2022      TST	R2
    000C6 F7C1      BNE	0x00BF
    000C7 9149      LD	R20,Y+
    000C8 9508      RET
FILE: E:\DMAVR-~3\RedCrl\RedCtrl.c
(0001) //DMAVR-128的红外遥控器解码通信实验源程序,采用一体化红外接收头进行信号接收，查询方式
(0002) //数码管显示遥控器的键值
(0003) //编译环境 ICCAVR 7.16A
(0004) //系统时钟7.3728MHZ，设置熔丝位为外部高频石英晶体振荡，启动时间4.1ms
(0005) //作者：阿迪 www.avrgcc.com
(0006) //日期：2010.01.14
(0007) //***********************************************************************
(0008) //			包含文件
(0009) //***********************************************************************
(0010) 
(0011) #include <string.h>
(0012) #include <stdio.h>
(0013) #include <delay.h>
(0014) #include <iom128v.h>
(0015) 
(0016) //***********************************************************************
(0017) //			定义变量区
(0018) //***********************************************************************
(0019) 
(0020) #define uchar           unsigned char
(0021) #define uint            unsigned int
(0022) 
(0023) #define Data_IO	        PORTA                //数码管数据口
(0024) #define Data_DDR        DDRA                 //数码管数据口方向寄存器
(0025) #define D_LE0	        PORTD &= ~(1 << PD4) //数码管段控制位为0，锁存端口数据
(0026) #define D_LE1           PORTD |= (1 << PD4)  //数码管段控制位为1，锁存器输出与端口一致
(0027) #define W_LE0	        PORTD &= ~(1 << PD5) //数码管位控制位为0
(0028) #define W_LE1           PORTD |= (1 << PD5)  //数码管位控制位为1
(0029) 
(0030) #define Beep0           PORTD &= ~(1 << PD6)    //蜂鸣器所在IO口PD6
(0031) #define Beep1           PORTD |= (1 << PD6)
(0032) 
(0033) #define RED_IN	        DDRE &= ~(1 << PE3)		//设置输入，红外接收头接单片机PE3口
(0034) #define RED_OUT	        DDRE |= (1 << PE3)		//设置输出
(0035) #define RED_CLR	        PORTE &= ~(1 << PE3)	//置低电平
(0036) #define RED_SET	        PORTE |= (1 << PE3)		//置高电平
(0037) #define RED_R	        (PINE & (1 << PE3))		//读电平
(0038) 
(0039) uchar key;
(0040) uint temp_value;
(0041) uint temp,A;             		      //定义的变量,显示数据处理
(0042) uchar code_value=0;
(0043) uchar key_code[4]; 
(0044) uint l,p;
(0045) 
(0046) //***********************************************************************
(0047) //			共阴数码管显示的断码表0～F
(0048) //***********************************************************************
(0049) 
(0050) uchar table[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};
(0051) 
(0052) //***********************************************************************
(0053) //			遥控器键码，反码表
(0054) //***********************************************************************
(0055) 
(0056) #define KEY_0   0x03
(0057) #define KEY_1   0x07
(0058) #define KEY_2   0x0B
(0059) #define KEY_3   0x0F
(0060) #define KEY_4   0x13
(0061) #define KEY_5   0x17
(0062) #define KEY_6   0x1B
(0063) #define KEY_7   0x1F
(0064) #define KEY_8   0x23
(0065) #define KEY_9   0x27
(0066) 
(0067) 
(0068) //***********************************************************************
(0069) //			IO端口初始化
(0070) //***********************************************************************
(0071) 
(0072) void system_init(void)
(0073) {
(0074)     Data_IO=0xFF;             //数据口为输出
_system_init:
    000C9 EF8F      LDI	R24,0xFF
    000CA BB8B      OUT	0x1B,R24
(0075)     Data_DDR=0xFF;
    000CB BB8A      OUT	0x1A,R24
(0076) 
(0077)     PORTD=0xFF;               //74HC573的控制口，设置为输出
    000CC BB82      OUT	0x12,R24
(0078)     DDRD=0xFF;
    000CD BB81      OUT	0x11,R24
(0079)  
(0080) 	PORTB=0xFF;               //关LED
    000CE BB88      OUT	0x18,R24
(0081) 	DDRB=0xFF;
    000CF BB87      OUT	0x17,R24
(0082) 
(0083)     DDRE=0xFF;
    000D0 B982      OUT	0x02,R24
(0084) 
(0085)     RED_SET;
    000D1 9A1B      SBI	0x03,3
(0086) 	RED_IN;
    000D2 9813      CBI	0x02,3
    000D3 9508      RET
_Display_Key:
  data_KEY             --> R10
    000D4 92AA      ST	-Y,R10
    000D5 92BA      ST	-Y,R11
    000D6 0158      MOVW	R10,R16
(0087) }
(0088) 
(0089) //*************************************************************************
(0090) //			74HC573控制数码管动态扫描显示函数，显示采集到的数据
(0091) //*************************************************************************
(0092) 
(0093) void Display_Key(uint data_KEY)
(0094) {
(0095) 	 system_init();
    000D7 DFF1      RCALL	_system_init
(0096) 
(0097)      D_LE1;                    
    000D8 9A94      SBI	0x12,4
(0098)      W_LE1;                    
    000D9 9A95      SBI	0x12,5
(0099)      Data_IO=0x00;               
    000DA 2422      CLR	R2
    000DB BA2B      OUT	0x1B,R2
(0100)      W_LE0;                    
    000DC 9895      CBI	0x12,5
(0101) 	 Data_IO=table[data_KEY];         
    000DD E081      LDI	R24,1
    000DE E091      LDI	R25,1
    000DF 01F5      MOVW	R30,R10
    000E0 0FE8      ADD	R30,R24
    000E1 1FF9      ADC	R31,R25
    000E2 8020      LD	R2,Z
    000E3 BA2B      OUT	0x1B,R2
(0102)      D_LE0;                    
    000E4 9894      CBI	0x12,4
(0103)      delay_nms(1);                    
    000E5 E001      LDI	R16,1
    000E6 E010      LDI	R17,0
    000E7 DFC5      RCALL	_delay_nms
    000E8 90B9      LD	R11,Y+
    000E9 90A9      LD	R10,Y+
    000EA 9508      RET
(0104) }
(0105) 
(0106) //*************************************************************************
(0107) //			遥控器键值赋功能值子程序
(0108) //*************************************************************************
(0109)  void Key_Icode(void)
(0110)  {
(0111)    switch(key_code[3])
_Key_Icode:
    000EB 9100 0118 LDS	R16,key_code+3
    000ED 2711      CLR	R17
    000EE 3103      CPI	R16,0x13
    000EF E0E0      LDI	R30,0
    000F0 071E      CPC	R17,R30
    000F1 F409      BNE	0x00F3
    000F2 C059      RJMP	0x014C
    000F3 E183      LDI	R24,0x13
    000F4 E090      LDI	R25,0
    000F5 1780      CP	R24,R16
    000F6 0791      CPC	R25,R17
    000F7 F0FC      BLT	0x0117
    000F8 3007      CPI	R16,7
    000F9 E0E0      LDI	R30,0
    000FA 071E      CPC	R17,R30
    000FB F409      BNE	0x00FD
    000FC C043      RJMP	0x0140
    000FD E087      LDI	R24,7
    000FE E090      LDI	R25,0
    000FF 1780      CP	R24,R16
    00100 0791      CPC	R25,R17
    00101 F034      BLT	0x0108
    00102 3003      CPI	R16,3
    00103 E0E0      LDI	R30,0
    00104 071E      CPC	R17,R30
    00105 F409      BNE	0x0107
    00106 C035      RJMP	0x013C
    00107 C05C      RJMP	0x0164
    00108 300B      CPI	R16,0xB
    00109 E0E0      LDI	R30,0
    0010A 071E      CPC	R17,R30
    0010B F409      BNE	0x010D
    0010C C037      RJMP	0x0144
    0010D 300B      CPI	R16,0xB
    0010E E0E0      LDI	R30,0
    0010F 071E      CPC	R17,R30
    00110 F40C      BGE	0x0112
    00111 C052      RJMP	0x0164
    00112 300F      CPI	R16,0xF
    00113 E0E0      LDI	R30,0
    00114 071E      CPC	R17,R30
    00115 F191      BEQ	0x0148
    00116 C04D      RJMP	0x0164
    00117 310F      CPI	R16,0x1F
    00118 E0E0      LDI	R30,0
    00119 071E      CPC	R17,R30
    0011A F409      BNE	0x011C
    0011B C03C      RJMP	0x0158
    0011C E18F      LDI	R24,0x1F
    0011D E090      LDI	R25,0
    0011E 1780      CP	R24,R16
    0011F 0791      CPC	R25,R17
    00120 F074      BLT	0x012F
    00121 3107      CPI	R16,0x17
    00122 E0E0      LDI	R30,0
    00123 071E      CPC	R17,R30
    00124 F159      BEQ	0x0150
    00125 3107      CPI	R16,0x17
    00126 E0E0      LDI	R30,0
    00127 071E      CPC	R17,R30
    00128 F40C      BGE	0x012A
    00129 C03A      RJMP	0x0164
    0012A 310B      CPI	R16,0x1B
    0012B E0E0      LDI	R30,0
    0012C 071E      CPC	R17,R30
    0012D F131      BEQ	0x0154
    0012E C035      RJMP	0x0164
    0012F 3203      CPI	R16,0x23
    00130 E0E0      LDI	R30,0
    00131 071E      CPC	R17,R30
    00132 F149      BEQ	0x015C
    00133 3203      CPI	R16,0x23
    00134 E0E0      LDI	R30,0
    00135 071E      CPC	R17,R30
    00136 F16C      BLT	0x0164
    00137 3207      CPI	R16,0x27
    00138 E0E0      LDI	R30,0
    00139 071E      CPC	R17,R30
    0013A F129      BEQ	0x0160
    0013B C028      RJMP	0x0164
(0112)    {
(0113)     case KEY_0:key=0;break;
    0013C 2422      CLR	R2
    0013D 9220 011F STS	key,R2
    0013F C027      RJMP	0x0167
(0114) 	case KEY_1:key=1;break;
    00140 E081      LDI	R24,1
    00141 9380 011F STS	key,R24
    00143 C023      RJMP	0x0167
(0115) 	case KEY_2:key=2;break;
    00144 E082      LDI	R24,2
    00145 9380 011F STS	key,R24
    00147 C01F      RJMP	0x0167
(0116) 	case KEY_3:key=3;break;
    00148 E083      LDI	R24,3
    00149 9380 011F STS	key,R24
    0014B C01B      RJMP	0x0167
(0117) 	case KEY_4:key=4;break;
    0014C E084      LDI	R24,4
    0014D 9380 011F STS	key,R24
    0014F C017      RJMP	0x0167
(0118) 	case KEY_5:key=5;break;
    00150 E085      LDI	R24,5
    00151 9380 011F STS	key,R24
    00153 C013      RJMP	0x0167
(0119) 	case KEY_6:key=6;break;
    00154 E086      LDI	R24,6
    00155 9380 011F STS	key,R24
    00157 C00F      RJMP	0x0167
(0120) 	case KEY_7:key=7;break;
    00158 E087      LDI	R24,7
    00159 9380 011F STS	key,R24
    0015B C00B      RJMP	0x0167
(0121) 	case KEY_8:key=8;break;
    0015C E088      LDI	R24,0x8
    0015D 9380 011F STS	key,R24
    0015F C007      RJMP	0x0167
(0122) 	case KEY_9:key=9;break;
    00160 E089      LDI	R24,0x9
    00161 9380 011F STS	key,R24
    00163 C003      RJMP	0x0167
(0123) 	default:key=10;break;
    00164 E08A      LDI	R24,0xA
    00165 9380 011F STS	key,R24
    00167 9508      RET
_Red_Code:
  i                    --> R20
  j                    --> R10
  k                    --> R22
    00168 940E 01C1 CALL	push_xgsetF00C
(0124)    }
(0125)  }
(0126) 
(0127) //*************************************************************************
(0128) //			遥控器解码子程序
(0129) //*************************************************************************
(0130) 
(0131) void Red_Code(void)
(0132) {
(0133) uchar i,j,k = 0;
    0016A 2766      CLR	R22
(0134) 
(0135)  for(i = 0;i < 19;i++)
    0016B 2744      CLR	R20
    0016C C006      RJMP	0x0173
(0136) {
(0137)   delay_n100us(4);           //延时400us
    0016D E004      LDI	R16,4
    0016E DF29      RCALL	_delay_n100us
(0138)   if(RED_R)                //9ms内有高电平，则判断为干扰，退出处理程序
    0016F 9B0B      SBIS	0x01,3
    00170 C001      RJMP	0x0172
(0139)   {
(0140)       return;
    00171 C048      RJMP	0x01BA
    00172 9543      INC	R20
    00173 3143      CPI	R20,0x13
    00174 F3C0      BCS	0x016D
(0141)   }
(0142) }
(0143) 
(0144) while(!RED_R);            //等待9ms低电平过去
    00175 9B0B      SBIS	0x01,3
    00176 CFFE      RJMP	0x0175
(0145) 
(0146) 
(0147) 
(0148) for(i=0;i<5;i++)          //是否连发码
    00177 2744      CLR	R20
    00178 C009      RJMP	0x0182
(0149) {
(0150)   delay_n100us(4);
    00179 E004      LDI	R16,4
    0017A DF1D      RCALL	_delay_n100us
(0151)   delay_10us(); 
    0017B DF13      RCALL	_delay_10us
(0152)   delay_10us();
    0017C DF12      RCALL	_delay_10us
(0153)   delay_10us();
    0017D DF11      RCALL	_delay_10us
(0154)   if(!RED_R)
    0017E 990B      SBIC	0x01,3
    0017F C001      RJMP	0x0181
(0155)    {
(0156)      return;
    00180 C039      RJMP	0x01BA
    00181 9543      INC	R20
    00182 3045      CPI	R20,5
    00183 F3A8      BCS	0x0179
(0157)    }
(0158) }
(0159) 
(0160) 
(0161) while(RED_R);               //等待4.5ms高电平过去
    00184 990B      SBIC	0x01,3
    00185 CFFE      RJMP	0x0184
(0162) 
(0163) for(i = 0;i < 4;i++)        //接收4个字节的数据
    00186 2744      CLR	R20
    00187 C026      RJMP	0x01AE
(0164) {
(0165)   for(j = 0;j < 8;j++)      //每个字节的数据8位
    00188 24AA      CLR	R10
    00189 C017      RJMP	0x01A1
(0166)   {
(0167)    
(0168) 
(0169)    while(!RED_R);         //等待变高电平
    0018A 9B0B      SBIS	0x01,3
    0018B CFFE      RJMP	0x018A
    0018C C005      RJMP	0x0192
(0170)    while(RED_R)           //计算高电平时间
(0171)    {
(0172)     delay_100us();
    0018D DF08      RCALL	_delay_100us
(0173)     k++;
    0018E 9563      INC	R22
(0174)     if(k >= 22)           //高电平时间过长，则退出处理程序
    0018F 3166      CPI	R22,0x16
    00190 F008      BCS	0x0192
(0175)     {
(0176)      return;              //
    00191 C028      RJMP	0x01BA
    00192 990B      SBIC	0x01,3
    00193 CFF9      RJMP	0x018D
(0177)     }
(0178)     
(0179)    }
(0180) 
(0181)    code_value>>=1;        //接受一位数据
    00194 9020 0100 LDS	R2,code_value
    00196 9426      LSR	R2
    00197 9220 0100 STS	code_value,R2
(0182)    if(k >= 8)
    00199 3068      CPI	R22,0x8
    0019A F020      BCS	0x019F
(0183)    {
(0184)     code_value|=0x80;   //高电平时间大于0.56，则为数据1
    0019B 2D82      MOV	R24,R2
    0019C 6880      ORI	R24,0x80
    0019D 9380 0100 STS	code_value,R24
(0185)    }
(0186)    k = 0;                  //计时清零
    0019F 2766      CLR	R22
    001A0 94A3      INC	R10
    001A1 2D8A      MOV	R24,R10
    001A2 3088      CPI	R24,0x8
    001A3 F330      BCS	0x018A
(0187)   }
(0188)   key_code[i]=code_value;  //四个字节的数据
    001A4 E185      LDI	R24,0x15
    001A5 E091      LDI	R25,1
    001A6 2FE4      MOV	R30,R20
    001A7 27FF      CLR	R31
    001A8 0FE8      ADD	R30,R24
    001A9 1FF9      ADC	R31,R25
    001AA 9020 0100 LDS	R2,code_value
    001AC 8220      ST	Z,R2
    001AD 9543      INC	R20
    001AE 3044      CPI	R20,4
    001AF F2C0      BCS	0x0188
(0189) }
(0190) 
(0191)   Key_Icode();             //调用赋值函数
    001B0 DF3A      RCALL	_Key_Icode
(0192) 
(0193)   Display_Key(key);        //显示按键值
    001B1 9100 011F LDS	R16,key
    001B3 2711      CLR	R17
    001B4 DF1F      RCALL	_Display_Key
(0194)   
(0195)   Beep0;                  //按键声音指示
    001B5 9896      CBI	0x12,6
(0196)   delay_nms(50);
    001B6 E302      LDI	R16,0x32
    001B7 E010      LDI	R17,0
    001B8 DEF4      RCALL	_delay_nms
(0197)   Beep1;
    001B9 9A96      SBI	0x12,6
    001BA 940C 01C8 JMP	pop_xgsetF00C
(0198) }
(0199) 
(0200) 
(0201) //*************************************************************************
(0202) //			主程序
(0203) //*************************************************************************
(0204) int main(void)
(0205) {
(0206)   system_init();         //系统初始化
_main:
    001BC DF0C      RCALL	_system_init
    001BD C001      RJMP	0x01BF
(0207)   while(1)
(0208)  {
(0209)     Red_Code();          //调用遥控器解码子程序
FILE: <library>
    001BE DFA9      RCALL	_Red_Code
    001BF CFFE      RJMP	0x01BE
    001C0 9508      RET
push_xgsetF00C:
    001C1 937A      ST	-Y,R23
    001C2 936A      ST	-Y,R22
    001C3 935A      ST	-Y,R21
    001C4 934A      ST	-Y,R20
    001C5 92BA      ST	-Y,R11
    001C6 92AA      ST	-Y,R10
    001C7 9508      RET
pop_xgsetF00C:
    001C8 90A9      LD	R10,Y+
    001C9 90B9      LD	R11,Y+
    001CA 9149      LD	R20,Y+
    001CB 9159      LD	R21,Y+
    001CC 9169      LD	R22,Y+
    001CD 9179      LD	R23,Y+
    001CE 9508      RET
