
Timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002e0  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800110  00800110  00000384  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000a6  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002fb  00000000  00000000  0000044a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000194  00000000  00000000  00000745  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d0  00000000  00000000  000008d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000cac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000129  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000088  00000000  00000000  00000e45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000ecd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ee       	ldi	r30, 0xE0	; 224
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 31       	cpi	r26, 0x19	; 25
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 38 01 	call	0x270	; 0x270 <main>
  c6:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <system_init>:
//			IO端口初始化
//***********************************************************************

void system_init()
{
    Data_IO=0xFF;             						//数据口为输出
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8b bb       	out	0x1b, r24	; 27
    Data_DDR=0xFF;
  d2:	8a bb       	out	0x1a, r24	; 26

    PORTD=0xFF;               						//74HC573的控制口，设置为输出
  d4:	82 bb       	out	0x12, r24	; 18
    DDRD=0xFF;
  d6:	81 bb       	out	0x11, r24	; 17
	PORTB=0XFF;
  d8:	88 bb       	out	0x18, r24	; 24
	DDRB=0XFF;
  da:	87 bb       	out	0x17, r24	; 23
}
  dc:	08 95       	ret

000000de <timer0_init>:
//			定时器0初始化子程序
//*************************************************************************

void timer0_init()                                 //定时器初始化
{
  TCCR0=0x07;                                      //普通模式，OC0不输出，1024分频
  de:	87 e0       	ldi	r24, 0x07	; 7
  e0:	83 bf       	out	0x33, r24	; 51
  TCNT0=f_count;                                    //初值，定时为10ms
  e2:	87 eb       	ldi	r24, 0xB7	; 183
  e4:	82 bf       	out	0x32, r24	; 50
  TIFR=0x01;                                       //清中断标志位
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	86 bf       	out	0x36, r24	; 54
  TIMSK=0x01;                                      //使能定时器0溢出中断
  ea:	87 bf       	out	0x37, r24	; 55
}
  ec:	08 95       	ret

000000ee <data_do>:

//*************************************************************************
//		数据处理函数
//*************************************************************************
 void data_do(uint temp_d)
 {
  ee:	9c 01       	movw	r18, r24
     uchar A2t;
     A1=temp_d/100;                       		  //分出百，十，和个位
  f0:	64 e6       	ldi	r22, 0x64	; 100
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <__udivmodhi4>
  f8:	70 93 18 01 	sts	0x0118, r23
  fc:	60 93 17 01 	sts	0x0117, r22
     A2t=temp_d%100;
 100:	c9 01       	movw	r24, r18
 102:	64 e6       	ldi	r22, 0x64	; 100
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <__udivmodhi4>
 10a:	28 2f       	mov	r18, r24
     A2=A2t/10;
 10c:	6a e0       	ldi	r22, 0x0A	; 10
 10e:	0e 94 4e 01 	call	0x29c	; 0x29c <__udivmodqi4>
 112:	80 93 15 01 	sts	0x0115, r24
 116:	10 92 16 01 	sts	0x0116, r1
     A3=A2t%10;
 11a:	82 2f       	mov	r24, r18
 11c:	0e 94 4e 01 	call	0x29c	; 0x29c <__udivmodqi4>
 120:	90 93 11 01 	sts	0x0111, r25
 124:	10 92 12 01 	sts	0x0112, r1
}
 128:	08 95       	ret

0000012a <Display_Timer0>:
//			IO端口初始化
//***********************************************************************

void system_init()
{
    Data_IO=0xFF;             						//数据口为输出
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	8b bb       	out	0x1b, r24	; 27
    Data_DDR=0xFF;
 12e:	8a bb       	out	0x1a, r24	; 26

    PORTD=0xFF;               						//74HC573的控制口，设置为输出
 130:	82 bb       	out	0x12, r24	; 18
    DDRD=0xFF;
 132:	81 bb       	out	0x11, r24	; 17
	PORTB=0XFF;
 134:	88 bb       	out	0x18, r24	; 24
	DDRB=0XFF;
 136:	87 bb       	out	0x17, r24	; 23
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 13c:	63 e3       	ldi	r22, 0x33	; 51
 13e:	77 e0       	ldi	r23, 0x07	; 7
	 uchar i,j;
	 system_init();
     j=0x01;                    			//此数据用来控制位选
 for(i=0;i<5;i++)               			//用后3位数码管来显示
  {
     D_LE1;                     
 140:	94 9a       	sbi	0x12, 4	; 18
     W_LE1;                     
 142:	95 9a       	sbi	0x12, 5	; 18
     Data_IO=~j;                
 144:	89 2f       	mov	r24, r25
 146:	80 95       	com	r24
 148:	8b bb       	out	0x1b, r24	; 27
     W_LE0;                      
 14a:	95 98       	cbi	0x12, 5	; 18
	 j=(j<<1);
 14c:	99 0f       	add	r25, r25
     Data_IO=0x00;           
 14e:	1b ba       	out	0x1b, r1	; 27
     D_LE0;                      
 150:	94 98       	cbi	0x12, 4	; 18
 152:	43 e3       	ldi	r20, 0x33	; 51
 154:	57 e0       	ldi	r21, 0x07	; 7
 156:	fb 01       	movw	r30, r22
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <Display_Timer0+0x2e>
void Display_Timer0(void)
{
	 uchar i,j;
	 system_init();
     j=0x01;                    			//此数据用来控制位选
 for(i=0;i<5;i++)               			//用后3位数码管来显示
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	25 30       	cpi	r18, 0x05	; 5
 160:	79 f7       	brne	.-34     	; 0x140 <Display_Timer0+0x16>
	 j=(j<<1);
     Data_IO=0x00;           
     D_LE0;                      
     delay_ms(1);                
  }
     D_LE1;                    
 162:	94 9a       	sbi	0x12, 4	; 18
     W_LE1;                    
 164:	95 9a       	sbi	0x12, 5	; 18
     Data_IO=~j;               
 166:	89 2f       	mov	r24, r25
 168:	80 95       	com	r24
 16a:	8b bb       	out	0x1b, r24	; 27
     W_LE0;                    
 16c:	95 98       	cbi	0x12, 5	; 18
	 j=(j<<1);
 16e:	99 0f       	add	r25, r25
     Data_IO=table[A1];         
 170:	e0 91 17 01 	lds	r30, 0x0117
 174:	f0 91 18 01 	lds	r31, 0x0118
 178:	e0 50       	subi	r30, 0x00	; 0
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	80 81       	ld	r24, Z
 17e:	8b bb       	out	0x1b, r24	; 27
     D_LE0;                    
 180:	94 98       	cbi	0x12, 4	; 18
 182:	fa 01       	movw	r30, r20
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <Display_Timer0+0x5a>
     delay_ms(1);              

     D_LE1;                     
 188:	94 9a       	sbi	0x12, 4	; 18
     W_LE1;                     
 18a:	95 9a       	sbi	0x12, 5	; 18
     Data_IO=~j;                
 18c:	89 2f       	mov	r24, r25
 18e:	80 95       	com	r24
 190:	8b bb       	out	0x1b, r24	; 27
     W_LE0;                      
 192:	95 98       	cbi	0x12, 5	; 18
	 j=(j<<1);
     Data_IO=table[A2];             
 194:	e0 91 15 01 	lds	r30, 0x0115
 198:	f0 91 16 01 	lds	r31, 0x0116
 19c:	e0 50       	subi	r30, 0x00	; 0
 19e:	ff 4f       	sbci	r31, 0xFF	; 255
 1a0:	80 81       	ld	r24, Z
 1a2:	8b bb       	out	0x1b, r24	; 27
     D_LE0;                      
 1a4:	94 98       	cbi	0x12, 4	; 18
 1a6:	fa 01       	movw	r30, r20
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <Display_Timer0+0x7e>
     delay_ms(1);                

	 D_LE1;                     
 1ac:	94 9a       	sbi	0x12, 4	; 18
     W_LE1;                     
 1ae:	95 9a       	sbi	0x12, 5	; 18
     Data_IO=~j;                
 1b0:	99 0f       	add	r25, r25
 1b2:	90 95       	com	r25
 1b4:	9b bb       	out	0x1b, r25	; 27
     W_LE0;                      
 1b6:	95 98       	cbi	0x12, 5	; 18
	 j=(j<<1);
     Data_IO=table[A3];           
 1b8:	e0 91 11 01 	lds	r30, 0x0111
 1bc:	f0 91 12 01 	lds	r31, 0x0112
 1c0:	e0 50       	subi	r30, 0x00	; 0
 1c2:	ff 4f       	sbci	r31, 0xFF	; 255
 1c4:	80 81       	ld	r24, Z
 1c6:	8b bb       	out	0x1b, r24	; 27
     D_LE0;                      
 1c8:	94 98       	cbi	0x12, 4	; 18
 1ca:	ca 01       	movw	r24, r20
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <Display_Timer0+0xa2>
     delay_ms(1);                

	 D_LE1;                     
 1d0:	94 9a       	sbi	0x12, 4	; 18
     W_LE1;                     
 1d2:	95 9a       	sbi	0x12, 5	; 18
     Data_IO=0xff;                
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	8b bb       	out	0x1b, r24	; 27
     W_LE0;                      
 1d8:	95 98       	cbi	0x12, 5	; 18

}
 1da:	08 95       	ret

000001dc <__vector_16>:

//*************************************************************************
//		定时器0中断服务子程序
//*************************************************************************
ISR(SIG_OVERFLOW0)                           	//中断服务程序
{
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	0b b6       	in	r0, 0x3b	; 59
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	2f 93       	push	r18
 1ec:	3f 93       	push	r19
 1ee:	4f 93       	push	r20
 1f0:	5f 93       	push	r21
 1f2:	6f 93       	push	r22
 1f4:	7f 93       	push	r23
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	af 93       	push	r26
 1fc:	bf 93       	push	r27
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
    
	TCNT0=f_count;                              //定时器赋初值，非自动重装模式
 202:	87 eb       	ldi	r24, 0xB7	; 183
 204:	82 bf       	out	0x32, r24	; 50
   if(time_1s_count!=100)
 206:	80 91 10 01 	lds	r24, 0x0110
 20a:	84 36       	cpi	r24, 0x64	; 100
 20c:	21 f0       	breq	.+8      	; 0x216 <__vector_16+0x3a>
      {
	  time_1s_count++;                          //定时器定时10ms，计数100次为1s
 20e:	8f 5f       	subi	r24, 0xFF	; 255
 210:	80 93 10 01 	sts	0x0110, r24
 214:	1a c0       	rjmp	.+52     	; 0x24a <__vector_16+0x6e>
//	  time_1s_flag=0;                           //未到1s，标志位为0
	  }
   else
      {
	  if(second!=999)                           //最大计时999s
 216:	80 91 13 01 	lds	r24, 0x0113
 21a:	90 91 14 01 	lds	r25, 0x0114
 21e:	23 e0       	ldi	r18, 0x03	; 3
 220:	87 3e       	cpi	r24, 0xE7	; 231
 222:	92 07       	cpc	r25, r18
 224:	31 f0       	breq	.+12     	; 0x232 <__vector_16+0x56>
	     {
		 second++;
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	90 93 14 01 	sts	0x0114, r25
 22c:	80 93 13 01 	sts	0x0113, r24
 230:	04 c0       	rjmp	.+8      	; 0x23a <__vector_16+0x5e>
		 }
      else
	     second=0;                              //到999s则清0
 232:	10 92 14 01 	sts	0x0114, r1
 236:	10 92 13 01 	sts	0x0113, r1
	  time_1s_count=0;
 23a:	10 92 10 01 	sts	0x0110, r1
//	  time_1s_flag=1;
	  data_do(second);                         //将秒转化为BCD码，供显示
 23e:	80 91 13 01 	lds	r24, 0x0113
 242:	90 91 14 01 	lds	r25, 0x0114
 246:	0e 94 77 00 	call	0xee	; 0xee <data_do>
	  }
}
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0b be       	out	0x3b, r0	; 59
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <main>:
//			IO端口初始化
//***********************************************************************

void system_init()
{
    Data_IO=0xFF;             						//数据口为输出
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	8b bb       	out	0x1b, r24	; 27
    Data_DDR=0xFF;
 274:	8a bb       	out	0x1a, r24	; 26

    PORTD=0xFF;               						//74HC573的控制口，设置为输出
 276:	82 bb       	out	0x12, r24	; 18
    DDRD=0xFF;
 278:	81 bb       	out	0x11, r24	; 17
	PORTB=0XFF;
 27a:	88 bb       	out	0x18, r24	; 24
	DDRB=0XFF;
 27c:	87 bb       	out	0x17, r24	; 23
//			定时器0初始化子程序
//*************************************************************************

void timer0_init()                                 //定时器初始化
{
  TCCR0=0x07;                                      //普通模式，OC0不输出，1024分频
 27e:	87 e0       	ldi	r24, 0x07	; 7
 280:	83 bf       	out	0x33, r24	; 51
  TCNT0=f_count;                                    //初值，定时为10ms
 282:	87 eb       	ldi	r24, 0xB7	; 183
 284:	82 bf       	out	0x32, r24	; 50
  TIFR=0x01;                                       //清中断标志位
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	86 bf       	out	0x36, r24	; 54
  TIMSK=0x01;                                      //使能定时器0溢出中断
 28a:	87 bf       	out	0x37, r24	; 55

int main(void)
{
  system_init();                             //系统初始化
  timer0_init();                             //定时器0初始化，完成定时器相关配置 
  time_1s_count=0;                           //计数值清0
 28c:	10 92 10 01 	sts	0x0110, r1
  SREG|=0x80;                                //开启全局中断
 290:	8f b7       	in	r24, 0x3f	; 63
 292:	80 68       	ori	r24, 0x80	; 128
 294:	8f bf       	out	0x3f, r24	; 63
  while(1)
  {

	   Display_Timer0();             //显示计数值
 296:	0e 94 95 00 	call	0x12a	; 0x12a <Display_Timer0>
 29a:	fd cf       	rjmp	.-6      	; 0x296 <main+0x26>

0000029c <__udivmodqi4>:
 29c:	99 1b       	sub	r25, r25
 29e:	79 e0       	ldi	r23, 0x09	; 9
 2a0:	04 c0       	rjmp	.+8      	; 0x2aa <__udivmodqi4_ep>

000002a2 <__udivmodqi4_loop>:
 2a2:	99 1f       	adc	r25, r25
 2a4:	96 17       	cp	r25, r22
 2a6:	08 f0       	brcs	.+2      	; 0x2aa <__udivmodqi4_ep>
 2a8:	96 1b       	sub	r25, r22

000002aa <__udivmodqi4_ep>:
 2aa:	88 1f       	adc	r24, r24
 2ac:	7a 95       	dec	r23
 2ae:	c9 f7       	brne	.-14     	; 0x2a2 <__udivmodqi4_loop>
 2b0:	80 95       	com	r24
 2b2:	08 95       	ret

000002b4 <__udivmodhi4>:
 2b4:	aa 1b       	sub	r26, r26
 2b6:	bb 1b       	sub	r27, r27
 2b8:	51 e1       	ldi	r21, 0x11	; 17
 2ba:	07 c0       	rjmp	.+14     	; 0x2ca <__udivmodhi4_ep>

000002bc <__udivmodhi4_loop>:
 2bc:	aa 1f       	adc	r26, r26
 2be:	bb 1f       	adc	r27, r27
 2c0:	a6 17       	cp	r26, r22
 2c2:	b7 07       	cpc	r27, r23
 2c4:	10 f0       	brcs	.+4      	; 0x2ca <__udivmodhi4_ep>
 2c6:	a6 1b       	sub	r26, r22
 2c8:	b7 0b       	sbc	r27, r23

000002ca <__udivmodhi4_ep>:
 2ca:	88 1f       	adc	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	5a 95       	dec	r21
 2d0:	a9 f7       	brne	.-22     	; 0x2bc <__udivmodhi4_loop>
 2d2:	80 95       	com	r24
 2d4:	90 95       	com	r25
 2d6:	bc 01       	movw	r22, r24
 2d8:	cd 01       	movw	r24, r26
 2da:	08 95       	ret

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
