
DAC5615.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000017c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800120  00800120  00000230  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000055  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000024f  00000000  00000000  000002a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000143  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e0  00000000  00000000  00000637  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000818  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000122  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000063  00000000  00000000  0000097a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000009dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 32       	cpi	r26, 0x22	; 34
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 99 00 	call	0x132	; 0x132 <main>
  c6:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <system_init>:
//			初始化子程序
//*************************************************************************
void system_init()
{

	PORTB = 0xFF;				        //电平设置
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	88 bb       	out	0x18, r24	; 24
	DDRB = 0xFF;				        //方向输出
  d2:	87 bb       	out	0x17, r24	; 23

}
  d4:	08 95       	ret

000000d6 <dac_ser>:
//*************************************************************************
//			DAC转换程序
//*************************************************************************
void dac_ser(uint data)
{
  d6:	9c 01       	movw	r18, r24
  uchar i;
  uint da_data2;

  cs0;                       //片选DAC，置低有效
  d8:	e8 e3       	ldi	r30, 0x38	; 56
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	8e 7f       	andi	r24, 0xFE	; 254
  e0:	80 83       	st	Z, r24
  sclk0;        
  e2:	80 81       	ld	r24, Z
  e4:	8d 7f       	andi	r24, 0xFD	; 253
  e6:	80 83       	st	Z, r24
  e8:	40 e0       	ldi	r20, 0x00	; 0

  for (i=0;i<16;i++)         //尽管是10位DAC，但是其寄存器为16位，只有10位数据有效
  {
   da_data2=data&0x8000;    //逐位取出
   if(da_data2>>15)
  ea:	c9 01       	movw	r24, r18
  ec:	80 70       	andi	r24, 0x00	; 0
  ee:	90 78       	andi	r25, 0x80	; 128
  f0:	99 23       	and	r25, r25
  f2:	24 f4       	brge	.+8      	; 0xfc <dac_ser+0x26>
   din1;
  f4:	80 81       	ld	r24, Z
  f6:	84 60       	ori	r24, 0x04	; 4
  f8:	80 83       	st	Z, r24
  fa:	03 c0       	rjmp	.+6      	; 0x102 <dac_ser+0x2c>
   else
   din0;
  fc:	80 81       	ld	r24, Z
  fe:	8b 7f       	andi	r24, 0xFB	; 251
 100:	80 83       	st	Z, r24
   sclk1;                  //上升沿数据锁存
 102:	80 81       	ld	r24, Z
 104:	82 60       	ori	r24, 0x02	; 2
 106:	80 83       	st	Z, r24
   data<<=1;                //移位
   sclk0;
 108:	80 81       	ld	r24, Z
 10a:	8d 7f       	andi	r24, 0xFD	; 253
 10c:	80 83       	st	Z, r24
  uint da_data2;

  cs0;                       //片选DAC，置低有效
  sclk0;        

  for (i=0;i<16;i++)         //尽管是10位DAC，但是其寄存器为16位，只有10位数据有效
 10e:	4f 5f       	subi	r20, 0xFF	; 255
 110:	40 31       	cpi	r20, 0x10	; 16
 112:	19 f0       	breq	.+6      	; 0x11a <dac_ser+0x44>
   if(da_data2>>15)
   din1;
   else
   din0;
   sclk1;                  //上升沿数据锁存
   data<<=1;                //移位
 114:	22 0f       	add	r18, r18
 116:	33 1f       	adc	r19, r19
 118:	e8 cf       	rjmp	.-48     	; 0xea <dac_ser+0x14>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 11a:	88 e1       	ldi	r24, 0x18	; 24
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <dac_ser+0x46>
   sclk0;
   
  }
  delay_us(10);
   cs1;
 120:	e8 e3       	ldi	r30, 0x38	; 56
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	81 60       	ori	r24, 0x01	; 1
 128:	80 83       	st	Z, r24
   sclk0;
 12a:	80 81       	ld	r24, Z
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	80 83       	st	Z, r24

}
 130:	08 95       	ret

00000132 <main>:

//*************************************************************************
//			主程序
//*************************************************************************
int main(void)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
  system_init();              //系统初始化
 136:	0e 94 67 00 	call	0xce	; 0xce <system_init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 13a:	c6 e6       	ldi	r28, 0x66	; 102
 13c:	de e0       	ldi	r29, 0x0E	; 14
  while(1)
  {
   for(da_data=0x000;da_data<0x3ff;da_data++)    //连续转换，输出电压从小到大
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
   {
     da_data=da_data<<2;
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	90 93 21 01 	sts	0x0121, r25
 14e:	80 93 20 01 	sts	0x0120, r24
     dac_ser(da_data);
 152:	0e 94 6b 00 	call	0xd6	; 0xd6 <dac_ser>
	 da_data=da_data>>2;
 156:	80 91 20 01 	lds	r24, 0x0120
 15a:	90 91 21 01 	lds	r25, 0x0121
 15e:	96 95       	lsr	r25
 160:	87 95       	ror	r24
 162:	96 95       	lsr	r25
 164:	87 95       	ror	r24
 166:	fe 01       	movw	r30, r28
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <main+0x36>
int main(void)
{
  system_init();              //系统初始化
  while(1)
  {
   for(da_data=0x000;da_data<0x3ff;da_data++)    //连续转换，输出电压从小到大
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	23 e0       	ldi	r18, 0x03	; 3
 170:	8f 3f       	cpi	r24, 0xFF	; 255
 172:	92 07       	cpc	r25, r18
 174:	20 f7       	brcc	.-56     	; 0x13e <main+0xc>
 176:	e5 cf       	rjmp	.-54     	; 0x142 <main+0x10>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
