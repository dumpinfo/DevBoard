
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000035e  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800114  00800114  00000406  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000ce  00000000  00000000  00000426  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000036d  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000016a  00000000  00000000  00000861  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000385  00000000  00000000  000009cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000167  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ec  00000000  00000000  00000f47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001033  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_30>
  7c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_31>
  80:	0c 94 11 01 	jmp	0x222	; 0x222 <__vector_32>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e5       	ldi	r30, 0x5E	; 94
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 31       	cpi	r26, 0x19	; 25
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 75 01 	call	0x2ea	; 0x2ea <main>
  c6:	0c 94 ad 01 	jmp	0x35a	; 0x35a <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <system_init>:
//			IO端口初始化
//***********************************************************************

void system_init()
{
    Data_IO=0xFF;             //数据口为输出
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8b bb       	out	0x1b, r24	; 27
    Data_DDR=0xFF;
  d2:	8a bb       	out	0x1a, r24	; 26

    PORTD=0xFF;               //74HC573的控制口，设置为输出
  d4:	82 bb       	out	0x12, r24	; 18
    DDRD=0xFF;
  d6:	81 bb       	out	0x11, r24	; 17
}
  d8:	08 95       	ret

000000da <Display_Uart>:
//*************************************************************************
//			74HC573控制数码管动态扫描显示函数，显示采集到的温度
//*************************************************************************

void Display_Uart(uint data_b,uint data_s,uint data_g)
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
	 uchar i,j;
	 system_init();
  de:	0e 94 67 00 	call	0xce	; 0xce <system_init>
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	91 e0       	ldi	r25, 0x01	; 1
     j=0x01;                    //此数据用来控制位选
 for(i=0;i<5;i++)               //用后3位数码管来显示
  {
     D_LE1;                     
  e6:	a2 e3       	ldi	r26, 0x32	; 50
  e8:	b0 e0       	ldi	r27, 0x00	; 0
     W_LE1;                     
     Data_IO=~j;                
  ea:	cb e3       	ldi	r28, 0x3B	; 59
  ec:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ee:	43 e3       	ldi	r20, 0x33	; 51
  f0:	57 e0       	ldi	r21, 0x07	; 7
	 uchar i,j;
	 system_init();
     j=0x01;                    //此数据用来控制位选
 for(i=0;i<5;i++)               //用后3位数码管来显示
  {
     D_LE1;                     
  f2:	8c 91       	ld	r24, X
  f4:	80 61       	ori	r24, 0x10	; 16
  f6:	8c 93       	st	X, r24
     W_LE1;                     
  f8:	8c 91       	ld	r24, X
  fa:	80 62       	ori	r24, 0x20	; 32
  fc:	8c 93       	st	X, r24
     Data_IO=~j;                
  fe:	89 2f       	mov	r24, r25
 100:	80 95       	com	r24
 102:	88 83       	st	Y, r24
     W_LE0;                      
 104:	8c 91       	ld	r24, X
 106:	8f 7d       	andi	r24, 0xDF	; 223
 108:	8c 93       	st	X, r24
	 j=(j<<1);
 10a:	99 0f       	add	r25, r25
     Data_IO=0x00;           
 10c:	18 82       	st	Y, r1
     D_LE0;                      
 10e:	8c 91       	ld	r24, X
 110:	8f 7e       	andi	r24, 0xEF	; 239
 112:	8c 93       	st	X, r24
 114:	fa 01       	movw	r30, r20
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <Display_Uart+0x3c>
void Display_Uart(uint data_b,uint data_s,uint data_g)
{
	 uchar i,j;
	 system_init();
     j=0x01;                    //此数据用来控制位选
 for(i=0;i<5;i++)               //用后3位数码管来显示
 11a:	2f 5f       	subi	r18, 0xFF	; 255
 11c:	25 30       	cpi	r18, 0x05	; 5
 11e:	49 f7       	brne	.-46     	; 0xf2 <Display_Uart+0x18>
	 j=(j<<1);
     Data_IO=0x00;           
     D_LE0;                      
     delay_ms(1);                
  }
     D_LE1;                    
 120:	a2 e3       	ldi	r26, 0x32	; 50
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	8c 91       	ld	r24, X
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8c 93       	st	X, r24
     W_LE1;                    
 12a:	8c 91       	ld	r24, X
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	8c 93       	st	X, r24
     Data_IO=~j;               
 130:	89 2f       	mov	r24, r25
 132:	80 95       	com	r24
 134:	4b e3       	ldi	r20, 0x3B	; 59
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	fa 01       	movw	r30, r20
 13a:	80 83       	st	Z, r24
     W_LE0;                    
 13c:	8c 91       	ld	r24, X
 13e:	8f 7d       	andi	r24, 0xDF	; 223
 140:	8c 93       	st	X, r24
	 j=(j<<1);
 142:	99 0f       	add	r25, r25
     Data_IO=table[A1];         
 144:	80 91 14 01 	lds	r24, 0x0114
 148:	24 e0       	ldi	r18, 0x04	; 4
 14a:	31 e0       	ldi	r19, 0x01	; 1
 14c:	f9 01       	movw	r30, r18
 14e:	e8 0f       	add	r30, r24
 150:	f1 1d       	adc	r31, r1
 152:	80 81       	ld	r24, Z
 154:	fa 01       	movw	r30, r20
 156:	80 83       	st	Z, r24
     D_LE0;                    
 158:	8c 91       	ld	r24, X
 15a:	8f 7e       	andi	r24, 0xEF	; 239
 15c:	8c 93       	st	X, r24
 15e:	63 e3       	ldi	r22, 0x33	; 51
 160:	77 e0       	ldi	r23, 0x07	; 7
 162:	fb 01       	movw	r30, r22
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <Display_Uart+0x8a>
     delay_ms(1);              

     D_LE1;                     
 168:	8c 91       	ld	r24, X
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	8c 93       	st	X, r24
     W_LE1;                     
 16e:	8c 91       	ld	r24, X
 170:	80 62       	ori	r24, 0x20	; 32
 172:	8c 93       	st	X, r24
     Data_IO=~j;                
 174:	89 2f       	mov	r24, r25
 176:	80 95       	com	r24
 178:	fa 01       	movw	r30, r20
 17a:	80 83       	st	Z, r24
     W_LE0;                      
 17c:	8c 91       	ld	r24, X
 17e:	8f 7d       	andi	r24, 0xDF	; 223
 180:	8c 93       	st	X, r24
	 j=(j<<1);
     Data_IO=table[A2];             
 182:	80 91 15 01 	lds	r24, 0x0115
 186:	f9 01       	movw	r30, r18
 188:	e8 0f       	add	r30, r24
 18a:	f1 1d       	adc	r31, r1
 18c:	80 81       	ld	r24, Z
 18e:	fa 01       	movw	r30, r20
 190:	80 83       	st	Z, r24
     D_LE0;                      
 192:	8c 91       	ld	r24, X
 194:	8f 7e       	andi	r24, 0xEF	; 239
 196:	8c 93       	st	X, r24
 198:	fb 01       	movw	r30, r22
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <Display_Uart+0xc0>
     delay_ms(1);   
	 
	 D_LE1;                     
 19e:	8c 91       	ld	r24, X
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	8c 93       	st	X, r24
     W_LE1;                     
 1a4:	8c 91       	ld	r24, X
 1a6:	80 62       	ori	r24, 0x20	; 32
 1a8:	8c 93       	st	X, r24
     Data_IO=~j;                
 1aa:	99 0f       	add	r25, r25
 1ac:	90 95       	com	r25
 1ae:	fa 01       	movw	r30, r20
 1b0:	90 83       	st	Z, r25
     W_LE0;                      
 1b2:	8c 91       	ld	r24, X
 1b4:	8f 7d       	andi	r24, 0xDF	; 223
 1b6:	8c 93       	st	X, r24
	 j=(j<<1);
     Data_IO=table[A3];             
 1b8:	80 91 16 01 	lds	r24, 0x0116
 1bc:	28 0f       	add	r18, r24
 1be:	31 1d       	adc	r19, r1
 1c0:	f9 01       	movw	r30, r18
 1c2:	80 81       	ld	r24, Z
 1c4:	fa 01       	movw	r30, r20
 1c6:	80 83       	st	Z, r24
     D_LE0;                      
 1c8:	8c 91       	ld	r24, X
 1ca:	8f 7e       	andi	r24, 0xEF	; 239
 1cc:	8c 93       	st	X, r24
 1ce:	cb 01       	movw	r24, r22
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <Display_Uart+0xf6>
     delay_ms(1);                                      

}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <usart_init>:


void usart_init()
{
  UCSR1A=0x00;                                 //单倍速模式
 1da:	10 92 9b 00 	sts	0x009B, r1
  UCSR1B=0xF8;                                 //接收中断和发送中断允许                               
 1de:	88 ef       	ldi	r24, 0xF8	; 248
 1e0:	80 93 9a 00 	sts	0x009A, r24
  UCSR1C=(1<<UCSZ11)|(1<<UCSZ10);              //写UCSRC寄存器,异步通信无校验，8位数据1位停止位
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	80 93 9d 00 	sts	0x009D, r24
  UBRR1H=baud_h;                               //写波特率的值
 1ea:	10 92 98 00 	sts	0x0098, r1
  UBRR1L=baud_l; 
 1ee:	8f e2       	ldi	r24, 0x2F	; 47
 1f0:	80 93 99 00 	sts	0x0099, r24
}
 1f4:	08 95       	ret

000001f6 <data_do>:

//*************************************************************************
//		数据处理函数
//*************************************************************************
 void data_do(uchar temp_d)
 {
 1f6:	28 2f       	mov	r18, r24
     uchar A2t;
     A1=temp_d/100;                       //分出百，十，和个位
 1f8:	64 e6       	ldi	r22, 0x64	; 100
 1fa:	0e 94 a1 01 	call	0x342	; 0x342 <__udivmodqi4>
 1fe:	80 93 14 01 	sts	0x0114, r24
     A2t=temp_d%100;
 202:	82 2f       	mov	r24, r18
 204:	0e 94 a1 01 	call	0x342	; 0x342 <__udivmodqi4>
 208:	29 2f       	mov	r18, r25
     A2=A2t/10;
 20a:	89 2f       	mov	r24, r25
 20c:	6a e0       	ldi	r22, 0x0A	; 10
 20e:	0e 94 a1 01 	call	0x342	; 0x342 <__udivmodqi4>
 212:	80 93 15 01 	sts	0x0115, r24
     A3=A2t%10;
 216:	82 2f       	mov	r24, r18
 218:	0e 94 a1 01 	call	0x342	; 0x342 <__udivmodqi4>
 21c:	90 93 16 01 	sts	0x0116, r25
}
 220:	08 95       	ret

00000222 <__vector_32>:
//*************************************************************************
//		串口相关中断服务子程序
//*************************************************************************
                                     //数据发送结束中断向量
SIGNAL(SIG_USART1_TRANS)             //中断服务程序
{
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	98 e4       	ldi	r25, 0x48	; 72
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <__vector_32+0x12>
   delay_ms(10);                   //相关操作
}
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <__vector_30>:

                                   //数据接收结束中断向量
SIGNAL(SIG_USART1_RECV)            //中断服务程序
{
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	0b b6       	in	r0, 0x3b	; 59
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	2f 93       	push	r18
 256:	3f 93       	push	r19
 258:	4f 93       	push	r20
 25a:	5f 93       	push	r21
 25c:	6f 93       	push	r22
 25e:	7f 93       	push	r23
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
    usart_rx_data=UDR1;            //将接收到的数据取出
 26c:	80 91 9c 00 	lds	r24, 0x009C
 270:	80 93 18 01 	sts	0x0118, r24
    data_do(usart_rx_data);                   //数据处理，得到个位十位百位
 274:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <data_do>
	
}
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0b be       	out	0x3b, r0	; 59
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <__vector_31>:
                                  //数据寄存器空中断向量
SIGNAL(SIG_USART1_DATA)           //中断服务程序
{
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
                            
   UDR1=usart_tx_data;           //发送数据到数据寄存器
 2ac:	80 91 17 01 	lds	r24, 0x0117
 2b0:	80 93 9c 00 	sts	0x009C, r24
   tx_count--;
 2b4:	80 91 00 01 	lds	r24, 0x0100
 2b8:	90 91 01 01 	lds	r25, 0x0101
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	90 93 01 01 	sts	0x0101, r25
 2c2:	80 93 00 01 	sts	0x0100, r24
   if(tx_count==0x00)
 2c6:	89 2b       	or	r24, r25
 2c8:	49 f4       	brne	.+18     	; 0x2dc <__vector_31+0x3e>
   {
   tx_flag=0x01;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	90 93 03 01 	sts	0x0103, r25
 2d2:	80 93 02 01 	sts	0x0102, r24
   UCSR1B=0xF0;                 //禁止发送
 2d6:	80 ef       	ldi	r24, 0xF0	; 240
 2d8:	80 93 9a 00 	sts	0x009A, r24
   }
}
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <main>:

//*************************************************************************
//			主程序
//*************************************************************************
void main()
{
 2ea:	cf 92       	push	r12
 2ec:	df 92       	push	r13
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
  system_init();                             //系统初始化
 2fa:	0e 94 67 00 	call	0xce	; 0xce <system_init>
  usart_init();                              //usart串口初始化配置
 2fe:	0e 94 ed 00 	call	0x1da	; 0x1da <usart_init>
  usart_tx_data=0xff; 
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	80 93 17 01 	sts	0x0117, r24
  SREG|=0x80;                                //开启全局中断
 308:	ef e5       	ldi	r30, 0x5F	; 95
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	80 68       	ori	r24, 0x80	; 128
 310:	80 83       	st	Z, r24
  while(1)
  {  
     SREG=0x00;                               //关中断，PD口做IO口用，才能正常显示数码管
	 Display_Uart(A1,A2,A3);                  //显示接收到的数据   
 312:	f0 90 14 01 	lds	r15, 0x0114
 316:	cc 24       	eor	r12, r12
 318:	00 91 15 01 	lds	r16, 0x0115
 31c:	dd 24       	eor	r13, r13
 31e:	10 91 16 01 	lds	r17, 0x0116
 322:	ee 24       	eor	r14, r14
  usart_init();                              //usart串口初始化配置
  usart_tx_data=0xff; 
  SREG|=0x80;                                //开启全局中断
  while(1)
  {  
     SREG=0x00;                               //关中断，PD口做IO口用，才能正常显示数码管
 324:	cf e5       	ldi	r28, 0x5F	; 95
 326:	d0 e0       	ldi	r29, 0x00	; 0
 328:	18 82       	st	Y, r1
	 Display_Uart(A1,A2,A3);                  //显示接收到的数据   
 32a:	8f 2d       	mov	r24, r15
 32c:	9c 2d       	mov	r25, r12
 32e:	60 2f       	mov	r22, r16
 330:	7d 2d       	mov	r23, r13
 332:	41 2f       	mov	r20, r17
 334:	5e 2d       	mov	r21, r14
 336:	0e 94 6d 00 	call	0xda	; 0xda <Display_Uart>
	 SREG|=0x80;                              //开中断，用于下次接收中断
 33a:	88 81       	ld	r24, Y
 33c:	80 68       	ori	r24, 0x80	; 128
 33e:	88 83       	st	Y, r24
 340:	f3 cf       	rjmp	.-26     	; 0x328 <main+0x3e>

00000342 <__udivmodqi4>:
 342:	99 1b       	sub	r25, r25
 344:	79 e0       	ldi	r23, 0x09	; 9
 346:	04 c0       	rjmp	.+8      	; 0x350 <__udivmodqi4_ep>

00000348 <__udivmodqi4_loop>:
 348:	99 1f       	adc	r25, r25
 34a:	96 17       	cp	r25, r22
 34c:	08 f0       	brcs	.+2      	; 0x350 <__udivmodqi4_ep>
 34e:	96 1b       	sub	r25, r22

00000350 <__udivmodqi4_ep>:
 350:	88 1f       	adc	r24, r24
 352:	7a 95       	dec	r23
 354:	c9 f7       	brne	.-14     	; 0x348 <__udivmodqi4_loop>
 356:	80 95       	com	r24
 358:	08 95       	ret

0000035a <_exit>:
 35a:	f8 94       	cli

0000035c <__stop_program>:
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stop_program>
