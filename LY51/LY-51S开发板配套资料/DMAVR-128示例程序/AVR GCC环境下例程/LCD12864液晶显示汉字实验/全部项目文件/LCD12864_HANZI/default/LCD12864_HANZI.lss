
LCD12864_HANZI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000310  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000310  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000088  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006a3  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016f  00000000  00000000  00000b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004b7  00000000  00000000  00000c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  0000113c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000132  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001f1  00000000  00000000  000012fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e1       	ldi	r30, 0x10	; 16
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 34       	cpi	r26, 0x44	; 68
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <main>
  b6:	0c 94 86 01 	jmp	0x30c	; 0x30c <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <system_init>:
//			初始化子程序
//*************************************************************************
void system_init()
{

	Data_IO = 0xFF;				        //电平设置
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	8b bb       	out	0x1b, r24	; 27
	Data_DDR = 0xFF;				        //方向输出
  c2:	8a bb       	out	0x1a, r24	; 26
	PORTF = 0xFF;                       //电平设置
  c4:	80 93 62 00 	sts	0x0062, r24
	DDRF = 0xFF;                        //方向输出
  c8:	80 93 61 00 	sts	0x0061, r24
    PORTD=0xFF;
  cc:	82 bb       	out	0x12, r24	; 18
	DDRD=0xFF;
  ce:	81 bb       	out	0x11, r24	; 17
	D_LE1;                             //关掉数码管，以免显示乱码                   
  d0:	94 9a       	sbi	0x12, 4	; 18
    W_LE1;                     
  d2:	95 9a       	sbi	0x12, 5	; 18
    Data_IO=0xFF;                      //关数码管            
  d4:	8b bb       	out	0x1b, r24	; 27
    W_LE0; 
  d6:	95 98       	cbi	0x12, 5	; 18
}
  d8:	08 95       	ret

000000da <LCD_write_com>:
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
  da:	e2 e6       	ldi	r30, 0x62	; 98
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	90 81       	ld	r25, Z
  e0:	9d 7f       	andi	r25, 0xFD	; 253
  e2:	90 83       	st	Z, r25
	RW_CLR;
  e4:	90 81       	ld	r25, Z
  e6:	9b 7f       	andi	r25, 0xFB	; 251
  e8:	90 83       	st	Z, r25
	EN_SET;
  ea:	90 81       	ld	r25, Z
  ec:	98 60       	ori	r25, 0x08	; 8
  ee:	90 83       	st	Z, r25
	Data_IO = com;
  f0:	8b bb       	out	0x1b, r24	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	94 e2       	ldi	r25, 0x24	; 36
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_write_com+0x1c>
	delay_ms(5);
	EN_CLR;
  fa:	80 81       	ld	r24, Z
  fc:	87 7f       	andi	r24, 0xF7	; 247
  fe:	80 83       	st	Z, r24
}
 100:	08 95       	ret

00000102 <LCD_write_data>:
//	显示屏数据写入函数
//***********************************************************************

void LCD_write_data(unsigned char data) 
{
	RS_SET;
 102:	e2 e6       	ldi	r30, 0x62	; 98
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	90 81       	ld	r25, Z
 108:	92 60       	ori	r25, 0x02	; 2
 10a:	90 83       	st	Z, r25
	RW_CLR;
 10c:	90 81       	ld	r25, Z
 10e:	9b 7f       	andi	r25, 0xFB	; 251
 110:	90 83       	st	Z, r25
	EN_SET;
 112:	90 81       	ld	r25, Z
 114:	98 60       	ori	r25, 0x08	; 8
 116:	90 83       	st	Z, r25
	Data_IO = data;
 118:	8b bb       	out	0x1b, r24	; 27
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	94 e2       	ldi	r25, 0x24	; 36
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_write_data+0x1c>
	delay_ms(5);
	EN_CLR;
 122:	80 81       	ld	r24, Z
 124:	87 7f       	andi	r24, 0xF7	; 247
 126:	80 83       	st	Z, r24
}
 128:	08 95       	ret

0000012a <LCD_clear>:
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 12a:	e2 e6       	ldi	r30, 0x62	; 98
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	80 83       	st	Z, r24
	RW_CLR;
 134:	80 81       	ld	r24, Z
 136:	8b 7f       	andi	r24, 0xFB	; 251
 138:	80 83       	st	Z, r24
	EN_SET;
 13a:	80 81       	ld	r24, Z
 13c:	88 60       	ori	r24, 0x08	; 8
 13e:	80 83       	st	Z, r24
	Data_IO = com;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	8b bb       	out	0x1b, r24	; 27
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	34 e2       	ldi	r19, 0x24	; 36
 148:	c9 01       	movw	r24, r18
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_clear+0x20>
	delay_ms(5);
	EN_CLR;
 14e:	80 81       	ld	r24, Z
 150:	87 7f       	andi	r24, 0xF7	; 247
 152:	80 83       	st	Z, r24
 154:	c9 01       	movw	r24, r18
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_clear+0x2c>

void LCD_clear(void) 
{
	LCD_write_com(0x01);
	delay_ms(5);
}
 15a:	08 95       	ret

0000015c <DisplayCgrom>:
//函数名称：DisplayCgrom(uchar hz)显示CGROM里的汉字
//入口参数：无
//返回参数：无
//***********************************************************************
void DisplayCgrom(uchar addr,uchar *hz)
{
 15c:	fb 01       	movw	r30, r22
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 15e:	90 91 62 00 	lds	r25, 0x0062
 162:	9d 7f       	andi	r25, 0xFD	; 253
 164:	90 93 62 00 	sts	0x0062, r25
	RW_CLR;
 168:	90 91 62 00 	lds	r25, 0x0062
 16c:	9b 7f       	andi	r25, 0xFB	; 251
 16e:	90 93 62 00 	sts	0x0062, r25
	EN_SET;
 172:	90 91 62 00 	lds	r25, 0x0062
 176:	98 60       	ori	r25, 0x08	; 8
 178:	90 93 62 00 	sts	0x0062, r25
	Data_IO = com;
 17c:	8b bb       	out	0x1b, r24	; 27
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	34 e2       	ldi	r19, 0x24	; 36
 182:	c9 01       	movw	r24, r18
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <DisplayCgrom+0x28>
	delay_ms(5);
	EN_CLR;
 188:	80 91 62 00 	lds	r24, 0x0062
 18c:	87 7f       	andi	r24, 0xF7	; 247
 18e:	80 93 62 00 	sts	0x0062, r24
 192:	19 c0       	rjmp	.+50     	; 0x1c6 <DisplayCgrom+0x6a>
//	显示屏数据写入函数
//***********************************************************************

void LCD_write_data(unsigned char data) 
{
	RS_SET;
 194:	80 91 62 00 	lds	r24, 0x0062
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	80 93 62 00 	sts	0x0062, r24
	RW_CLR;
 19e:	80 91 62 00 	lds	r24, 0x0062
 1a2:	8b 7f       	andi	r24, 0xFB	; 251
 1a4:	80 93 62 00 	sts	0x0062, r24
	EN_SET;
 1a8:	80 91 62 00 	lds	r24, 0x0062
 1ac:	88 60       	ori	r24, 0x08	; 8
 1ae:	80 93 62 00 	sts	0x0062, r24
	Data_IO = data;
 1b2:	9b bb       	out	0x1b, r25	; 27
 1b4:	c9 01       	movw	r24, r18
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <DisplayCgrom+0x5a>
	delay_ms(5);
	EN_CLR;
 1ba:	80 91 62 00 	lds	r24, 0x0062
 1be:	87 7f       	andi	r24, 0xF7	; 247
 1c0:	80 93 62 00 	sts	0x0062, r24
	LCD_write_com(addr);
    delay_ms(5);
	while(*hz != '\0')
	{
		LCD_write_data(*hz);
		hz++;
 1c4:	31 96       	adiw	r30, 0x01	; 1
 1c6:	c9 01       	movw	r24, r18
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <DisplayCgrom+0x6c>
//***********************************************************************
void DisplayCgrom(uchar addr,uchar *hz)
{
	LCD_write_com(addr);
    delay_ms(5);
	while(*hz != '\0')
 1cc:	90 81       	ld	r25, Z
 1ce:	99 23       	and	r25, r25
 1d0:	09 f7       	brne	.-62     	; 0x194 <DisplayCgrom+0x38>
		LCD_write_data(*hz);
		hz++;
        delay_ms(5);
	}

} 
 1d2:	08 95       	ret

000001d4 <Display>:
//入口参数：无
//返回参数：无
//****************************************************************
void Display(void)
{
	DisplayCgrom(0x80,"欣世纪电子欢迎你");
 1d4:	80 e8       	ldi	r24, 0x80	; 128
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	71 e0       	ldi	r23, 0x01	; 1
 1da:	0e 94 ae 00 	call	0x15c	; 0x15c <DisplayCgrom>
	DisplayCgrom(0x88,"旺:jingyehanxing");
 1de:	88 e8       	ldi	r24, 0x88	; 136
 1e0:	61 e1       	ldi	r22, 0x11	; 17
 1e2:	71 e0       	ldi	r23, 0x01	; 1
 1e4:	0e 94 ae 00 	call	0x15c	; 0x15c <DisplayCgrom>
	DisplayCgrom(0x90,"www.avrgcc.com  ");
 1e8:	80 e9       	ldi	r24, 0x90	; 144
 1ea:	62 e2       	ldi	r22, 0x22	; 34
 1ec:	71 e0       	ldi	r23, 0x01	; 1
 1ee:	0e 94 ae 00 	call	0x15c	; 0x15c <DisplayCgrom>
	DisplayCgrom(0x98,"电话:13946060471");
 1f2:	88 e9       	ldi	r24, 0x98	; 152
 1f4:	63 e3       	ldi	r22, 0x33	; 51
 1f6:	71 e0       	ldi	r23, 0x01	; 1
 1f8:	0e 94 ae 00 	call	0x15c	; 0x15c <DisplayCgrom>

}
 1fc:	08 95       	ret

000001fe <LCD_init>:
//	显示屏初始化函数
//***********************************************************************

void LCD_init(void) 
{
	DDRA = 0xFF;				        //I/O口方向设置
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	8a bb       	out	0x1a, r24	; 26
	DDRA |= (1 << PA5) | (1 << PA6) | (1 << PA7);
 202:	8a b3       	in	r24, 0x1a	; 26
 204:	80 6e       	ori	r24, 0xE0	; 224
 206:	8a bb       	out	0x1a, r24	; 26
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 208:	e2 e6       	ldi	r30, 0x62	; 98
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	8d 7f       	andi	r24, 0xFD	; 253
 210:	80 83       	st	Z, r24
	RW_CLR;
 212:	80 81       	ld	r24, Z
 214:	8b 7f       	andi	r24, 0xFB	; 251
 216:	80 83       	st	Z, r24
	EN_SET;
 218:	80 81       	ld	r24, Z
 21a:	88 60       	ori	r24, 0x08	; 8
 21c:	80 83       	st	Z, r24
	Data_IO = com;
 21e:	90 e3       	ldi	r25, 0x30	; 48
 220:	9b bb       	out	0x1b, r25	; 27
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	34 e2       	ldi	r19, 0x24	; 36
 226:	d9 01       	movw	r26, r18
 228:	11 97       	sbiw	r26, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_init+0x2a>
	delay_ms(5);
	EN_CLR;
 22c:	80 81       	ld	r24, Z
 22e:	87 7f       	andi	r24, 0xF7	; 247
 230:	80 83       	st	Z, r24
 232:	d9 01       	movw	r26, r18
 234:	11 97       	sbiw	r26, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <LCD_init+0x36>
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 238:	80 81       	ld	r24, Z
 23a:	8d 7f       	andi	r24, 0xFD	; 253
 23c:	80 83       	st	Z, r24
	RW_CLR;
 23e:	80 81       	ld	r24, Z
 240:	8b 7f       	andi	r24, 0xFB	; 251
 242:	80 83       	st	Z, r24
	EN_SET;
 244:	80 81       	ld	r24, Z
 246:	88 60       	ori	r24, 0x08	; 8
 248:	80 83       	st	Z, r24
	Data_IO = com;
 24a:	9b bb       	out	0x1b, r25	; 27
 24c:	c9 01       	movw	r24, r18
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <LCD_init+0x50>
	delay_ms(5);
	EN_CLR;
 252:	80 81       	ld	r24, Z
 254:	87 7f       	andi	r24, 0xF7	; 247
 256:	80 83       	st	Z, r24
 258:	c9 01       	movw	r24, r18
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <LCD_init+0x5c>
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 25e:	80 81       	ld	r24, Z
 260:	8d 7f       	andi	r24, 0xFD	; 253
 262:	80 83       	st	Z, r24
	RW_CLR;
 264:	80 81       	ld	r24, Z
 266:	8b 7f       	andi	r24, 0xFB	; 251
 268:	80 83       	st	Z, r24
	EN_SET;
 26a:	80 81       	ld	r24, Z
 26c:	88 60       	ori	r24, 0x08	; 8
 26e:	80 83       	st	Z, r24
	Data_IO = com;
 270:	8c e0       	ldi	r24, 0x0C	; 12
 272:	8b bb       	out	0x1b, r24	; 27
 274:	c9 01       	movw	r24, r18
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD_init+0x78>
	delay_ms(5);
	EN_CLR;
 27a:	80 81       	ld	r24, Z
 27c:	87 7f       	andi	r24, 0xF7	; 247
 27e:	80 83       	st	Z, r24
 280:	c9 01       	movw	r24, r18
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <LCD_init+0x84>
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 286:	80 81       	ld	r24, Z
 288:	8d 7f       	andi	r24, 0xFD	; 253
 28a:	80 83       	st	Z, r24
	RW_CLR;
 28c:	80 81       	ld	r24, Z
 28e:	8b 7f       	andi	r24, 0xFB	; 251
 290:	80 83       	st	Z, r24
	EN_SET;
 292:	80 81       	ld	r24, Z
 294:	88 60       	ori	r24, 0x08	; 8
 296:	80 83       	st	Z, r24
	Data_IO = com;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	8b bb       	out	0x1b, r24	; 27
 29c:	c9 01       	movw	r24, r18
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCD_init+0xa0>
	delay_ms(5);
	EN_CLR;
 2a2:	80 81       	ld	r24, Z
 2a4:	87 7f       	andi	r24, 0xF7	; 247
 2a6:	80 83       	st	Z, r24
 2a8:	c9 01       	movw	r24, r18
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCD_init+0xac>
	delay_ms(5);
    LCD_write_com(DISPLAY_ON);			//显示开
	delay_ms(5);
    LCD_write_com(CLEAR_SCREEN);			//清屏
	delay_ms(5);
}
 2ae:	08 95       	ret

000002b0 <main>:
//			主程序
//***********************************************************************
void main(void)
{

    system_init();                                //系统初始化，设置IO口属性
 2b0:	0e 94 5f 00 	call	0xbe	; 0xbe <system_init>
 2b4:	88 ee       	ldi	r24, 0xE8	; 232
 2b6:	93 e0       	ldi	r25, 0x03	; 3
 2b8:	28 eb       	ldi	r18, 0xB8	; 184
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	f9 01       	movw	r30, r18
 2be:	31 97       	sbiw	r30, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c4:	d9 f7       	brne	.-10     	; 0x2bc <main+0xc>
	delay_ms(100);                                //延时100ms
	LCD_init();                                   //液晶参数初始化设置
 2c6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_init>
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 2ca:	80 91 62 00 	lds	r24, 0x0062
 2ce:	8d 7f       	andi	r24, 0xFD	; 253
 2d0:	80 93 62 00 	sts	0x0062, r24
	RW_CLR;
 2d4:	80 91 62 00 	lds	r24, 0x0062
 2d8:	8b 7f       	andi	r24, 0xFB	; 251
 2da:	80 93 62 00 	sts	0x0062, r24
	EN_SET;
 2de:	80 91 62 00 	lds	r24, 0x0062
 2e2:	88 60       	ori	r24, 0x08	; 8
 2e4:	80 93 62 00 	sts	0x0062, r24
	Data_IO = com;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	8b bb       	out	0x1b, r24	; 27
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	34 e2       	ldi	r19, 0x24	; 36
 2f0:	c9 01       	movw	r24, r18
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <main+0x42>
	delay_ms(5);
	EN_CLR;
 2f6:	80 91 62 00 	lds	r24, 0x0062
 2fa:	87 7f       	andi	r24, 0xF7	; 247
 2fc:	80 93 62 00 	sts	0x0062, r24
 300:	c9 01       	movw	r24, r18
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <main+0x52>
	delay_ms(100);                                //延时100ms
	LCD_init();                                   //液晶参数初始化设置
	LCD_clear();                                  //清屏
	while(1)
	{
	Display();                                    //显示汉字
 306:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Display>
 30a:	fd cf       	rjmp	.-6      	; 0x306 <main+0x56>

0000030c <_exit>:
 30c:	f8 94       	cli

0000030e <__stop_program>:
 30e:	ff cf       	rjmp	.-2      	; 0x30e <__stop_program>
