
PS2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000114  00800100  00000574  00000608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000574  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800214  00800214  0000071c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000013a  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000927  00000000  00000000  00000876  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ab  00000000  00000000  0000119d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000706  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001b50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018f  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e2  00000000  00000000  00001daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002091  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 17 02 	jmp	0x42e	; 0x42e <__vector_1>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e7       	ldi	r30, 0x74	; 116
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	12 e0       	ldi	r17, 0x02	; 2
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 31       	cpi	r26, 0x1D	; 29
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 94 02 	call	0x528	; 0x528 <main>
  c6:	0c 94 b8 02 	jmp	0x570	; 0x570 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <system_init>:
//			初始化子程序
//*************************************************************************
void system_init()
{

	Data_IO = 0xFF;				        //电平设置
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8b bb       	out	0x1b, r24	; 27
	Data_DDR = 0xFF;				        //方向输出
  d2:	8a bb       	out	0x1a, r24	; 26
	PORTF = 0xFF;                       //电平设置
  d4:	80 93 62 00 	sts	0x0062, r24
	DDRF = 0xFF;                        //方向输出
  d8:	80 93 61 00 	sts	0x0061, r24
    PORTD=0xFF;
  dc:	82 bb       	out	0x12, r24	; 18
	DDRD=0xFF;
  de:	81 bb       	out	0x11, r24	; 17
	D_LE1;                             //关掉数码管，以免显示乱码                   
  e0:	94 9a       	sbi	0x12, 4	; 18
    W_LE1;                     
  e2:	95 9a       	sbi	0x12, 5	; 18
    Data_IO=0xFF;                      //关数码管            
  e4:	8b bb       	out	0x1b, r24	; 27
    W_LE0; 
  e6:	95 98       	cbi	0x12, 5	; 18
}
  e8:	08 95       	ret

000000ea <LCD_write_com>:
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
  ea:	e2 e6       	ldi	r30, 0x62	; 98
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	90 81       	ld	r25, Z
  f0:	9d 7f       	andi	r25, 0xFD	; 253
  f2:	90 83       	st	Z, r25
	RW_CLR;
  f4:	90 81       	ld	r25, Z
  f6:	9b 7f       	andi	r25, 0xFB	; 251
  f8:	90 83       	st	Z, r25
	EN_SET;
  fa:	90 81       	ld	r25, Z
  fc:	98 60       	ori	r25, 0x08	; 8
  fe:	90 83       	st	Z, r25
	Data_IO = com;
 100:	8b bb       	out	0x1b, r24	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	94 e2       	ldi	r25, 0x24	; 36
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_write_com+0x1c>
	delay_ms(5);
	EN_CLR;
 10a:	80 81       	ld	r24, Z
 10c:	87 7f       	andi	r24, 0xF7	; 247
 10e:	80 83       	st	Z, r24
}
 110:	08 95       	ret

00000112 <LCD_write_data>:
//	显示屏数据写入函数
//***********************************************************************

void LCD_write_data(unsigned char data) 
{
	RS_SET;
 112:	e2 e6       	ldi	r30, 0x62	; 98
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	90 81       	ld	r25, Z
 118:	92 60       	ori	r25, 0x02	; 2
 11a:	90 83       	st	Z, r25
	RW_CLR;
 11c:	90 81       	ld	r25, Z
 11e:	9b 7f       	andi	r25, 0xFB	; 251
 120:	90 83       	st	Z, r25
	EN_SET;
 122:	90 81       	ld	r25, Z
 124:	98 60       	ori	r25, 0x08	; 8
 126:	90 83       	st	Z, r25
	Data_IO = data;
 128:	8b bb       	out	0x1b, r24	; 27
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	94 e2       	ldi	r25, 0x24	; 36
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <LCD_write_data+0x1c>
	delay_ms(5);
	EN_CLR;
 132:	80 81       	ld	r24, Z
 134:	87 7f       	andi	r24, 0xF7	; 247
 136:	80 83       	st	Z, r24
}
 138:	08 95       	ret

0000013a <LCD_clear>:
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 13a:	e2 e6       	ldi	r30, 0x62	; 98
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	8d 7f       	andi	r24, 0xFD	; 253
 142:	80 83       	st	Z, r24
	RW_CLR;
 144:	80 81       	ld	r24, Z
 146:	8b 7f       	andi	r24, 0xFB	; 251
 148:	80 83       	st	Z, r24
	EN_SET;
 14a:	80 81       	ld	r24, Z
 14c:	88 60       	ori	r24, 0x08	; 8
 14e:	80 83       	st	Z, r24
	Data_IO = com;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	8b bb       	out	0x1b, r24	; 27
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	34 e2       	ldi	r19, 0x24	; 36
 158:	c9 01       	movw	r24, r18
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_clear+0x20>
	delay_ms(5);
	EN_CLR;
 15e:	80 81       	ld	r24, Z
 160:	87 7f       	andi	r24, 0xF7	; 247
 162:	80 83       	st	Z, r24
 164:	c9 01       	movw	r24, r18
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_clear+0x2c>

void LCD_clear(void) 
{
	LCD_write_com(0x01);
	delay_ms(5);
}
 16a:	08 95       	ret

0000016c <LCD_write_char>:
//***********************************************************************
//	显示屏单字符写入函数
//***********************************************************************

void LCD_write_char(unsigned char x,unsigned char y,unsigned char data) 
{
 16c:	98 2f       	mov	r25, r24
	
    if (y == 0) 
 16e:	66 23       	and	r22, r22
 170:	a1 f1       	breq	.+104    	; 0x1da <LCD_write_char+0x6e>
    {
    	LCD_write_com(0x80 + x);
    }
    else 
    {
    	LCD_write_com(0xC0 + x);
 172:	90 54       	subi	r25, 0x40	; 64
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 174:	80 91 62 00 	lds	r24, 0x0062
 178:	8d 7f       	andi	r24, 0xFD	; 253
 17a:	80 93 62 00 	sts	0x0062, r24
	RW_CLR;
 17e:	80 91 62 00 	lds	r24, 0x0062
 182:	8b 7f       	andi	r24, 0xFB	; 251
 184:	80 93 62 00 	sts	0x0062, r24
	EN_SET;
 188:	80 91 62 00 	lds	r24, 0x0062
 18c:	88 60       	ori	r24, 0x08	; 8
 18e:	80 93 62 00 	sts	0x0062, r24
	Data_IO = com;
 192:	9b bb       	out	0x1b, r25	; 27
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	94 e2       	ldi	r25, 0x24	; 36
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_write_char+0x2c>
	delay_ms(5);
	EN_CLR;
 19c:	80 91 62 00 	lds	r24, 0x0062
 1a0:	87 7f       	andi	r24, 0xF7	; 247
 1a2:	80 93 62 00 	sts	0x0062, r24
//	显示屏数据写入函数
//***********************************************************************

void LCD_write_data(unsigned char data) 
{
	RS_SET;
 1a6:	80 91 62 00 	lds	r24, 0x0062
 1aa:	82 60       	ori	r24, 0x02	; 2
 1ac:	80 93 62 00 	sts	0x0062, r24
	RW_CLR;
 1b0:	80 91 62 00 	lds	r24, 0x0062
 1b4:	8b 7f       	andi	r24, 0xFB	; 251
 1b6:	80 93 62 00 	sts	0x0062, r24
	EN_SET;
 1ba:	80 91 62 00 	lds	r24, 0x0062
 1be:	88 60       	ori	r24, 0x08	; 8
 1c0:	80 93 62 00 	sts	0x0062, r24
	Data_IO = data;
 1c4:	4b bb       	out	0x1b, r20	; 27
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	94 e2       	ldi	r25, 0x24	; 36
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_write_char+0x5e>
	delay_ms(5);
	EN_CLR;
 1ce:	80 91 62 00 	lds	r24, 0x0062
 1d2:	87 7f       	andi	r24, 0xF7	; 247
 1d4:	80 93 62 00 	sts	0x0062, r24
    {
    	LCD_write_com(0xC0 + x);
    }
    
    LCD_write_data( data);  
}
 1d8:	08 95       	ret
void LCD_write_char(unsigned char x,unsigned char y,unsigned char data) 
{
	
    if (y == 0) 
    {
    	LCD_write_com(0x80 + x);
 1da:	90 58       	subi	r25, 0x80	; 128
 1dc:	cb cf       	rjmp	.-106    	; 0x174 <LCD_write_char+0x8>

000001de <LCD_write_str>:

//***********************************************************************
//	显示屏字符串写入函数
//***********************************************************************
void LCD_write_str(unsigned char x,unsigned char y,unsigned char *s) 
{
 1de:	98 2f       	mov	r25, r24
 1e0:	fa 01       	movw	r30, r20
	
    if (y == 0) 
 1e2:	66 23       	and	r22, r22
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <LCD_write_str+0xa>
 1e6:	3c c0       	rjmp	.+120    	; 0x260 <LCD_write_str+0x82>
    {
    	LCD_write_com(0x80 + x);
 1e8:	90 58       	subi	r25, 0x80	; 128
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 1ea:	80 91 62 00 	lds	r24, 0x0062
 1ee:	8d 7f       	andi	r24, 0xFD	; 253
 1f0:	80 93 62 00 	sts	0x0062, r24
	RW_CLR;
 1f4:	80 91 62 00 	lds	r24, 0x0062
 1f8:	8b 7f       	andi	r24, 0xFB	; 251
 1fa:	80 93 62 00 	sts	0x0062, r24
	EN_SET;
 1fe:	80 91 62 00 	lds	r24, 0x0062
 202:	88 60       	ori	r24, 0x08	; 8
 204:	80 93 62 00 	sts	0x0062, r24
	Data_IO = com;
 208:	9b bb       	out	0x1b, r25	; 27
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	94 e2       	ldi	r25, 0x24	; 36
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCD_write_str+0x30>
	delay_ms(5);
	EN_CLR;
 212:	80 91 62 00 	lds	r24, 0x0062
 216:	87 7f       	andi	r24, 0xF7	; 247
 218:	80 93 62 00 	sts	0x0062, r24
    else 
    {
    	LCD_write_com(0xC0 + x);
    }
    
    while (*s) 
 21c:	90 81       	ld	r25, Z
 21e:	99 23       	and	r25, r25
 220:	09 f1       	breq	.+66     	; 0x264 <LCD_write_str+0x86>
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	34 e2       	ldi	r19, 0x24	; 36
//	显示屏数据写入函数
//***********************************************************************

void LCD_write_data(unsigned char data) 
{
	RS_SET;
 226:	80 91 62 00 	lds	r24, 0x0062
 22a:	82 60       	ori	r24, 0x02	; 2
 22c:	80 93 62 00 	sts	0x0062, r24
	RW_CLR;
 230:	80 91 62 00 	lds	r24, 0x0062
 234:	8b 7f       	andi	r24, 0xFB	; 251
 236:	80 93 62 00 	sts	0x0062, r24
	EN_SET;
 23a:	80 91 62 00 	lds	r24, 0x0062
 23e:	88 60       	ori	r24, 0x08	; 8
 240:	80 93 62 00 	sts	0x0062, r24
	Data_IO = data;
 244:	9b bb       	out	0x1b, r25	; 27
 246:	c9 01       	movw	r24, r18
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <LCD_write_str+0x6a>
	delay_ms(5);
	EN_CLR;
 24c:	80 91 62 00 	lds	r24, 0x0062
 250:	87 7f       	andi	r24, 0xF7	; 247
 252:	80 93 62 00 	sts	0x0062, r24
    }
    
    while (*s) 
    {
    	LCD_write_data( *s);
    	s ++;
 256:	31 96       	adiw	r30, 0x01	; 1
    else 
    {
    	LCD_write_com(0xC0 + x);
    }
    
    while (*s) 
 258:	90 81       	ld	r25, Z
 25a:	99 23       	and	r25, r25
 25c:	21 f7       	brne	.-56     	; 0x226 <LCD_write_str+0x48>
 25e:	08 95       	ret
    {
    	LCD_write_com(0x80 + x);
    }
    else 
    {
    	LCD_write_com(0xC0 + x);
 260:	90 54       	subi	r25, 0x40	; 64
 262:	c3 cf       	rjmp	.-122    	; 0x1ea <LCD_write_str+0xc>
 264:	08 95       	ret

00000266 <LCD_init>:
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 266:	e2 e6       	ldi	r30, 0x62	; 98
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	8d 7f       	andi	r24, 0xFD	; 253
 26e:	80 83       	st	Z, r24
	RW_CLR;
 270:	80 81       	ld	r24, Z
 272:	8b 7f       	andi	r24, 0xFB	; 251
 274:	80 83       	st	Z, r24
	EN_SET;
 276:	80 81       	ld	r24, Z
 278:	88 60       	ori	r24, 0x08	; 8
 27a:	80 83       	st	Z, r24
	Data_IO = com;
 27c:	88 e3       	ldi	r24, 0x38	; 56
 27e:	8b bb       	out	0x1b, r24	; 27
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	34 e2       	ldi	r19, 0x24	; 36
 284:	c9 01       	movw	r24, r18
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <LCD_init+0x20>
	delay_ms(5);
	EN_CLR;
 28a:	80 81       	ld	r24, Z
 28c:	87 7f       	andi	r24, 0xF7	; 247
 28e:	80 83       	st	Z, r24
 290:	c9 01       	movw	r24, r18
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_init+0x2c>
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 296:	80 81       	ld	r24, Z
 298:	8d 7f       	andi	r24, 0xFD	; 253
 29a:	80 83       	st	Z, r24
	RW_CLR;
 29c:	80 81       	ld	r24, Z
 29e:	8b 7f       	andi	r24, 0xFB	; 251
 2a0:	80 83       	st	Z, r24
	EN_SET;
 2a2:	80 81       	ld	r24, Z
 2a4:	88 60       	ori	r24, 0x08	; 8
 2a6:	80 83       	st	Z, r24
	Data_IO = com;
 2a8:	88 e0       	ldi	r24, 0x08	; 8
 2aa:	8b bb       	out	0x1b, r24	; 27
 2ac:	c9 01       	movw	r24, r18
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <LCD_init+0x48>
	delay_ms(5);
	EN_CLR;
 2b2:	80 81       	ld	r24, Z
 2b4:	87 7f       	andi	r24, 0xF7	; 247
 2b6:	80 83       	st	Z, r24
 2b8:	c9 01       	movw	r24, r18
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCD_init+0x54>
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 2be:	80 81       	ld	r24, Z
 2c0:	8d 7f       	andi	r24, 0xFD	; 253
 2c2:	80 83       	st	Z, r24
	RW_CLR;
 2c4:	80 81       	ld	r24, Z
 2c6:	8b 7f       	andi	r24, 0xFB	; 251
 2c8:	80 83       	st	Z, r24
	EN_SET;
 2ca:	80 81       	ld	r24, Z
 2cc:	88 60       	ori	r24, 0x08	; 8
 2ce:	80 83       	st	Z, r24
	Data_IO = com;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	8b bb       	out	0x1b, r24	; 27
 2d4:	c9 01       	movw	r24, r18
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <LCD_init+0x70>
	delay_ms(5);
	EN_CLR;
 2da:	80 81       	ld	r24, Z
 2dc:	87 7f       	andi	r24, 0xF7	; 247
 2de:	80 83       	st	Z, r24
 2e0:	c9 01       	movw	r24, r18
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <LCD_init+0x7c>
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 2e6:	80 81       	ld	r24, Z
 2e8:	8d 7f       	andi	r24, 0xFD	; 253
 2ea:	80 83       	st	Z, r24
	RW_CLR;
 2ec:	80 81       	ld	r24, Z
 2ee:	8b 7f       	andi	r24, 0xFB	; 251
 2f0:	80 83       	st	Z, r24
	EN_SET;
 2f2:	80 81       	ld	r24, Z
 2f4:	88 60       	ori	r24, 0x08	; 8
 2f6:	80 83       	st	Z, r24
	Data_IO = com;
 2f8:	86 e0       	ldi	r24, 0x06	; 6
 2fa:	8b bb       	out	0x1b, r24	; 27
 2fc:	c9 01       	movw	r24, r18
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <LCD_init+0x98>
	delay_ms(5);
	EN_CLR;
 302:	80 81       	ld	r24, Z
 304:	87 7f       	andi	r24, 0xF7	; 247
 306:	80 83       	st	Z, r24
 308:	c9 01       	movw	r24, r18
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <LCD_init+0xa4>
//***********************************************************************


void LCD_write_com(unsigned char com) 
{	
	RS_CLR;
 30e:	80 81       	ld	r24, Z
 310:	8d 7f       	andi	r24, 0xFD	; 253
 312:	80 83       	st	Z, r24
	RW_CLR;
 314:	80 81       	ld	r24, Z
 316:	8b 7f       	andi	r24, 0xFB	; 251
 318:	80 83       	st	Z, r24
	EN_SET;
 31a:	80 81       	ld	r24, Z
 31c:	88 60       	ori	r24, 0x08	; 8
 31e:	80 83       	st	Z, r24
	Data_IO = com;
 320:	8c e0       	ldi	r24, 0x0C	; 12
 322:	8b bb       	out	0x1b, r24	; 27
 324:	c9 01       	movw	r24, r18
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <LCD_init+0xc0>
	delay_ms(5);
	EN_CLR;
 32a:	80 81       	ld	r24, Z
 32c:	87 7f       	andi	r24, 0xF7	; 247
 32e:	80 83       	st	Z, r24
 330:	c9 01       	movw	r24, r18
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <LCD_init+0xcc>
	delay_ms(5);
    LCD_write_com(0x06);				//显示光标移动设置
	delay_ms(5);
	LCD_write_com(0x0C);				//显示开及光标设置
    delay_ms(5);
}
 336:	08 95       	ret

00000338 <ps2_init>:
//                初始化PS2函数 
//************************************************************** 
void ps2_init(void) 
{ 
     
     EIMSK|=0x03;          //使能外部中断0
 338:	89 b7       	in	r24, 0x39	; 57
 33a:	83 60       	ori	r24, 0x03	; 3
 33c:	89 bf       	out	0x39, r24	; 57
     EICRA=0x0A;          //下降沿触发方式
 33e:	8a e0       	ldi	r24, 0x0A	; 10
 340:	80 93 6a 00 	sts	0x006A, r24
     MCUCSR=0x00;         //控制和状态寄存器初始化
 344:	14 be       	out	0x34, r1	; 52
     bitcount = 0;	     //每次11位数据，一个起始位(0)，8个数据位，一个奇偶校验位，一个停止位(1)  
 346:	10 92 18 02 	sts	0x0218, r1
     PORTD|=(1<<PD0);    //使能中断管脚的上拉
 34a:	90 9a       	sbi	0x12, 0	; 18
     DDRD&=~(1<<PD0);    //配置中断管脚为输入 
 34c:	88 98       	cbi	0x11, 0	; 17
     PORTC|=(1<<PC7);    //使能数据管脚的上拉 
 34e:	af 9a       	sbi	0x15, 7	; 21
     DDRC&=~(1<<PC7);    //配置数据管脚为输入
 350:	a7 98       	cbi	0x14, 7	; 20

} 
 352:	08 95       	ret

00000354 <Decode>:
//************************************************************** 
//              译码函数，scancode--需要翻译的扫描码  
//************************************************************** 

void Decode(uchar scancode) 
{ 
 354:	28 2f       	mov	r18, r24

uchar i; 
if (!up)	 //已接收的11位数据是通码（up为0） 
 356:	80 91 14 02 	lds	r24, 0x0214
 35a:	88 23       	and	r24, r24
 35c:	21 f5       	brne	.+72     	; 0x3a6 <Decode+0x52>
{ 
	switch (scancode)//开始翻译扫描码 
 35e:	29 35       	cpi	r18, 0x59	; 89
 360:	49 f1       	breq	.+82     	; 0x3b4 <Decode+0x60>
 362:	20 3f       	cpi	r18, 0xF0	; 240
 364:	89 f1       	breq	.+98     	; 0x3c8 <Decode+0x74>
 366:	22 31       	cpi	r18, 0x12	; 18
 368:	29 f1       	breq	.+74     	; 0x3b4 <Decode+0x60>
						break; 
			case 0x59:	 //右shift键按下 
						shift=1;         //设置shift为按下标志 
						break; 
			default: 
if(!shift)	 //如果shift键没有按下 
 36a:	80 91 15 02 	lds	r24, 0x0215
 36e:	88 23       	and	r24, r24
 370:	79 f1       	breq	.+94     	; 0x3d0 <Decode+0x7c>
					key_value=unshifted[i][1]; 
				} 
	} 
else //如果shift键按下 
	{	 //查找shifted表 
		for(i=0;shifted[i][0]!=scancode;i++); 
 372:	80 91 91 01 	lds	r24, 0x0191
 376:	82 17       	cp	r24, r18
 378:	09 f4       	brne	.+2      	; 0x37c <Decode+0x28>
 37a:	41 c0       	rjmp	.+130    	; 0x3fe <Decode+0xaa>
if(!shift)	 //如果shift键没有按下 
	{ //查找unshifted表，表中左列是扫描码，右列是对应的ASCII码 
		for(i=0;unshifted[i][0]!=scancode;i++); 
			if(unshifted[i][0]==scancode) 
				{ 
					key_value=unshifted[i][1]; 
 37c:	90 e0       	ldi	r25, 0x00	; 0
				} 
	} 
else //如果shift键按下 
	{	 //查找shifted表 
		for(i=0;shifted[i][0]!=scancode;i++); 
 37e:	9f 5f       	subi	r25, 0xFF	; 255
 380:	a9 2f       	mov	r26, r25
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	aa 0f       	add	r26, r26
 386:	bb 1f       	adc	r27, r27
 388:	fd 01       	movw	r30, r26
 38a:	ef 56       	subi	r30, 0x6F	; 111
 38c:	fe 4f       	sbci	r31, 0xFE	; 254
 38e:	80 81       	ld	r24, Z
 390:	82 17       	cp	r24, r18
 392:	a9 f7       	brne	.-22     	; 0x37e <Decode+0x2a>
			if(shifted[i][0]==scancode) 
				{ 
					key_value=shifted[i][1];
 394:	af 56       	subi	r26, 0x6F	; 111
 396:	be 4f       	sbci	r27, 0xFE	; 254
 398:	11 96       	adiw	r26, 0x01	; 1
 39a:	8c 91       	ld	r24, X
 39c:	80 93 0e 01 	sts	0x010E, r24
					shift=0;
 3a0:	10 92 15 02 	sts	0x0215, r1
 3a4:	08 95       	ret
			break; 
		} 
} 
else                      //已接收的11位数据是断码（up为1） 
	{ 
		up = 0;                   //将断码标志复位 
 3a6:	10 92 14 02 	sts	0x0214, r1
		switch (scancode)	 //检测shift键释放 
 3aa:	22 31       	cpi	r18, 0x12	; 18
 3ac:	39 f0       	breq	.+14     	; 0x3bc <Decode+0x68>
 3ae:	29 35       	cpi	r18, 0x59	; 89
 3b0:	41 f0       	breq	.+16     	; 0x3c2 <Decode+0x6e>
 3b2:	08 95       	ret
						break; 
			case 0x12:	 //左shift键按下 
						shift=1;         //设置shift为按下标志 
						break; 
			case 0x59:	 //右shift键按下 
						shift=1;         //设置shift为按下标志 
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	80 93 15 02 	sts	0x0215, r24
 3ba:	08 95       	ret
	{ 
		up = 0;                   //将断码标志复位 
		switch (scancode)	 //检测shift键释放 
			{ 
				case 0x12 :	         //左shift键 
							shift = 0; 
 3bc:	10 92 15 02 	sts	0x0215, r1
 3c0:	08 95       	ret
							break; 
				case 0x59 :	         //右shift键 
							shift = 0; 
 3c2:	10 92 15 02 	sts	0x0215, r1
 3c6:	08 95       	ret
if (!up)	 //已接收的11位数据是通码（up为0） 
{ 
	switch (scancode)//开始翻译扫描码 
		{ 
			case 0xF0:	 //键盘释放标志（随后的一个字节是断码） 
						up=1;	        //设置up为断码标志 
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	80 93 14 02 	sts	0x0214, r24
 3ce:	08 95       	ret
						shift=1;         //设置shift为按下标志 
						break; 
			default: 
if(!shift)	 //如果shift键没有按下 
	{ //查找unshifted表，表中左列是扫描码，右列是对应的ASCII码 
		for(i=0;unshifted[i][0]!=scancode;i++); 
 3d0:	80 91 0f 01 	lds	r24, 0x010F
 3d4:	82 17       	cp	r24, r18
 3d6:	b1 f0       	breq	.+44     	; 0x404 <Decode+0xb0>
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	9f 5f       	subi	r25, 0xFF	; 255
 3dc:	a9 2f       	mov	r26, r25
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	aa 0f       	add	r26, r26
 3e2:	bb 1f       	adc	r27, r27
 3e4:	fd 01       	movw	r30, r26
 3e6:	e1 5f       	subi	r30, 0xF1	; 241
 3e8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ea:	80 81       	ld	r24, Z
 3ec:	82 17       	cp	r24, r18
 3ee:	a9 f7       	brne	.-22     	; 0x3da <Decode+0x86>
			if(unshifted[i][0]==scancode) 
				{ 
					key_value=unshifted[i][1]; 
 3f0:	a1 5f       	subi	r26, 0xF1	; 241
 3f2:	be 4f       	sbci	r27, 0xFE	; 254
 3f4:	11 96       	adiw	r26, 0x01	; 1
 3f6:	8c 91       	ld	r24, X
 3f8:	80 93 0e 01 	sts	0x010E, r24
 3fc:	08 95       	ret
 3fe:	a0 e0       	ldi	r26, 0x00	; 0
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	c8 cf       	rjmp	.-112    	; 0x394 <Decode+0x40>
 404:	a0 e0       	ldi	r26, 0x00	; 0
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	f3 cf       	rjmp	.-26     	; 0x3f0 <Decode+0x9c>

0000040a <get_code>:
} 
//************************************************************************
//          中断读入的数据是先低位后高位，该函数将数据位重新排列
//************************************************************************
void get_code(uchar cdata)
{
 40a:	48 2f       	mov	r20, r24
 40c:	90 91 16 02 	lds	r25, 0x0216
 410:	20 e0       	ldi	r18, 0x00	; 0
 412:	30 e0       	ldi	r19, 0x00	; 0
  int i;
  for(i=0;i<8;i++)
  { data2<<=1 ;
    data2|=cdata&0x01;
 414:	99 0f       	add	r25, r25
 416:	84 2f       	mov	r24, r20
 418:	81 70       	andi	r24, 0x01	; 1
 41a:	98 2b       	or	r25, r24
    cdata>>=1;
 41c:	46 95       	lsr	r20
//          中断读入的数据是先低位后高位，该函数将数据位重新排列
//************************************************************************
void get_code(uchar cdata)
{
  int i;
  for(i=0;i<8;i++)
 41e:	2f 5f       	subi	r18, 0xFF	; 255
 420:	3f 4f       	sbci	r19, 0xFF	; 255
 422:	28 30       	cpi	r18, 0x08	; 8
 424:	31 05       	cpc	r19, r1
 426:	b1 f7       	brne	.-20     	; 0x414 <get_code+0xa>
 428:	90 93 16 02 	sts	0x0216, r25
  { data2<<=1 ;
    data2|=cdata&0x01;
    cdata>>=1;
  
  }
}
 42c:	08 95       	ret

0000042e <__vector_1>:
//功 能: 外部中断0的中断服务函数，下降沿读取数据，数据位ULONG型，全部读取 
//*************************************************************************
//#pragma vector=INT0_vect                       //外部中断0中断向量
//__interrupt  void time0_ser(void)             //中断服务程序
ISR(SIG_INTERRUPT0)                   			//中断0服务程序,新版用ISR，不再用SIGNAL
{
 42e:	1f 92       	push	r1
 430:	0f 92       	push	r0
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	0f 92       	push	r0
 436:	0b b6       	in	r0, 0x3b	; 59
 438:	0f 92       	push	r0
 43a:	11 24       	eor	r1, r1
 43c:	2f 93       	push	r18
 43e:	3f 93       	push	r19
 440:	4f 93       	push	r20
 442:	5f 93       	push	r21
 444:	6f 93       	push	r22
 446:	7f 93       	push	r23
 448:	8f 93       	push	r24
 44a:	9f 93       	push	r25
 44c:	af 93       	push	r26
 44e:	bf 93       	push	r27
 450:	ef 93       	push	r30
 452:	ff 93       	push	r31
    bitcount++;                               //中断次数计数值，按一次键，中断33次
 454:	20 91 18 02 	lds	r18, 0x0218
 458:	2f 5f       	subi	r18, 0xFF	; 255
 45a:	20 93 18 02 	sts	0x0218, r18
    data<<=1;                                 //但是键盘初始化后可能有一个中断，所以第一个是中断34次
    data|=((PINC&0x80)>>7);                   //读取每一个中断时的数据位
 45e:	83 b3       	in	r24, 0x13	; 19
 460:	88 1f       	adc	r24, r24
 462:	88 27       	eor	r24, r24
 464:	88 1f       	adc	r24, r24
 466:	48 2f       	mov	r20, r24
 468:	50 e0       	ldi	r21, 0x00	; 0
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	80 91 19 02 	lds	r24, 0x0219
 472:	90 91 1a 02 	lds	r25, 0x021A
 476:	a0 91 1b 02 	lds	r26, 0x021B
 47a:	b0 91 1c 02 	lds	r27, 0x021C
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	aa 1f       	adc	r26, r26
 484:	bb 1f       	adc	r27, r27
 486:	48 2b       	or	r20, r24
 488:	59 2b       	or	r21, r25
 48a:	6a 2b       	or	r22, r26
 48c:	7b 2b       	or	r23, r27
 48e:	40 93 19 02 	sts	0x0219, r20
 492:	50 93 1a 02 	sts	0x021A, r21
 496:	60 93 1b 02 	sts	0x021B, r22
 49a:	70 93 1c 02 	sts	0x021C, r23
     // data=data&0x03fc;
   //   data>>=2;
    //  get_code(data);                        //得到8位键码
    //   Decode(data2);	                     //将扫描码翻译成ASCII码
  //  }
    if(bitcount==0x21)//&&(finish==1))    //正常来说，都是33次中断
 49e:	21 32       	cpi	r18, 0x21	; 33
 4a0:	99 f0       	breq	.+38     	; 0x4c8 <__vector_1+0x9a>
      data>>=2;               //移位处理
      get_code(data);        //得到8位正常排序的数据位
       Decode(data2);	     //将扫描码翻译成ASCII码
    }
   
  }
 4a2:	ff 91       	pop	r31
 4a4:	ef 91       	pop	r30
 4a6:	bf 91       	pop	r27
 4a8:	af 91       	pop	r26
 4aa:	9f 91       	pop	r25
 4ac:	8f 91       	pop	r24
 4ae:	7f 91       	pop	r23
 4b0:	6f 91       	pop	r22
 4b2:	5f 91       	pop	r21
 4b4:	4f 91       	pop	r20
 4b6:	3f 91       	pop	r19
 4b8:	2f 91       	pop	r18
 4ba:	0f 90       	pop	r0
 4bc:	0b be       	out	0x3b, r0	; 59
 4be:	0f 90       	pop	r0
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	0f 90       	pop	r0
 4c4:	1f 90       	pop	r1
 4c6:	18 95       	reti
    //  get_code(data);                        //得到8位键码
    //   Decode(data2);	                     //将扫描码翻译成ASCII码
  //  }
    if(bitcount==0x21)//&&(finish==1))    //正常来说，都是33次中断
        {
      bitcount=0;
 4c8:	10 92 18 02 	sts	0x0218, r1
      finish=1;
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	80 93 17 02 	sts	0x0217, r24
      data=data&0x03fc;      //读取最后一个字节中的8位数据位，每次按键三个字节数据，第一个和第三个字节数据相同
      data>>=2;               //移位处理
 4d2:	db 01       	movw	r26, r22
 4d4:	ca 01       	movw	r24, r20
 4d6:	8c 7f       	andi	r24, 0xFC	; 252
 4d8:	93 70       	andi	r25, 0x03	; 3
 4da:	a0 70       	andi	r26, 0x00	; 0
 4dc:	b0 70       	andi	r27, 0x00	; 0
 4de:	b6 95       	lsr	r27
 4e0:	a7 95       	ror	r26
 4e2:	97 95       	ror	r25
 4e4:	87 95       	ror	r24
 4e6:	b6 95       	lsr	r27
 4e8:	a7 95       	ror	r26
 4ea:	97 95       	ror	r25
 4ec:	87 95       	ror	r24
 4ee:	80 93 19 02 	sts	0x0219, r24
 4f2:	90 93 1a 02 	sts	0x021A, r25
 4f6:	a0 93 1b 02 	sts	0x021B, r26
 4fa:	b0 93 1c 02 	sts	0x021C, r27
      get_code(data);        //得到8位正常排序的数据位
 4fe:	98 2f       	mov	r25, r24
 500:	40 91 16 02 	lds	r20, 0x0216
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	30 e0       	ldi	r19, 0x00	; 0
void get_code(uchar cdata)
{
  int i;
  for(i=0;i<8;i++)
  { data2<<=1 ;
    data2|=cdata&0x01;
 508:	44 0f       	add	r20, r20
 50a:	89 2f       	mov	r24, r25
 50c:	81 70       	andi	r24, 0x01	; 1
 50e:	48 2b       	or	r20, r24
    cdata>>=1;
 510:	96 95       	lsr	r25
//          中断读入的数据是先低位后高位，该函数将数据位重新排列
//************************************************************************
void get_code(uchar cdata)
{
  int i;
  for(i=0;i<8;i++)
 512:	2f 5f       	subi	r18, 0xFF	; 255
 514:	3f 4f       	sbci	r19, 0xFF	; 255
 516:	28 30       	cpi	r18, 0x08	; 8
 518:	31 05       	cpc	r19, r1
 51a:	b1 f7       	brne	.-20     	; 0x508 <__vector_1+0xda>
 51c:	40 93 16 02 	sts	0x0216, r20
      bitcount=0;
      finish=1;
      data=data&0x03fc;      //读取最后一个字节中的8位数据位，每次按键三个字节数据，第一个和第三个字节数据相同
      data>>=2;               //移位处理
      get_code(data);        //得到8位正常排序的数据位
       Decode(data2);	     //将扫描码翻译成ASCII码
 520:	84 2f       	mov	r24, r20
 522:	0e 94 aa 01 	call	0x354	; 0x354 <Decode>
 526:	bd cf       	rjmp	.-134    	; 0x4a2 <__vector_1+0x74>

00000528 <main>:
//*************************************************************************
//                 主函数 
//*************************************************************************
int main(void) 
{ 
        system_init();                                //系统初始化，设置IO口属性
 528:	0e 94 67 00 	call	0xce	; 0xce <system_init>
 52c:	28 ee       	ldi	r18, 0xE8	; 232
 52e:	33 e0       	ldi	r19, 0x03	; 3
 530:	48 eb       	ldi	r20, 0xB8	; 184
 532:	50 e0       	ldi	r21, 0x00	; 0
 534:	ca 01       	movw	r24, r20
 536:	01 97       	sbiw	r24, 0x01	; 1
 538:	f1 f7       	brne	.-4      	; 0x536 <main+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 53a:	21 50       	subi	r18, 0x01	; 1
 53c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 53e:	d1 f7       	brne	.-12     	; 0x534 <main+0xc>
	    delay_ms(100);                                //延时100ms
  	    LCD_init();                                   //液晶参数初始化设置
 540:	0e 94 33 01 	call	0x266	; 0x266 <LCD_init>
        ps2_init();	                             //初始化PS2键盘接口 
 544:	0e 94 9c 01 	call	0x338	; 0x338 <ps2_init>
        LCD_write_str(0,0,"The Keyvalue:");          //液晶初始界面
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	51 e0       	ldi	r21, 0x01	; 1
 550:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_str>
 554:	86 e6       	ldi	r24, 0x66	; 102
 556:	9e e0       	ldi	r25, 0x0E	; 14
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	f1 f7       	brne	.-4      	; 0x558 <main+0x30>
        delay_ms(2);
        SREG|=0x80;                                  //开全局中断
 55c:	8f b7       	in	r24, 0x3f	; 63
 55e:	80 68       	ori	r24, 0x80	; 128
 560:	8f bf       	out	0x3f, r24	; 63
       while(1) 
   		{       
         LCD_write_char(4,1,key_value);             //单个字符输出显示，显示键值
 562:	84 e0       	ldi	r24, 0x04	; 4
 564:	61 e0       	ldi	r22, 0x01	; 1
 566:	40 91 0e 01 	lds	r20, 0x010E
 56a:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_write_char>
 56e:	f9 cf       	rjmp	.-14     	; 0x562 <main+0x3a>

00000570 <_exit>:
 570:	f8 94       	cli

00000572 <__stop_program>:
 572:	ff cf       	rjmp	.-2      	; 0x572 <__stop_program>
