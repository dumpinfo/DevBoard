
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000004b  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000e2  00000000  00000000  000001d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000081  00000000  00000000  000002b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000f7  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a7  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e1       	ldi	r30, 0x12	; 18
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  b6:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <system_init>:
//			初始化子程序
//*************************************************************************
void system_init()                                   //IO口初始化
{
  
  PORTB=0xff;                                       //PB设置为输出
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	88 bb       	out	0x18, r24	; 24
  DDRB=0xff;                                        //上拉电阻无效
  c2:	87 bb       	out	0x17, r24	; 23
}
  c4:	08 95       	ret

000000c6 <timer0_init>:

void timer0_init()                                 //定时器初始化
{
  TCCR0=0x68|timer_clk;                            //快读PWM模式，OC0输出，分频
  c6:	8f e6       	ldi	r24, 0x6F	; 111
  c8:	83 bf       	out	0x33, r24	; 51
  OCR0=f_count;                                    //OCR0比较匹配寄存器值
  ca:	89 e1       	ldi	r24, 0x19	; 25
  cc:	81 bf       	out	0x31, r24	; 49
  TIFR=0x01;                                       //清中断标志位
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	86 bf       	out	0x36, r24	; 54
  TIMSK=0x01;                                      //使能定时器0溢出中断
  d2:	87 bf       	out	0x37, r24	; 55
}
  d4:	08 95       	ret

000000d6 <__vector_16>:

//*************************************************************************
//		定时器0中断服务子程序
//*************************************************************************
ISR(SIG_OVERFLOW0)                           	//中断服务程序
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	8f 93       	push	r24
  OCR0=f_count;                                 //相关操作
  e2:	89 e1       	ldi	r24, 0x19	; 25
  e4:	81 bf       	out	0x31, r24	; 49
}
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <main>:
//			初始化子程序
//*************************************************************************
void system_init()                                   //IO口初始化
{
  
  PORTB=0xff;                                       //PB设置为输出
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	88 bb       	out	0x18, r24	; 24
  DDRB=0xff;                                        //上拉电阻无效
  f6:	87 bb       	out	0x17, r24	; 23
}

void timer0_init()                                 //定时器初始化
{
  TCCR0=0x68|timer_clk;                            //快读PWM模式，OC0输出，分频
  f8:	8f e6       	ldi	r24, 0x6F	; 111
  fa:	83 bf       	out	0x33, r24	; 51
  OCR0=f_count;                                    //OCR0比较匹配寄存器值
  fc:	89 e1       	ldi	r24, 0x19	; 25
  fe:	81 bf       	out	0x31, r24	; 49
  TIFR=0x01;                                       //清中断标志位
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	86 bf       	out	0x36, r24	; 54
  TIMSK=0x01;                                      //使能定时器0溢出中断
 104:	87 bf       	out	0x37, r24	; 55

int main(void)
{
  system_init();                             //系统初始化.PB4输出PWM波形
  timer0_init();                             //定时器0初始化，完成PWM相关配置
  SREG|=0x80;                                //开启全局中断
 106:	8f b7       	in	r24, 0x3f	; 63
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	8f bf       	out	0x3f, r24	; 63
 10c:	ff cf       	rjmp	.-2      	; 0x10c <main+0x1a>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
