
ucos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800100  00002498  0000252c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002498  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000910  0080021c  0080021c  00002648  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00002648  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000071f  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000025b6  00000000  00000000  00002e07  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000711  00000000  00000000  000053bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002503  00000000  00000000  00005ace  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004e0  00000000  00000000  00007fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a3b  00000000  00000000  000084b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002091  00000000  00000000  00008eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000af80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <OSTickISR>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e9       	ldi	r30, 0x98	; 152
      a0:	f4 e2       	ldi	r31, 0x24	; 36
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 31       	cpi	r26, 0x1C	; 28
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	1b e0       	ldi	r17, 0x0B	; 11
      b4:	ac e1       	ldi	r26, 0x1C	; 28
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 32       	cpi	r26, 0x2C	; 44
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
//			启动4个任务，切换执行
//***********************************************************************

int	main()
{
	OSInit();                             //初始化
      ce:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <OSInit>
    sem = OSSemCreate( 1 );				  //建立信号量
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	0e 94 c0 05 	call	0xb80	; 0xb80 <OSSemCreate>
      da:	90 93 1d 02 	sts	0x021D, r25
      de:	80 93 1c 02 	sts	0x021C, r24
	OSTaskCreate( task0, (void *)OS_TASK_1_STK_SIZE, &Task1Stack[OS_TASK_1_STK_SIZE-1], OS_TASK_1_PRIO );//创建任务
      e2:	84 ef       	ldi	r24, 0xF4	; 244
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	60 ef       	ldi	r22, 0xF0	; 240
      e8:	70 e0       	ldi	r23, 0x00	; 0
      ea:	4d ed       	ldi	r20, 0xDD	; 221
      ec:	55 e0       	ldi	r21, 0x05	; 5
      ee:	25 e0       	ldi	r18, 0x05	; 5
      f0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <OSTaskCreate>
	OSTaskCreate( task1, (void *)OS_TASK_2_STK_SIZE, &Task2Stack[OS_TASK_2_STK_SIZE-1], OS_TASK_2_PRIO );
      f4:	8e ec       	ldi	r24, 0xCE	; 206
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	60 ef       	ldi	r22, 0xF0	; 240
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	4d e0       	ldi	r20, 0x0D	; 13
      fe:	53 e0       	ldi	r21, 0x03	; 3
     100:	26 e0       	ldi	r18, 0x06	; 6
     102:	0e 94 4a 0b 	call	0x1694	; 0x1694 <OSTaskCreate>
	OSTaskCreate( task2, (void *)OS_TASK_3_STK_SIZE, &Task3Stack[OS_TASK_3_STK_SIZE-1], OS_TASK_3_PRIO );
     106:	8a e9       	ldi	r24, 0x9A	; 154
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	60 ef       	ldi	r22, 0xF0	; 240
     10c:	70 e0       	ldi	r23, 0x00	; 0
     10e:	4d ee       	ldi	r20, 0xED	; 237
     110:	54 e0       	ldi	r21, 0x04	; 4
     112:	27 e0       	ldi	r18, 0x07	; 7
     114:	0e 94 4a 0b 	call	0x1694	; 0x1694 <OSTaskCreate>
	OSTaskCreate( task3, (void *)OS_TASK_4_STK_SIZE, &Task4Stack[OS_TASK_4_STK_SIZE-1], OS_TASK_4_PRIO );
     118:	88 ea       	ldi	r24, 0xA8	; 168
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	60 ef       	ldi	r22, 0xF0	; 240
     11e:	70 e0       	ldi	r23, 0x00	; 0
     120:	4d ef       	ldi	r20, 0xFD	; 253
     122:	53 e0       	ldi	r21, 0x03	; 3
     124:	28 e0       	ldi	r18, 0x08	; 8
     126:	0e 94 4a 0b 	call	0x1694	; 0x1694 <OSTaskCreate>
	OSStart();                           //启动任务
     12a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <OSStart>
}
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	08 95       	ret

00000134 <task2>:
	}
	
}

void task2(void * pdata)									    //点亮LED的D5～D8
{  
     134:	0f 93       	push	r16
     136:	1f 93       	push	r17
   while(1)
	{
		LED_ON2();
     138:	0f ef       	ldi	r16, 0xFF	; 255
     13a:	1f e0       	ldi	r17, 0x0F	; 15
     13c:	07 bb       	out	0x17, r16	; 23
     13e:	18 bb       	out	0x18, r17	; 24
		OSTimeDlyHMSM(0,0,0,2*LED_DELAY_MS );
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	60 e0       	ldi	r22, 0x00	; 0
     144:	40 e0       	ldi	r20, 0x00	; 0
     146:	20 ed       	ldi	r18, 0xD0	; 208
     148:	37 e0       	ldi	r19, 0x07	; 7
     14a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <OSTimeDlyHMSM>
     14e:	f6 cf       	rjmp	.-20     	; 0x13c <task2+0x8>

00000150 <task3>:
	}	
}

void task3(void * pdata )
{
     150:	ff 92       	push	r15
     152:	0f 93       	push	r16
     154:	1f 93       	push	r17
     156:	df 93       	push	r29
     158:	cf 93       	push	r28
     15a:	0f 92       	push	r0
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
	INT8U error;
	
	while(1)
	{
		OSSemPend(sem, 0, &error);
     160:	8e 01       	movw	r16, r28
     162:	0f 5f       	subi	r16, 0xFF	; 255
     164:	1f 4f       	sbci	r17, 0xFF	; 255
		LED_OFF2();												 //熄灭LED的D5～D8
     166:	ff 24       	eor	r15, r15
     168:	fa 94       	dec	r15
{
	INT8U error;
	
	while(1)
	{
		OSSemPend(sem, 0, &error);
     16a:	80 91 1c 02 	lds	r24, 0x021C
     16e:	90 91 1d 02 	lds	r25, 0x021D
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	70 e0       	ldi	r23, 0x00	; 0
     176:	a8 01       	movw	r20, r16
     178:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <OSSemPend>
		LED_OFF2();												 //熄灭LED的D5～D8
     17c:	f7 ba       	out	0x17, r15	; 23
     17e:	f8 ba       	out	0x18, r15	; 24
		OSTimeDlyHMSM(0,0,0,LED_DELAY_MS );
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	40 e0       	ldi	r20, 0x00	; 0
     186:	28 ee       	ldi	r18, 0xE8	; 232
     188:	33 e0       	ldi	r19, 0x03	; 3
     18a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <OSTimeDlyHMSM>
		OSSemPost(sem);
     18e:	80 91 1c 02 	lds	r24, 0x021C
     192:	90 91 1d 02 	lds	r25, 0x021D
     196:	0e 94 9b 0c 	call	0x1936	; 0x1936 <OSSemPost>
     19a:	e7 cf       	rjmp	.-50     	; 0x16a <task3+0x1a>

0000019c <task1>:
	}
	
}

void task1(void * pdata )
{
     19c:	ff 92       	push	r15
     19e:	0f 93       	push	r16
     1a0:	1f 93       	push	r17
     1a2:	df 93       	push	r29
     1a4:	cf 93       	push	r28
     1a6:	0f 92       	push	r0
     1a8:	cd b7       	in	r28, 0x3d	; 61
     1aa:	de b7       	in	r29, 0x3e	; 62
	INT8U error;
	
	while(1)
	{
		OSSemPend(sem, 0, &error);
     1ac:	8e 01       	movw	r16, r28
     1ae:	0f 5f       	subi	r16, 0xFF	; 255
     1b0:	1f 4f       	sbci	r17, 0xFF	; 255
		LED_OFF();												//熄灭LED的D1～D4
     1b2:	ff 24       	eor	r15, r15
     1b4:	fa 94       	dec	r15
{
	INT8U error;
	
	while(1)
	{
		OSSemPend(sem, 0, &error);
     1b6:	80 91 1c 02 	lds	r24, 0x021C
     1ba:	90 91 1d 02 	lds	r25, 0x021D
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	a8 01       	movw	r20, r16
     1c4:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <OSSemPend>
		LED_OFF();												//熄灭LED的D1～D4
     1c8:	f7 ba       	out	0x17, r15	; 23
     1ca:	f8 ba       	out	0x18, r15	; 24
		OSTimeDlyHMSM(0,0,0,LED_DELAY_MS );
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	60 e0       	ldi	r22, 0x00	; 0
     1d0:	40 e0       	ldi	r20, 0x00	; 0
     1d2:	28 ee       	ldi	r18, 0xE8	; 232
     1d4:	33 e0       	ldi	r19, 0x03	; 3
     1d6:	0e 94 5e 08 	call	0x10bc	; 0x10bc <OSTimeDlyHMSM>
		OSSemPost(sem);
     1da:	80 91 1c 02 	lds	r24, 0x021C
     1de:	90 91 1d 02 	lds	r25, 0x021D
     1e2:	0e 94 9b 0c 	call	0x1936	; 0x1936 <OSSemPost>
     1e6:	e7 cf       	rjmp	.-50     	; 0x1b6 <task1+0x1a>

000001e8 <task0>:
//***********************************************************************
//			定义4个任务列表，主程序调用任务
//***********************************************************************

void task0( void * pdata )
{
     1e8:	ef 92       	push	r14
     1ea:	ff 92       	push	r15
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	df 93       	push	r29
     1f2:	cf 93       	push	r28
     1f4:	0f 92       	push	r0
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
	INT8U error;
	
	TimerInit();	
     1fa:	0e 94 60 11 	call	0x22c0	; 0x22c0 <TimerInit>
	while(1)
	{
		OSSemPend( sem, 0, &error );
     1fe:	8e 01       	movw	r16, r28
     200:	0f 5f       	subi	r16, 0xFF	; 255
     202:	1f 4f       	sbci	r17, 0xFF	; 255
		LED_ON();												//点亮LED的D1～D4
     204:	ee 24       	eor	r14, r14
     206:	ea 94       	dec	r14
     208:	80 ef       	ldi	r24, 0xF0	; 240
     20a:	f8 2e       	mov	r15, r24
	INT8U error;
	
	TimerInit();	
	while(1)
	{
		OSSemPend( sem, 0, &error );
     20c:	80 91 1c 02 	lds	r24, 0x021C
     210:	90 91 1d 02 	lds	r25, 0x021D
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	70 e0       	ldi	r23, 0x00	; 0
     218:	a8 01       	movw	r20, r16
     21a:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <OSSemPend>
		LED_ON();												//点亮LED的D1～D4
     21e:	e7 ba       	out	0x17, r14	; 23
     220:	f8 ba       	out	0x18, r15	; 24
		OSTimeDlyHMSM(0,0,0,2*LED_DELAY_MS );
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	20 ed       	ldi	r18, 0xD0	; 208
     22a:	37 e0       	ldi	r19, 0x07	; 7
     22c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <OSTimeDlyHMSM>
		OSSemPost( sem );
     230:	80 91 1c 02 	lds	r24, 0x021C
     234:	90 91 1d 02 	lds	r25, 0x021D
     238:	0e 94 9b 0c 	call	0x1936	; 0x1936 <OSSemPost>
     23c:	e7 cf       	rjmp	.-50     	; 0x20c <task0+0x24>

0000023e <OS_CPU_SR_SAVE>:
	.text
	.section	.text

;进入临界区.
OS_CPU_SR_SAVE:
	IN	R24, _SFR_IO_ADDR( SREG )			;保存SREG,并关中断
     23e:	8f b7       	in	r24, 0x3f	; 63
	CLI
     240:	f8 94       	cli
	RET
     242:	08 95       	ret

00000244 <OS_CPU_SR_RESTORE>:

;退出临界区
OS_CPU_SR_RESTORE:
	OUT	_SFR_IO_ADDR( SREG ),R24			;恢复SREG并开 中断
     244:	8f bf       	out	0x3f, r24	; 63
	RET
     246:	08 95       	ret

00000248 <OSStartHighRdy>:

; OSStartHighRdy()
; 启动多任务
OSStartHighRdy:
	CALL	OSTaskSwHook					; 调用OSTaskSwHook()
     248:	0e 94 4e 11 	call	0x229c	; 0x229c <OSTaskSwHook>
	LDS	R16, OSRunning						; OSRunning <= TRUE
     24c:	00 91 df 05 	lds	r16, 0x05DF
	INC	R16
     250:	03 95       	inc	r16
	STS	OSRunning, R16
     252:	00 93 df 05 	sts	0x05DF, r16

	LDS	R28, OSTCBHighRdy					; 取最高优先级任务堆栈地址并恢复至SP
     256:	c0 91 d5 06 	lds	r28, 0x06D5
	LDS	R29, OSTCBHighRdy + 1			
     25a:	d0 91 d6 06 	lds	r29, 0x06D6
	LD	R30, Y+
     25e:	e9 91       	ld	r30, Y+
	OUT	_SFR_IO_ADDR( SPL ),R30
     260:	ed bf       	out	0x3d, r30	; 61
	LD	R30, Y+
     262:	e9 91       	ld	r30, Y+
	OUT	_SFR_IO_ADDR( SPH ),R30
     264:	ee bf       	out	0x3e, r30	; 62
	
	POP_ALL									; 恢复任务上下文,开始运行多任务
     266:	0f 90       	pop	r0
     268:	0f be       	out	0x3f, r0	; 63
     26a:	ff 91       	pop	r31
     26c:	ef 91       	pop	r30
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	bf 91       	pop	r27
     274:	af 91       	pop	r26
     276:	9f 91       	pop	r25
     278:	8f 91       	pop	r24
     27a:	7f 91       	pop	r23
     27c:	6f 91       	pop	r22
     27e:	5f 91       	pop	r21
     280:	4f 91       	pop	r20
     282:	3f 91       	pop	r19
     284:	2f 91       	pop	r18
     286:	1f 91       	pop	r17
     288:	0f 91       	pop	r16
     28a:	ff 90       	pop	r15
     28c:	ef 90       	pop	r14
     28e:	df 90       	pop	r13
     290:	cf 90       	pop	r12
     292:	bf 90       	pop	r11
     294:	af 90       	pop	r10
     296:	9f 90       	pop	r9
     298:	8f 90       	pop	r8
     29a:	7f 90       	pop	r7
     29c:	6f 90       	pop	r6
     29e:	5f 90       	pop	r5
     2a0:	4f 90       	pop	r4
     2a2:	3f 90       	pop	r3
     2a4:	2f 90       	pop	r2
     2a6:	1f 90       	pop	r1
     2a8:	0f 90       	pop	r0
	RET
     2aa:	08 95       	ret

000002ac <OSCtxSw>:

; OSCtxSw()
; 任务级的上下文切换
OSCtxSw:
	PUSH_ALL
     2ac:	0f 92       	push	r0
     2ae:	1f 92       	push	r1
     2b0:	2f 92       	push	r2
     2b2:	3f 92       	push	r3
     2b4:	4f 92       	push	r4
     2b6:	5f 92       	push	r5
     2b8:	6f 92       	push	r6
     2ba:	7f 92       	push	r7
     2bc:	8f 92       	push	r8
     2be:	9f 92       	push	r9
     2c0:	af 92       	push	r10
     2c2:	bf 92       	push	r11
     2c4:	cf 92       	push	r12
     2c6:	df 92       	push	r13
     2c8:	ef 92       	push	r14
     2ca:	ff 92       	push	r15
     2cc:	0f 93       	push	r16
     2ce:	1f 93       	push	r17
     2d0:	2f 93       	push	r18
     2d2:	3f 93       	push	r19
     2d4:	4f 93       	push	r20
     2d6:	5f 93       	push	r21
     2d8:	6f 93       	push	r22
     2da:	7f 93       	push	r23
     2dc:	8f 93       	push	r24
     2de:	9f 93       	push	r25
     2e0:	af 93       	push	r26
     2e2:	bf 93       	push	r27
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	ef 93       	push	r30
     2ea:	ff 93       	push	r31
	IN	R16, _SFR_IO_ADDR( SREG )
     2ec:	0f b7       	in	r16, 0x3f	; 63
	PUSH R16
     2ee:	0f 93       	push	r16
	LDS	R28, OSTCBCur						;保存当前任务的上下文,保存SP至TCB
     2f0:	c0 91 dd 06 	lds	r28, 0x06DD
	LDS	R29, OSTCBCur + 1
     2f4:	d0 91 de 06 	lds	r29, 0x06DE
	IN	R0, _SFR_IO_ADDR( SPL )
     2f8:	0d b6       	in	r0, 0x3d	; 61
	ST	Y+, R0
     2fa:	09 92       	st	Y+, r0
	IN	R0, _SFR_IO_ADDR( SPH )
     2fc:	0e b6       	in	r0, 0x3e	; 62
	ST	Y+, R0
     2fe:	09 92       	st	Y+, r0

	CALL	OSTaskSwHook					; OS_CPU_HOOKS_EN()
     300:	0e 94 4e 11 	call	0x229c	; 0x229c <OSTaskSwHook>

	LDS	R28, OSPrioHighRdy					; OSPrioCur <= OSTCBHighRdy
     304:	c0 91 e4 05 	lds	r28, 0x05E4
	STS	OSPrioCur, R28
     308:	c0 93 e5 05 	sts	0x05E5, r28

	LDS	R28, OSTCBHighRdy					; OSTCBCur <= OSTCBHighRdy
     30c:	c0 91 d5 06 	lds	r28, 0x06D5
	LDS	R29, OSTCBHighRdy + 1
     310:	d0 91 d6 06 	lds	r29, 0x06D6
	STS	OSTCBCur, R28
     314:	c0 93 dd 06 	sts	0x06DD, r28
	STS	OSTCBCur + 1, R29
     318:	d0 93 de 06 	sts	0x06DE, r29
	
	LDS	R28, OSTCBHighRdy					; OSTCBCur <= OSTCBHighRdy
     31c:	c0 91 d5 06 	lds	r28, 0x06D5
	LDS	R29, OSTCBHighRdy + 1
     320:	d0 91 d6 06 	lds	r29, 0x06D6
	LD	R30, Y+								;恢复新任务的SP至SP
     324:	e9 91       	ld	r30, Y+
	LD	R31, Y+
     326:	f9 91       	ld	r31, Y+
	OUT	_SFR_IO_ADDR( SPL ), R30
     328:	ed bf       	out	0x3d, r30	; 61
	OUT	_SFR_IO_ADDR( SPH ), R31
     32a:	fe bf       	out	0x3e, r31	; 62

	POP_ALL									;恢复新任务的上下文,实现任务切换
     32c:	0f 90       	pop	r0
     32e:	0f be       	out	0x3f, r0	; 63
     330:	ff 91       	pop	r31
     332:	ef 91       	pop	r30
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	bf 91       	pop	r27
     33a:	af 91       	pop	r26
     33c:	9f 91       	pop	r25
     33e:	8f 91       	pop	r24
     340:	7f 91       	pop	r23
     342:	6f 91       	pop	r22
     344:	5f 91       	pop	r21
     346:	4f 91       	pop	r20
     348:	3f 91       	pop	r19
     34a:	2f 91       	pop	r18
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	bf 90       	pop	r11
     35a:	af 90       	pop	r10
     35c:	9f 90       	pop	r9
     35e:	8f 90       	pop	r8
     360:	7f 90       	pop	r7
     362:	6f 90       	pop	r6
     364:	5f 90       	pop	r5
     366:	4f 90       	pop	r4
     368:	3f 90       	pop	r3
     36a:	2f 90       	pop	r2
     36c:	1f 90       	pop	r1
     36e:	0f 90       	pop	r0
	RET
     370:	08 95       	ret

00000372 <OSIntCtxSw>:

; OSIntCtxSw()
; 中断级的任务切换
OSIntCtxSw:
	CALL	OSTaskSwHook					;OS_CPU_HOOKS_EN ()
     372:	0e 94 4e 11 	call	0x229c	; 0x229c <OSTaskSwHook>

	LDS	R28, OSPrioHighRdy					; OSPrioCur <= OSTCBHighRdy
     376:	c0 91 e4 05 	lds	r28, 0x05E4
	STS	OSPrioCur, R28
     37a:	c0 93 e5 05 	sts	0x05E5, r28

	LDS	R28, OSTCBHighRdy					; OSTCBCur <= OSTCBHighRdy
     37e:	c0 91 d5 06 	lds	r28, 0x06D5
	LDS	R29, OSTCBHighRdy + 1
     382:	d0 91 d6 06 	lds	r29, 0x06D6
	STS	OSTCBCur, R28
     386:	c0 93 dd 06 	sts	0x06DD, r28
	STS	OSTCBCur + 1, R29
     38a:	d0 93 de 06 	sts	0x06DE, r29
	
	LD	R30, Y+								; 恢复新任务的上下文,实现任务切换
     38e:	e9 91       	ld	r30, Y+
	LD	R31, Y+
     390:	f9 91       	ld	r31, Y+
	OUT	_SFR_IO_ADDR( SPL ), R30
     392:	ed bf       	out	0x3d, r30	; 61
	OUT	_SFR_IO_ADDR( SPH ), R31
     394:	fe bf       	out	0x3e, r31	; 62
	
	POP_ALL
     396:	0f 90       	pop	r0
     398:	0f be       	out	0x3f, r0	; 63
     39a:	ff 91       	pop	r31
     39c:	ef 91       	pop	r30
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	bf 91       	pop	r27
     3a4:	af 91       	pop	r26
     3a6:	9f 91       	pop	r25
     3a8:	8f 91       	pop	r24
     3aa:	7f 91       	pop	r23
     3ac:	6f 91       	pop	r22
     3ae:	5f 91       	pop	r21
     3b0:	4f 91       	pop	r20
     3b2:	3f 91       	pop	r19
     3b4:	2f 91       	pop	r18
     3b6:	1f 91       	pop	r17
     3b8:	0f 91       	pop	r16
     3ba:	ff 90       	pop	r15
     3bc:	ef 90       	pop	r14
     3be:	df 90       	pop	r13
     3c0:	cf 90       	pop	r12
     3c2:	bf 90       	pop	r11
     3c4:	af 90       	pop	r10
     3c6:	9f 90       	pop	r9
     3c8:	8f 90       	pop	r8
     3ca:	7f 90       	pop	r7
     3cc:	6f 90       	pop	r6
     3ce:	5f 90       	pop	r5
     3d0:	4f 90       	pop	r4
     3d2:	3f 90       	pop	r3
     3d4:	2f 90       	pop	r2
     3d6:	1f 90       	pop	r1
     3d8:	0f 90       	pop	r0

	RETI
     3da:	18 95       	reti

000003dc <OSTickISR>:

SIG_OUTPUT_COMPARE2:
OSTickISR:
	PUSH_ALL	
     3dc:	0f 92       	push	r0
     3de:	1f 92       	push	r1
     3e0:	2f 92       	push	r2
     3e2:	3f 92       	push	r3
     3e4:	4f 92       	push	r4
     3e6:	5f 92       	push	r5
     3e8:	6f 92       	push	r6
     3ea:	7f 92       	push	r7
     3ec:	8f 92       	push	r8
     3ee:	9f 92       	push	r9
     3f0:	af 92       	push	r10
     3f2:	bf 92       	push	r11
     3f4:	cf 92       	push	r12
     3f6:	df 92       	push	r13
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	2f 93       	push	r18
     402:	3f 93       	push	r19
     404:	4f 93       	push	r20
     406:	5f 93       	push	r21
     408:	6f 93       	push	r22
     40a:	7f 93       	push	r23
     40c:	8f 93       	push	r24
     40e:	9f 93       	push	r25
     410:	af 93       	push	r26
     412:	bf 93       	push	r27
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	ef 93       	push	r30
     41a:	ff 93       	push	r31
	IN	R16, _SFR_IO_ADDR( SREG )
     41c:	0f b7       	in	r16, 0x3f	; 63
	ORI	R16,0x80								; 必须保证任务被中断时SREG 的I位为1
     41e:	00 68       	ori	r16, 0x80	; 128
	PUSH R16
     420:	0f 93       	push	r16
	CALL OSIntEnter
     422:	0e 94 42 02 	call	0x484	; 0x484 <OSIntEnter>

	LDS	R28, OSTCBCur							; 是,保存SP至当前任务TCB
     426:	c0 91 dd 06 	lds	r28, 0x06DD
	LDS	R29, OSTCBCur + 1
     42a:	d0 91 de 06 	lds	r29, 0x06DE
	IN	R0, _SFR_IO_ADDR( SPL )
     42e:	0d b6       	in	r0, 0x3d	; 61
	ST	Y+, R0
     430:	09 92       	st	Y+, r0
	IN	R0, _SFR_IO_ADDR( SPH )
     432:	0e b6       	in	r0, 0x3e	; 62
	ST	Y+, R0
     434:	09 92       	st	Y+, r0

	CALL	OSTimeTick
     436:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <OSTimeTick>
	CALL	OSIntExit						; 注意,当有中断嵌套时,并不会发生任务切换
     43a:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <OSIntExit>

	POP_ALL
     43e:	0f 90       	pop	r0
     440:	0f be       	out	0x3f, r0	; 63
     442:	ff 91       	pop	r31
     444:	ef 91       	pop	r30
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	bf 91       	pop	r27
     44c:	af 91       	pop	r26
     44e:	9f 91       	pop	r25
     450:	8f 91       	pop	r24
     452:	7f 91       	pop	r23
     454:	6f 91       	pop	r22
     456:	5f 91       	pop	r21
     458:	4f 91       	pop	r20
     45a:	3f 91       	pop	r19
     45c:	2f 91       	pop	r18
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	df 90       	pop	r13
     468:	cf 90       	pop	r12
     46a:	bf 90       	pop	r11
     46c:	af 90       	pop	r10
     46e:	9f 90       	pop	r9
     470:	8f 90       	pop	r8
     472:	7f 90       	pop	r7
     474:	6f 90       	pop	r6
     476:	5f 90       	pop	r5
     478:	4f 90       	pop	r4
     47a:	3f 90       	pop	r3
     47c:	2f 90       	pop	r2
     47e:	1f 90       	pop	r1
     480:	0f 90       	pop	r0

	RETI
     482:	18 95       	reti

00000484 <OSIntEnter>:
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    if (OSRunning == OS_TRUE) {
     484:	80 91 df 05 	lds	r24, 0x05DF
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	39 f4       	brne	.+14     	; 0x49a <OSIntEnter+0x16>
        if (OSIntNesting < 255u) {
     48c:	80 91 dc 06 	lds	r24, 0x06DC
     490:	8f 3f       	cpi	r24, 0xFF	; 255
     492:	19 f0       	breq	.+6      	; 0x49a <OSIntEnter+0x16>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
     494:	8f 5f       	subi	r24, 0xFF	; 255
     496:	80 93 dc 06 	sts	0x06DC, r24
     49a:	08 95       	ret

0000049c <OSVersion>:
*/

INT16U  OSVersion (void)
{
    return (OS_VERSION);
}
     49c:	8e e1       	ldi	r24, 0x1E	; 30
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	08 95       	ret

000004a2 <OS_Dummy>:
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
}
     4a2:	08 95       	ret

000004a4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	ac 01       	movw	r20, r24
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
     4aa:	a0 91 dd 06 	lds	r26, 0x06DD
     4ae:	b0 91 de 06 	lds	r27, 0x06DE
     4b2:	53 96       	adiw	r26, 0x13	; 19
     4b4:	9c 93       	st	X, r25
     4b6:	8e 93       	st	-X, r24
     4b8:	52 97       	sbiw	r26, 0x12	; 18

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
     4ba:	5c 96       	adiw	r26, 0x1c	; 28
     4bc:	ec 91       	ld	r30, X
     4be:	5c 97       	sbiw	r26, 0x1c	; 28
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	5d 96       	adiw	r26, 0x1d	; 29
     4c4:	9c 91       	ld	r25, X
     4c6:	5d 97       	sbiw	r26, 0x1d	; 29
     4c8:	9a 01       	movw	r18, r20
     4ca:	2e 0f       	add	r18, r30
     4cc:	3f 1f       	adc	r19, r31
     4ce:	e9 01       	movw	r28, r18
     4d0:	8e 81       	ldd	r24, Y+6	; 0x06
     4d2:	89 2b       	or	r24, r25
     4d4:	8e 83       	std	Y+6, r24	; 0x06
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
     4d6:	5e 96       	adiw	r26, 0x1e	; 30
     4d8:	2c 91       	ld	r18, X
     4da:	da 01       	movw	r26, r20
     4dc:	15 96       	adiw	r26, 0x05	; 5
     4de:	8c 91       	ld	r24, X
     4e0:	15 97       	sbiw	r26, 0x05	; 5
     4e2:	82 2b       	or	r24, r18
     4e4:	15 96       	adiw	r26, 0x05	; 5
     4e6:	8c 93       	st	X, r24

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
     4e8:	e8 52       	subi	r30, 0x28	; 40
     4ea:	f9 4f       	sbci	r31, 0xF9	; 249
     4ec:	90 95       	com	r25
     4ee:	80 81       	ld	r24, Z
     4f0:	98 23       	and	r25, r24
     4f2:	90 83       	st	Z, r25
    if (OSRdyTbl[y] == 0) {
     4f4:	99 23       	and	r25, r25
     4f6:	31 f4       	brne	.+12     	; 0x504 <OS_EventTaskWait+0x60>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
     4f8:	20 95       	com	r18
     4fa:	80 91 d7 06 	lds	r24, 0x06D7
     4fe:	82 23       	and	r24, r18
     500:	80 93 d7 06 	sts	0x06D7, r24
    }
}
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	08 95       	ret

0000050a <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	fc 01       	movw	r30, r24
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
     510:	c0 91 dd 06 	lds	r28, 0x06DD
     514:	d0 91 de 06 	lds	r29, 0x06DE
     518:	1b 8a       	std	Y+19, r1	; 0x13
     51a:	1a 8a       	std	Y+18, r1	; 0x12
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
     51c:	9d 8b       	std	Y+21, r25	; 0x15
     51e:	8c 8b       	std	Y+20, r24	; 0x14

    pevents =  pevents_wait;
    pevent  = *pevents;
     520:	a0 81       	ld	r26, Z
     522:	b1 81       	ldd	r27, Z+1	; 0x01
     524:	9c 01       	movw	r18, r24
     526:	13 c0       	rjmp	.+38     	; 0x54e <OS_EventTaskWaitMulti+0x44>
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
     528:	ad 01       	movw	r20, r26
     52a:	4e 0f       	add	r20, r30
     52c:	51 1d       	adc	r21, r1
     52e:	fa 01       	movw	r30, r20
     530:	86 81       	ldd	r24, Z+6	; 0x06
     532:	89 2b       	or	r24, r25
     534:	86 83       	std	Z+6, r24	; 0x06
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
     536:	15 96       	adiw	r26, 0x05	; 5
     538:	8c 91       	ld	r24, X
     53a:	15 97       	sbiw	r26, 0x05	; 5
     53c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     53e:	89 2b       	or	r24, r25
     540:	15 96       	adiw	r26, 0x05	; 5
     542:	8c 93       	st	X, r24
        pevents++;
     544:	2e 5f       	subi	r18, 0xFE	; 254
     546:	3f 4f       	sbci	r19, 0xFF	; 255
        pevent = *pevents;
     548:	f9 01       	movw	r30, r18
     54a:	a0 81       	ld	r26, Z
     54c:	b1 81       	ldd	r27, Z+1	; 0x01
     54e:	ec 8d       	ldd	r30, Y+28	; 0x1c
     550:	9d 8d       	ldd	r25, Y+29	; 0x1d
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
     552:	10 97       	sbiw	r26, 0x00	; 0
     554:	49 f7       	brne	.-46     	; 0x528 <OS_EventTaskWaitMulti+0x1e>
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	e8 52       	subi	r30, 0x28	; 40
     55a:	f9 4f       	sbci	r31, 0xF9	; 249
     55c:	89 2f       	mov	r24, r25
     55e:	80 95       	com	r24
     560:	90 81       	ld	r25, Z
     562:	89 23       	and	r24, r25
     564:	80 83       	st	Z, r24
    if (OSRdyTbl[y] == 0) {
     566:	88 23       	and	r24, r24
     568:	39 f4       	brne	.+14     	; 0x578 <OS_EventTaskWaitMulti+0x6e>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
     56a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     56c:	90 95       	com	r25
     56e:	80 91 d7 06 	lds	r24, 0x06D7
     572:	89 23       	and	r24, r25
     574:	80 93 d7 06 	sts	0x06D7, r24
    }
}
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	08 95       	ret

0000057e <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	dc 01       	movw	r26, r24
     584:	eb 01       	movw	r28, r22
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
     586:	5c 96       	adiw	r26, 0x1c	; 28
     588:	8c 91       	ld	r24, X
     58a:	5c 97       	sbiw	r26, 0x1c	; 28
     58c:	fb 01       	movw	r30, r22
     58e:	e8 0f       	add	r30, r24
     590:	f1 1d       	adc	r31, r1
     592:	5d 96       	adiw	r26, 0x1d	; 29
     594:	8c 91       	ld	r24, X
     596:	5d 97       	sbiw	r26, 0x1d	; 29
     598:	80 95       	com	r24
     59a:	96 81       	ldd	r25, Z+6	; 0x06
     59c:	89 23       	and	r24, r25
     59e:	86 83       	std	Z+6, r24	; 0x06
    if (pevent->OSEventTbl[y] == 0) {
     5a0:	88 23       	and	r24, r24
     5a2:	31 f4       	brne	.+12     	; 0x5b0 <OS_EventTaskRemove+0x32>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
     5a4:	5e 96       	adiw	r26, 0x1e	; 30
     5a6:	9c 91       	ld	r25, X
     5a8:	90 95       	com	r25
     5aa:	8d 81       	ldd	r24, Y+5	; 0x05
     5ac:	89 23       	and	r24, r25
     5ae:	8d 83       	std	Y+5, r24	; 0x05
    }
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	fc 01       	movw	r30, r24
     5bc:	db 01       	movw	r26, r22
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
     5be:	84 8d       	ldd	r24, Z+28	; 0x1c
    bity    =  ptcb->OSTCBBitY;
     5c0:	26 8d       	ldd	r18, Z+30	; 0x1e
    bitx    =  ptcb->OSTCBBitX;
     5c2:	95 8d       	ldd	r25, Z+29	; 0x1d
    pevents =  pevents_multi;
    pevent  = *pevents;
     5c4:	cd 91       	ld	r28, X+
     5c6:	dc 91       	ld	r29, X
     5c8:	11 97       	sbiw	r26, 0x01	; 1
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
        pevent->OSEventTbl[y]  &= ~bitx;
     5ca:	48 2f       	mov	r20, r24
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	90 95       	com	r25
        if (pevent->OSEventTbl[y] == 0) {
            pevent->OSEventGrp &= ~bity;
     5d0:	20 95       	com	r18
     5d2:	0f c0       	rjmp	.+30     	; 0x5f2 <OS_EventTaskRemoveMulti+0x3c>
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
        pevent->OSEventTbl[y]  &= ~bitx;
     5d4:	fe 01       	movw	r30, r28
     5d6:	e4 0f       	add	r30, r20
     5d8:	f5 1f       	adc	r31, r21
     5da:	86 81       	ldd	r24, Z+6	; 0x06
     5dc:	89 23       	and	r24, r25
     5de:	86 83       	std	Z+6, r24	; 0x06
        if (pevent->OSEventTbl[y] == 0) {
     5e0:	88 23       	and	r24, r24
     5e2:	19 f4       	brne	.+6      	; 0x5ea <OS_EventTaskRemoveMulti+0x34>
            pevent->OSEventGrp &= ~bity;
     5e4:	8d 81       	ldd	r24, Y+5	; 0x05
     5e6:	82 23       	and	r24, r18
     5e8:	8d 83       	std	Y+5, r24	; 0x05
        }
        pevents++;
     5ea:	12 96       	adiw	r26, 0x02	; 2
        pevent = *pevents;
     5ec:	cd 91       	ld	r28, X+
     5ee:	dc 91       	ld	r29, X
     5f0:	11 97       	sbiw	r26, 0x01	; 1
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
     5f2:	20 97       	sbiw	r28, 0x00	; 0
     5f4:	79 f7       	brne	.-34     	; 0x5d4 <OS_EventTaskRemoveMulti+0x1e>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	08 95       	ret

000005fc <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
     5fc:	ff 92       	push	r15
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	8c 01       	movw	r16, r24
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
     608:	dc 01       	movw	r26, r24
     60a:	15 96       	adiw	r26, 0x05	; 5
     60c:	ec 91       	ld	r30, X
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	e4 5e       	subi	r30, 0xE4	; 228
     612:	fe 4f       	sbci	r31, 0xFE	; 254
     614:	80 81       	ld	r24, Z
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
     616:	68 2f       	mov	r22, r24
     618:	70 e0       	ldi	r23, 0x00	; 0
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
     61a:	f8 01       	movw	r30, r16
     61c:	e6 0f       	add	r30, r22
     61e:	f7 1f       	adc	r31, r23
     620:	e6 81       	ldd	r30, Z+6	; 0x06
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	e4 5e       	subi	r30, 0xE4	; 228
     626:	fe 4f       	sbci	r31, 0xFE	; 254
     628:	f8 2e       	mov	r15, r24
     62a:	ff 0c       	add	r15, r15
     62c:	ff 0c       	add	r15, r15
     62e:	ff 0c       	add	r15, r15
     630:	80 81       	ld	r24, Z
     632:	f8 0e       	add	r15, r24
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
     634:	ef 2d       	mov	r30, r15
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	ee 0f       	add	r30, r30
     63a:	ff 1f       	adc	r31, r31
     63c:	ea 5f       	subi	r30, 0xFA	; 250
     63e:	f4 4f       	sbci	r31, 0xF4	; 244
     640:	c0 81       	ld	r28, Z
     642:	d1 81       	ldd	r29, Z+1	; 0x01
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
     644:	1f 8a       	std	Y+23, r1	; 0x17
     646:	1e 8a       	std	Y+22, r1	; 0x16
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
     648:	40 95       	com	r20
     64a:	88 8d       	ldd	r24, Y+24	; 0x18
     64c:	84 23       	and	r24, r20
     64e:	88 8f       	std	Y+24, r24	; 0x18
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
     650:	29 8f       	std	Y+25, r18	; 0x19
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
     652:	83 fd       	sbrc	r24, 3
     654:	0d c0       	rjmp	.+26     	; 0x670 <OS_EventTaskRdy+0x74>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
     656:	80 91 d7 06 	lds	r24, 0x06D7
     65a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     65c:	89 2b       	or	r24, r25
     65e:	80 93 d7 06 	sts	0x06D7, r24
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
     662:	fb 01       	movw	r30, r22
     664:	e8 52       	subi	r30, 0x28	; 40
     666:	f9 4f       	sbci	r31, 0xF9	; 249
     668:	80 81       	ld	r24, Z
     66a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     66c:	89 2b       	or	r24, r25
     66e:	80 83       	st	Z, r24
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
     670:	ce 01       	movw	r24, r28
     672:	b8 01       	movw	r22, r16
     674:	0e 94 bf 02 	call	0x57e	; 0x57e <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
     678:	6c 89       	ldd	r22, Y+20	; 0x14
     67a:	7d 89       	ldd	r23, Y+21	; 0x15
     67c:	61 15       	cp	r22, r1
     67e:	71 05       	cpc	r23, r1
     680:	29 f0       	breq	.+10     	; 0x68c <OS_EventTaskRdy+0x90>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
     682:	ce 01       	movw	r24, r28
     684:	0e 94 db 02 	call	0x5b6	; 0x5b6 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
     688:	1b 8b       	std	Y+19, r17	; 0x13
     68a:	0a 8b       	std	Y+18, r16	; 0x12
    }
#endif

    return (prio);
}
     68c:	8f 2d       	mov	r24, r15
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	ff 90       	pop	r15
     698:	08 95       	ret

0000069a <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
     69a:	fc 01       	movw	r30, r24
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
     69c:	15 82       	std	Z+5, r1	; 0x05
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
        *ptbl++ = 0;
     69e:	16 82       	std	Z+6, r1	; 0x06
     6a0:	17 82       	std	Z+7, r1	; 0x07
    }
}
     6a2:	08 95       	ret

000006a4 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
     6a4:	fc 01       	movw	r30, r24
     6a6:	03 c0       	rjmp	.+6      	; 0x6ae <OS_MemClr+0xa>
    while (size > 0) {
        *pdest++ = (INT8U)0;
     6a8:	11 92       	st	Z+, r1
        size--;
     6aa:	61 50       	subi	r22, 0x01	; 1
     6ac:	70 40       	sbci	r23, 0x00	; 0
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
     6ae:	61 15       	cp	r22, r1
     6b0:	71 05       	cpc	r23, r1
     6b2:	d1 f7       	brne	.-12     	; 0x6a8 <OS_MemClr+0x4>
        *pdest++ = (INT8U)0;
        size--;
    }
}
     6b4:	08 95       	ret

000006b6 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
     6b6:	dc 01       	movw	r26, r24
     6b8:	fb 01       	movw	r30, r22
     6ba:	04 c0       	rjmp	.+8      	; 0x6c4 <OS_MemCopy+0xe>
    while (size > 0) {
        *pdest++ = *psrc++;
     6bc:	81 91       	ld	r24, Z+
     6be:	8d 93       	st	X+, r24
        size--;
     6c0:	41 50       	subi	r20, 0x01	; 1
     6c2:	50 40       	sbci	r21, 0x00	; 0
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
     6c4:	41 15       	cp	r20, r1
     6c6:	51 05       	cpc	r21, r1
     6c8:	c9 f7       	brne	.-14     	; 0x6bc <OS_MemCopy+0x6>
        *pdest++ = *psrc++;
        size--;
    }
}
     6ca:	08 95       	ret

000006cc <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
     6cc:	58 2f       	mov	r21, r24
     6ce:	db 01       	movw	r26, r22
     6d0:	28 2f       	mov	r18, r24
     6d2:	39 2f       	mov	r19, r25
     6d4:	f9 01       	movw	r30, r18
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <OS_StrCopy+0x10>
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
        *pdest++ = *psrc++;
     6d8:	91 93       	st	Z+, r25
     6da:	11 96       	adiw	r26, 0x01	; 1
     6dc:	8e 2f       	mov	r24, r30
     6de:	85 1b       	sub	r24, r21
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
     6e0:	9c 91       	ld	r25, X
     6e2:	99 23       	and	r25, r25
     6e4:	c9 f7       	brne	.-14     	; 0x6d8 <OS_StrCopy+0xc>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
     6e6:	10 82       	st	Z, r1
    return (len);
}
     6e8:	08 95       	ret

000006ea <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
     6ea:	58 2f       	mov	r21, r24
     6ec:	28 2f       	mov	r18, r24
     6ee:	39 2f       	mov	r19, r25
     6f0:	f9 01       	movw	r30, r18
     6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <OS_StrLen+0xc>
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
        psrc++;
     6f4:	31 96       	adiw	r30, 0x01	; 1
     6f6:	9e 2f       	mov	r25, r30
     6f8:	95 1b       	sub	r25, r21
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
     6fa:	80 81       	ld	r24, Z
     6fc:	88 23       	and	r24, r24
     6fe:	d1 f7       	brne	.-12     	; 0x6f4 <OS_StrLen+0xa>
        psrc++;
        len++;
    }
    return (len);
}
     700:	89 2f       	mov	r24, r25
     702:	08 95       	ret

00000704 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
     704:	fc 01       	movw	r30, r24
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
     706:	20 ff       	sbrs	r18, 0
     708:	0d c0       	rjmp	.+26     	; 0x724 <OS_TaskStkClr+0x20>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
     70a:	21 fd       	sbrc	r18, 1
     70c:	06 c0       	rjmp	.+12     	; 0x71a <OS_TaskStkClr+0x16>
     70e:	08 95       	ret
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
                size--;
     710:	41 50       	subi	r20, 0x01	; 1
     712:	50 40       	sbci	r21, 0x00	; 0
     714:	60 40       	sbci	r22, 0x00	; 0
     716:	70 40       	sbci	r23, 0x00	; 0
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
     718:	11 92       	st	Z+, r1
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
     71a:	41 15       	cp	r20, r1
     71c:	51 05       	cpc	r21, r1
     71e:	61 05       	cpc	r22, r1
     720:	71 05       	cpc	r23, r1
     722:	b1 f7       	brne	.-20     	; 0x710 <OS_TaskStkClr+0xc>
     724:	08 95       	ret

00000726 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	7b 01       	movw	r14, r22
     730:	8c 01       	movw	r16, r24
    OS_CPU_SR  cpu_sr = 0;
#endif



    OS_ENTER_CRITICAL();
     732:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    OSTime = ticks;
     736:	e0 92 df 06 	sts	0x06DF, r14
     73a:	f0 92 e0 06 	sts	0x06E0, r15
     73e:	00 93 e1 06 	sts	0x06E1, r16
     742:	10 93 e2 06 	sts	0x06E2, r17
    OS_EXIT_CRITICAL();
     746:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
}
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	ef 90       	pop	r14
     752:	08 95       	ret

00000754 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
    OS_CPU_SR  cpu_sr = 0;
#endif



    OS_ENTER_CRITICAL();
     75c:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    ticks = OSTime;
     760:	e0 90 df 06 	lds	r14, 0x06DF
     764:	f0 90 e0 06 	lds	r15, 0x06E0
     768:	00 91 e1 06 	lds	r16, 0x06E1
     76c:	10 91 e2 06 	lds	r17, 0x06E2
    OS_EXIT_CRITICAL();
     770:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    return (ticks);
}
     774:	b7 01       	movw	r22, r14
     776:	c8 01       	movw	r24, r16
     778:	1f 91       	pop	r17
     77a:	0f 91       	pop	r16
     77c:	ff 90       	pop	r15
     77e:	ef 90       	pop	r14
     780:	08 95       	ret

00000782 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	18 2f       	mov	r17, r24
     78a:	eb 01       	movw	r28, r22
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    OS_ENTER_CRITICAL();
     78c:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
     790:	98 2f       	mov	r25, r24
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
     792:	1f 3f       	cpi	r17, 0xFF	; 255
     794:	29 f4       	brne	.+10     	; 0x7a0 <OSTaskQuery+0x1e>
        prio = OSTCBCur->OSTCBPrio;
     796:	e0 91 dd 06 	lds	r30, 0x06DD
     79a:	f0 91 de 06 	lds	r31, 0x06DE
     79e:	12 8d       	ldd	r17, Z+26	; 0x1a
    }
    ptcb = OSTCBPrioTbl[prio];
     7a0:	e1 2f       	mov	r30, r17
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	ee 0f       	add	r30, r30
     7a6:	ff 1f       	adc	r31, r31
     7a8:	ea 5f       	subi	r30, 0xFA	; 250
     7aa:	f4 4f       	sbci	r31, 0xF4	; 244
     7ac:	40 81       	ld	r20, Z
     7ae:	51 81       	ldd	r21, Z+1	; 0x01
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
     7b0:	41 15       	cp	r20, r1
     7b2:	51 05       	cpc	r21, r1
     7b4:	29 f4       	brne	.+10     	; 0x7c0 <OSTaskQuery+0x3e>
        OS_EXIT_CRITICAL();
     7b6:	89 2f       	mov	r24, r25
     7b8:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
     7bc:	89 e2       	ldi	r24, 0x29	; 41
     7be:	1b c0       	rjmp	.+54     	; 0x7f6 <OSTaskQuery+0x74>
        return (OS_ERR_PRIO);
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
     7c0:	41 30       	cpi	r20, 0x01	; 1
     7c2:	51 05       	cpc	r21, r1
     7c4:	29 f4       	brne	.+10     	; 0x7d0 <OSTaskQuery+0x4e>
        OS_EXIT_CRITICAL();
     7c6:	89 2f       	mov	r24, r25
     7c8:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
     7cc:	83 e4       	ldi	r24, 0x43	; 67
     7ce:	13 c0       	rjmp	.+38     	; 0x7f6 <OSTaskQuery+0x74>
        return (OS_ERR_TASK_NOT_EXIST);
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	30 e0       	ldi	r19, 0x00	; 0
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
        *pdest++ = *psrc++;
     7d4:	fe 01       	movw	r30, r28
     7d6:	e2 0f       	add	r30, r18
     7d8:	f3 1f       	adc	r31, r19
     7da:	da 01       	movw	r26, r20
     7dc:	a2 0f       	add	r26, r18
     7de:	b3 1f       	adc	r27, r19
     7e0:	8c 91       	ld	r24, X
     7e2:	80 83       	st	Z, r24
     7e4:	2f 5f       	subi	r18, 0xFF	; 255
     7e6:	3f 4f       	sbci	r19, 0xFF	; 255
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
     7e8:	22 34       	cpi	r18, 0x42	; 66
     7ea:	31 05       	cpc	r19, r1
     7ec:	99 f7       	brne	.-26     	; 0x7d4 <OSTaskQuery+0x52>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    OS_EXIT_CRITICAL();
     7ee:	89 2f       	mov	r24, r25
     7f0:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
     7f4:	80 e0       	ldi	r24, 0x00	; 0
    return (OS_ERR_NONE);
}
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	08 95       	ret

000007fe <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
     7fe:	cf 92       	push	r12
     800:	df 92       	push	r13
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	18 2f       	mov	r17, r24
     810:	eb 01       	movw	r28, r22
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
     812:	18 82       	st	Y, r1
     814:	19 82       	std	Y+1, r1	; 0x01
     816:	1a 82       	std	Y+2, r1	; 0x02
     818:	1b 82       	std	Y+3, r1	; 0x03
    p_stk_data->OSUsed = 0;
     81a:	1c 82       	std	Y+4, r1	; 0x04
     81c:	1d 82       	std	Y+5, r1	; 0x05
     81e:	1e 82       	std	Y+6, r1	; 0x06
     820:	1f 82       	std	Y+7, r1	; 0x07
    OS_ENTER_CRITICAL();
     822:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
     826:	98 2f       	mov	r25, r24
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
     828:	1f 3f       	cpi	r17, 0xFF	; 255
     82a:	29 f4       	brne	.+10     	; 0x836 <OSTaskStkChk+0x38>
        prio = OSTCBCur->OSTCBPrio;
     82c:	e0 91 dd 06 	lds	r30, 0x06DD
     830:	f0 91 de 06 	lds	r31, 0x06DE
     834:	12 8d       	ldd	r17, Z+26	; 0x1a
    }
    ptcb = OSTCBPrioTbl[prio];
     836:	e1 2f       	mov	r30, r17
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	ee 0f       	add	r30, r30
     83c:	ff 1f       	adc	r31, r31
     83e:	ea 5f       	subi	r30, 0xFA	; 250
     840:	f4 4f       	sbci	r31, 0xF4	; 244
     842:	01 90       	ld	r0, Z+
     844:	f0 81       	ld	r31, Z
     846:	e0 2d       	mov	r30, r0
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
     848:	30 97       	sbiw	r30, 0x00	; 0
     84a:	19 f0       	breq	.+6      	; 0x852 <OSTaskStkChk+0x54>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    if (ptcb == OS_TCB_RESERVED) {
     84c:	e1 30       	cpi	r30, 0x01	; 1
     84e:	f1 05       	cpc	r31, r1
     850:	29 f4       	brne	.+10     	; 0x85c <OSTaskStkChk+0x5e>
        OS_EXIT_CRITICAL();
     852:	89 2f       	mov	r24, r25
     854:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
     858:	83 e4       	ldi	r24, 0x43	; 67
     85a:	2d c0       	rjmp	.+90     	; 0x8b6 <OSTaskStkChk+0xb8>
        return (OS_ERR_TASK_NOT_EXIST);
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
     85c:	82 85       	ldd	r24, Z+10	; 0x0a
     85e:	80 fd       	sbrc	r24, 0
     860:	05 c0       	rjmp	.+10     	; 0x86c <OSTaskStkChk+0x6e>
        OS_EXIT_CRITICAL();
     862:	89 2f       	mov	r24, r25
     864:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
     868:	85 e4       	ldi	r24, 0x45	; 69
     86a:	25 c0       	rjmp	.+74     	; 0x8b6 <OSTaskStkChk+0xb8>
        return (OS_ERR_TASK_OPT);
    }
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
     86c:	e6 80       	ldd	r14, Z+6	; 0x06
     86e:	f7 80       	ldd	r15, Z+7	; 0x07
     870:	00 85       	ldd	r16, Z+8	; 0x08
     872:	11 85       	ldd	r17, Z+9	; 0x09
    pchk  = ptcb->OSTCBStkBottom;
     874:	c4 80       	ldd	r12, Z+4	; 0x04
     876:	d5 80       	ldd	r13, Z+5	; 0x05
    OS_EXIT_CRITICAL();
     878:	89 2f       	mov	r24, r25
     87a:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	04 c0       	rjmp	.+8      	; 0x890 <OSTaskStkChk+0x92>
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
        nfree++;
     888:	2f 5f       	subi	r18, 0xFF	; 255
     88a:	3f 4f       	sbci	r19, 0xFF	; 255
     88c:	4f 4f       	sbci	r20, 0xFF	; 255
     88e:	5f 4f       	sbci	r21, 0xFF	; 255
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
     890:	f6 01       	movw	r30, r12
     892:	e2 0f       	add	r30, r18
     894:	f3 1f       	adc	r31, r19
     896:	80 81       	ld	r24, Z
     898:	88 23       	and	r24, r24
     89a:	b1 f3       	breq	.-20     	; 0x888 <OSTaskStkChk+0x8a>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
     89c:	28 83       	st	Y, r18
     89e:	39 83       	std	Y+1, r19	; 0x01
     8a0:	4a 83       	std	Y+2, r20	; 0x02
     8a2:	5b 83       	std	Y+3, r21	; 0x03
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
     8a4:	e2 1a       	sub	r14, r18
     8a6:	f3 0a       	sbc	r15, r19
     8a8:	04 0b       	sbc	r16, r20
     8aa:	15 0b       	sbc	r17, r21
     8ac:	ec 82       	std	Y+4, r14	; 0x04
     8ae:	fd 82       	std	Y+5, r15	; 0x05
     8b0:	0e 83       	std	Y+6, r16	; 0x06
     8b2:	1f 83       	std	Y+7, r17	; 0x07
     8b4:	80 e0       	ldi	r24, 0x00	; 0
    return (OS_ERR_NONE);
}
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	ff 90       	pop	r15
     8c0:	ef 90       	pop	r14
     8c2:	df 90       	pop	r13
     8c4:	cf 90       	pop	r12
     8c6:	08 95       	ret

000008c8 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
     8c8:	cf 92       	push	r12
     8ca:	df 92       	push	r13
     8cc:	ff 92       	push	r15
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	df 93       	push	r29
     8d4:	cf 93       	push	r28
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	28 97       	sbiw	r28, 0x08	; 8
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	f8 94       	cli
     8e0:	de bf       	out	0x3e, r29	; 62
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	cd bf       	out	0x3d, r28	; 61
     8e6:	06 e0       	ldi	r16, 0x06	; 6
     8e8:	1b e0       	ldi	r17, 0x0B	; 11
     8ea:	ff 24       	eor	r15, r15
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
        err = OSTaskStkChk(prio, &stk_data);
     8ec:	6e 01       	movw	r12, r28
     8ee:	08 94       	sec
     8f0:	c1 1c       	adc	r12, r1
     8f2:	d1 1c       	adc	r13, r1
     8f4:	8f 2d       	mov	r24, r15
     8f6:	b6 01       	movw	r22, r12
     8f8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <OSTaskStkChk>
        if (err == OS_ERR_NONE) {
     8fc:	88 23       	and	r24, r24
     8fe:	c1 f4       	brne	.+48     	; 0x930 <OS_TaskStatStkChk+0x68>
            ptcb = OSTCBPrioTbl[prio];
     900:	d8 01       	movw	r26, r16
     902:	ed 91       	ld	r30, X+
     904:	fc 91       	ld	r31, X
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
     906:	30 97       	sbiw	r30, 0x00	; 0
     908:	99 f0       	breq	.+38     	; 0x930 <OS_TaskStatStkChk+0x68>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
     90a:	e1 30       	cpi	r30, 0x01	; 1
     90c:	f1 05       	cpc	r31, r1
     90e:	81 f0       	breq	.+32     	; 0x930 <OS_TaskStatStkChk+0x68>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
     910:	84 81       	ldd	r24, Z+4	; 0x04
     912:	95 81       	ldd	r25, Z+5	; 0x05
     914:	26 81       	ldd	r18, Z+6	; 0x06
     916:	37 81       	ldd	r19, Z+7	; 0x07
     918:	82 0f       	add	r24, r18
     91a:	93 1f       	adc	r25, r19
     91c:	95 a7       	std	Z+45, r25	; 0x2d
     91e:	84 a7       	std	Z+44, r24	; 0x2c
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
     920:	8d 81       	ldd	r24, Y+5	; 0x05
     922:	9e 81       	ldd	r25, Y+6	; 0x06
     924:	af 81       	ldd	r26, Y+7	; 0x07
     926:	b8 85       	ldd	r27, Y+8	; 0x08
     928:	86 a7       	std	Z+46, r24	; 0x2e
     92a:	97 a7       	std	Z+47, r25	; 0x2f
     92c:	a0 ab       	std	Z+48, r26	; 0x30
     92e:	b1 ab       	std	Z+49, r27	; 0x31
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
     930:	f3 94       	inc	r15
     932:	0e 5f       	subi	r16, 0xFE	; 254
     934:	1f 4f       	sbci	r17, 0xFF	; 255
     936:	bf e0       	ldi	r27, 0x0F	; 15
     938:	fb 16       	cp	r15, r27
     93a:	e1 f6       	brne	.-72     	; 0x8f4 <OS_TaskStatStkChk+0x2c>
#endif
                }
            }
        }
    }
}
     93c:	28 96       	adiw	r28, 0x08	; 8
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
     948:	cf 91       	pop	r28
     94a:	df 91       	pop	r29
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	ff 90       	pop	r15
     952:	df 90       	pop	r13
     954:	cf 90       	pop	r12
     956:	08 95       	ret

00000958 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
     958:	ef 92       	push	r14
     95a:	ff 92       	push	r15
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	18 2f       	mov	r17, r24
     964:	eb 01       	movw	r28, r22
     966:	7a 01       	movw	r14, r20
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
        return;
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
     968:	80 91 dc 06 	lds	r24, 0x06DC
     96c:	88 23       	and	r24, r24
     96e:	11 f0       	breq	.+4      	; 0x974 <OSTaskNameSet+0x1c>
        *perr = OS_ERR_NAME_SET_ISR;
     970:	82 e1       	ldi	r24, 0x12	; 18
     972:	2b c0       	rjmp	.+86     	; 0x9ca <OSTaskNameSet+0x72>
        return;
    }
    OS_ENTER_CRITICAL();
     974:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
     978:	28 2f       	mov	r18, r24
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
     97a:	1f 3f       	cpi	r17, 0xFF	; 255
     97c:	29 f4       	brne	.+10     	; 0x988 <OSTaskNameSet+0x30>
        prio = OSTCBCur->OSTCBPrio;
     97e:	e0 91 dd 06 	lds	r30, 0x06DD
     982:	f0 91 de 06 	lds	r31, 0x06DE
     986:	12 8d       	ldd	r17, Z+26	; 0x1a
    }
    ptcb = OSTCBPrioTbl[prio];
     988:	e1 2f       	mov	r30, r17
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	ee 0f       	add	r30, r30
     98e:	ff 1f       	adc	r31, r31
     990:	ea 5f       	subi	r30, 0xFA	; 250
     992:	f4 4f       	sbci	r31, 0xF4	; 244
     994:	01 90       	ld	r0, Z+
     996:	f0 81       	ld	r31, Z
     998:	e0 2d       	mov	r30, r0
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
     99a:	30 97       	sbiw	r30, 0x00	; 0
     99c:	29 f0       	breq	.+10     	; 0x9a8 <OSTaskNameSet+0x50>
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
        return;
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
     99e:	e1 30       	cpi	r30, 0x01	; 1
     9a0:	f1 05       	cpc	r31, r1
     9a2:	11 f0       	breq	.+4      	; 0x9a8 <OSTaskNameSet+0x50>
     9a4:	de 01       	movw	r26, r28
     9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <OSTaskNameSet+0x5c>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
     9a8:	82 2f       	mov	r24, r18
     9aa:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
        *perr = OS_ERR_TASK_NOT_EXIST;
     9ae:	83 e4       	ldi	r24, 0x43	; 67
     9b0:	0c c0       	rjmp	.+24     	; 0x9ca <OSTaskNameSet+0x72>
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
        psrc++;
     9b2:	11 96       	adiw	r26, 0x01	; 1
     9b4:	9a 2f       	mov	r25, r26
     9b6:	9c 1b       	sub	r25, r28
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
     9b8:	8c 91       	ld	r24, X
     9ba:	88 23       	and	r24, r24
     9bc:	d1 f7       	brne	.-12     	; 0x9b2 <OSTaskNameSet+0x5a>
        return;
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
     9be:	90 31       	cpi	r25, 0x10	; 16
     9c0:	38 f0       	brcs	.+14     	; 0x9d0 <OSTaskNameSet+0x78>
        OS_EXIT_CRITICAL();
     9c2:	82 2f       	mov	r24, r18
     9c4:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
     9c8:	81 e4       	ldi	r24, 0x41	; 65
     9ca:	f7 01       	movw	r30, r14
     9cc:	80 83       	st	Z, r24
     9ce:	0d c0       	rjmp	.+26     	; 0x9ea <OSTaskNameSet+0x92>
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
     9d0:	f2 96       	adiw	r30, 0x32	; 50
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <OSTaskNameSet+0x80>
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
        *pdest++ = *psrc++;
     9d4:	81 93       	st	Z+, r24
     9d6:	21 96       	adiw	r28, 0x01	; 1
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
     9d8:	88 81       	ld	r24, Y
     9da:	88 23       	and	r24, r24
     9dc:	d9 f7       	brne	.-10     	; 0x9d4 <OSTaskNameSet+0x7c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
     9de:	10 82       	st	Z, r1
    OS_EXIT_CRITICAL();
     9e0:	82 2f       	mov	r24, r18
     9e2:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    *perr = OS_ERR_NONE;
     9e6:	f7 01       	movw	r30, r14
     9e8:	10 82       	st	Z, r1
}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	ff 90       	pop	r15
     9f2:	ef 90       	pop	r14
     9f4:	08 95       	ret

000009f6 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	18 2f       	mov	r17, r24
     a02:	eb 01       	movw	r28, r22
     a04:	7a 01       	movw	r14, r20
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
     a06:	80 91 dc 06 	lds	r24, 0x06DC
     a0a:	88 23       	and	r24, r24
     a0c:	11 f0       	breq	.+4      	; 0xa12 <OSTaskNameGet+0x1c>
        *perr = OS_ERR_NAME_GET_ISR;
     a0e:	81 e1       	ldi	r24, 0x11	; 17
     a10:	18 c0       	rjmp	.+48     	; 0xa42 <OSTaskNameGet+0x4c>
        return (0);
    }
    OS_ENTER_CRITICAL();
     a12:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
     a16:	28 2f       	mov	r18, r24
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
     a18:	1f 3f       	cpi	r17, 0xFF	; 255
     a1a:	29 f4       	brne	.+10     	; 0xa26 <OSTaskNameGet+0x30>
        prio = OSTCBCur->OSTCBPrio;
     a1c:	e0 91 dd 06 	lds	r30, 0x06DD
     a20:	f0 91 de 06 	lds	r31, 0x06DE
     a24:	12 8d       	ldd	r17, Z+26	; 0x1a
    }
    ptcb = OSTCBPrioTbl[prio];
     a26:	e1 2f       	mov	r30, r17
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	ee 0f       	add	r30, r30
     a2c:	ff 1f       	adc	r31, r31
     a2e:	ea 5f       	subi	r30, 0xFA	; 250
     a30:	f4 4f       	sbci	r31, 0xF4	; 244
     a32:	80 81       	ld	r24, Z
     a34:	91 81       	ldd	r25, Z+1	; 0x01
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
     a36:	00 97       	sbiw	r24, 0x00	; 0
     a38:	41 f4       	brne	.+16     	; 0xa4a <OSTaskNameGet+0x54>
        OS_EXIT_CRITICAL();                              /* No                                         */
     a3a:	82 2f       	mov	r24, r18
     a3c:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
        *perr = OS_ERR_TASK_NOT_EXIST;
     a40:	83 e4       	ldi	r24, 0x43	; 67
     a42:	f7 01       	movw	r30, r14
     a44:	80 83       	st	Z, r24
     a46:	10 e0       	ldi	r17, 0x00	; 0
     a48:	14 c0       	rjmp	.+40     	; 0xa72 <OSTaskNameGet+0x7c>
        return (0);
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
     a4a:	81 30       	cpi	r24, 0x01	; 1
     a4c:	91 05       	cpc	r25, r1
     a4e:	a9 f3       	breq	.-22     	; 0xa3a <OSTaskNameGet+0x44>
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
        return (0);
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
     a50:	fc 01       	movw	r30, r24
     a52:	f2 96       	adiw	r30, 0x32	; 50
     a54:	df 01       	movw	r26, r30
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <OSTaskNameGet+0x66>
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
        *pdest++ = *psrc++;
     a58:	99 93       	st	Y+, r25
     a5a:	11 96       	adiw	r26, 0x01	; 1
     a5c:	1a 2f       	mov	r17, r26
     a5e:	1e 1b       	sub	r17, r30
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
     a60:	9c 91       	ld	r25, X
     a62:	99 23       	and	r25, r25
     a64:	c9 f7       	brne	.-14     	; 0xa58 <OSTaskNameGet+0x62>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
     a66:	18 82       	st	Y, r1
    OS_EXIT_CRITICAL();
     a68:	82 2f       	mov	r24, r18
     a6a:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    *perr = OS_ERR_NONE;
     a6e:	f7 01       	movw	r30, r14
     a70:	10 82       	st	Z, r1
    return (len);
}
     a72:	81 2f       	mov	r24, r17
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	ff 90       	pop	r15
     a7c:	ef 90       	pop	r14
     a7e:	08 95       	ret

00000a80 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
     a80:	1f 93       	push	r17
     a82:	18 2f       	mov	r17, r24
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
     a84:	8e 30       	cpi	r24, 0x0E	; 14
     a86:	11 f4       	brne	.+4      	; 0xa8c <OSTaskDelReq+0xc>
     a88:	1e e3       	ldi	r17, 0x3E	; 62
     a8a:	2b c0       	rjmp	.+86     	; 0xae2 <OSTaskDelReq+0x62>
        if (prio != OS_PRIO_SELF) {
            return (OS_ERR_PRIO_INVALID);
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
     a8c:	8f 3f       	cpi	r24, 0xFF	; 255
     a8e:	51 f4       	brne	.+20     	; 0xaa4 <OSTaskDelReq+0x24>
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
     a90:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
     a94:	e0 91 dd 06 	lds	r30, 0x06DD
     a98:	f0 91 de 06 	lds	r31, 0x06DE
     a9c:	17 8d       	ldd	r17, Z+31	; 0x1f
        OS_EXIT_CRITICAL();
     a9e:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
     aa2:	1f c0       	rjmp	.+62     	; 0xae2 <OSTaskDelReq+0x62>
        return (stat);
    }
    OS_ENTER_CRITICAL();
     aa4:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
     aa8:	98 2f       	mov	r25, r24
    ptcb = OSTCBPrioTbl[prio];
     aaa:	e1 2f       	mov	r30, r17
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	ee 0f       	add	r30, r30
     ab0:	ff 1f       	adc	r31, r31
     ab2:	ea 5f       	subi	r30, 0xFA	; 250
     ab4:	f4 4f       	sbci	r31, 0xF4	; 244
     ab6:	01 90       	ld	r0, Z+
     ab8:	f0 81       	ld	r31, Z
     aba:	e0 2d       	mov	r30, r0
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
     abc:	30 97       	sbiw	r30, 0x00	; 0
     abe:	21 f4       	brne	.+8      	; 0xac8 <OSTaskDelReq+0x48>
        OS_EXIT_CRITICAL();
     ac0:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
     ac4:	13 e4       	ldi	r17, 0x43	; 67
     ac6:	0d c0       	rjmp	.+26     	; 0xae2 <OSTaskDelReq+0x62>
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
     ac8:	e1 30       	cpi	r30, 0x01	; 1
     aca:	f1 05       	cpc	r31, r1
     acc:	21 f4       	brne	.+8      	; 0xad6 <OSTaskDelReq+0x56>
        OS_EXIT_CRITICAL();
     ace:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
     ad2:	1d e3       	ldi	r17, 0x3D	; 61
     ad4:	06 c0       	rjmp	.+12     	; 0xae2 <OSTaskDelReq+0x62>
        return (OS_ERR_TASK_DEL);
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
     ad6:	8f e3       	ldi	r24, 0x3F	; 63
     ad8:	87 8f       	std	Z+31, r24	; 0x1f
    OS_EXIT_CRITICAL();
     ada:	89 2f       	mov	r24, r25
     adc:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
     ae0:	10 e0       	ldi	r17, 0x00	; 0
    return (OS_ERR_NONE);
}
     ae2:	81 2f       	mov	r24, r17
     ae4:	1f 91       	pop	r17
     ae6:	08 95       	ret

00000ae8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	ec 01       	movw	r28, r24
     af6:	7b 01       	movw	r14, r22
     af8:	8a 01       	movw	r16, r20
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
     afa:	88 81       	ld	r24, Y
     afc:	83 30       	cpi	r24, 0x03	; 3
     afe:	21 f0       	breq	.+8      	; 0xb08 <OSSemSet+0x20>
        *perr = OS_ERR_EVENT_TYPE;
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	fa 01       	movw	r30, r20
     b04:	80 83       	st	Z, r24
     b06:	15 c0       	rjmp	.+42     	; 0xb32 <OSSemSet+0x4a>
        return;
    }
    OS_ENTER_CRITICAL();
     b08:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
     b0c:	28 2f       	mov	r18, r24
    *perr = OS_ERR_NONE;
     b0e:	f8 01       	movw	r30, r16
     b10:	10 82       	st	Z, r1
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
     b12:	8b 81       	ldd	r24, Y+3	; 0x03
     b14:	9c 81       	ldd	r25, Y+4	; 0x04
     b16:	89 2b       	or	r24, r25
     b18:	19 f4       	brne	.+6      	; 0xb20 <OSSemSet+0x38>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
     b1a:	8d 81       	ldd	r24, Y+5	; 0x05
     b1c:	88 23       	and	r24, r24
     b1e:	19 f4       	brne	.+6      	; 0xb26 <OSSemSet+0x3e>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
     b20:	fc 82       	std	Y+4, r15	; 0x04
     b22:	eb 82       	std	Y+3, r14	; 0x03
     b24:	03 c0       	rjmp	.+6      	; 0xb2c <OSSemSet+0x44>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
     b26:	89 e4       	ldi	r24, 0x49	; 73
     b28:	f8 01       	movw	r30, r16
     b2a:	80 83       	st	Z, r24
        }
    }
    OS_EXIT_CRITICAL();
     b2c:	82 2f       	mov	r24, r18
     b2e:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
}
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	08 95       	ret

00000b40 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	ec 01       	movw	r28, r24
     b4a:	8b 01       	movw	r16, r22
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
     b4c:	88 81       	ld	r24, Y
     b4e:	83 30       	cpi	r24, 0x03	; 3
     b50:	11 f0       	breq	.+4      	; 0xb56 <OSSemQuery+0x16>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	10 c0       	rjmp	.+32     	; 0xb76 <OSSemQuery+0x36>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
     b56:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
     b5a:	9d 81       	ldd	r25, Y+5	; 0x05
     b5c:	f8 01       	movw	r30, r16
     b5e:	94 83       	std	Z+4, r25	; 0x04
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
        *pdest++ = *psrc++;
     b60:	9e 81       	ldd	r25, Y+6	; 0x06
     b62:	92 83       	std	Z+2, r25	; 0x02
     b64:	9f 81       	ldd	r25, Y+7	; 0x07
     b66:	93 83       	std	Z+3, r25	; 0x03
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
     b68:	2b 81       	ldd	r18, Y+3	; 0x03
     b6a:	3c 81       	ldd	r19, Y+4	; 0x04
     b6c:	31 83       	std	Z+1, r19	; 0x01
     b6e:	20 83       	st	Z, r18
    OS_EXIT_CRITICAL();
     b70:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
     b74:	80 e0       	ldi	r24, 0x00	; 0
    return (OS_ERR_NONE);
}
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	08 95       	ret

00000b80 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	8c 01       	movw	r16, r24
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
     b8a:	80 91 dc 06 	lds	r24, 0x06DC
     b8e:	88 23       	and	r24, r24
     b90:	19 f0       	breq	.+6      	; 0xb98 <OSSemCreate+0x18>
     b92:	c0 e0       	ldi	r28, 0x00	; 0
     b94:	d0 e0       	ldi	r29, 0x00	; 0
     b96:	20 c0       	rjmp	.+64     	; 0xbd8 <OSSemCreate+0x58>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    }
    OS_ENTER_CRITICAL();
     b98:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
     b9c:	28 2f       	mov	r18, r24
    pevent = OSEventFreeList;                              /* Get next free event control block        */
     b9e:	c0 91 da 06 	lds	r28, 0x06DA
     ba2:	d0 91 db 06 	lds	r29, 0x06DB
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
     ba6:	20 97       	sbiw	r28, 0x00	; 0
     ba8:	31 f0       	breq	.+12     	; 0xbb6 <OSSemCreate+0x36>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	9a 81       	ldd	r25, Y+2	; 0x02
     bae:	90 93 db 06 	sts	0x06DB, r25
     bb2:	80 93 da 06 	sts	0x06DA, r24
    }
    OS_EXIT_CRITICAL();
     bb6:	82 2f       	mov	r24, r18
     bb8:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
     bbc:	20 97       	sbiw	r28, 0x00	; 0
     bbe:	61 f0       	breq	.+24     	; 0xbd8 <OSSemCreate+0x58>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
     bc0:	83 e0       	ldi	r24, 0x03	; 3
     bc2:	88 83       	st	Y, r24
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
     bc4:	1c 83       	std	Y+4, r17	; 0x04
     bc6:	0b 83       	std	Y+3, r16	; 0x03
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
     bc8:	1a 82       	std	Y+2, r1	; 0x02
     bca:	19 82       	std	Y+1, r1	; 0x01
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
     bcc:	8f e3       	ldi	r24, 0x3F	; 63
     bce:	88 87       	std	Y+8, r24	; 0x08
        pevent->OSEventName[1] = OS_ASCII_NUL;
     bd0:	19 86       	std	Y+9, r1	; 0x09
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
     bd2:	1d 82       	std	Y+5, r1	; 0x05
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
        *ptbl++ = 0;
     bd4:	1e 82       	std	Y+6, r1	; 0x06
     bd6:	1f 82       	std	Y+7, r1	; 0x07
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    }
    return (pevent);
}
     bd8:	ce 01       	movw	r24, r28
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	08 95       	ret

00000be4 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	8c 01       	movw	r16, r24
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
     bee:	fc 01       	movw	r30, r24
     bf0:	80 81       	ld	r24, Z
     bf2:	83 30       	cpi	r24, 0x03	; 3
     bf4:	19 f0       	breq	.+6      	; 0xbfc <OSSemAccept+0x18>
     bf6:	c0 e0       	ldi	r28, 0x00	; 0
     bf8:	d0 e0       	ldi	r29, 0x00	; 0
     bfa:	0d c0       	rjmp	.+26     	; 0xc16 <OSSemAccept+0x32>
        return (0);
    }
    OS_ENTER_CRITICAL();
     bfc:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    cnt = pevent->OSEventCnt;
     c00:	f8 01       	movw	r30, r16
     c02:	c3 81       	ldd	r28, Z+3	; 0x03
     c04:	d4 81       	ldd	r29, Z+4	; 0x04
    if (cnt > 0) {                                    /* See if resource is available                  */
     c06:	20 97       	sbiw	r28, 0x00	; 0
     c08:	21 f0       	breq	.+8      	; 0xc12 <OSSemAccept+0x2e>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
     c0a:	21 97       	sbiw	r28, 0x01	; 1
     c0c:	d4 83       	std	Z+4, r29	; 0x04
     c0e:	c3 83       	std	Z+3, r28	; 0x03
     c10:	21 96       	adiw	r28, 0x01	; 1
    }
    OS_EXIT_CRITICAL();
     c12:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    return (cnt);                                     /* Return semaphore count                        */
}
     c16:	ce 01       	movw	r24, r28
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	08 95       	ret

00000c22 <OSSchedLock>:
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
     c22:	80 91 df 05 	lds	r24, 0x05DF
     c26:	81 30       	cpi	r24, 0x01	; 1
     c28:	89 f4       	brne	.+34     	; 0xc4c <OSSchedLock+0x2a>
        OS_ENTER_CRITICAL();
     c2a:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
     c2e:	98 2f       	mov	r25, r24
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
     c30:	80 91 dc 06 	lds	r24, 0x06DC
     c34:	88 23       	and	r24, r24
     c36:	39 f4       	brne	.+14     	; 0xc46 <OSSchedLock+0x24>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
     c38:	80 91 de 05 	lds	r24, 0x05DE
     c3c:	8f 3f       	cpi	r24, 0xFF	; 255
     c3e:	19 f0       	breq	.+6      	; 0xc46 <OSSchedLock+0x24>
                OSLockNesting++;                 /* Increment lock nesting level                       */
     c40:	8f 5f       	subi	r24, 0xFF	; 255
     c42:	80 93 de 05 	sts	0x05DE, r24
            }
        }
        OS_EXIT_CRITICAL();
     c46:	89 2f       	mov	r24, r25
     c48:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
     c4c:	08 95       	ret

00000c4e <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
     c4e:	ef 92       	push	r14
     c50:	ff 92       	push	r15
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	7c 01       	movw	r14, r24
     c5c:	eb 01       	movw	r28, r22
     c5e:	8a 01       	movw	r16, r20
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
     c60:	80 91 dc 06 	lds	r24, 0x06DC
     c64:	88 23       	and	r24, r24
     c66:	11 f0       	breq	.+4      	; 0xc6c <OSEventNameSet+0x1e>
        *perr = OS_ERR_NAME_SET_ISR;
     c68:	82 e1       	ldi	r24, 0x12	; 18
     c6a:	18 c0       	rjmp	.+48     	; 0xc9c <OSEventNameSet+0x4e>
        return;
    }
    switch (pevent->OSEventType) {
     c6c:	f7 01       	movw	r30, r14
     c6e:	80 81       	ld	r24, Z
     c70:	81 50       	subi	r24, 0x01	; 1
     c72:	84 30       	cpi	r24, 0x04	; 4
     c74:	10 f0       	brcs	.+4      	; 0xc7a <OSEventNameSet+0x2c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	11 c0       	rjmp	.+34     	; 0xc9c <OSEventNameSet+0x4e>
             return;
    }
    OS_ENTER_CRITICAL();
     c7a:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
     c7e:	28 2f       	mov	r18, r24
     c80:	fe 01       	movw	r30, r28
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <OSEventNameSet+0x38>
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
        psrc++;
     c84:	31 96       	adiw	r30, 0x01	; 1
     c86:	9e 2f       	mov	r25, r30
     c88:	9c 1b       	sub	r25, r28
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
     c8a:	80 81       	ld	r24, Z
     c8c:	88 23       	and	r24, r24
     c8e:	d1 f7       	brne	.-12     	; 0xc84 <OSEventNameSet+0x36>
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
     c90:	90 31       	cpi	r25, 0x10	; 16
     c92:	38 f0       	brcs	.+14     	; 0xca2 <OSEventNameSet+0x54>
        OS_EXIT_CRITICAL();
     c94:	82 2f       	mov	r24, r18
     c96:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
     c9a:	8b e0       	ldi	r24, 0x0B	; 11
     c9c:	f8 01       	movw	r30, r16
     c9e:	80 83       	st	Z, r24
     ca0:	0e c0       	rjmp	.+28     	; 0xcbe <OSEventNameSet+0x70>
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
     ca2:	f7 01       	movw	r30, r14
     ca4:	38 96       	adiw	r30, 0x08	; 8
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <OSEventNameSet+0x5e>
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
        *pdest++ = *psrc++;
     ca8:	81 93       	st	Z+, r24
     caa:	21 96       	adiw	r28, 0x01	; 1
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
     cac:	88 81       	ld	r24, Y
     cae:	88 23       	and	r24, r24
     cb0:	d9 f7       	brne	.-10     	; 0xca8 <OSEventNameSet+0x5a>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
     cb2:	10 82       	st	Z, r1
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
     cb4:	82 2f       	mov	r24, r18
     cb6:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    *perr = OS_ERR_NONE;
     cba:	f8 01       	movw	r30, r16
     cbc:	10 82       	st	Z, r1
}
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	ff 90       	pop	r15
     cc8:	ef 90       	pop	r14
     cca:	08 95       	ret

00000ccc <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
     ccc:	ef 92       	push	r14
     cce:	ff 92       	push	r15
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	8c 01       	movw	r16, r24
     cda:	eb 01       	movw	r28, r22
     cdc:	7a 01       	movw	r14, r20
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
     cde:	80 91 dc 06 	lds	r24, 0x06DC
     ce2:	88 23       	and	r24, r24
     ce4:	11 f0       	breq	.+4      	; 0xcea <OSEventNameGet+0x1e>
        *perr  = OS_ERR_NAME_GET_ISR;
     ce6:	81 e1       	ldi	r24, 0x11	; 17
     ce8:	06 c0       	rjmp	.+12     	; 0xcf6 <OSEventNameGet+0x2a>
        return (0);
    }
    switch (pevent->OSEventType) {
     cea:	f8 01       	movw	r30, r16
     cec:	80 81       	ld	r24, Z
     cee:	81 50       	subi	r24, 0x01	; 1
     cf0:	84 30       	cpi	r24, 0x04	; 4
     cf2:	28 f0       	brcs	.+10     	; 0xcfe <OSEventNameGet+0x32>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	f7 01       	movw	r30, r14
     cf8:	80 83       	st	Z, r24
     cfa:	10 e0       	ldi	r17, 0x00	; 0
     cfc:	14 c0       	rjmp	.+40     	; 0xd26 <OSEventNameGet+0x5a>
             return (0);
    }
    OS_ENTER_CRITICAL();
     cfe:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
     d02:	38 2f       	mov	r19, r24
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
     d04:	c8 01       	movw	r24, r16
     d06:	08 96       	adiw	r24, 0x08	; 8
     d08:	fc 01       	movw	r30, r24
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <OSEventNameGet+0x44>
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
        *pdest++ = *psrc++;
     d0c:	29 93       	st	Y+, r18
     d0e:	31 96       	adiw	r30, 0x01	; 1
     d10:	1e 2f       	mov	r17, r30
     d12:	18 1b       	sub	r17, r24
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
     d14:	20 81       	ld	r18, Z
     d16:	22 23       	and	r18, r18
     d18:	c9 f7       	brne	.-14     	; 0xd0c <OSEventNameGet+0x40>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
     d1a:	18 82       	st	Y, r1
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
     d1c:	83 2f       	mov	r24, r19
     d1e:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    *perr = OS_ERR_NONE;
     d22:	f7 01       	movw	r30, r14
     d24:	10 82       	st	Z, r1
    return (len);
}
     d26:	81 2f       	mov	r24, r17
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	08 95       	ret

00000d36 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
     d36:	2f 92       	push	r2
     d38:	3f 92       	push	r3
     d3a:	4f 92       	push	r4
     d3c:	5f 92       	push	r5
     d3e:	7f 92       	push	r7
     d40:	8f 92       	push	r8
     d42:	9f 92       	push	r9
     d44:	af 92       	push	r10
     d46:	bf 92       	push	r11
     d48:	cf 92       	push	r12
     d4a:	df 92       	push	r13
     d4c:	ef 92       	push	r14
     d4e:	ff 92       	push	r15
     d50:	0f 93       	push	r16
     d52:	1f 93       	push	r17
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	78 2e       	mov	r7, r24
     d5a:	4b 01       	movw	r8, r22
     d5c:	2a 01       	movw	r4, r20
     d5e:	19 01       	movw	r2, r18
    OS_CPU_SR  cpu_sr = 0;
#endif



    OS_ENTER_CRITICAL();
     d60:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
     d64:	28 2f       	mov	r18, r24
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
     d66:	c0 91 d1 06 	lds	r28, 0x06D1
     d6a:	d0 91 d2 06 	lds	r29, 0x06D2
    if (ptcb != (OS_TCB *)0) {
     d6e:	20 97       	sbiw	r28, 0x00	; 0
     d70:	09 f4       	brne	.+2      	; 0xd74 <OS_TCBInit+0x3e>
     d72:	86 c0       	rjmp	.+268    	; 0xe80 <OS_TCBInit+0x14a>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
     d74:	8e 85       	ldd	r24, Y+14	; 0x0e
     d76:	9f 85       	ldd	r25, Y+15	; 0x0f
     d78:	90 93 d2 06 	sts	0x06D2, r25
     d7c:	80 93 d1 06 	sts	0x06D1, r24
        OS_EXIT_CRITICAL();
     d80:	82 2f       	mov	r24, r18
     d82:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
     d86:	99 82       	std	Y+1, r9	; 0x01
     d88:	88 82       	st	Y, r8
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
     d8a:	7a 8e       	std	Y+26, r7	; 0x1a
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
     d8c:	18 8e       	std	Y+24, r1	; 0x18
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
     d8e:	19 8e       	std	Y+25, r1	; 0x19
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
     d90:	1f 8a       	std	Y+23, r1	; 0x17
     d92:	1e 8a       	std	Y+22, r1	; 0x16

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
     d94:	db 82       	std	Y+3, r13	; 0x03
     d96:	ca 82       	std	Y+2, r12	; 0x02
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
     d98:	ee 82       	std	Y+6, r14	; 0x06
     d9a:	ff 82       	std	Y+7, r15	; 0x07
     d9c:	08 87       	std	Y+8, r16	; 0x08
     d9e:	19 87       	std	Y+9, r17	; 0x09
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
     da0:	5d 82       	std	Y+5, r5	; 0x05
     da2:	4c 82       	std	Y+4, r4	; 0x04
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
     da4:	bb 86       	std	Y+11, r11	; 0x0b
     da6:	aa 86       	std	Y+10, r10	; 0x0a
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
     da8:	3d 86       	std	Y+13, r3	; 0x0d
     daa:	2c 86       	std	Y+12, r2	; 0x0c
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
     dac:	1f 8e       	std	Y+31, r1	; 0x1f
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
     dae:	27 2d       	mov	r18, r7
     db0:	26 95       	lsr	r18
     db2:	26 95       	lsr	r18
     db4:	26 95       	lsr	r18
     db6:	2c 8f       	std	Y+28, r18	; 0x1c
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
     db8:	47 2d       	mov	r20, r7
     dba:	47 70       	andi	r20, 0x07	; 7
     dbc:	4b 8f       	std	Y+27, r20	; 0x1b
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	bc 01       	movw	r22, r24
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <OS_TCBInit+0x94>
     dc6:	66 0f       	add	r22, r22
     dc8:	77 1f       	adc	r23, r23
     dca:	2a 95       	dec	r18
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <OS_TCBInit+0x90>
     dce:	6e 8f       	std	Y+30, r22	; 0x1e
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <OS_TCBInit+0xa0>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	4a 95       	dec	r20
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <OS_TCBInit+0x9c>
     dda:	8d 8f       	std	Y+29, r24	; 0x1d
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
     ddc:	1b 8a       	std	Y+19, r1	; 0x13
     dde:	1a 8a       	std	Y+18, r1	; 0x12
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
     de0:	1d 8a       	std	Y+21, r1	; 0x15
     de2:	1c 8a       	std	Y+20, r1	; 0x14
#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
     de4:	18 a2       	std	Y+32, r1	; 0x20
     de6:	19 a2       	std	Y+33, r1	; 0x21
     de8:	1a a2       	std	Y+34, r1	; 0x22
     dea:	1b a2       	std	Y+35, r1	; 0x23
        ptcb->OSTCBCyclesStart = 0L;
     dec:	18 a6       	std	Y+40, r1	; 0x28
     dee:	19 a6       	std	Y+41, r1	; 0x29
     df0:	1a a6       	std	Y+42, r1	; 0x2a
     df2:	1b a6       	std	Y+43, r1	; 0x2b
        ptcb->OSTCBCyclesTot   = 0L;
     df4:	1c a2       	std	Y+36, r1	; 0x24
     df6:	1d a2       	std	Y+37, r1	; 0x25
     df8:	1e a2       	std	Y+38, r1	; 0x26
     dfa:	1f a2       	std	Y+39, r1	; 0x27
        ptcb->OSTCBStkBase     = (OS_STK *)0;
     dfc:	1d a6       	std	Y+45, r1	; 0x2d
     dfe:	1c a6       	std	Y+44, r1	; 0x2c
        ptcb->OSTCBStkUsed     = 0L;
     e00:	1e a6       	std	Y+46, r1	; 0x2e
     e02:	1f a6       	std	Y+47, r1	; 0x2f
     e04:	18 aa       	std	Y+48, r1	; 0x30
     e06:	19 aa       	std	Y+49, r1	; 0x31
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
     e08:	8f e3       	ldi	r24, 0x3F	; 63
     e0a:	8a ab       	std	Y+50, r24	; 0x32
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
     e0c:	1b aa       	std	Y+51, r1	; 0x33
#endif

        OSTCBInitHook(ptcb);
     e0e:	ce 01       	movw	r24, r28
     e10:	0e 94 4f 11 	call	0x229e	; 0x229e <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
     e14:	ce 01       	movw	r24, r28
     e16:	0e 94 05 11 	call	0x220a	; 0x220a <OSTaskCreateHook>

        OS_ENTER_CRITICAL();
     e1a:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
     e1e:	28 2f       	mov	r18, r24
        OSTCBPrioTbl[prio] = ptcb;
     e20:	e7 2d       	mov	r30, r7
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	ee 0f       	add	r30, r30
     e26:	ff 1f       	adc	r31, r31
     e28:	ea 5f       	subi	r30, 0xFA	; 250
     e2a:	f4 4f       	sbci	r31, 0xF4	; 244
     e2c:	d1 83       	std	Z+1, r29	; 0x01
     e2e:	c0 83       	st	Z, r28
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
     e30:	e0 91 e6 05 	lds	r30, 0x05E6
     e34:	f0 91 e7 05 	lds	r31, 0x05E7
     e38:	ff 87       	std	Y+15, r31	; 0x0f
     e3a:	ee 87       	std	Y+14, r30	; 0x0e
        ptcb->OSTCBPrev    = (OS_TCB *)0;
     e3c:	19 8a       	std	Y+17, r1	; 0x11
     e3e:	18 8a       	std	Y+16, r1	; 0x10
        if (OSTCBList != (OS_TCB *)0) {
     e40:	30 97       	sbiw	r30, 0x00	; 0
     e42:	11 f0       	breq	.+4      	; 0xe48 <OS_TCBInit+0x112>
            OSTCBList->OSTCBPrev = ptcb;
     e44:	d1 8b       	std	Z+17, r29	; 0x11
     e46:	c0 8b       	std	Z+16, r28	; 0x10
        }
        OSTCBList               = ptcb;
     e48:	d0 93 e7 05 	sts	0x05E7, r29
     e4c:	c0 93 e6 05 	sts	0x05E6, r28
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
     e50:	80 91 d7 06 	lds	r24, 0x06D7
     e54:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e56:	89 2b       	or	r24, r25
     e58:	80 93 d7 06 	sts	0x06D7, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
     e5c:	ec 8d       	ldd	r30, Y+28	; 0x1c
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	e8 52       	subi	r30, 0x28	; 40
     e62:	f9 4f       	sbci	r31, 0xF9	; 249
     e64:	80 81       	ld	r24, Z
     e66:	9d 8d       	ldd	r25, Y+29	; 0x1d
     e68:	89 2b       	or	r24, r25
     e6a:	80 83       	st	Z, r24
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
     e6c:	80 91 d4 06 	lds	r24, 0x06D4
     e70:	8f 5f       	subi	r24, 0xFF	; 255
     e72:	80 93 d4 06 	sts	0x06D4, r24
        OS_EXIT_CRITICAL();
     e76:	82 2f       	mov	r24, r18
     e78:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	03 c0       	rjmp	.+6      	; 0xe86 <OS_TCBInit+0x150>
        return (OS_ERR_NONE);
    }
    OS_EXIT_CRITICAL();
     e80:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
     e84:	82 e4       	ldi	r24, 0x42	; 66
    return (OS_ERR_TASK_NO_MORE_TCB);
}
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	ff 90       	pop	r15
     e90:	ef 90       	pop	r14
     e92:	df 90       	pop	r13
     e94:	cf 90       	pop	r12
     e96:	bf 90       	pop	r11
     e98:	af 90       	pop	r10
     e9a:	9f 90       	pop	r9
     e9c:	8f 90       	pop	r8
     e9e:	7f 90       	pop	r7
     ea0:	5f 90       	pop	r5
     ea2:	4f 90       	pop	r4
     ea4:	3f 90       	pop	r3
     ea6:	2f 90       	pop	r2
     ea8:	08 95       	ret

00000eaa <OS_TaskIdle>:



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
     eaa:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
        OSIdleCtr++;
     eae:	20 91 e0 05 	lds	r18, 0x05E0
     eb2:	30 91 e1 05 	lds	r19, 0x05E1
     eb6:	40 91 e2 05 	lds	r20, 0x05E2
     eba:	50 91 e3 05 	lds	r21, 0x05E3
     ebe:	2f 5f       	subi	r18, 0xFF	; 255
     ec0:	3f 4f       	sbci	r19, 0xFF	; 255
     ec2:	4f 4f       	sbci	r20, 0xFF	; 255
     ec4:	5f 4f       	sbci	r21, 0xFF	; 255
     ec6:	20 93 e0 05 	sts	0x05E0, r18
     eca:	30 93 e1 05 	sts	0x05E1, r19
     ece:	40 93 e2 05 	sts	0x05E2, r20
     ed2:	50 93 e3 05 	sts	0x05E3, r21
        OS_EXIT_CRITICAL();
     ed6:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
     eda:	0e 94 07 11 	call	0x220e	; 0x220e <OSTaskIdleHook>
     ede:	e5 cf       	rjmp	.-54     	; 0xeaa <OS_TaskIdle>

00000ee0 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
     ee0:	1f 93       	push	r17
    OS_CPU_SR  cpu_sr = 0;
#endif



    OS_ENTER_CRITICAL();
     ee2:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
     ee6:	18 2f       	mov	r17, r24
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
     ee8:	80 91 dc 06 	lds	r24, 0x06DC
     eec:	88 23       	and	r24, r24
     eee:	09 f0       	breq	.+2      	; 0xef2 <OS_Sched+0x12>
     ef0:	4c c0       	rjmp	.+152    	; 0xf8a <OS_Sched+0xaa>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
     ef2:	80 91 de 05 	lds	r24, 0x05DE
     ef6:	88 23       	and	r24, r24
     ef8:	09 f0       	breq	.+2      	; 0xefc <OS_Sched+0x1c>
     efa:	47 c0       	rjmp	.+142    	; 0xf8a <OS_Sched+0xaa>
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
     efc:	e0 91 d7 06 	lds	r30, 0x06D7
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	e4 5e       	subi	r30, 0xE4	; 228
     f04:	fe 4f       	sbci	r31, 0xFE	; 254
     f06:	80 81       	ld	r24, Z
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
     f08:	e8 2f       	mov	r30, r24
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	e8 52       	subi	r30, 0x28	; 40
     f0e:	f9 4f       	sbci	r31, 0xF9	; 249
     f10:	e0 81       	ld	r30, Z
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	e4 5e       	subi	r30, 0xE4	; 228
     f16:	fe 4f       	sbci	r31, 0xFE	; 254
     f18:	98 2f       	mov	r25, r24
     f1a:	99 0f       	add	r25, r25
     f1c:	99 0f       	add	r25, r25
     f1e:	99 0f       	add	r25, r25
     f20:	80 81       	ld	r24, Z
     f22:	98 0f       	add	r25, r24
     f24:	90 93 e4 05 	sts	0x05E4, r25

    OS_ENTER_CRITICAL();
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
            OS_SchedNew();
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
     f28:	80 91 e5 05 	lds	r24, 0x05E5
     f2c:	98 17       	cp	r25, r24
     f2e:	69 f1       	breq	.+90     	; 0xf8a <OS_Sched+0xaa>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
     f30:	e9 2f       	mov	r30, r25
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	ee 0f       	add	r30, r30
     f36:	ff 1f       	adc	r31, r31
     f38:	ea 5f       	subi	r30, 0xFA	; 250
     f3a:	f4 4f       	sbci	r31, 0xF4	; 244
     f3c:	01 90       	ld	r0, Z+
     f3e:	f0 81       	ld	r31, Z
     f40:	e0 2d       	mov	r30, r0
     f42:	f0 93 d6 06 	sts	0x06D6, r31
     f46:	e0 93 d5 06 	sts	0x06D5, r30
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
     f4a:	80 a1       	ldd	r24, Z+32	; 0x20
     f4c:	91 a1       	ldd	r25, Z+33	; 0x21
     f4e:	a2 a1       	ldd	r26, Z+34	; 0x22
     f50:	b3 a1       	ldd	r27, Z+35	; 0x23
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	a1 1d       	adc	r26, r1
     f56:	b1 1d       	adc	r27, r1
     f58:	80 a3       	std	Z+32, r24	; 0x20
     f5a:	91 a3       	std	Z+33, r25	; 0x21
     f5c:	a2 a3       	std	Z+34, r26	; 0x22
     f5e:	b3 a3       	std	Z+35, r27	; 0x23
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
     f60:	80 91 c9 06 	lds	r24, 0x06C9
     f64:	90 91 ca 06 	lds	r25, 0x06CA
     f68:	a0 91 cb 06 	lds	r26, 0x06CB
     f6c:	b0 91 cc 06 	lds	r27, 0x06CC
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	a1 1d       	adc	r26, r1
     f74:	b1 1d       	adc	r27, r1
     f76:	80 93 c9 06 	sts	0x06C9, r24
     f7a:	90 93 ca 06 	sts	0x06CA, r25
     f7e:	a0 93 cb 06 	sts	0x06CB, r26
     f82:	b0 93 cc 06 	sts	0x06CC, r27
                OS_TASK_SW();                          /* Perform a context switch                     */
     f86:	0e 94 56 01 	call	0x2ac	; 0x2ac <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
     f8a:	81 2f       	mov	r24, r17
     f8c:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
}
     f90:	1f 91       	pop	r17
     f92:	08 95       	ret

00000f94 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
     f94:	1f 93       	push	r17
     f96:	18 2f       	mov	r17, r24
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (prio >= OS_LOWEST_PRIO) {
     f98:	8e 30       	cpi	r24, 0x0E	; 14
     f9a:	10 f0       	brcs	.+4      	; 0xfa0 <OSTimeDlyResume+0xc>
     f9c:	8a e2       	ldi	r24, 0x2A	; 42
     f9e:	58 c0       	rjmp	.+176    	; 0x1050 <OSTimeDlyResume+0xbc>
        return (OS_ERR_PRIO_INVALID);
    }
    OS_ENTER_CRITICAL();
     fa0:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
     fa4:	28 2f       	mov	r18, r24
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
     fa6:	e1 2f       	mov	r30, r17
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	ea 5f       	subi	r30, 0xFA	; 250
     fb0:	f4 4f       	sbci	r31, 0xF4	; 244
     fb2:	a0 81       	ld	r26, Z
     fb4:	b1 81       	ldd	r27, Z+1	; 0x01
    if (ptcb == (OS_TCB *)0) {
     fb6:	10 97       	sbiw	r26, 0x00	; 0
     fb8:	19 f0       	breq	.+6      	; 0xfc0 <OSTimeDlyResume+0x2c>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    }
    if (ptcb == OS_TCB_RESERVED) {
     fba:	a1 30       	cpi	r26, 0x01	; 1
     fbc:	b1 05       	cpc	r27, r1
     fbe:	29 f4       	brne	.+10     	; 0xfca <OSTimeDlyResume+0x36>
        OS_EXIT_CRITICAL();
     fc0:	82 2f       	mov	r24, r18
     fc2:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
     fc6:	83 e4       	ldi	r24, 0x43	; 67
     fc8:	43 c0       	rjmp	.+134    	; 0x1050 <OSTimeDlyResume+0xbc>
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
     fca:	56 96       	adiw	r26, 0x16	; 22
     fcc:	8d 91       	ld	r24, X+
     fce:	9c 91       	ld	r25, X
     fd0:	57 97       	sbiw	r26, 0x17	; 23
     fd2:	89 2b       	or	r24, r25
     fd4:	29 f4       	brne	.+10     	; 0xfe0 <OSTimeDlyResume+0x4c>
        OS_EXIT_CRITICAL();
     fd6:	82 2f       	mov	r24, r18
     fd8:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
     fdc:	80 e5       	ldi	r24, 0x50	; 80
     fde:	38 c0       	rjmp	.+112    	; 0x1050 <OSTimeDlyResume+0xbc>
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
     fe0:	57 96       	adiw	r26, 0x17	; 23
     fe2:	1c 92       	st	X, r1
     fe4:	1e 92       	st	-X, r1
     fe6:	56 97       	sbiw	r26, 0x16	; 22
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
     fe8:	58 96       	adiw	r26, 0x18	; 24
     fea:	9c 91       	ld	r25, X
     fec:	58 97       	sbiw	r26, 0x18	; 24
     fee:	89 2f       	mov	r24, r25
     ff0:	87 73       	andi	r24, 0x37	; 55
     ff2:	49 f0       	breq	.+18     	; 0x1006 <OSTimeDlyResume+0x72>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
     ff4:	98 7c       	andi	r25, 0xC8	; 200
     ff6:	58 96       	adiw	r26, 0x18	; 24
     ff8:	9c 93       	st	X, r25
     ffa:	58 97       	sbiw	r26, 0x18	; 24
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	59 96       	adiw	r26, 0x19	; 25
    1000:	8c 93       	st	X, r24
    1002:	59 97       	sbiw	r26, 0x19	; 25
    1004:	03 c0       	rjmp	.+6      	; 0x100c <OSTimeDlyResume+0x78>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    1006:	59 96       	adiw	r26, 0x19	; 25
    1008:	1c 92       	st	X, r1
    100a:	59 97       	sbiw	r26, 0x19	; 25
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    100c:	58 96       	adiw	r26, 0x18	; 24
    100e:	8c 91       	ld	r24, X
    1010:	58 97       	sbiw	r26, 0x18	; 24
    1012:	83 fd       	sbrc	r24, 3
    1014:	19 c0       	rjmp	.+50     	; 0x1048 <OSTimeDlyResume+0xb4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    1016:	80 91 d7 06 	lds	r24, 0x06D7
    101a:	5e 96       	adiw	r26, 0x1e	; 30
    101c:	9c 91       	ld	r25, X
    101e:	5e 97       	sbiw	r26, 0x1e	; 30
    1020:	89 2b       	or	r24, r25
    1022:	80 93 d7 06 	sts	0x06D7, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    1026:	5c 96       	adiw	r26, 0x1c	; 28
    1028:	ec 91       	ld	r30, X
    102a:	5c 97       	sbiw	r26, 0x1c	; 28
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	e8 52       	subi	r30, 0x28	; 40
    1030:	f9 4f       	sbci	r31, 0xF9	; 249
    1032:	80 81       	ld	r24, Z
    1034:	5d 96       	adiw	r26, 0x1d	; 29
    1036:	9c 91       	ld	r25, X
    1038:	89 2b       	or	r24, r25
    103a:	80 83       	st	Z, r24
        OS_EXIT_CRITICAL();
    103c:	82 2f       	mov	r24, r18
    103e:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
        OS_Sched();                                            /* See if this is new highest priority  */
    1042:	0e 94 70 07 	call	0xee0	; 0xee0 <OS_Sched>
    1046:	03 c0       	rjmp	.+6      	; 0x104e <OSTimeDlyResume+0xba>
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    1048:	82 2f       	mov	r24, r18
    104a:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    }
    return (OS_ERR_NONE);
}
    1050:	1f 91       	pop	r17
    1052:	08 95       	ret

00001054 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	ec 01       	movw	r28, r24
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    105a:	80 91 dc 06 	lds	r24, 0x06DC
    105e:	88 23       	and	r24, r24
    1060:	51 f5       	brne	.+84     	; 0x10b6 <OSTimeDly+0x62>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    1062:	20 97       	sbiw	r28, 0x00	; 0
    1064:	41 f1       	breq	.+80     	; 0x10b6 <OSTimeDly+0x62>
        OS_ENTER_CRITICAL();
    1066:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    106a:	28 2f       	mov	r18, r24
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    106c:	a0 91 dd 06 	lds	r26, 0x06DD
    1070:	b0 91 de 06 	lds	r27, 0x06DE
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    1074:	5c 96       	adiw	r26, 0x1c	; 28
    1076:	ec 91       	ld	r30, X
    1078:	5c 97       	sbiw	r26, 0x1c	; 28
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	e8 52       	subi	r30, 0x28	; 40
    107e:	f9 4f       	sbci	r31, 0xF9	; 249
    1080:	5d 96       	adiw	r26, 0x1d	; 29
    1082:	8c 91       	ld	r24, X
    1084:	5d 97       	sbiw	r26, 0x1d	; 29
    1086:	80 95       	com	r24
    1088:	90 81       	ld	r25, Z
    108a:	89 23       	and	r24, r25
    108c:	80 83       	st	Z, r24
        if (OSRdyTbl[y] == 0) {
    108e:	88 23       	and	r24, r24
    1090:	49 f4       	brne	.+18     	; 0x10a4 <OSTimeDly+0x50>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    1092:	5e 96       	adiw	r26, 0x1e	; 30
    1094:	9c 91       	ld	r25, X
    1096:	5e 97       	sbiw	r26, 0x1e	; 30
    1098:	90 95       	com	r25
    109a:	80 91 d7 06 	lds	r24, 0x06D7
    109e:	89 23       	and	r24, r25
    10a0:	80 93 d7 06 	sts	0x06D7, r24
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    10a4:	57 96       	adiw	r26, 0x17	; 23
    10a6:	dc 93       	st	X, r29
    10a8:	ce 93       	st	-X, r28
    10aa:	56 97       	sbiw	r26, 0x16	; 22
        OS_EXIT_CRITICAL();
    10ac:	82 2f       	mov	r24, r18
    10ae:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
        OS_Sched();                              /* Find next task to run!                             */
    10b2:	0e 94 70 07 	call	0xee0	; 0xee0 <OS_Sched>
    }
}
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	08 95       	ret

000010bc <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    10bc:	8f 92       	push	r8
    10be:	9f 92       	push	r9
    10c0:	af 92       	push	r10
    10c2:	bf 92       	push	r11
    10c4:	cf 92       	push	r12
    10c6:	df 92       	push	r13
    10c8:	ef 92       	push	r14
    10ca:	ff 92       	push	r15
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	88 2e       	mov	r8, r24
    10d6:	e6 2e       	mov	r14, r22
    10d8:	94 2e       	mov	r9, r20
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    10da:	80 91 dc 06 	lds	r24, 0x06DC
    10de:	88 23       	and	r24, r24
    10e0:	11 f0       	breq	.+4      	; 0x10e6 <OSTimeDlyHMSM+0x2a>
    10e2:	85 e5       	ldi	r24, 0x55	; 85
    10e4:	5b c0       	rjmp	.+182    	; 0x119c <__stack+0x9d>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    10e6:	b9 01       	movw	r22, r18
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	24 e6       	ldi	r18, 0x64	; 100
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	50 e0       	ldi	r21, 0x00	; 0
    10f4:	0e 94 09 12 	call	0x2412	; 0x2412 <__mulsi3>
    10f8:	6c 50       	subi	r22, 0x0C	; 12
    10fa:	7e 4f       	sbci	r23, 0xFE	; 254
    10fc:	8f 4f       	sbci	r24, 0xFF	; 255
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	28 ee       	ldi	r18, 0xE8	; 232
    1102:	33 e0       	ldi	r19, 0x03	; 3
    1104:	40 e0       	ldi	r20, 0x00	; 0
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	0e 94 28 12 	call	0x2450	; 0x2450 <__udivmodsi4>
    110c:	59 01       	movw	r10, r18
    110e:	6a 01       	movw	r12, r20
    1110:	6e 2d       	mov	r22, r14
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	2c e3       	ldi	r18, 0x3C	; 60
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	0e 94 09 12 	call	0x2412	; 0x2412 <__mulsi3>
    1124:	7b 01       	movw	r14, r22
    1126:	8c 01       	movw	r16, r24
    1128:	e9 0c       	add	r14, r9
    112a:	f1 1c       	adc	r15, r1
    112c:	01 1d       	adc	r16, r1
    112e:	11 1d       	adc	r17, r1
    1130:	68 2d       	mov	r22, r8
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	20 e1       	ldi	r18, 0x10	; 16
    113a:	3e e0       	ldi	r19, 0x0E	; 14
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	0e 94 09 12 	call	0x2412	; 0x2412 <__mulsi3>
    1144:	e6 0e       	add	r14, r22
    1146:	f7 1e       	adc	r15, r23
    1148:	08 1f       	adc	r16, r24
    114a:	19 1f       	adc	r17, r25
    114c:	c8 01       	movw	r24, r16
    114e:	b7 01       	movw	r22, r14
    1150:	24 e6       	ldi	r18, 0x64	; 100
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	0e 94 09 12 	call	0x2412	; 0x2412 <__mulsi3>
    115c:	a6 0e       	add	r10, r22
    115e:	b7 1e       	adc	r11, r23
    1160:	c8 1e       	adc	r12, r24
    1162:	d9 1e       	adc	r13, r25
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    1164:	c6 01       	movw	r24, r12
    1166:	aa 27       	eor	r26, r26
    1168:	bb 27       	eor	r27, r27
    116a:	ec 01       	movw	r28, r24
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	9f ef       	ldi	r25, 0xFF	; 255
    1170:	a0 e0       	ldi	r26, 0x00	; 0
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	a8 22       	and	r10, r24
    1176:	b9 22       	and	r11, r25
    1178:	ca 22       	and	r12, r26
    117a:	db 22       	and	r13, r27
    117c:	c5 01       	movw	r24, r10
    117e:	0e 94 2a 08 	call	0x1054	; 0x1054 <OSTimeDly>
    1182:	09 c0       	rjmp	.+18     	; 0x1196 <__stack+0x97>
    while (loops > 0) {
        OSTimeDly((INT16U)32768u);
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e8       	ldi	r25, 0x80	; 128
    1188:	0e 94 2a 08 	call	0x1054	; 0x1054 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e8       	ldi	r25, 0x80	; 128
    1190:	0e 94 2a 08 	call	0x1054	; 0x1054 <OSTimeDly>
        loops--;
    1194:	21 97       	sbiw	r28, 0x01	; 1
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    1196:	20 97       	sbiw	r28, 0x00	; 0
    1198:	a9 f7       	brne	.-22     	; 0x1184 <__stack+0x85>
    119a:	80 e0       	ldi	r24, 0x00	; 0
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	ff 90       	pop	r15
    11a6:	ef 90       	pop	r14
    11a8:	df 90       	pop	r13
    11aa:	cf 90       	pop	r12
    11ac:	bf 90       	pop	r11
    11ae:	af 90       	pop	r10
    11b0:	9f 90       	pop	r9
    11b2:	8f 90       	pop	r8
    11b4:	08 95       	ret

000011b6 <OSStatInit>:
    OS_CPU_SR  cpu_sr = 0;
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    11b6:	82 e0       	ldi	r24, 0x02	; 2
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 2a 08 	call	0x1054	; 0x1054 <OSTimeDly>
    OS_ENTER_CRITICAL();
    11be:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    11c2:	10 92 e0 05 	sts	0x05E0, r1
    11c6:	10 92 e1 05 	sts	0x05E1, r1
    11ca:	10 92 e2 05 	sts	0x05E2, r1
    11ce:	10 92 e3 05 	sts	0x05E3, r1
    OS_EXIT_CRITICAL();
    11d2:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    11d6:	8a e0       	ldi	r24, 0x0A	; 10
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 2a 08 	call	0x1054	; 0x1054 <OSTimeDly>
    OS_ENTER_CRITICAL();
    11de:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    11e2:	20 91 e0 05 	lds	r18, 0x05E0
    11e6:	30 91 e1 05 	lds	r19, 0x05E1
    11ea:	40 91 e2 05 	lds	r20, 0x05E2
    11ee:	50 91 e3 05 	lds	r21, 0x05E3
    11f2:	20 93 cd 06 	sts	0x06CD, r18
    11f6:	30 93 ce 06 	sts	0x06CE, r19
    11fa:	40 93 cf 06 	sts	0x06CF, r20
    11fe:	50 93 d0 06 	sts	0x06D0, r21
    OSStatRdy    = OS_TRUE;
    1202:	91 e0       	ldi	r25, 0x01	; 1
    1204:	90 93 05 0b 	sts	0x0B05, r25
    OS_EXIT_CRITICAL();
    1208:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
}
    120c:	08 95       	ret

0000120e <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	18 2f       	mov	r17, r24
        if (prio != OS_PRIO_SELF) {
            return (OS_ERR_PRIO_INVALID);
        }
    }
#endif
    OS_ENTER_CRITICAL();
    1214:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    1218:	28 2f       	mov	r18, r24
    121a:	e0 91 dd 06 	lds	r30, 0x06DD
    121e:	f0 91 de 06 	lds	r31, 0x06DE
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    1222:	1f 3f       	cpi	r17, 0xFF	; 255
    1224:	11 f4       	brne	.+4      	; 0x122a <OSTaskSuspend+0x1c>
        prio = OSTCBCur->OSTCBPrio;
    1226:	12 8d       	ldd	r17, Z+26	; 0x1a
    1228:	05 c0       	rjmp	.+10     	; 0x1234 <OSTaskSuspend+0x26>
        self = OS_TRUE;
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    122a:	82 8d       	ldd	r24, Z+26	; 0x1a
    122c:	18 17       	cp	r17, r24
    122e:	11 f0       	breq	.+4      	; 0x1234 <OSTaskSuspend+0x26>
    1230:	00 e0       	ldi	r16, 0x00	; 0
    1232:	01 c0       	rjmp	.+2      	; 0x1236 <OSTaskSuspend+0x28>
    1234:	01 e0       	ldi	r16, 0x01	; 1
        self = OS_TRUE;
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    }
    ptcb = OSTCBPrioTbl[prio];
    1236:	e1 2f       	mov	r30, r17
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	ee 0f       	add	r30, r30
    123c:	ff 1f       	adc	r31, r31
    123e:	ea 5f       	subi	r30, 0xFA	; 250
    1240:	f4 4f       	sbci	r31, 0xF4	; 244
    1242:	a0 81       	ld	r26, Z
    1244:	b1 81       	ldd	r27, Z+1	; 0x01
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    1246:	10 97       	sbiw	r26, 0x00	; 0
    1248:	29 f4       	brne	.+10     	; 0x1254 <OSTaskSuspend+0x46>
        OS_EXIT_CRITICAL();
    124a:	82 2f       	mov	r24, r18
    124c:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    1250:	88 e4       	ldi	r24, 0x48	; 72
    1252:	2e c0       	rjmp	.+92     	; 0x12b0 <OSTaskSuspend+0xa2>
        return (OS_ERR_TASK_SUSPEND_PRIO);
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    1254:	a1 30       	cpi	r26, 0x01	; 1
    1256:	b1 05       	cpc	r27, r1
    1258:	29 f4       	brne	.+10     	; 0x1264 <OSTaskSuspend+0x56>
        OS_EXIT_CRITICAL();
    125a:	82 2f       	mov	r24, r18
    125c:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    1260:	83 e4       	ldi	r24, 0x43	; 67
    1262:	26 c0       	rjmp	.+76     	; 0x12b0 <OSTaskSuspend+0xa2>
        return (OS_ERR_TASK_NOT_EXIST);
    }
    y            = ptcb->OSTCBY;
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    1264:	5c 96       	adiw	r26, 0x1c	; 28
    1266:	ec 91       	ld	r30, X
    1268:	5c 97       	sbiw	r26, 0x1c	; 28
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	e8 52       	subi	r30, 0x28	; 40
    126e:	f9 4f       	sbci	r31, 0xF9	; 249
    1270:	5d 96       	adiw	r26, 0x1d	; 29
    1272:	8c 91       	ld	r24, X
    1274:	5d 97       	sbiw	r26, 0x1d	; 29
    1276:	80 95       	com	r24
    1278:	90 81       	ld	r25, Z
    127a:	89 23       	and	r24, r25
    127c:	80 83       	st	Z, r24
    if (OSRdyTbl[y] == 0) {
    127e:	88 23       	and	r24, r24
    1280:	49 f4       	brne	.+18     	; 0x1294 <OSTaskSuspend+0x86>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    1282:	5e 96       	adiw	r26, 0x1e	; 30
    1284:	9c 91       	ld	r25, X
    1286:	5e 97       	sbiw	r26, 0x1e	; 30
    1288:	90 95       	com	r25
    128a:	80 91 d7 06 	lds	r24, 0x06D7
    128e:	89 23       	and	r24, r25
    1290:	80 93 d7 06 	sts	0x06D7, r24
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    1294:	58 96       	adiw	r26, 0x18	; 24
    1296:	8c 91       	ld	r24, X
    1298:	58 97       	sbiw	r26, 0x18	; 24
    129a:	88 60       	ori	r24, 0x08	; 8
    129c:	58 96       	adiw	r26, 0x18	; 24
    129e:	8c 93       	st	X, r24
    OS_EXIT_CRITICAL();
    12a0:	82 2f       	mov	r24, r18
    12a2:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    12a6:	01 30       	cpi	r16, 0x01	; 1
    12a8:	11 f4       	brne	.+4      	; 0x12ae <OSTaskSuspend+0xa0>
        OS_Sched();                                             /* Find new highest priority task      */
    12aa:	0e 94 70 07 	call	0xee0	; 0xee0 <OS_Sched>
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    }
    return (OS_ERR_NONE);
}
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	08 95       	ret

000012b6 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    12b6:	1f 93       	push	r17
    12b8:	04 c0       	rjmp	.+8      	; 0x12c2 <OS_TaskStat+0xc>



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    12ba:	84 e1       	ldi	r24, 0x14	; 20
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 2a 08 	call	0x1054	; 0x1054 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    12c2:	80 91 05 0b 	lds	r24, 0x0B05
    12c6:	88 23       	and	r24, r24
    12c8:	c1 f3       	breq	.-16     	; 0x12ba <OS_TaskStat+0x4>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    12ca:	60 91 cd 06 	lds	r22, 0x06CD
    12ce:	70 91 ce 06 	lds	r23, 0x06CE
    12d2:	80 91 cf 06 	lds	r24, 0x06CF
    12d6:	90 91 d0 06 	lds	r25, 0x06D0
    12da:	24 e6       	ldi	r18, 0x64	; 100
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	40 e0       	ldi	r20, 0x00	; 0
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	0e 94 28 12 	call	0x2450	; 0x2450 <__udivmodsi4>
    12e6:	c9 01       	movw	r24, r18
    12e8:	da 01       	movw	r26, r20
    12ea:	80 93 cd 06 	sts	0x06CD, r24
    12ee:	90 93 ce 06 	sts	0x06CE, r25
    12f2:	a0 93 cf 06 	sts	0x06CF, r26
    12f6:	b0 93 d0 06 	sts	0x06D0, r27
    if (OSIdleCtrMax == 0L) {
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	a1 05       	cpc	r26, r1
    12fe:	b1 05       	cpc	r27, r1
    1300:	29 f4       	brne	.+10     	; 0x130c <OS_TaskStat+0x56>
        OSCPUUsage = 0;
    1302:	10 92 d3 06 	sts	0x06D3, r1
        (void)OSTaskSuspend(OS_PRIO_SELF);
    1306:	8f ef       	ldi	r24, 0xFF	; 255
    1308:	0e 94 07 09 	call	0x120e	; 0x120e <OSTaskSuspend>
    for (;;) {
        OS_ENTER_CRITICAL();
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    130c:	14 e6       	ldi	r17, 0x64	; 100
    if (OSIdleCtrMax == 0L) {
        OSCPUUsage = 0;
        (void)OSTaskSuspend(OS_PRIO_SELF);
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    130e:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    1312:	20 91 e0 05 	lds	r18, 0x05E0
    1316:	30 91 e1 05 	lds	r19, 0x05E1
    131a:	40 91 e2 05 	lds	r20, 0x05E2
    131e:	50 91 e3 05 	lds	r21, 0x05E3
    1322:	20 93 24 0b 	sts	0x0B24, r18
    1326:	30 93 25 0b 	sts	0x0B25, r19
    132a:	40 93 26 0b 	sts	0x0B26, r20
    132e:	50 93 27 0b 	sts	0x0B27, r21
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    1332:	10 92 e0 05 	sts	0x05E0, r1
    1336:	10 92 e1 05 	sts	0x05E1, r1
    133a:	10 92 e2 05 	sts	0x05E2, r1
    133e:	10 92 e3 05 	sts	0x05E3, r1
        OS_EXIT_CRITICAL();
    1342:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    1346:	60 91 24 0b 	lds	r22, 0x0B24
    134a:	70 91 25 0b 	lds	r23, 0x0B25
    134e:	80 91 26 0b 	lds	r24, 0x0B26
    1352:	90 91 27 0b 	lds	r25, 0x0B27
    1356:	20 91 cd 06 	lds	r18, 0x06CD
    135a:	30 91 ce 06 	lds	r19, 0x06CE
    135e:	40 91 cf 06 	lds	r20, 0x06CF
    1362:	50 91 d0 06 	lds	r21, 0x06D0
    1366:	0e 94 28 12 	call	0x2450	; 0x2450 <__udivmodsi4>
    136a:	81 2f       	mov	r24, r17
    136c:	82 1b       	sub	r24, r18
    136e:	80 93 d3 06 	sts	0x06D3, r24
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    1372:	0e 94 08 11 	call	0x2210	; 0x2210 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    1376:	0e 94 64 04 	call	0x8c8	; 0x8c8 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    137a:	8a e0       	ldi	r24, 0x0A	; 10
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	0e 94 2a 08 	call	0x1054	; 0x1054 <OSTimeDly>
    1382:	c5 cf       	rjmp	.-118    	; 0x130e <OS_TaskStat+0x58>

00001384 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    1384:	1f 93       	push	r17
    1386:	18 2f       	mov	r17, r24
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    1388:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    138c:	28 2f       	mov	r18, r24
    ptcb = OSTCBPrioTbl[prio];
    138e:	e1 2f       	mov	r30, r17
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	ee 0f       	add	r30, r30
    1394:	ff 1f       	adc	r31, r31
    1396:	ea 5f       	subi	r30, 0xFA	; 250
    1398:	f4 4f       	sbci	r31, 0xF4	; 244
    139a:	a0 81       	ld	r26, Z
    139c:	b1 81       	ldd	r27, Z+1	; 0x01
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    139e:	10 97       	sbiw	r26, 0x00	; 0
    13a0:	21 f4       	brne	.+8      	; 0x13aa <OSTaskResume+0x26>
        OS_EXIT_CRITICAL();
    13a2:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    13a6:	86 e4       	ldi	r24, 0x46	; 70
    13a8:	3e c0       	rjmp	.+124    	; 0x1426 <OSTaskResume+0xa2>
        return (OS_ERR_TASK_RESUME_PRIO);
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    13aa:	a1 30       	cpi	r26, 0x01	; 1
    13ac:	b1 05       	cpc	r27, r1
    13ae:	21 f4       	brne	.+8      	; 0x13b8 <OSTaskResume+0x34>
        OS_EXIT_CRITICAL();
    13b0:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    13b4:	83 e4       	ldi	r24, 0x43	; 67
    13b6:	37 c0       	rjmp	.+110    	; 0x1426 <OSTaskResume+0xa2>
        return (OS_ERR_TASK_NOT_EXIST);
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    13b8:	58 96       	adiw	r26, 0x18	; 24
    13ba:	8c 91       	ld	r24, X
    13bc:	58 97       	sbiw	r26, 0x18	; 24
    13be:	83 ff       	sbrs	r24, 3
    13c0:	2e c0       	rjmp	.+92     	; 0x141e <OSTaskResume+0x9a>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    13c2:	87 7f       	andi	r24, 0xF7	; 247
    13c4:	58 96       	adiw	r26, 0x18	; 24
    13c6:	8c 93       	st	X, r24
    13c8:	58 97       	sbiw	r26, 0x18	; 24
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    13ca:	88 23       	and	r24, r24
    13cc:	19 f5       	brne	.+70     	; 0x1414 <OSTaskResume+0x90>
            if (ptcb->OSTCBDly == 0) {
    13ce:	56 96       	adiw	r26, 0x16	; 22
    13d0:	8d 91       	ld	r24, X+
    13d2:	9c 91       	ld	r25, X
    13d4:	57 97       	sbiw	r26, 0x17	; 23
    13d6:	89 2b       	or	r24, r25
    13d8:	e9 f4       	brne	.+58     	; 0x1414 <OSTaskResume+0x90>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    13da:	80 91 d7 06 	lds	r24, 0x06D7
    13de:	5e 96       	adiw	r26, 0x1e	; 30
    13e0:	9c 91       	ld	r25, X
    13e2:	5e 97       	sbiw	r26, 0x1e	; 30
    13e4:	89 2b       	or	r24, r25
    13e6:	80 93 d7 06 	sts	0x06D7, r24
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    13ea:	5c 96       	adiw	r26, 0x1c	; 28
    13ec:	ec 91       	ld	r30, X
    13ee:	5c 97       	sbiw	r26, 0x1c	; 28
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	e8 52       	subi	r30, 0x28	; 40
    13f4:	f9 4f       	sbci	r31, 0xF9	; 249
    13f6:	80 81       	ld	r24, Z
    13f8:	5d 96       	adiw	r26, 0x1d	; 29
    13fa:	9c 91       	ld	r25, X
    13fc:	89 2b       	or	r24, r25
    13fe:	80 83       	st	Z, r24
                OS_EXIT_CRITICAL();
    1400:	82 2f       	mov	r24, r18
    1402:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
                if (OSRunning == OS_TRUE) {
    1406:	80 91 df 05 	lds	r24, 0x05DF
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	31 f4       	brne	.+12     	; 0x141a <OSTaskResume+0x96>
                    OS_Sched();                               /* Find new highest priority task        */
    140e:	0e 94 70 07 	call	0xee0	; 0xee0 <OS_Sched>
    1412:	03 c0       	rjmp	.+6      	; 0x141a <OSTaskResume+0x96>
                }
            } else {
                OS_EXIT_CRITICAL();
    1414:	82 2f       	mov	r24, r18
    1416:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	04 c0       	rjmp	.+8      	; 0x1426 <OSTaskResume+0xa2>
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    }
    OS_EXIT_CRITICAL();
    141e:	82 2f       	mov	r24, r18
    1420:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    1424:	84 e4       	ldi	r24, 0x44	; 68
    return (OS_ERR_TASK_NOT_SUSPENDED);
}
    1426:	1f 91       	pop	r17
    1428:	08 95       	ret

0000142a <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    142a:	ff 92       	push	r15
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	18 2f       	mov	r17, r24
    OS_CPU_SR     cpu_sr = 0;
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    1436:	80 91 dc 06 	lds	r24, 0x06DC
    143a:	88 23       	and	r24, r24
    143c:	11 f0       	breq	.+4      	; 0x1442 <OSTaskDel+0x18>
    143e:	80 e4       	ldi	r24, 0x40	; 64
    1440:	9b c0       	rjmp	.+310    	; 0x1578 <OSTaskDel+0x14e>
        return (OS_ERR_TASK_DEL_ISR);
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    1442:	1e 30       	cpi	r17, 0x0E	; 14
    1444:	11 f4       	brne	.+4      	; 0x144a <OSTaskDel+0x20>
    1446:	8e e3       	ldi	r24, 0x3E	; 62
    1448:	97 c0       	rjmp	.+302    	; 0x1578 <OSTaskDel+0x14e>
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    144a:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    144e:	f8 2e       	mov	r15, r24
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    1450:	1f 3f       	cpi	r17, 0xFF	; 255
    1452:	29 f4       	brne	.+10     	; 0x145e <OSTaskDel+0x34>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    1454:	e0 91 dd 06 	lds	r30, 0x06DD
    1458:	f0 91 de 06 	lds	r31, 0x06DE
    145c:	12 8d       	ldd	r17, Z+26	; 0x1a
    }
    ptcb = OSTCBPrioTbl[prio];
    145e:	01 2f       	mov	r16, r17
    1460:	10 e0       	ldi	r17, 0x00	; 0
    1462:	f8 01       	movw	r30, r16
    1464:	ee 0f       	add	r30, r30
    1466:	ff 1f       	adc	r31, r31
    1468:	ea 5f       	subi	r30, 0xFA	; 250
    146a:	f4 4f       	sbci	r31, 0xF4	; 244
    146c:	c0 81       	ld	r28, Z
    146e:	d1 81       	ldd	r29, Z+1	; 0x01
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    1470:	20 97       	sbiw	r28, 0x00	; 0
    1472:	29 f4       	brne	.+10     	; 0x147e <OSTaskDel+0x54>
        OS_EXIT_CRITICAL();
    1474:	8f 2d       	mov	r24, r15
    1476:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    147a:	83 e4       	ldi	r24, 0x43	; 67
    147c:	7d c0       	rjmp	.+250    	; 0x1578 <OSTaskDel+0x14e>
        return (OS_ERR_TASK_NOT_EXIST);
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    147e:	c1 30       	cpi	r28, 0x01	; 1
    1480:	d1 05       	cpc	r29, r1
    1482:	29 f4       	brne	.+10     	; 0x148e <OSTaskDel+0x64>
        OS_EXIT_CRITICAL();
    1484:	8f 2d       	mov	r24, r15
    1486:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    148a:	8d e3       	ldi	r24, 0x3D	; 61
    148c:	75 c0       	rjmp	.+234    	; 0x1578 <OSTaskDel+0x14e>
        return (OS_ERR_TASK_DEL);
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    148e:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	e8 52       	subi	r30, 0x28	; 40
    1494:	f9 4f       	sbci	r31, 0xF9	; 249
    1496:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1498:	80 95       	com	r24
    149a:	90 81       	ld	r25, Z
    149c:	89 23       	and	r24, r25
    149e:	80 83       	st	Z, r24
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    14a0:	88 23       	and	r24, r24
    14a2:	39 f4       	brne	.+14     	; 0x14b2 <OSTaskDel+0x88>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    14a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14a6:	90 95       	com	r25
    14a8:	80 91 d7 06 	lds	r24, 0x06D7
    14ac:	89 23       	and	r24, r25
    14ae:	80 93 d7 06 	sts	0x06D7, r24
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    14b2:	6a 89       	ldd	r22, Y+18	; 0x12
    14b4:	7b 89       	ldd	r23, Y+19	; 0x13
    14b6:	61 15       	cp	r22, r1
    14b8:	71 05       	cpc	r23, r1
    14ba:	19 f0       	breq	.+6      	; 0x14c2 <OSTaskDel+0x98>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    14bc:	ce 01       	movw	r24, r28
    14be:	0e 94 bf 02 	call	0x57e	; 0x57e <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    14c2:	6c 89       	ldd	r22, Y+20	; 0x14
    14c4:	7d 89       	ldd	r23, Y+21	; 0x15
    14c6:	61 15       	cp	r22, r1
    14c8:	71 05       	cpc	r23, r1
    14ca:	19 f0       	breq	.+6      	; 0x14d2 <OSTaskDel+0xa8>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    14cc:	ce 01       	movw	r24, r28
    14ce:	0e 94 db 02 	call	0x5b6	; 0x5b6 <OS_EventTaskRemoveMulti>
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    14d2:	1f 8a       	std	Y+23, r1	; 0x17
    14d4:	1e 8a       	std	Y+22, r1	; 0x16
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    14d6:	18 8e       	std	Y+24, r1	; 0x18
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    14d8:	19 8e       	std	Y+25, r1	; 0x19
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    14da:	80 91 de 05 	lds	r24, 0x05DE
    14de:	8f 3f       	cpi	r24, 0xFF	; 255
    14e0:	19 f0       	breq	.+6      	; 0x14e8 <OSTaskDel+0xbe>
        OSLockNesting++;
    14e2:	8f 5f       	subi	r24, 0xFF	; 255
    14e4:	80 93 de 05 	sts	0x05DE, r24
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    14e8:	8f 2d       	mov	r24, r15
    14ea:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    14ee:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    14f2:	f8 2e       	mov	r15, r24
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    14f4:	80 91 de 05 	lds	r24, 0x05DE
    14f8:	88 23       	and	r24, r24
    14fa:	19 f0       	breq	.+6      	; 0x1502 <OSTaskDel+0xd8>
        OSLockNesting--;
    14fc:	81 50       	subi	r24, 0x01	; 1
    14fe:	80 93 de 05 	sts	0x05DE, r24
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    1502:	ce 01       	movw	r24, r28
    1504:	0e 94 06 11 	call	0x220c	; 0x220c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    1508:	80 91 d4 06 	lds	r24, 0x06D4
    150c:	81 50       	subi	r24, 0x01	; 1
    150e:	80 93 d4 06 	sts	0x06D4, r24
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    1512:	00 0f       	add	r16, r16
    1514:	11 1f       	adc	r17, r17
    1516:	0a 5f       	subi	r16, 0xFA	; 250
    1518:	14 4f       	sbci	r17, 0xF4	; 244
    151a:	f8 01       	movw	r30, r16
    151c:	11 82       	std	Z+1, r1	; 0x01
    151e:	10 82       	st	Z, r1
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    1520:	a8 89       	ldd	r26, Y+16	; 0x10
    1522:	b9 89       	ldd	r27, Y+17	; 0x11
    1524:	ee 85       	ldd	r30, Y+14	; 0x0e
    1526:	ff 85       	ldd	r31, Y+15	; 0x0f
    1528:	10 97       	sbiw	r26, 0x00	; 0
    152a:	39 f4       	brne	.+14     	; 0x153a <OSTaskDel+0x110>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    152c:	11 8a       	std	Z+17, r1	; 0x11
    152e:	10 8a       	std	Z+16, r1	; 0x10
        OSTCBList                  = ptcb->OSTCBNext;
    1530:	f0 93 e7 05 	sts	0x05E7, r31
    1534:	e0 93 e6 05 	sts	0x05E6, r30
    1538:	08 c0       	rjmp	.+16     	; 0x154a <OSTaskDel+0x120>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    153a:	1f 96       	adiw	r26, 0x0f	; 15
    153c:	fc 93       	st	X, r31
    153e:	ee 93       	st	-X, r30
    1540:	1e 97       	sbiw	r26, 0x0e	; 14
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    1542:	ee 85       	ldd	r30, Y+14	; 0x0e
    1544:	ff 85       	ldd	r31, Y+15	; 0x0f
    1546:	b1 8b       	std	Z+17, r27	; 0x11
    1548:	a0 8b       	std	Z+16, r26	; 0x10
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    154a:	80 91 d1 06 	lds	r24, 0x06D1
    154e:	90 91 d2 06 	lds	r25, 0x06D2
    1552:	9f 87       	std	Y+15, r25	; 0x0f
    1554:	8e 87       	std	Y+14, r24	; 0x0e
    OSTCBFreeList     = ptcb;
    1556:	d0 93 d2 06 	sts	0x06D2, r29
    155a:	c0 93 d1 06 	sts	0x06D1, r28
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    155e:	8f e3       	ldi	r24, 0x3F	; 63
    1560:	8a ab       	std	Y+50, r24	; 0x32
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    1562:	1b aa       	std	Y+51, r1	; 0x33
#endif
    OS_EXIT_CRITICAL();
    1564:	8f 2d       	mov	r24, r15
    1566:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    if (OSRunning == OS_TRUE) {
    156a:	80 91 df 05 	lds	r24, 0x05DF
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	11 f4       	brne	.+4      	; 0x1576 <OSTaskDel+0x14c>
        OS_Sched();                                     /* Find new highest priority task              */
    1572:	0e 94 70 07 	call	0xee0	; 0xee0 <OS_Sched>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    }
    return (OS_ERR_NONE);
}
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	0f 91       	pop	r16
    1580:	ff 90       	pop	r15
    1582:	08 95       	ret

00001584 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    1584:	2f 92       	push	r2
    1586:	3f 92       	push	r3
    1588:	4f 92       	push	r4
    158a:	5f 92       	push	r5
    158c:	6f 92       	push	r6
    158e:	7f 92       	push	r7
    1590:	8f 92       	push	r8
    1592:	9f 92       	push	r9
    1594:	af 92       	push	r10
    1596:	bf 92       	push	r11
    1598:	cf 92       	push	r12
    159a:	df 92       	push	r13
    159c:	ef 92       	push	r14
    159e:	ff 92       	push	r15
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <OSTaskCreateExt+0x26>
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <OSTaskCreateExt+0x28>
    15ac:	0f 92       	push	r0
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	2c 01       	movw	r4, r24
    15b4:	1b 01       	movw	r2, r22
    15b6:	5a 83       	std	Y+2, r21	; 0x02
    15b8:	49 83       	std	Y+1, r20	; 0x01
    15ba:	2b 83       	std	Y+3, r18	; 0x03
    15bc:	9d 82       	std	Y+5, r9	; 0x05
    15be:	8c 82       	std	Y+4, r8	; 0x04
    15c0:	6a 8c       	ldd	r6, Y+26	; 0x1a
    15c2:	7b 8c       	ldd	r7, Y+27	; 0x1b
#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    15c4:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    15c8:	28 2f       	mov	r18, r24
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    15ca:	80 91 dc 06 	lds	r24, 0x06DC
    15ce:	88 23       	and	r24, r24
    15d0:	29 f0       	breq	.+10     	; 0x15dc <OSTaskCreateExt+0x58>
        OS_EXIT_CRITICAL();
    15d2:	82 2f       	mov	r24, r18
    15d4:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    15d8:	1c e3       	ldi	r17, 0x3C	; 60
    15da:	43 c0       	rjmp	.+134    	; 0x1662 <OSTaskCreateExt+0xde>
        return (OS_ERR_TASK_CREATE_ISR);
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	88 2e       	mov	r8, r24
    15e0:	99 24       	eor	r9, r9
    15e2:	88 0c       	add	r8, r8
    15e4:	99 1c       	adc	r9, r9
    15e6:	e6 e0       	ldi	r30, 0x06	; 6
    15e8:	fb e0       	ldi	r31, 0x0B	; 11
    15ea:	8e 0e       	add	r8, r30
    15ec:	9f 1e       	adc	r9, r31
    15ee:	f4 01       	movw	r30, r8
    15f0:	80 81       	ld	r24, Z
    15f2:	91 81       	ldd	r25, Z+1	; 0x01
    15f4:	89 2b       	or	r24, r25
    15f6:	89 f5       	brne	.+98     	; 0x165a <OSTaskCreateExt+0xd6>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	91 83       	std	Z+1, r25	; 0x01
    15fe:	80 83       	st	Z, r24
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
    1600:	82 2f       	mov	r24, r18
    1602:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    1606:	c7 01       	movw	r24, r14
    1608:	b6 01       	movw	r22, r12
    160a:	a5 01       	movw	r20, r10
    160c:	93 01       	movw	r18, r6
    160e:	0e 94 82 03 	call	0x704	; 0x704 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    1612:	c2 01       	movw	r24, r4
    1614:	b1 01       	movw	r22, r2
    1616:	49 81       	ldd	r20, Y+1	; 0x01
    1618:	5a 81       	ldd	r21, Y+2	; 0x02
    161a:	93 01       	movw	r18, r6
    161c:	0e 94 09 11 	call	0x2212	; 0x2212 <OSTaskStkInit>
    1620:	bc 01       	movw	r22, r24
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	a7 01       	movw	r20, r14
    1626:	98 01       	movw	r18, r16
    1628:	86 01       	movw	r16, r12
    162a:	75 01       	movw	r14, r10
    162c:	cc 80       	ldd	r12, Y+4	; 0x04
    162e:	dd 80       	ldd	r13, Y+5	; 0x05
    1630:	53 01       	movw	r10, r6
    1632:	0e 94 9b 06 	call	0xd36	; 0xd36 <OS_TCBInit>
    1636:	18 2f       	mov	r17, r24
        if (err == OS_ERR_NONE) {
    1638:	88 23       	and	r24, r24
    163a:	39 f4       	brne	.+14     	; 0x164a <OSTaskCreateExt+0xc6>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    163c:	80 91 df 05 	lds	r24, 0x05DF
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	79 f4       	brne	.+30     	; 0x1662 <OSTaskCreateExt+0xde>
                OS_Sched();
    1644:	0e 94 70 07 	call	0xee0	; 0xee0 <OS_Sched>
    1648:	0c c0       	rjmp	.+24     	; 0x1662 <OSTaskCreateExt+0xde>
            }
        } else {
            OS_ENTER_CRITICAL();
    164a:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    164e:	f4 01       	movw	r30, r8
    1650:	11 82       	std	Z+1, r1	; 0x01
    1652:	10 82       	st	Z, r1
            OS_EXIT_CRITICAL();
    1654:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    1658:	04 c0       	rjmp	.+8      	; 0x1662 <OSTaskCreateExt+0xde>
        }
        return (err);
    }
    OS_EXIT_CRITICAL();
    165a:	82 2f       	mov	r24, r18
    165c:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    1660:	18 e2       	ldi	r17, 0x28	; 40
    return (OS_ERR_PRIO_EXIST);
}
    1662:	81 2f       	mov	r24, r17
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	1f 91       	pop	r17
    1674:	0f 91       	pop	r16
    1676:	ff 90       	pop	r15
    1678:	ef 90       	pop	r14
    167a:	df 90       	pop	r13
    167c:	cf 90       	pop	r12
    167e:	bf 90       	pop	r11
    1680:	af 90       	pop	r10
    1682:	9f 90       	pop	r9
    1684:	8f 90       	pop	r8
    1686:	7f 90       	pop	r7
    1688:	6f 90       	pop	r6
    168a:	5f 90       	pop	r5
    168c:	4f 90       	pop	r4
    168e:	3f 90       	pop	r3
    1690:	2f 90       	pop	r2
    1692:	08 95       	ret

00001694 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    1694:	af 92       	push	r10
    1696:	bf 92       	push	r11
    1698:	cf 92       	push	r12
    169a:	df 92       	push	r13
    169c:	ef 92       	push	r14
    169e:	ff 92       	push	r15
    16a0:	0f 93       	push	r16
    16a2:	1f 93       	push	r17
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	8c 01       	movw	r16, r24
    16aa:	7b 01       	movw	r14, r22
    16ac:	6a 01       	movw	r12, r20
    16ae:	b2 2e       	mov	r11, r18
#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    16b0:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    16b4:	28 2f       	mov	r18, r24
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    16b6:	80 91 dc 06 	lds	r24, 0x06DC
    16ba:	88 23       	and	r24, r24
    16bc:	29 f0       	breq	.+10     	; 0x16c8 <OSTaskCreate+0x34>
        OS_EXIT_CRITICAL();
    16be:	82 2f       	mov	r24, r18
    16c0:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    16c4:	1c e3       	ldi	r17, 0x3C	; 60
    16c6:	3c c0       	rjmp	.+120    	; 0x1740 <OSTaskCreate+0xac>
        return (OS_ERR_TASK_CREATE_ISR);
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    16c8:	cb 2d       	mov	r28, r11
    16ca:	d0 e0       	ldi	r29, 0x00	; 0
    16cc:	cc 0f       	add	r28, r28
    16ce:	dd 1f       	adc	r29, r29
    16d0:	ca 5f       	subi	r28, 0xFA	; 250
    16d2:	d4 4f       	sbci	r29, 0xF4	; 244
    16d4:	88 81       	ld	r24, Y
    16d6:	99 81       	ldd	r25, Y+1	; 0x01
    16d8:	89 2b       	or	r24, r25
    16da:	71 f5       	brne	.+92     	; 0x1738 <OSTaskCreate+0xa4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	99 83       	std	Y+1, r25	; 0x01
    16e2:	88 83       	st	Y, r24
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
    16e4:	82 2f       	mov	r24, r18
    16e6:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    16ea:	c8 01       	movw	r24, r16
    16ec:	b7 01       	movw	r22, r14
    16ee:	a6 01       	movw	r20, r12
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	0e 94 09 11 	call	0x2212	; 0x2212 <OSTaskStkInit>
    16f8:	bc 01       	movw	r22, r24
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    16fa:	8b 2d       	mov	r24, r11
    16fc:	40 e0       	ldi	r20, 0x00	; 0
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	ee 24       	eor	r14, r14
    1706:	ff 24       	eor	r15, r15
    1708:	87 01       	movw	r16, r14
    170a:	cc 24       	eor	r12, r12
    170c:	dd 24       	eor	r13, r13
    170e:	aa 24       	eor	r10, r10
    1710:	bb 24       	eor	r11, r11
    1712:	0e 94 9b 06 	call	0xd36	; 0xd36 <OS_TCBInit>
    1716:	18 2f       	mov	r17, r24
        if (err == OS_ERR_NONE) {
    1718:	88 23       	and	r24, r24
    171a:	39 f4       	brne	.+14     	; 0x172a <OSTaskCreate+0x96>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    171c:	80 91 df 05 	lds	r24, 0x05DF
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	71 f4       	brne	.+28     	; 0x1740 <OSTaskCreate+0xac>
                OS_Sched();
    1724:	0e 94 70 07 	call	0xee0	; 0xee0 <OS_Sched>
    1728:	0b c0       	rjmp	.+22     	; 0x1740 <OSTaskCreate+0xac>
            }
        } else {
            OS_ENTER_CRITICAL();
    172a:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    172e:	19 82       	std	Y+1, r1	; 0x01
    1730:	18 82       	st	Y, r1
            OS_EXIT_CRITICAL();
    1732:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    1736:	04 c0       	rjmp	.+8      	; 0x1740 <OSTaskCreate+0xac>
        }
        return (err);
    }
    OS_EXIT_CRITICAL();
    1738:	82 2f       	mov	r24, r18
    173a:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    173e:	18 e2       	ldi	r17, 0x28	; 40
    return (OS_ERR_PRIO_EXIST);
}
    1740:	81 2f       	mov	r24, r17
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
    174e:	df 90       	pop	r13
    1750:	cf 90       	pop	r12
    1752:	bf 90       	pop	r11
    1754:	af 90       	pop	r10
    1756:	08 95       	ret

00001758 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    1758:	af 92       	push	r10
    175a:	bf 92       	push	r11
    175c:	cf 92       	push	r12
    175e:	df 92       	push	r13
    1760:	ef 92       	push	r14
    1762:	ff 92       	push	r15
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	18 2f       	mov	r17, r24
    176e:	d6 2e       	mov	r13, r22
    }
    if (newprio >= OS_LOWEST_PRIO) {
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    1770:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    1774:	c8 2e       	mov	r12, r24
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    1776:	ad 2d       	mov	r26, r13
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	fd 01       	movw	r30, r26
    177c:	ee 0f       	add	r30, r30
    177e:	ff 1f       	adc	r31, r31
    1780:	ea 5f       	subi	r30, 0xFA	; 250
    1782:	f4 4f       	sbci	r31, 0xF4	; 244
    1784:	80 81       	ld	r24, Z
    1786:	91 81       	ldd	r25, Z+1	; 0x01
    1788:	89 2b       	or	r24, r25
    178a:	29 f0       	breq	.+10     	; 0x1796 <OSTaskChangePrio+0x3e>
        OS_EXIT_CRITICAL();
    178c:	8c 2d       	mov	r24, r12
    178e:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    1792:	88 e2       	ldi	r24, 0x28	; 40
    1794:	c5 c0       	rjmp	.+394    	; 0x1920 <OSTaskChangePrio+0x1c8>
        return (OS_ERR_PRIO_EXIST);
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    1796:	1f 3f       	cpi	r17, 0xFF	; 255
    1798:	29 f4       	brne	.+10     	; 0x17a4 <OSTaskChangePrio+0x4c>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    179a:	e0 91 dd 06 	lds	r30, 0x06DD
    179e:	f0 91 de 06 	lds	r31, 0x06DE
    17a2:	12 8d       	ldd	r17, Z+26	; 0x1a
    }
    ptcb = OSTCBPrioTbl[oldprio];
    17a4:	e1 2f       	mov	r30, r17
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	ee 0f       	add	r30, r30
    17aa:	ff 1f       	adc	r31, r31
    17ac:	ea 5f       	subi	r30, 0xFA	; 250
    17ae:	f4 4f       	sbci	r31, 0xF4	; 244
    17b0:	c0 81       	ld	r28, Z
    17b2:	d1 81       	ldd	r29, Z+1	; 0x01
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    17b4:	20 97       	sbiw	r28, 0x00	; 0
    17b6:	29 f4       	brne	.+10     	; 0x17c2 <OSTaskChangePrio+0x6a>
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
    17b8:	8c 2d       	mov	r24, r12
    17ba:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    17be:	89 e2       	ldi	r24, 0x29	; 41
    17c0:	af c0       	rjmp	.+350    	; 0x1920 <OSTaskChangePrio+0x1c8>
        return (OS_ERR_PRIO);
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    17c2:	c1 30       	cpi	r28, 0x01	; 1
    17c4:	d1 05       	cpc	r29, r1
    17c6:	29 f4       	brne	.+10     	; 0x17d2 <OSTaskChangePrio+0x7a>
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
    17c8:	8c 2d       	mov	r24, r12
    17ca:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    17ce:	83 e4       	ldi	r24, 0x43	; 67
    17d0:	a7 c0       	rjmp	.+334    	; 0x1920 <OSTaskChangePrio+0x1c8>
        return (OS_ERR_TASK_NOT_EXIST);
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    17d2:	ad 2c       	mov	r10, r13
    17d4:	a6 94       	lsr	r10
    17d6:	a6 94       	lsr	r10
    17d8:	a6 94       	lsr	r10
    x_new                 = (INT8U)(newprio & 0x07);
    17da:	17 e0       	ldi	r17, 0x07	; 7
    17dc:	b1 2e       	mov	r11, r17
    17de:	bd 20       	and	r11, r13
    bity_new              = (INT8U)(1 << y_new);
    17e0:	6a 2d       	mov	r22, r10
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	21 e0       	ldi	r18, 0x01	; 1
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	c9 01       	movw	r24, r18
    17ea:	0a 2c       	mov	r0, r10
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <OSTaskChangePrio+0x9a>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <OSTaskChangePrio+0x96>
    17f6:	e8 2e       	mov	r14, r24
    bitx_new              = (INT8U)(1 << x_new);
    17f8:	f2 2e       	mov	r15, r18
    17fa:	0b 2c       	mov	r0, r11
    17fc:	01 c0       	rjmp	.+2      	; 0x1800 <OSTaskChangePrio+0xa8>
    17fe:	ff 0c       	add	r15, r15
    1800:	0a 94       	dec	r0
    1802:	ea f7       	brpl	.-6      	; 0x17fe <OSTaskChangePrio+0xa6>
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    1804:	11 82       	std	Z+1, r1	; 0x01
    1806:	10 82       	st	Z, r1
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    1808:	aa 0f       	add	r26, r26
    180a:	bb 1f       	adc	r27, r27
    180c:	aa 5f       	subi	r26, 0xFA	; 250
    180e:	b4 4f       	sbci	r27, 0xF4	; 244
    1810:	cd 93       	st	X+, r28
    1812:	dc 93       	st	X, r29
    y_old                 =  ptcb->OSTCBY;
    bity_old              =  ptcb->OSTCBBitY;
    1814:	0e 8d       	ldd	r16, Y+30	; 0x1e
    bitx_old              =  ptcb->OSTCBBitX;
    1816:	1d 8d       	ldd	r17, Y+29	; 0x1d
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    1818:	8c 8d       	ldd	r24, Y+28	; 0x1c
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	f9 01       	movw	r30, r18
    1820:	e8 52       	subi	r30, 0x28	; 40
    1822:	f9 4f       	sbci	r31, 0xF9	; 249
    1824:	90 81       	ld	r25, Z
    1826:	89 2f       	mov	r24, r25
    1828:	81 23       	and	r24, r17
    182a:	c1 f0       	breq	.+48     	; 0x185c <OSTaskChangePrio+0x104>
         OSRdyTbl[y_old] &= ~bitx_old;
    182c:	81 2f       	mov	r24, r17
    182e:	80 95       	com	r24
    1830:	89 23       	and	r24, r25
    1832:	80 83       	st	Z, r24
         if (OSRdyTbl[y_old] == 0) {
    1834:	88 23       	and	r24, r24
    1836:	39 f4       	brne	.+14     	; 0x1846 <OSTaskChangePrio+0xee>
             OSRdyGrp &= ~bity_old;
    1838:	90 2f       	mov	r25, r16
    183a:	90 95       	com	r25
    183c:	80 91 d7 06 	lds	r24, 0x06D7
    1840:	89 23       	and	r24, r25
    1842:	80 93 d7 06 	sts	0x06D7, r24
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    1846:	80 91 d7 06 	lds	r24, 0x06D7
    184a:	8e 29       	or	r24, r14
    184c:	80 93 d7 06 	sts	0x06D7, r24
         OSRdyTbl[y_new] |= bitx_new;
    1850:	fb 01       	movw	r30, r22
    1852:	e8 52       	subi	r30, 0x28	; 40
    1854:	f9 4f       	sbci	r31, 0xF9	; 249
    1856:	80 81       	ld	r24, Z
    1858:	8f 29       	or	r24, r15
    185a:	80 83       	st	Z, r24
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    185c:	aa 89       	ldd	r26, Y+18	; 0x12
    185e:	bb 89       	ldd	r27, Y+19	; 0x13
    if (pevent != (OS_EVENT *)0) {
    1860:	10 97       	sbiw	r26, 0x00	; 0
    1862:	01 f1       	breq	.+64     	; 0x18a4 <OSTaskChangePrio+0x14c>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    1864:	fd 01       	movw	r30, r26
    1866:	e2 0f       	add	r30, r18
    1868:	f3 1f       	adc	r31, r19
    186a:	81 2f       	mov	r24, r17
    186c:	80 95       	com	r24
    186e:	96 81       	ldd	r25, Z+6	; 0x06
    1870:	89 23       	and	r24, r25
    1872:	86 83       	std	Z+6, r24	; 0x06
        if (pevent->OSEventTbl[y_old] == 0) {
    1874:	88 23       	and	r24, r24
    1876:	49 f4       	brne	.+18     	; 0x188a <OSTaskChangePrio+0x132>
            pevent->OSEventGrp    &= ~bity_old;
    1878:	90 2f       	mov	r25, r16
    187a:	90 95       	com	r25
    187c:	15 96       	adiw	r26, 0x05	; 5
    187e:	8c 91       	ld	r24, X
    1880:	15 97       	sbiw	r26, 0x05	; 5
    1882:	89 23       	and	r24, r25
    1884:	15 96       	adiw	r26, 0x05	; 5
    1886:	8c 93       	st	X, r24
    1888:	15 97       	sbiw	r26, 0x05	; 5
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    188a:	15 96       	adiw	r26, 0x05	; 5
    188c:	8c 91       	ld	r24, X
    188e:	15 97       	sbiw	r26, 0x05	; 5
    1890:	8e 29       	or	r24, r14
    1892:	15 96       	adiw	r26, 0x05	; 5
    1894:	8c 93       	st	X, r24
    1896:	15 97       	sbiw	r26, 0x05	; 5
        pevent->OSEventTbl[y_new] |= bitx_new;
    1898:	fd 01       	movw	r30, r26
    189a:	e6 0f       	add	r30, r22
    189c:	f7 1f       	adc	r31, r23
    189e:	86 81       	ldd	r24, Z+6	; 0x06
    18a0:	8f 29       	or	r24, r15
    18a2:	86 83       	std	Z+6, r24	; 0x06
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    18a4:	4c 89       	ldd	r20, Y+20	; 0x14
    18a6:	5d 89       	ldd	r21, Y+21	; 0x15
    18a8:	41 15       	cp	r20, r1
    18aa:	51 05       	cpc	r21, r1
    18ac:	51 f1       	breq	.+84     	; 0x1902 <OSTaskChangePrio+0x1aa>
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
    18ae:	fa 01       	movw	r30, r20
    18b0:	a0 81       	ld	r26, Z
    18b2:	b1 81       	ldd	r27, Z+1	; 0x01
        while (pevent != (OS_EVENT *)0) {
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    18b4:	10 95       	com	r17
            if (pevent->OSEventTbl[y_old] == 0) {
                pevent->OSEventGrp    &= ~bity_old;
    18b6:	90 2f       	mov	r25, r16
    18b8:	90 95       	com	r25
    18ba:	21 c0       	rjmp	.+66     	; 0x18fe <OSTaskChangePrio+0x1a6>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    18bc:	fd 01       	movw	r30, r26
    18be:	e2 0f       	add	r30, r18
    18c0:	f3 1f       	adc	r31, r19
    18c2:	86 81       	ldd	r24, Z+6	; 0x06
    18c4:	81 23       	and	r24, r17
    18c6:	86 83       	std	Z+6, r24	; 0x06
            if (pevent->OSEventTbl[y_old] == 0) {
    18c8:	88 23       	and	r24, r24
    18ca:	39 f4       	brne	.+14     	; 0x18da <OSTaskChangePrio+0x182>
                pevent->OSEventGrp    &= ~bity_old;
    18cc:	15 96       	adiw	r26, 0x05	; 5
    18ce:	8c 91       	ld	r24, X
    18d0:	15 97       	sbiw	r26, 0x05	; 5
    18d2:	89 23       	and	r24, r25
    18d4:	15 96       	adiw	r26, 0x05	; 5
    18d6:	8c 93       	st	X, r24
    18d8:	15 97       	sbiw	r26, 0x05	; 5
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    18da:	15 96       	adiw	r26, 0x05	; 5
    18dc:	8c 91       	ld	r24, X
    18de:	15 97       	sbiw	r26, 0x05	; 5
    18e0:	8e 29       	or	r24, r14
    18e2:	15 96       	adiw	r26, 0x05	; 5
    18e4:	8c 93       	st	X, r24
    18e6:	15 97       	sbiw	r26, 0x05	; 5
            pevent->OSEventTbl[y_new] |= bitx_new;
    18e8:	fd 01       	movw	r30, r26
    18ea:	e6 0f       	add	r30, r22
    18ec:	f7 1f       	adc	r31, r23
    18ee:	86 81       	ldd	r24, Z+6	; 0x06
    18f0:	8f 29       	or	r24, r15
    18f2:	86 83       	std	Z+6, r24	; 0x06
            pevents++;
    18f4:	4e 5f       	subi	r20, 0xFE	; 254
    18f6:	5f 4f       	sbci	r21, 0xFF	; 255
            pevent                     = *pevents;
    18f8:	fa 01       	movw	r30, r20
    18fa:	a0 81       	ld	r26, Z
    18fc:	b1 81       	ldd	r27, Z+1	; 0x01
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    18fe:	10 97       	sbiw	r26, 0x00	; 0
    1900:	e9 f6       	brne	.-70     	; 0x18bc <OSTaskChangePrio+0x164>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    1902:	da 8e       	std	Y+26, r13	; 0x1a
    ptcb->OSTCBY    = y_new;
    1904:	ac 8e       	std	Y+28, r10	; 0x1c
    ptcb->OSTCBX    = x_new;
    1906:	bb 8e       	std	Y+27, r11	; 0x1b
    ptcb->OSTCBBitY = bity_new;
    1908:	ee 8e       	std	Y+30, r14	; 0x1e
    ptcb->OSTCBBitX = bitx_new;
    190a:	fd 8e       	std	Y+29, r15	; 0x1d
    OS_EXIT_CRITICAL();
    190c:	8c 2d       	mov	r24, r12
    190e:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    if (OSRunning == OS_TRUE) {
    1912:	80 91 df 05 	lds	r24, 0x05DF
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	11 f4       	brne	.+4      	; 0x191e <OSTaskChangePrio+0x1c6>
        OS_Sched();                                         /* Find new highest priority task          */
    191a:	0e 94 70 07 	call	0xee0	; 0xee0 <OS_Sched>
    191e:	80 e0       	ldi	r24, 0x00	; 0
    }
    return (OS_ERR_NONE);
}
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	ff 90       	pop	r15
    192a:	ef 90       	pop	r14
    192c:	df 90       	pop	r13
    192e:	cf 90       	pop	r12
    1930:	bf 90       	pop	r11
    1932:	af 90       	pop	r10
    1934:	08 95       	ret

00001936 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	ec 01       	movw	r28, r24
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    193e:	88 81       	ld	r24, Y
    1940:	83 30       	cpi	r24, 0x03	; 3
    1942:	11 f0       	breq	.+4      	; 0x1948 <OSSemPost+0x12>
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	25 c0       	rjmp	.+74     	; 0x1992 <OSSemPost+0x5c>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    1948:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    194c:	18 2f       	mov	r17, r24
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    194e:	8d 81       	ldd	r24, Y+5	; 0x05
    1950:	88 23       	and	r24, r24
    1952:	69 f0       	breq	.+26     	; 0x196e <OSSemPost+0x38>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    1954:	ce 01       	movw	r24, r28
    1956:	60 e0       	ldi	r22, 0x00	; 0
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	41 e0       	ldi	r20, 0x01	; 1
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
    1962:	81 2f       	mov	r24, r17
    1964:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
        OS_Sched();                                   /* Find HPT ready to run                         */
    1968:	0e 94 70 07 	call	0xee0	; 0xee0 <OS_Sched>
    196c:	0c c0       	rjmp	.+24     	; 0x1986 <OSSemPost+0x50>
        return (OS_ERR_NONE);
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	9c 81       	ldd	r25, Y+4	; 0x04
    1972:	2f ef       	ldi	r18, 0xFF	; 255
    1974:	8f 3f       	cpi	r24, 0xFF	; 255
    1976:	92 07       	cpc	r25, r18
    1978:	41 f0       	breq	.+16     	; 0x198a <OSSemPost+0x54>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	9c 83       	std	Y+4, r25	; 0x04
    197e:	8b 83       	std	Y+3, r24	; 0x03
        OS_EXIT_CRITICAL();
    1980:	81 2f       	mov	r24, r17
    1982:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	04 c0       	rjmp	.+8      	; 0x1992 <OSSemPost+0x5c>
        return (OS_ERR_NONE);
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    198a:	81 2f       	mov	r24, r17
    198c:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    1990:	82 e3       	ldi	r24, 0x32	; 50
    return (OS_ERR_SEM_OVF);
}
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	1f 91       	pop	r17
    1998:	08 95       	ret

0000199a <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    199a:	ef 92       	push	r14
    199c:	ff 92       	push	r15
    199e:	0f 93       	push	r16
    19a0:	1f 93       	push	r17
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	ec 01       	movw	r28, r24
    19a8:	16 2f       	mov	r17, r22
    19aa:	7a 01       	movw	r14, r20
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    19ac:	88 81       	ld	r24, Y
    19ae:	83 30       	cpi	r24, 0x03	; 3
    19b0:	21 f0       	breq	.+8      	; 0x19ba <OSSemPendAbort+0x20>
        *perr = OS_ERR_EVENT_TYPE;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	fa 01       	movw	r30, r20
    19b6:	80 83       	st	Z, r24
    19b8:	2c c0       	rjmp	.+88     	; 0x1a12 <OSSemPendAbort+0x78>
        return (0);
    }
    OS_ENTER_CRITICAL();
    19ba:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    19be:	08 2f       	mov	r16, r24
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	88 23       	and	r24, r24
    19c4:	09 f1       	breq	.+66     	; 0x1a08 <OSSemPendAbort+0x6e>
        nbr_tasks = 0;
        switch (opt) {
    19c6:	11 30       	cpi	r17, 0x01	; 1
    19c8:	71 f4       	brne	.+28     	; 0x19e6 <OSSemPendAbort+0x4c>
    19ca:	10 e0       	ldi	r17, 0x00	; 0
    19cc:	08 c0       	rjmp	.+16     	; 0x19de <OSSemPendAbort+0x44>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    19ce:	ce 01       	movw	r24, r28
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	41 e0       	ldi	r20, 0x01	; 1
    19d6:	22 e0       	ldi	r18, 0x02	; 2
    19d8:	0e 94 fe 02 	call	0x5fc	; 0x5fc <OS_EventTaskRdy>
                     nbr_tasks++;
    19dc:	1f 5f       	subi	r17, 0xFF	; 255
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    19de:	8d 81       	ldd	r24, Y+5	; 0x05
    19e0:	88 23       	and	r24, r24
    19e2:	a9 f7       	brne	.-22     	; 0x19ce <OSSemPendAbort+0x34>
    19e4:	08 c0       	rjmp	.+16     	; 0x19f6 <OSSemPendAbort+0x5c>
                 }
                 break;
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    19e6:	ce 01       	movw	r24, r28
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	41 e0       	ldi	r20, 0x01	; 1
    19ee:	22 e0       	ldi	r18, 0x02	; 2
    19f0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <OS_EventTaskRdy>
    19f4:	11 e0       	ldi	r17, 0x01	; 1
                 nbr_tasks++;
                 break;
        }
        OS_EXIT_CRITICAL();
    19f6:	80 2f       	mov	r24, r16
    19f8:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
        OS_Sched();                                   /* Find HPT ready to run                         */
    19fc:	0e 94 70 07 	call	0xee0	; 0xee0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    1a00:	8e e0       	ldi	r24, 0x0E	; 14
    1a02:	f7 01       	movw	r30, r14
    1a04:	80 83       	st	Z, r24
    1a06:	06 c0       	rjmp	.+12     	; 0x1a14 <OSSemPendAbort+0x7a>
        return (nbr_tasks);
    }
    OS_EXIT_CRITICAL();
    1a08:	80 2f       	mov	r24, r16
    1a0a:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    *perr = OS_ERR_NONE;
    1a0e:	f7 01       	movw	r30, r14
    1a10:	10 82       	st	Z, r1
    1a12:	10 e0       	ldi	r17, 0x00	; 0
    return (0);                                       /* No tasks waiting on semaphore                 */
}
    1a14:	81 2f       	mov	r24, r17
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	1f 91       	pop	r17
    1a1c:	0f 91       	pop	r16
    1a1e:	ff 90       	pop	r15
    1a20:	ef 90       	pop	r14
    1a22:	08 95       	ret

00001a24 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    1a24:	cf 92       	push	r12
    1a26:	df 92       	push	r13
    1a28:	ff 92       	push	r15
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	8c 01       	movw	r16, r24
    1a34:	6b 01       	movw	r12, r22
    1a36:	ea 01       	movw	r28, r20
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    1a38:	fc 01       	movw	r30, r24
    1a3a:	80 81       	ld	r24, Z
    1a3c:	83 30       	cpi	r24, 0x03	; 3
    1a3e:	11 f0       	breq	.+4      	; 0x1a44 <OSSemPend+0x20>
        *perr = OS_ERR_EVENT_TYPE;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	0b c0       	rjmp	.+22     	; 0x1a5a <OSSemPend+0x36>
        return;
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    1a44:	80 91 dc 06 	lds	r24, 0x06DC
    1a48:	88 23       	and	r24, r24
    1a4a:	11 f0       	breq	.+4      	; 0x1a50 <OSSemPend+0x2c>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    1a4c:	82 e0       	ldi	r24, 0x02	; 2
    1a4e:	05 c0       	rjmp	.+10     	; 0x1a5a <OSSemPend+0x36>
        return;
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    1a50:	80 91 de 05 	lds	r24, 0x05DE
    1a54:	88 23       	and	r24, r24
    1a56:	19 f0       	breq	.+6      	; 0x1a5e <OSSemPend+0x3a>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    1a58:	8d e0       	ldi	r24, 0x0D	; 13
    1a5a:	88 83       	st	Y, r24
    1a5c:	46 c0       	rjmp	.+140    	; 0x1aea <OSSemPend+0xc6>
        return;
    }
    OS_ENTER_CRITICAL();
    1a5e:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    1a62:	f8 2e       	mov	r15, r24
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    1a64:	f8 01       	movw	r30, r16
    1a66:	83 81       	ldd	r24, Z+3	; 0x03
    1a68:	94 81       	ldd	r25, Z+4	; 0x04
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	41 f0       	breq	.+16     	; 0x1a7e <OSSemPend+0x5a>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	94 83       	std	Z+4, r25	; 0x04
    1a72:	83 83       	std	Z+3, r24	; 0x03
        OS_EXIT_CRITICAL();
    1a74:	8f 2d       	mov	r24, r15
    1a76:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
        *perr = OS_ERR_NONE;
    1a7a:	18 82       	st	Y, r1
    1a7c:	36 c0       	rjmp	.+108    	; 0x1aea <OSSemPend+0xc6>
        return;
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    1a7e:	e0 91 dd 06 	lds	r30, 0x06DD
    1a82:	f0 91 de 06 	lds	r31, 0x06DE
    1a86:	80 8d       	ldd	r24, Z+24	; 0x18
    1a88:	81 60       	ori	r24, 0x01	; 1
    1a8a:	80 8f       	std	Z+24, r24	; 0x18
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    1a8c:	11 8e       	std	Z+25, r1	; 0x19
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    1a8e:	d7 8a       	std	Z+23, r13	; 0x17
    1a90:	c6 8a       	std	Z+22, r12	; 0x16
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    1a92:	c8 01       	movw	r24, r16
    1a94:	0e 94 52 02 	call	0x4a4	; 0x4a4 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
    1a98:	8f 2d       	mov	r24, r15
    1a9a:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    OS_Sched();                                       /* Find next highest priority task ready         */
    1a9e:	0e 94 70 07 	call	0xee0	; 0xee0 <OS_Sched>
    OS_ENTER_CRITICAL();
    1aa2:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    1aa6:	f8 2e       	mov	r15, r24
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    1aa8:	e0 91 dd 06 	lds	r30, 0x06DD
    1aac:	f0 91 de 06 	lds	r31, 0x06DE
    1ab0:	81 8d       	ldd	r24, Z+25	; 0x19
    1ab2:	88 23       	and	r24, r24
    1ab4:	19 f0       	breq	.+6      	; 0x1abc <OSSemPend+0x98>
    1ab6:	82 30       	cpi	r24, 0x02	; 2
    1ab8:	29 f4       	brne	.+10     	; 0x1ac4 <OSSemPend+0xa0>
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <OSSemPend+0x9c>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    1abc:	18 82       	st	Y, r1
    1abe:	08 c0       	rjmp	.+16     	; 0x1ad0 <OSSemPend+0xac>
             break;

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    1ac0:	8e e0       	ldi	r24, 0x0E	; 14
    1ac2:	05 c0       	rjmp	.+10     	; 0x1ace <OSSemPend+0xaa>
             break;

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    1ac4:	cf 01       	movw	r24, r30
    1ac6:	b8 01       	movw	r22, r16
    1ac8:	0e 94 bf 02 	call	0x57e	; 0x57e <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    1acc:	8a e0       	ldi	r24, 0x0A	; 10
    1ace:	88 83       	st	Y, r24
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    1ad0:	e0 91 dd 06 	lds	r30, 0x06DD
    1ad4:	f0 91 de 06 	lds	r31, 0x06DE
    1ad8:	10 8e       	std	Z+24, r1	; 0x18
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    1ada:	11 8e       	std	Z+25, r1	; 0x19
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    1adc:	13 8a       	std	Z+19, r1	; 0x13
    1ade:	12 8a       	std	Z+18, r1	; 0x12
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    1ae0:	15 8a       	std	Z+21, r1	; 0x15
    1ae2:	14 8a       	std	Z+20, r1	; 0x14
#endif
    OS_EXIT_CRITICAL();
    1ae4:	8f 2d       	mov	r24, r15
    1ae6:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
}
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	1f 91       	pop	r17
    1af0:	0f 91       	pop	r16
    1af2:	ff 90       	pop	r15
    1af4:	df 90       	pop	r13
    1af6:	cf 90       	pop	r12
    1af8:	08 95       	ret

00001afa <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    1afa:	df 92       	push	r13
    1afc:	ef 92       	push	r14
    1afe:	ff 92       	push	r15
    1b00:	0f 93       	push	r16
    1b02:	1f 93       	push	r17
    1b04:	cf 93       	push	r28
    1b06:	df 93       	push	r29
    1b08:	ec 01       	movw	r28, r24
    1b0a:	d6 2e       	mov	r13, r22
    1b0c:	8a 01       	movw	r16, r20
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *perr = OS_ERR_PEVENT_NULL;
        return (pevent);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    1b0e:	88 81       	ld	r24, Y
    1b10:	83 30       	cpi	r24, 0x03	; 3
    1b12:	11 f0       	breq	.+4      	; 0x1b18 <OSSemDel+0x1e>
        *perr = OS_ERR_EVENT_TYPE;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	5b c0       	rjmp	.+182    	; 0x1bce <OSSemDel+0xd4>
        return (pevent);
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    1b18:	80 91 dc 06 	lds	r24, 0x06DC
    1b1c:	88 23       	and	r24, r24
    1b1e:	11 f0       	breq	.+4      	; 0x1b24 <OSSemDel+0x2a>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    1b20:	8f e0       	ldi	r24, 0x0F	; 15
    1b22:	55 c0       	rjmp	.+170    	; 0x1bce <OSSemDel+0xd4>
        return (pevent);
    }
    OS_ENTER_CRITICAL();
    1b24:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    1b28:	e8 2e       	mov	r14, r24
    1b2a:	fd 80       	ldd	r15, Y+5	; 0x05
    1b2c:	ff 20       	and	r15, r15
    1b2e:	11 f0       	breq	.+4      	; 0x1b34 <OSSemDel+0x3a>
    1b30:	ff 24       	eor	r15, r15
    1b32:	f3 94       	inc	r15
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    }
    switch (opt) {
    1b34:	dd 20       	and	r13, r13
    1b36:	29 f0       	breq	.+10     	; 0x1b42 <OSSemDel+0x48>
    1b38:	f1 e0       	ldi	r31, 0x01	; 1
    1b3a:	df 16       	cp	r13, r31
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <OSSemDel+0x46>
    1b3e:	43 c0       	rjmp	.+134    	; 0x1bc6 <OSSemDel+0xcc>
    1b40:	22 c0       	rjmp	.+68     	; 0x1b86 <OSSemDel+0x8c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    1b42:	ff 20       	and	r15, r15
    1b44:	a1 f4       	brne	.+40     	; 0x1b6e <OSSemDel+0x74>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    1b46:	8f e3       	ldi	r24, 0x3F	; 63
    1b48:	88 87       	std	Y+8, r24	; 0x08
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    1b4a:	19 86       	std	Y+9, r1	; 0x09
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    1b4c:	18 82       	st	Y, r1
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    1b4e:	80 91 da 06 	lds	r24, 0x06DA
    1b52:	90 91 db 06 	lds	r25, 0x06DB
    1b56:	9a 83       	std	Y+2, r25	; 0x02
    1b58:	89 83       	std	Y+1, r24	; 0x01
                 pevent->OSEventCnt     = 0;
    1b5a:	1c 82       	std	Y+4, r1	; 0x04
    1b5c:	1b 82       	std	Y+3, r1	; 0x03
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    1b5e:	d0 93 db 06 	sts	0x06DB, r29
    1b62:	c0 93 da 06 	sts	0x06DA, r28
                 OS_EXIT_CRITICAL();
    1b66:	8e 2d       	mov	r24, r14
    1b68:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    1b6c:	27 c0       	rjmp	.+78     	; 0x1bbc <OSSemDel+0xc2>
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
    1b6e:	8e 2d       	mov	r24, r14
    1b70:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
                 *perr                  = OS_ERR_TASK_WAITING;
    1b74:	89 e4       	ldi	r24, 0x49	; 73
    1b76:	2b c0       	rjmp	.+86     	; 0x1bce <OSSemDel+0xd4>
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    1b78:	ce 01       	movw	r24, r28
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	41 e0       	ldi	r20, 0x01	; 1
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	0e 94 fe 02 	call	0x5fc	; 0x5fc <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    1b86:	8d 81       	ldd	r24, Y+5	; 0x05
    1b88:	88 23       	and	r24, r24
    1b8a:	b1 f7       	brne	.-20     	; 0x1b78 <OSSemDel+0x7e>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    1b8c:	8f e3       	ldi	r24, 0x3F	; 63
    1b8e:	88 87       	std	Y+8, r24	; 0x08
             pevent->OSEventName[1] = OS_ASCII_NUL;
    1b90:	19 86       	std	Y+9, r1	; 0x09
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    1b92:	18 82       	st	Y, r1
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    1b94:	80 91 da 06 	lds	r24, 0x06DA
    1b98:	90 91 db 06 	lds	r25, 0x06DB
    1b9c:	9a 83       	std	Y+2, r25	; 0x02
    1b9e:	89 83       	std	Y+1, r24	; 0x01
             pevent->OSEventCnt     = 0;
    1ba0:	1c 82       	std	Y+4, r1	; 0x04
    1ba2:	1b 82       	std	Y+3, r1	; 0x03
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    1ba4:	d0 93 db 06 	sts	0x06DB, r29
    1ba8:	c0 93 da 06 	sts	0x06DA, r28
             OS_EXIT_CRITICAL();
    1bac:	8e 2d       	mov	r24, r14
    1bae:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    1bb2:	f1 e0       	ldi	r31, 0x01	; 1
    1bb4:	ff 16       	cp	r15, r31
    1bb6:	11 f4       	brne	.+4      	; 0x1bbc <OSSemDel+0xc2>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    1bb8:	0e 94 70 07 	call	0xee0	; 0xee0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    1bbc:	f8 01       	movw	r30, r16
    1bbe:	10 82       	st	Z, r1
    1bc0:	c0 e0       	ldi	r28, 0x00	; 0
    1bc2:	d0 e0       	ldi	r29, 0x00	; 0
    1bc4:	06 c0       	rjmp	.+12     	; 0x1bd2 <OSSemDel+0xd8>
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
             break;

        default:
             OS_EXIT_CRITICAL();
    1bc6:	8e 2d       	mov	r24, r14
    1bc8:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
             *perr                  = OS_ERR_INVALID_OPT;
    1bcc:	87 e0       	ldi	r24, 0x07	; 7
    1bce:	f8 01       	movw	r30, r16
    1bd0:	80 83       	st	Z, r24
             pevent_return          = pevent;
             break;
    }
    return (pevent_return);
}
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	1f 91       	pop	r17
    1bda:	0f 91       	pop	r16
    1bdc:	ff 90       	pop	r15
    1bde:	ef 90       	pop	r14
    1be0:	df 90       	pop	r13
    1be2:	08 95       	ret

00001be4 <OSSchedUnlock>:
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    1be4:	80 91 df 05 	lds	r24, 0x05DF
    1be8:	81 30       	cpi	r24, 0x01	; 1
    1bea:	e9 f4       	brne	.+58     	; 0x1c26 <OSSchedUnlock+0x42>
        OS_ENTER_CRITICAL();
    1bec:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    1bf0:	98 2f       	mov	r25, r24
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    1bf2:	80 91 de 05 	lds	r24, 0x05DE
    1bf6:	88 23       	and	r24, r24
    1bf8:	99 f0       	breq	.+38     	; 0x1c20 <OSSchedUnlock+0x3c>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    1bfa:	81 50       	subi	r24, 0x01	; 1
    1bfc:	80 93 de 05 	sts	0x05DE, r24
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    1c00:	88 23       	and	r24, r24
    1c02:	51 f4       	brne	.+20     	; 0x1c18 <OSSchedUnlock+0x34>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    1c04:	80 91 dc 06 	lds	r24, 0x06DC
    1c08:	88 23       	and	r24, r24
    1c0a:	31 f4       	brne	.+12     	; 0x1c18 <OSSchedUnlock+0x34>
                    OS_EXIT_CRITICAL();
    1c0c:	89 2f       	mov	r24, r25
    1c0e:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
                    OS_Sched();                            /* See if a HPT is ready                    */
    1c12:	0e 94 70 07 	call	0xee0	; 0xee0 <OS_Sched>
    1c16:	08 95       	ret
                } else {
                    OS_EXIT_CRITICAL();
                }
            } else {
                OS_EXIT_CRITICAL();
    1c18:	89 2f       	mov	r24, r25
    1c1a:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    1c1e:	08 95       	ret
            }
        } else {
            OS_EXIT_CRITICAL();
    1c20:	89 2f       	mov	r24, r25
    1c22:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    1c26:	08 95       	ret

00001c28 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    1c28:	4f 92       	push	r4
    1c2a:	5f 92       	push	r5
    1c2c:	7f 92       	push	r7
    1c2e:	8f 92       	push	r8
    1c30:	9f 92       	push	r9
    1c32:	af 92       	push	r10
    1c34:	bf 92       	push	r11
    1c36:	cf 92       	push	r12
    1c38:	df 92       	push	r13
    1c3a:	ef 92       	push	r14
    1c3c:	ff 92       	push	r15
    1c3e:	0f 93       	push	r16
    1c40:	1f 93       	push	r17
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	7c 01       	movw	r14, r24
    1c48:	6b 01       	movw	r12, r22
    1c4a:	4a 01       	movw	r8, r20
    1c4c:	29 01       	movw	r4, r18
    1c4e:	58 01       	movw	r10, r16
       *perr =  OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    1c50:	db 01       	movw	r26, r22
    1c52:	1d 92       	st	X+, r1
    1c54:	1c 92       	st	X, r1

    pevents     =  pevents_pend;
    pevent      = *pevents;
    1c56:	dc 01       	movw	r26, r24
    1c58:	06 c0       	rjmp	.+12     	; 0x1c66 <OSEventPendMulti+0x3e>
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    1c5a:	80 81       	ld	r24, Z
    1c5c:	83 30       	cpi	r24, 0x03	; 3
    1c5e:	11 f0       	breq	.+4      	; 0x1c64 <OSEventPendMulti+0x3c>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	15 c0       	rjmp	.+42     	; 0x1c8e <OSEventPendMulti+0x66>
                 return (0);
        }
        pevents++;
    1c64:	12 96       	adiw	r26, 0x02	; 2
        pevent = *pevents;
    1c66:	ed 91       	ld	r30, X+
    1c68:	fc 91       	ld	r31, X
    1c6a:	11 97       	sbiw	r26, 0x01	; 1

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    1c6c:	30 97       	sbiw	r30, 0x00	; 0
    1c6e:	a9 f7       	brne	.-22     	; 0x1c5a <OSEventPendMulti+0x32>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    1c70:	80 91 dc 06 	lds	r24, 0x06DC
    1c74:	88 23       	and	r24, r24
    1c76:	31 f0       	breq	.+12     	; 0x1c84 <OSEventPendMulti+0x5c>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    1c78:	82 e0       	ldi	r24, 0x02	; 2
    1c7a:	d5 01       	movw	r26, r10
    1c7c:	8c 93       	st	X, r24
    1c7e:	00 e0       	ldi	r16, 0x00	; 0
    1c80:	10 e0       	ldi	r17, 0x00	; 0
    1c82:	ad c0       	rjmp	.+346    	; 0x1dde <OSEventPendMulti+0x1b6>
        return (0);
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    1c84:	80 91 de 05 	lds	r24, 0x05DE
    1c88:	88 23       	and	r24, r24
    1c8a:	21 f0       	breq	.+8      	; 0x1c94 <OSEventPendMulti+0x6c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    1c8c:	8d e0       	ldi	r24, 0x0D	; 13
    1c8e:	f5 01       	movw	r30, r10
    1c90:	80 83       	st	Z, r24
    1c92:	f5 cf       	rjmp	.-22     	; 0x1c7e <OSEventPendMulti+0x56>
        return (0);
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    1c94:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    1c98:	78 2e       	mov	r7, r24
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    1c9a:	d7 01       	movw	r26, r14
    1c9c:	cd 91       	ld	r28, X+
    1c9e:	dc 91       	ld	r29, X
    1ca0:	f7 01       	movw	r30, r14
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	00 e0       	ldi	r16, 0x00	; 0
    1ca6:	10 e0       	ldi	r17, 0x00	; 0
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	25 c0       	rjmp	.+74     	; 0x1cf6 <OSEventPendMulti+0xce>
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
        switch (pevent->OSEventType) {
    1cac:	88 81       	ld	r24, Y
    1cae:	83 30       	cpi	r24, 0x03	; 3
    1cb0:	a9 f4       	brne	.+42     	; 0x1cdc <OSEventPendMulti+0xb4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	79 f0       	breq	.+30     	; 0x1cd8 <OSEventPendMulti+0xb0>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	9c 83       	std	Y+4, r25	; 0x04
    1cbe:	8b 83       	std	Y+3, r24	; 0x03
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    1cc0:	d6 01       	movw	r26, r12
    1cc2:	cd 93       	st	X+, r28
    1cc4:	dd 93       	st	X+, r29
    1cc6:	6d 01       	movw	r12, r26
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    1cc8:	d4 01       	movw	r26, r8
    1cca:	1d 92       	st	X+, r1
    1ccc:	1d 92       	st	X+, r1
    1cce:	4d 01       	movw	r8, r26
                      events_rdy_nbr++;
    1cd0:	0f 5f       	subi	r16, 0xFF	; 255
    1cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd4:	31 e0       	ldi	r19, 0x01	; 1
    1cd6:	0c c0       	rjmp	.+24     	; 0x1cf0 <OSEventPendMulti+0xc8>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    1cd8:	21 60       	ori	r18, 0x01	; 1
    1cda:	0a c0       	rjmp	.+20     	; 0x1cf0 <OSEventPendMulti+0xc8>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
    1cdc:	87 2d       	mov	r24, r7
    1cde:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    1ce2:	f6 01       	movw	r30, r12
    1ce4:	11 82       	std	Z+1, r1	; 0x01
    1ce6:	10 82       	st	Z, r1
                *perr        =  OS_ERR_EVENT_TYPE;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	d5 01       	movw	r26, r10
    1cec:	8c 93       	st	X, r24
    1cee:	77 c0       	rjmp	.+238    	; 0x1dde <OSEventPendMulti+0x1b6>
                 return (events_rdy_nbr);
        }
        pevents++;
    1cf0:	32 96       	adiw	r30, 0x02	; 2
        pevent = *pevents;
    1cf2:	c0 81       	ld	r28, Z
    1cf4:	d1 81       	ldd	r29, Z+1	; 0x01
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    1cf6:	20 97       	sbiw	r28, 0x00	; 0
    1cf8:	c9 f6       	brne	.-78     	; 0x1cac <OSEventPendMulti+0x84>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    1cfa:	31 30       	cpi	r19, 0x01	; 1
    1cfc:	49 f4       	brne	.+18     	; 0x1d10 <OSEventPendMulti+0xe8>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    1cfe:	f6 01       	movw	r30, r12
    1d00:	11 82       	std	Z+1, r1	; 0x01
    1d02:	10 82       	st	Z, r1
        OS_EXIT_CRITICAL();
    1d04:	87 2d       	mov	r24, r7
    1d06:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
       *perr        =  OS_ERR_NONE;
    1d0a:	d5 01       	movw	r26, r10
    1d0c:	1c 92       	st	X, r1
    1d0e:	67 c0       	rjmp	.+206    	; 0x1dde <OSEventPendMulti+0x1b6>
        return (events_rdy_nbr);
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    1d10:	e0 91 dd 06 	lds	r30, 0x06DD
    1d14:	f0 91 de 06 	lds	r31, 0x06DE
    1d18:	80 8d       	ldd	r24, Z+24	; 0x18
    1d1a:	80 68       	ori	r24, 0x80	; 128
    1d1c:	82 2b       	or	r24, r18
    1d1e:	80 8f       	std	Z+24, r24	; 0x18
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    1d20:	11 8e       	std	Z+25, r1	; 0x19
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    1d22:	57 8a       	std	Z+23, r5	; 0x17
    1d24:	46 8a       	std	Z+22, r4	; 0x16
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    1d26:	c7 01       	movw	r24, r14
    1d28:	0e 94 85 02 	call	0x50a	; 0x50a <OS_EventTaskWaitMulti>

    OS_EXIT_CRITICAL();
    1d2c:	87 2d       	mov	r24, r7
    1d2e:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    OS_Sched();                                         /* Find next highest priority task ready       */
    1d32:	0e 94 70 07 	call	0xee0	; 0xee0 <OS_Sched>
    OS_ENTER_CRITICAL();
    1d36:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    1d3a:	78 2e       	mov	r7, r24

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    1d3c:	e0 91 dd 06 	lds	r30, 0x06DD
    1d40:	f0 91 de 06 	lds	r31, 0x06DE
    1d44:	81 8d       	ldd	r24, Z+25	; 0x19
    1d46:	88 23       	and	r24, r24
    1d48:	11 f0       	breq	.+4      	; 0x1d4e <OSEventPendMulti+0x126>
    1d4a:	82 30       	cpi	r24, 0x02	; 2
    1d4c:	79 f4       	brne	.+30     	; 0x1d6c <OSEventPendMulti+0x144>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    1d4e:	c2 89       	ldd	r28, Z+18	; 0x12
    1d50:	d3 89       	ldd	r29, Z+19	; 0x13
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    1d52:	20 97       	sbiw	r28, 0x00	; 0
    1d54:	49 f0       	breq	.+18     	; 0x1d68 <OSEventPendMulti+0x140>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    1d56:	f6 01       	movw	r30, r12
    1d58:	c1 93       	st	Z+, r28
    1d5a:	d1 93       	st	Z+, r29
    1d5c:	6f 01       	movw	r12, r30
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    1d5e:	11 82       	std	Z+1, r1	; 0x01
    1d60:	10 82       	st	Z, r1
                  events_rdy_nbr++;
    1d62:	0f 5f       	subi	r16, 0xFF	; 255
    1d64:	1f 4f       	sbci	r17, 0xFF	; 255
    1d66:	06 c0       	rjmp	.+12     	; 0x1d74 <OSEventPendMulti+0x14c>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	81 8f       	std	Z+25, r24	; 0x19
             }
			 break;

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    1d6c:	cf 01       	movw	r24, r30
    1d6e:	b7 01       	movw	r22, r14
    1d70:	0e 94 db 02 	call	0x5b6	; 0x5b6 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
    1d74:	e0 91 dd 06 	lds	r30, 0x06DD
    1d78:	f0 91 de 06 	lds	r31, 0x06DE
    1d7c:	81 8d       	ldd	r24, Z+25	; 0x19
    1d7e:	88 23       	and	r24, r24
    1d80:	19 f0       	breq	.+6      	; 0x1d88 <OSEventPendMulti+0x160>
    1d82:	82 30       	cpi	r24, 0x02	; 2
    1d84:	c9 f4       	brne	.+50     	; 0x1db8 <OSEventPendMulti+0x190>
    1d86:	13 c0       	rjmp	.+38     	; 0x1dae <OSEventPendMulti+0x186>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    1d88:	88 81       	ld	r24, Y
    1d8a:	83 30       	cpi	r24, 0x03	; 3
    1d8c:	31 f4       	brne	.+12     	; 0x1d9a <OSEventPendMulti+0x172>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    1d8e:	d4 01       	movw	r26, r8
    1d90:	1d 92       	st	X+, r1
    1d92:	1c 92       	st	X, r1
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
                     *perr        =  OS_ERR_EVENT_TYPE;
                      return (events_rdy_nbr);
             }
            *perr = OS_ERR_NONE;
    1d94:	f5 01       	movw	r30, r10
    1d96:	10 82       	st	Z, r1
    1d98:	15 c0       	rjmp	.+42     	; 0x1dc4 <OSEventPendMulti+0x19c>
#endif

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
    1d9a:	87 2d       	mov	r24, r7
    1d9c:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    1da0:	d6 01       	movw	r26, r12
    1da2:	1d 92       	st	X+, r1
    1da4:	1c 92       	st	X, r1
                     *perr        =  OS_ERR_EVENT_TYPE;
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	f5 01       	movw	r30, r10
    1daa:	80 83       	st	Z, r24
    1dac:	18 c0       	rjmp	.+48     	; 0x1dde <OSEventPendMulti+0x1b6>
             }
            *perr = OS_ERR_NONE;
             break;

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    1dae:	d4 01       	movw	r26, r8
    1db0:	1d 92       	st	X+, r1
    1db2:	1c 92       	st	X, r1
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    1db4:	8e e0       	ldi	r24, 0x0E	; 14
    1db6:	04 c0       	rjmp	.+8      	; 0x1dc0 <OSEventPendMulti+0x198>
             break;
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    1db8:	d4 01       	movw	r26, r8
    1dba:	1d 92       	st	X+, r1
    1dbc:	1c 92       	st	X, r1
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    1dbe:	8a e0       	ldi	r24, 0x0A	; 10
    1dc0:	f5 01       	movw	r30, r10
    1dc2:	80 83       	st	Z, r24
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    1dc4:	e0 91 dd 06 	lds	r30, 0x06DD
    1dc8:	f0 91 de 06 	lds	r31, 0x06DE
    1dcc:	10 8e       	std	Z+24, r1	; 0x18
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    1dce:	11 8e       	std	Z+25, r1	; 0x19
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    1dd0:	13 8a       	std	Z+19, r1	; 0x13
    1dd2:	12 8a       	std	Z+18, r1	; 0x12
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    1dd4:	15 8a       	std	Z+21, r1	; 0x15
    1dd6:	14 8a       	std	Z+20, r1	; 0x14
//    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    OS_EXIT_CRITICAL();
    1dd8:	87 2d       	mov	r24, r7
    1dda:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>

    return (events_rdy_nbr);
}
    1dde:	c8 01       	movw	r24, r16
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	ff 90       	pop	r15
    1dea:	ef 90       	pop	r14
    1dec:	df 90       	pop	r13
    1dee:	cf 90       	pop	r12
    1df0:	bf 90       	pop	r11
    1df2:	af 90       	pop	r10
    1df4:	9f 90       	pop	r9
    1df6:	8f 90       	pop	r8
    1df8:	7f 90       	pop	r7
    1dfa:	5f 90       	pop	r5
    1dfc:	4f 90       	pop	r4
    1dfe:	08 95       	ret

00001e00 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    1e00:	1f 93       	push	r17
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    1e06:	0e 94 50 11 	call	0x22a0	; 0x22a0 <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    1e0a:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    OSTime++;
    1e0e:	20 91 df 06 	lds	r18, 0x06DF
    1e12:	30 91 e0 06 	lds	r19, 0x06E0
    1e16:	40 91 e1 06 	lds	r20, 0x06E1
    1e1a:	50 91 e2 06 	lds	r21, 0x06E2
    1e1e:	2f 5f       	subi	r18, 0xFF	; 255
    1e20:	3f 4f       	sbci	r19, 0xFF	; 255
    1e22:	4f 4f       	sbci	r20, 0xFF	; 255
    1e24:	5f 4f       	sbci	r21, 0xFF	; 255
    1e26:	20 93 df 06 	sts	0x06DF, r18
    1e2a:	30 93 e0 06 	sts	0x06E0, r19
    1e2e:	40 93 e1 06 	sts	0x06E1, r20
    1e32:	50 93 e2 06 	sts	0x06E2, r21
    OS_EXIT_CRITICAL();
    1e36:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
#endif
    if (OSRunning == OS_TRUE) {
    1e3a:	90 91 df 05 	lds	r25, 0x05DF
    1e3e:	91 30       	cpi	r25, 0x01	; 1
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <OSTimeTick+0x44>
    1e42:	43 c0       	rjmp	.+134    	; 0x1eca <OSTimeTick+0xca>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    1e44:	80 91 e8 05 	lds	r24, 0x05E8
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <OSTimeTick+0x4e>
    1e4c:	3e c0       	rjmp	.+124    	; 0x1eca <OSTimeTick+0xca>
    1e4e:	81 30       	cpi	r24, 0x01	; 1
    1e50:	38 f0       	brcs	.+14     	; 0x1e60 <OSTimeTick+0x60>
    1e52:	82 30       	cpi	r24, 0x02	; 2
    1e54:	19 f4       	brne	.+6      	; 0x1e5c <OSTimeTick+0x5c>
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
                 break;

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
                 OSTickStepState = OS_TICK_STEP_WAIT;
    1e56:	90 93 e8 05 	sts	0x05E8, r25
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <OSTimeTick+0x60>
                 break;

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
    1e5c:	10 92 e8 05 	sts	0x05E8, r1
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    1e60:	c0 91 e6 05 	lds	r28, 0x05E6
    1e64:	d0 91 e7 05 	lds	r29, 0x05E7
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    1e68:	11 e0       	ldi	r17, 0x01	; 1
    1e6a:	2c c0       	rjmp	.+88     	; 0x1ec4 <OSTimeTick+0xc4>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
            OS_ENTER_CRITICAL();
    1e6c:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    1e70:	28 2f       	mov	r18, r24
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    1e72:	8e 89       	ldd	r24, Y+22	; 0x16
    1e74:	9f 89       	ldd	r25, Y+23	; 0x17
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	f9 f0       	breq	.+62     	; 0x1eb8 <OSTimeTick+0xb8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	9f 8b       	std	Y+23, r25	; 0x17
    1e7e:	8e 8b       	std	Y+22, r24	; 0x16
    1e80:	89 2b       	or	r24, r25
    1e82:	d1 f4       	brne	.+52     	; 0x1eb8 <OSTimeTick+0xb8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    1e84:	98 8d       	ldd	r25, Y+24	; 0x18
    1e86:	89 2f       	mov	r24, r25
    1e88:	87 73       	andi	r24, 0x37	; 55
    1e8a:	21 f0       	breq	.+8      	; 0x1e94 <OSTimeTick+0x94>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    1e8c:	98 7c       	andi	r25, 0xC8	; 200
    1e8e:	98 8f       	std	Y+24, r25	; 0x18
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    1e90:	19 8f       	std	Y+25, r17	; 0x19
    1e92:	01 c0       	rjmp	.+2      	; 0x1e96 <OSTimeTick+0x96>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    1e94:	19 8e       	std	Y+25, r1	; 0x19
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    1e96:	88 8d       	ldd	r24, Y+24	; 0x18
    1e98:	83 fd       	sbrc	r24, 3
    1e9a:	0e c0       	rjmp	.+28     	; 0x1eb8 <OSTimeTick+0xb8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    1e9c:	80 91 d7 06 	lds	r24, 0x06D7
    1ea0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ea2:	89 2b       	or	r24, r25
    1ea4:	80 93 d7 06 	sts	0x06D7, r24
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    1ea8:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	e8 52       	subi	r30, 0x28	; 40
    1eae:	f9 4f       	sbci	r31, 0xF9	; 249
    1eb0:	80 81       	ld	r24, Z
    1eb2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1eb4:	89 2b       	or	r24, r25
    1eb6:	80 83       	st	Z, r24
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    1eb8:	0e 84       	ldd	r0, Y+14	; 0x0e
    1eba:	df 85       	ldd	r29, Y+15	; 0x0f
    1ebc:	c0 2d       	mov	r28, r0
            OS_EXIT_CRITICAL();
    1ebe:	82 2f       	mov	r24, r18
    1ec0:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    1ec4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ec6:	8e 30       	cpi	r24, 0x0E	; 14
    1ec8:	89 f6       	brne	.-94     	; 0x1e6c <OSTimeTick+0x6c>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    1eca:	df 91       	pop	r29
    1ecc:	cf 91       	pop	r28
    1ece:	1f 91       	pop	r17
    1ed0:	08 95       	ret

00001ed2 <OSStart>:
*********************************************************************************************************
*/

void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
    1ed2:	80 91 df 05 	lds	r24, 0x05DF
    1ed6:	88 23       	and	r24, r24
    1ed8:	41 f5       	brne	.+80     	; 0x1f2a <OSStart+0x58>
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    1eda:	e0 91 d7 06 	lds	r30, 0x06D7
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	e4 5e       	subi	r30, 0xE4	; 228
    1ee2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ee4:	a0 81       	ld	r26, Z
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    1ee6:	ea 2f       	mov	r30, r26
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	e8 52       	subi	r30, 0x28	; 40
    1eec:	f9 4f       	sbci	r31, 0xF9	; 249
    1eee:	e0 81       	ld	r30, Z
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	e4 5e       	subi	r30, 0xE4	; 228
    1ef4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef6:	aa 0f       	add	r26, r26
    1ef8:	aa 0f       	add	r26, r26
    1efa:	aa 0f       	add	r26, r26
    1efc:	80 81       	ld	r24, Z
    1efe:	a8 0f       	add	r26, r24
    1f00:	a0 93 e4 05 	sts	0x05E4, r26

void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
        OS_SchedNew();                               /* Find highest priority's task priority number   */
        OSPrioCur     = OSPrioHighRdy;
    1f04:	a0 93 e5 05 	sts	0x05E5, r26
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	aa 0f       	add	r26, r26
    1f0c:	bb 1f       	adc	r27, r27
    1f0e:	aa 5f       	subi	r26, 0xFA	; 250
    1f10:	b4 4f       	sbci	r27, 0xF4	; 244
    1f12:	8d 91       	ld	r24, X+
    1f14:	9c 91       	ld	r25, X
    1f16:	90 93 d6 06 	sts	0x06D6, r25
    1f1a:	80 93 d5 06 	sts	0x06D5, r24
        OSTCBCur      = OSTCBHighRdy;
    1f1e:	90 93 de 06 	sts	0x06DE, r25
    1f22:	80 93 dd 06 	sts	0x06DD, r24
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    1f26:	0e 94 24 01 	call	0x248	; 0x248 <OSStartHighRdy>
    1f2a:	08 95       	ret

00001f2c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    1f2c:	1f 93       	push	r17
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSRunning == OS_TRUE) {
    1f2e:	80 91 df 05 	lds	r24, 0x05DF
    1f32:	81 30       	cpi	r24, 0x01	; 1
    1f34:	09 f0       	breq	.+2      	; 0x1f38 <OSIntExit+0xc>
    1f36:	5e c0       	rjmp	.+188    	; 0x1ff4 <OSIntExit+0xc8>
        OS_ENTER_CRITICAL();
    1f38:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    1f3c:	18 2f       	mov	r17, r24
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    1f3e:	80 91 dc 06 	lds	r24, 0x06DC
    1f42:	88 23       	and	r24, r24
    1f44:	19 f0       	breq	.+6      	; 0x1f4c <OSIntExit+0x20>
            OSIntNesting--;
    1f46:	81 50       	subi	r24, 0x01	; 1
    1f48:	80 93 dc 06 	sts	0x06DC, r24
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    1f4c:	80 91 dc 06 	lds	r24, 0x06DC
    1f50:	88 23       	and	r24, r24
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <OSIntExit+0x2a>
    1f54:	4c c0       	rjmp	.+152    	; 0x1fee <OSIntExit+0xc2>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    1f56:	80 91 de 05 	lds	r24, 0x05DE
    1f5a:	88 23       	and	r24, r24
    1f5c:	09 f0       	breq	.+2      	; 0x1f60 <OSIntExit+0x34>
    1f5e:	47 c0       	rjmp	.+142    	; 0x1fee <OSIntExit+0xc2>
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    1f60:	e0 91 d7 06 	lds	r30, 0x06D7
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	e4 5e       	subi	r30, 0xE4	; 228
    1f68:	fe 4f       	sbci	r31, 0xFE	; 254
    1f6a:	80 81       	ld	r24, Z
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    1f6c:	e8 2f       	mov	r30, r24
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	e8 52       	subi	r30, 0x28	; 40
    1f72:	f9 4f       	sbci	r31, 0xF9	; 249
    1f74:	e0 81       	ld	r30, Z
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	e4 5e       	subi	r30, 0xE4	; 228
    1f7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f7c:	98 2f       	mov	r25, r24
    1f7e:	99 0f       	add	r25, r25
    1f80:	99 0f       	add	r25, r25
    1f82:	99 0f       	add	r25, r25
    1f84:	80 81       	ld	r24, Z
    1f86:	98 0f       	add	r25, r24
    1f88:	90 93 e4 05 	sts	0x05E4, r25
            OSIntNesting--;
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
                OS_SchedNew();
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    1f8c:	80 91 e5 05 	lds	r24, 0x05E5
    1f90:	98 17       	cp	r25, r24
    1f92:	69 f1       	breq	.+90     	; 0x1fee <OSIntExit+0xc2>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    1f94:	e9 2f       	mov	r30, r25
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	ee 0f       	add	r30, r30
    1f9a:	ff 1f       	adc	r31, r31
    1f9c:	ea 5f       	subi	r30, 0xFA	; 250
    1f9e:	f4 4f       	sbci	r31, 0xF4	; 244
    1fa0:	01 90       	ld	r0, Z+
    1fa2:	f0 81       	ld	r31, Z
    1fa4:	e0 2d       	mov	r30, r0
    1fa6:	f0 93 d6 06 	sts	0x06D6, r31
    1faa:	e0 93 d5 06 	sts	0x06D5, r30
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    1fae:	80 a1       	ldd	r24, Z+32	; 0x20
    1fb0:	91 a1       	ldd	r25, Z+33	; 0x21
    1fb2:	a2 a1       	ldd	r26, Z+34	; 0x22
    1fb4:	b3 a1       	ldd	r27, Z+35	; 0x23
    1fb6:	01 96       	adiw	r24, 0x01	; 1
    1fb8:	a1 1d       	adc	r26, r1
    1fba:	b1 1d       	adc	r27, r1
    1fbc:	80 a3       	std	Z+32, r24	; 0x20
    1fbe:	91 a3       	std	Z+33, r25	; 0x21
    1fc0:	a2 a3       	std	Z+34, r26	; 0x22
    1fc2:	b3 a3       	std	Z+35, r27	; 0x23
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    1fc4:	80 91 c9 06 	lds	r24, 0x06C9
    1fc8:	90 91 ca 06 	lds	r25, 0x06CA
    1fcc:	a0 91 cb 06 	lds	r26, 0x06CB
    1fd0:	b0 91 cc 06 	lds	r27, 0x06CC
    1fd4:	01 96       	adiw	r24, 0x01	; 1
    1fd6:	a1 1d       	adc	r26, r1
    1fd8:	b1 1d       	adc	r27, r1
    1fda:	80 93 c9 06 	sts	0x06C9, r24
    1fde:	90 93 ca 06 	sts	0x06CA, r25
    1fe2:	a0 93 cb 06 	sts	0x06CB, r26
    1fe6:	b0 93 cc 06 	sts	0x06CC, r27
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    1fea:	0e 94 b9 01 	call	0x372	; 0x372 <OSIntCtxSw>
                }
            }
        }
        OS_EXIT_CRITICAL();
    1fee:	81 2f       	mov	r24, r17
    1ff0:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
    }
}
    1ff4:	1f 91       	pop	r17
    1ff6:	08 95       	ret

00001ff8 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    1ff8:	4f 92       	push	r4
    1ffa:	5f 92       	push	r5
    1ffc:	6f 92       	push	r6
    1ffe:	7f 92       	push	r7
    2000:	8f 92       	push	r8
    2002:	9f 92       	push	r9
    2004:	af 92       	push	r10
    2006:	bf 92       	push	r11
    2008:	cf 92       	push	r12
    200a:	df 92       	push	r13
    200c:	ef 92       	push	r14
    200e:	ff 92       	push	r15
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	0f 92       	push	r0
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    201e:	0e 94 03 11 	call	0x2206	; 0x2206 <OSInitHookBegin>
*/

static  void  OS_InitMisc (void)
{
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    2022:	10 92 df 06 	sts	0x06DF, r1
    2026:	10 92 e0 06 	sts	0x06E0, r1
    202a:	10 92 e1 06 	sts	0x06E1, r1
    202e:	10 92 e2 06 	sts	0x06E2, r1
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    2032:	10 92 dc 06 	sts	0x06DC, r1
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    2036:	10 92 de 05 	sts	0x05DE, r1

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    203a:	10 92 d4 06 	sts	0x06D4, r1

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    203e:	10 92 df 05 	sts	0x05DF, r1

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    2042:	10 92 c9 06 	sts	0x06C9, r1
    2046:	10 92 ca 06 	sts	0x06CA, r1
    204a:	10 92 cb 06 	sts	0x06CB, r1
    204e:	10 92 cc 06 	sts	0x06CC, r1
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    2052:	10 92 e0 05 	sts	0x05E0, r1
    2056:	10 92 e1 05 	sts	0x05E1, r1
    205a:	10 92 e2 05 	sts	0x05E2, r1
    205e:	10 92 e3 05 	sts	0x05E3, r1

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    2062:	10 92 24 0b 	sts	0x0B24, r1
    2066:	10 92 25 0b 	sts	0x0B25, r1
    206a:	10 92 26 0b 	sts	0x0B26, r1
    206e:	10 92 27 0b 	sts	0x0B27, r1
    OSIdleCtrMax  = 0L;
    2072:	10 92 cd 06 	sts	0x06CD, r1
    2076:	10 92 ce 06 	sts	0x06CE, r1
    207a:	10 92 cf 06 	sts	0x06CF, r1
    207e:	10 92 d0 06 	sts	0x06D0, r1
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    2082:	10 92 05 0b 	sts	0x0B05, r1
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    2086:	10 92 d7 06 	sts	0x06D7, r1
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
        *prdytbl++ = 0;
    208a:	10 92 d8 06 	sts	0x06D8, r1
    208e:	10 92 d9 06 	sts	0x06D9, r1
    }

    OSPrioCur     = 0;
    2092:	10 92 e5 05 	sts	0x05E5, r1
    OSPrioHighRdy = 0;
    2096:	10 92 e4 05 	sts	0x05E4, r1

    OSTCBHighRdy  = (OS_TCB *)0;
    209a:	10 92 d6 06 	sts	0x06D6, r1
    209e:	10 92 d5 06 	sts	0x06D5, r1
    OSTCBCur      = (OS_TCB *)0;
    20a2:	10 92 de 06 	sts	0x06DE, r1
    20a6:	10 92 dd 06 	sts	0x06DD, r1
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    20aa:	e3 eb       	ldi	r30, 0xB3	; 179
    20ac:	f8 e0       	ldi	r31, 0x08	; 8
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
        *pdest++ = (INT8U)0;
    20ae:	11 92       	st	Z+, r1
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    20b0:	8b e0       	ldi	r24, 0x0B	; 11
    20b2:	e5 30       	cpi	r30, 0x05	; 5
    20b4:	f8 07       	cpc	r31, r24
    20b6:	d9 f7       	brne	.-10     	; 0x20ae <OSInit+0xb6>
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    20b8:	e6 e0       	ldi	r30, 0x06	; 6
    20ba:	fb e0       	ldi	r31, 0x0B	; 11
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
        *pdest++ = (INT8U)0;
    20bc:	11 92       	st	Z+, r1
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    20be:	9b e0       	ldi	r25, 0x0B	; 11
    20c0:	e4 32       	cpi	r30, 0x24	; 36
    20c2:	f9 07       	cpc	r31, r25
    20c4:	d9 f7       	brne	.-10     	; 0x20bc <OSInit+0xc4>
    20c6:	a5 ee       	ldi	r26, 0xE5	; 229
    20c8:	b8 e0       	ldi	r27, 0x08	; 8
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
        ptcb1->OSTCBNext = ptcb2;
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    20ca:	8f e3       	ldi	r24, 0x3F	; 63
    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
        ptcb1->OSTCBNext = ptcb2;
    20cc:	fd 01       	movw	r30, r26
    20ce:	b4 97       	sbiw	r30, 0x24	; 36
    20d0:	50 96       	adiw	r26, 0x10	; 16
    20d2:	b1 83       	std	Z+1, r27	; 0x01
    20d4:	a0 83       	st	Z, r26
    20d6:	50 97       	sbiw	r26, 0x10	; 16
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    20d8:	8c 93       	st	X, r24
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    20da:	11 96       	adiw	r26, 0x01	; 1
    20dc:	1c 92       	st	X, r1
    20de:	11 97       	sbiw	r26, 0x01	; 1
    20e0:	ae 5b       	subi	r26, 0xBE	; 190
    20e2:	bf 4f       	sbci	r27, 0xFF	; 255

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    20e4:	ea e0       	ldi	r30, 0x0A	; 10
    20e6:	a5 3f       	cpi	r26, 0xF5	; 245
    20e8:	be 07       	cpc	r27, r30
    20ea:	81 f7       	brne	.-32     	; 0x20cc <OSInit+0xd4>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    20ec:	10 92 d2 0a 	sts	0x0AD2, r1
    20f0:	10 92 d1 0a 	sts	0x0AD1, r1
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    20f4:	8c 93       	st	X, r24
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    20f6:	11 96       	adiw	r26, 0x01	; 1
    20f8:	1c 92       	st	X, r1
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    20fa:	10 92 e7 05 	sts	0x05E7, r1
    20fe:	10 92 e6 05 	sts	0x05E6, r1
    OSTCBFreeList           = &OSTCBTbl[0];
    2102:	83 eb       	ldi	r24, 0xB3	; 179
    2104:	98 e0       	ldi	r25, 0x08	; 8
    2106:	90 93 d2 06 	sts	0x06D2, r25
    210a:	80 93 d1 06 	sts	0x06D1, r24
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    210e:	e3 ec       	ldi	r30, 0xC3	; 195
    2110:	f7 e0       	ldi	r31, 0x07	; 7
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
        *pdest++ = (INT8U)0;
    2112:	11 92       	st	Z+, r1
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    2114:	88 e0       	ldi	r24, 0x08	; 8
    2116:	e3 3b       	cpi	r30, 0xB3	; 179
    2118:	f8 07       	cpc	r31, r24
    211a:	d9 f7       	brne	.-10     	; 0x2112 <OSInit+0x11a>
    211c:	e3 ec       	ldi	r30, 0xC3	; 195
    211e:	f7 e0       	ldi	r31, 0x07	; 7
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
        pevent1->OSEventPtr     = pevent2;
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    2120:	8f e3       	ldi	r24, 0x3F	; 63
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    2122:	df 01       	movw	r26, r30
    2124:	58 96       	adiw	r26, 0x18	; 24

    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    2126:	10 82       	st	Z, r1
        pevent1->OSEventPtr     = pevent2;
    2128:	b2 83       	std	Z+2, r27	; 0x02
    212a:	a1 83       	std	Z+1, r26	; 0x01
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    212c:	80 87       	std	Z+8, r24	; 0x08
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    212e:	11 86       	std	Z+9, r1	; 0x09


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    2130:	98 e0       	ldi	r25, 0x08	; 8
    2132:	ab 39       	cpi	r26, 0x9B	; 155
    2134:	b9 07       	cpc	r27, r25
    2136:	11 f0       	breq	.+4      	; 0x213c <OSInit+0x144>
    2138:	fd 01       	movw	r30, r26
    213a:	f3 cf       	rjmp	.-26     	; 0x2122 <OSInit+0x12a>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    213c:	1c 92       	st	X, r1
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    213e:	12 8e       	std	Z+26, r1	; 0x1a
    2140:	11 8e       	std	Z+25, r1	; 0x19
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    2142:	80 a3       	std	Z+32, r24	; 0x20
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    2144:	11 a2       	std	Z+33, r1	; 0x21
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    2146:	83 ec       	ldi	r24, 0xC3	; 195
    2148:	97 e0       	ldi	r25, 0x07	; 7
    214a:	90 93 db 06 	sts	0x06DB, r25
    214e:	80 93 da 06 	sts	0x06DA, r24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    2152:	00 d0       	rcall	.+0      	; 0x2154 <OSInit+0x15c>
    2154:	a3 e0       	ldi	r26, 0x03	; 3
    2156:	4a 2e       	mov	r4, r26
    2158:	51 2c       	mov	r5, r1
    215a:	ed b7       	in	r30, 0x3d	; 61
    215c:	fe b7       	in	r31, 0x3e	; 62
    215e:	52 82       	std	Z+2, r5	; 0x02
    2160:	41 82       	std	Z+1, r4	; 0x01
    2162:	85 e5       	ldi	r24, 0x55	; 85
    2164:	97 e0       	ldi	r25, 0x07	; 7
    2166:	60 e0       	ldi	r22, 0x00	; 0
    2168:	70 e0       	ldi	r23, 0x00	; 0
    216a:	42 ec       	ldi	r20, 0xC2	; 194
    216c:	57 e0       	ldi	r21, 0x07	; 7
    216e:	2e e0       	ldi	r18, 0x0E	; 14
    2170:	0f ef       	ldi	r16, 0xFF	; 255
    2172:	1f ef       	ldi	r17, 0xFF	; 255
    2174:	f3 ee       	ldi	r31, 0xE3	; 227
    2176:	ef 2e       	mov	r14, r31
    2178:	f6 e0       	ldi	r31, 0x06	; 6
    217a:	ff 2e       	mov	r15, r31
    217c:	e0 ee       	ldi	r30, 0xE0	; 224
    217e:	ae 2e       	mov	r10, r30
    2180:	b1 2c       	mov	r11, r1
    2182:	c1 2c       	mov	r12, r1
    2184:	d1 2c       	mov	r13, r1
    2186:	88 24       	eor	r8, r8
    2188:	99 24       	eor	r9, r9
    218a:	0e 94 c2 0a 	call	0x1584	; 0x1584 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	8e e0       	ldi	r24, 0x0E	; 14
    2194:	60 e0       	ldi	r22, 0x00	; 0
    2196:	71 e0       	ldi	r23, 0x01	; 1
    2198:	3e 01       	movw	r6, r28
    219a:	08 94       	sec
    219c:	61 1c       	adc	r6, r1
    219e:	71 1c       	adc	r7, r1
    21a0:	a3 01       	movw	r20, r6
    21a2:	0e 94 ac 04 	call	0x958	; 0x958 <OSTaskNameSet>
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    21a6:	00 d0       	rcall	.+0      	; 0x21a8 <OSInit+0x1b0>
    21a8:	ed b7       	in	r30, 0x3d	; 61
    21aa:	fe b7       	in	r31, 0x3e	; 62
    21ac:	52 82       	std	Z+2, r5	; 0x02
    21ae:	41 82       	std	Z+1, r4	; 0x01
    21b0:	8b e5       	ldi	r24, 0x5B	; 91
    21b2:	99 e0       	ldi	r25, 0x09	; 9
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	70 e0       	ldi	r23, 0x00	; 0
    21b8:	48 ec       	ldi	r20, 0xC8	; 200
    21ba:	56 e0       	ldi	r21, 0x06	; 6
    21bc:	2d e0       	ldi	r18, 0x0D	; 13
    21be:	0e ef       	ldi	r16, 0xFE	; 254
    21c0:	1f ef       	ldi	r17, 0xFF	; 255
    21c2:	39 ee       	ldi	r19, 0xE9	; 233
    21c4:	e3 2e       	mov	r14, r19
    21c6:	35 e0       	ldi	r19, 0x05	; 5
    21c8:	f3 2e       	mov	r15, r19
    21ca:	0e 94 c2 0a 	call	0x1584	; 0x1584 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	8d e0       	ldi	r24, 0x0D	; 13
    21d4:	6e e0       	ldi	r22, 0x0E	; 14
    21d6:	71 e0       	ldi	r23, 0x01	; 1
    21d8:	a3 01       	movw	r20, r6
    21da:	0e 94 ac 04 	call	0x958	; 0x958 <OSTaskNameSet>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    21de:	0e 94 04 11 	call	0x2208	; 0x2208 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
#endif
}
    21e2:	0f 90       	pop	r0
    21e4:	cf 91       	pop	r28
    21e6:	df 91       	pop	r29
    21e8:	1f 91       	pop	r17
    21ea:	0f 91       	pop	r16
    21ec:	ff 90       	pop	r15
    21ee:	ef 90       	pop	r14
    21f0:	df 90       	pop	r13
    21f2:	cf 90       	pop	r12
    21f4:	bf 90       	pop	r11
    21f6:	af 90       	pop	r10
    21f8:	9f 90       	pop	r9
    21fa:	8f 90       	pop	r8
    21fc:	7f 90       	pop	r7
    21fe:	6f 90       	pop	r6
    2200:	5f 90       	pop	r5
    2202:	4f 90       	pop	r4
    2204:	08 95       	ret

00002206 <OSInitHookBegin>:
void  OSInitHookBegin (void)
{
#if OS_VERSION >= 281 && OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
    2206:	08 95       	ret

00002208 <OSInitHookEnd>:
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void  OSInitHookEnd (void)
{
}
    2208:	08 95       	ret

0000220a <OSTaskCreateHook>:
#if OS_APP_HOOKS_EN > 0
    App_TaskCreateHook(ptcb);
#else
    (void)ptcb;                                                         /* Prevent compiler warning                                 */
#endif
}
    220a:	08 95       	ret

0000220c <OSTaskDelHook>:
#if OS_APP_HOOKS_EN > 0
    App_TaskDelHook(ptcb);
#else
    (void)ptcb;                                                         /* Prevent compiler warning                                 */
#endif
}
    220c:	08 95       	ret

0000220e <OSTaskIdleHook>:
void  OSTaskIdleHook (void)
{
#if OS_APP_HOOKS_EN > 0
    App_TaskIdleHook();
#endif
}
    220e:	08 95       	ret

00002210 <OSTaskStatHook>:
void  OSTaskStatHook (void)
{
#if OS_APP_HOOKS_EN > 0
    App_TaskStatHook();
#endif
}
    2210:	08 95       	ret

00002212 <OSTaskStkInit>:
*              stack.
**********************************************************************************************************
*/

OS_STK  *OSTaskStkInit (void (*task)(void *pd), void *p_arg, OS_STK *ptos, INT16U opt)
{
    2212:	fa 01       	movw	r30, r20
//    phard_stk     = (INT8U *)ptos
//                  - OSTaskStkSize           /* Task stack size                                          */
//                  + OSTaskStkSizeHard;      /* AVR return stack ("hardware stack")                      */
    tmp           = (INT16U)task;
                                            /* Put task start address on top of "hardware stack"        */
    *psoft_stk--  = (INT8U)(tmp & 0xFF);    /* Save PC return address                                   */
    2214:	80 83       	st	Z, r24
    tmp         >>= 8;
    *psoft_stk--  = (INT8U)(tmp & 0xFF);
    2216:	92 93       	st	-Z, r25

    *psoft_stk--  = (INT8U)0x00;            /* R0    = 0x00                                             */
    2218:	12 92       	st	-Z, r1
    *psoft_stk--  = (INT8U)0x01;            /* R1    = 0x01                                             */
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x02;            /* R2    = 0x02                                             */
    221e:	82 e0       	ldi	r24, 0x02	; 2
    2220:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x03;            /* R3    = 0x03                                             */
    2222:	83 e0       	ldi	r24, 0x03	; 3
    2224:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x04;            /* R4    = 0x04                                             */
    2226:	84 e0       	ldi	r24, 0x04	; 4
    2228:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x05;            /* R5    = 0x05                                             */
    222a:	85 e0       	ldi	r24, 0x05	; 5
    222c:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x06;            /* R6    = 0x06                                             */
    222e:	86 e0       	ldi	r24, 0x06	; 6
    2230:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x07;            /* R7    = 0x07                                             */
    2232:	87 e0       	ldi	r24, 0x07	; 7
    2234:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x08;            /* R8    = 0x08                                             */
    2236:	88 e0       	ldi	r24, 0x08	; 8
    2238:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x09;            /* R9    = 0x09                                             */
    223a:	89 e0       	ldi	r24, 0x09	; 9
    223c:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x10;            /* R10   = 0x10                                             */
    223e:	80 e1       	ldi	r24, 0x10	; 16
    2240:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x11;            /* R11   = 0x11                                             */
    2242:	81 e1       	ldi	r24, 0x11	; 17
    2244:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x12;            /* R12   = 0x12                                             */
    2246:	82 e1       	ldi	r24, 0x12	; 18
    2248:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x13;            /* R13   = 0x13                                             */
    224a:	83 e1       	ldi	r24, 0x13	; 19
    224c:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x14;            /* R14   = 0x14                                             */
    224e:	84 e1       	ldi	r24, 0x14	; 20
    2250:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x15;            /* R15   = 0x15                                             */
    2252:	85 e1       	ldi	r24, 0x15	; 21
    2254:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x16;            /* R24   = 0x16                                             */
    2256:	86 e1       	ldi	r24, 0x16	; 22
    2258:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x17;            /* R25   = 0x17												*/
    225a:	87 e1       	ldi	r24, 0x17	; 23
    225c:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x18;            /* R18   = 0x18                                             */
    225e:	88 e1       	ldi	r24, 0x18	; 24
    2260:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x19;            /* R19   = 0x19                                             */
    2262:	89 e1       	ldi	r24, 0x19	; 25
    2264:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x20;            /* R20   = 0x20                                             */
    2266:	80 e2       	ldi	r24, 0x20	; 32
    2268:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x21;            /* R21   = 0x21                                             */
    226a:	81 e2       	ldi	r24, 0x21	; 33
    226c:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x22;            /* R22   = 0x22                                             */
    226e:	82 e2       	ldi	r24, 0x22	; 34
    2270:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x23;            /* R23   = 0x23                                             */
    2272:	83 e2       	ldi	r24, 0x23	; 35
    2274:	82 93       	st	-Z, r24
	tmp           = (INT16U)p_arg;
    *psoft_stk--  = (INT8U)tmp;             /* 'p_arg' passed in R25:R24                           */
    2276:	62 93       	st	-Z, r22
    *psoft_stk--  = (INT8U)(tmp >> 8);
    2278:	72 93       	st	-Z, r23
    *psoft_stk--  = (INT8U)0x26;            /* R26   = 0x26                                             */
    227a:	86 e2       	ldi	r24, 0x26	; 38
    227c:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x27;            /* R27   = 0x27                                             */
    227e:	87 e2       	ldi	r24, 0x27	; 39
    2280:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x28;            /* R28     R29:R28 is the software stack which gets ...     */
    2282:	88 e2       	ldi	r24, 0x28	; 40
    2284:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x29;            /* R29             ... in the TCB.                          */
    2286:	89 e2       	ldi	r24, 0x29	; 41
    2288:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x30;            /* R30   = 0x30                                             */
    228a:	80 e3       	ldi	r24, 0x30	; 48
    228c:	82 93       	st	-Z, r24
    *psoft_stk--  = (INT8U)0x31;            /* R31   = 0x31                                             */
    228e:	81 e3       	ldi	r24, 0x31	; 49
    2290:	82 93       	st	-Z, r24
//    *psoft_stk--  = (INT8U)0xAA;            /* RAMPZ = 0xAA                                             */
    *psoft_stk--  = (INT8U)0x80;            /* SREG  = Interrupts enabled                               */
    2292:	80 e8       	ldi	r24, 0x80	; 128
    2294:	82 93       	st	-Z, r24
    2296:	31 97       	sbiw	r30, 0x01	; 1
//    tmp           = (INT16U)phard_stk;
//    *psoft_stk--  = (INT8U)(tmp >> 8);      /* SPH                                                      */
//    *psoft_stk    = (INT8U)(tmp & 0xFF);    /* SPL                                                      */
    return ((OS_STK *)psoft_stk);
}
    2298:	cf 01       	movw	r24, r30
    229a:	08 95       	ret

0000229c <OSTaskSwHook>:
void  OSTaskSwHook (void)
{
#if OS_APP_HOOKS_EN > 0
    App_TaskSwHook();
#endif
}
    229c:	08 95       	ret

0000229e <OSTCBInitHook>:
#if OS_APP_HOOKS_EN > 0
    App_TCBInitHook(ptcb);
#else
    (void)ptcb;                                                         /* Prevent compiler warning                                 */
#endif
}
    229e:	08 95       	ret

000022a0 <OSTimeTickHook>:
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
        OSTmrCtr = 0;
        OSTmrSignal();
    }
#endif
}
    22a0:	08 95       	ret

000022a2 <BSP_Init>:
*********************************************************************************************************
*/

static  void  LED_Init (void)
{
    DDRB  = 0xFF;                                                       /* All PORTD pins are outputs                               */
    22a2:	8f ef       	ldi	r24, 0xFF	; 255
    22a4:	87 bb       	out	0x17, r24	; 23
    PORTB = 0xFF;
    22a6:	88 bb       	out	0x18, r24	; 24
{
    INT32U  num;
    INT32U  denom;


    TCCR0  = 0x0E;                                                      /* Set TIMER0 prescaler to CTC Mode, CLK/256                */
    22a8:	8e e0       	ldi	r24, 0x0E	; 14
    22aa:	83 bf       	out	0x33, r24	; 51
    TCNT0  =    0;                                                      /* Start TCNT at 0 for a new cycle                          */
    22ac:	12 be       	out	0x32, r1	; 50
    num    = (INT32U)CPU_CLK_FREQ;
    denom  = 2 * 256 * (INT32U)OS_TICKS_PER_SEC;
    OCR0   = (INT8U)((2 * num / denom + 1) / 2 - 1);
    22ae:	8f e8       	ldi	r24, 0x8F	; 143
    22b0:	81 bf       	out	0x31, r24	; 49
    TIFR  |= 0x02;                                                      /* Clear  TIMER0 compare Interrupt Flag                     */
    22b2:	86 b7       	in	r24, 0x36	; 54
    22b4:	82 60       	ori	r24, 0x02	; 2
    22b6:	86 bf       	out	0x36, r24	; 54
    TIMSK |= 0x02;                                                      /* Enable TIMER0 compare Interrupt                          */
    22b8:	87 b7       	in	r24, 0x37	; 55
    22ba:	82 60       	ori	r24, 0x02	; 2
    22bc:	87 bf       	out	0x37, r24	; 55
void  BSP_Init (void)
{
    LED_Init();

    BSP_InitTickISR();
}
    22be:	08 95       	ret

000022c0 <TimerInit>:
 * 返回值:
 * 说明: 使用Timer 0作为系统时钟源.相关的时钟设置见文件头名的宏定义
 * */
void TimerInit( void )
{
	TCCR2 = 1<<3;												/* 工作于CTC模式, 不在相应端口输出信号 */
    22c0:	88 e0       	ldi	r24, 0x08	; 8
    22c2:	85 bd       	out	0x25, r24	; 37
	OCR2= TIMER_INTERVAL;
    22c4:	8c e9       	ldi	r24, 0x9C	; 156
    22c6:	83 bd       	out	0x23, r24	; 35
	TCNT2 = 0;
    22c8:	14 bc       	out	0x24, r1	; 36
	TIMSK |= 1<<7;    											 
    22ca:	87 b7       	in	r24, 0x37	; 55
    22cc:	80 68       	ori	r24, 0x80	; 128
    22ce:	87 bf       	out	0x37, r24	; 55
	TCCR2 |= F_OSC_DIV;							   				/* 开启时钟 */
    22d0:	85 b5       	in	r24, 0x25	; 37
    22d2:	84 60       	ori	r24, 0x04	; 4
    22d4:	85 bd       	out	0x25, r24	; 37
}
    22d6:	08 95       	ret

000022d8 <LED_Toggle>:
*                      8    Toggle LED8 on the board
*********************************************************************************************************
*/

void  LED_Toggle (INT8U led)
{
    22d8:	1f 93       	push	r17
    22da:	18 2f       	mov	r17, r24
#if OS_CRITICAL_METHOD == 3                                             /* Allocate storage for CPU status register                 */
    OS_CPU_SR  cpu_sr = 0;
#endif


    OS_ENTER_CRITICAL();
    22dc:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    22e0:	28 2f       	mov	r18, r24
    switch (led) {
    22e2:	14 30       	cpi	r17, 0x04	; 4
    22e4:	e9 f0       	breq	.+58     	; 0x2320 <LED_Toggle+0x48>
    22e6:	15 30       	cpi	r17, 0x05	; 5
    22e8:	48 f4       	brcc	.+18     	; 0x22fc <LED_Toggle+0x24>
    22ea:	11 30       	cpi	r17, 0x01	; 1
    22ec:	99 f0       	breq	.+38     	; 0x2314 <LED_Toggle+0x3c>
    22ee:	11 30       	cpi	r17, 0x01	; 1
    22f0:	70 f0       	brcs	.+28     	; 0x230e <LED_Toggle+0x36>
    22f2:	12 30       	cpi	r17, 0x02	; 2
    22f4:	79 f0       	breq	.+30     	; 0x2314 <LED_Toggle+0x3c>
    22f6:	13 30       	cpi	r17, 0x03	; 3
    22f8:	19 f5       	brne	.+70     	; 0x2340 <LED_Toggle+0x68>
    22fa:	0f c0       	rjmp	.+30     	; 0x231a <LED_Toggle+0x42>
    22fc:	16 30       	cpi	r17, 0x06	; 6
    22fe:	b1 f0       	breq	.+44     	; 0x232c <LED_Toggle+0x54>
    2300:	16 30       	cpi	r17, 0x06	; 6
    2302:	88 f0       	brcs	.+34     	; 0x2326 <LED_Toggle+0x4e>
    2304:	17 30       	cpi	r17, 0x07	; 7
    2306:	a9 f0       	breq	.+42     	; 0x2332 <LED_Toggle+0x5a>
    2308:	18 30       	cpi	r17, 0x08	; 8
    230a:	d1 f4       	brne	.+52     	; 0x2340 <LED_Toggle+0x68>
    230c:	16 c0       	rjmp	.+44     	; 0x233a <LED_Toggle+0x62>
        case 0:
             PORTD ^=  0xFF;
    230e:	82 b3       	in	r24, 0x12	; 18
    2310:	80 95       	com	r24
    2312:	15 c0       	rjmp	.+42     	; 0x233e <LED_Toggle+0x66>
        case 1:
             PORTD ^=  0x01;
             break;

        case 2:
             PORTD ^=  0x02;
    2314:	82 b3       	in	r24, 0x12	; 18
    2316:	81 27       	eor	r24, r17
    2318:	12 c0       	rjmp	.+36     	; 0x233e <LED_Toggle+0x66>
             break;

        case 3:
             PORTD ^=  0x04;
    231a:	82 b3       	in	r24, 0x12	; 18
    231c:	94 e0       	ldi	r25, 0x04	; 4
    231e:	0b c0       	rjmp	.+22     	; 0x2336 <LED_Toggle+0x5e>
             break;

        case 4:
             PORTD ^=  0x08;
    2320:	82 b3       	in	r24, 0x12	; 18
    2322:	98 e0       	ldi	r25, 0x08	; 8
    2324:	08 c0       	rjmp	.+16     	; 0x2336 <LED_Toggle+0x5e>
             break;

        case 5:
             PORTD ^=  0x10;
    2326:	82 b3       	in	r24, 0x12	; 18
    2328:	90 e1       	ldi	r25, 0x10	; 16
    232a:	05 c0       	rjmp	.+10     	; 0x2336 <LED_Toggle+0x5e>
             break;

        case 6:
             PORTD ^=  0x20;
    232c:	82 b3       	in	r24, 0x12	; 18
    232e:	90 e2       	ldi	r25, 0x20	; 32
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <LED_Toggle+0x5e>
             break;

        case 7:
             PORTD ^=  0x40;
    2332:	82 b3       	in	r24, 0x12	; 18
    2334:	90 e4       	ldi	r25, 0x40	; 64
    2336:	89 27       	eor	r24, r25
    2338:	02 c0       	rjmp	.+4      	; 0x233e <LED_Toggle+0x66>
             break;

        case 8:
             PORTD ^=  0x80;
    233a:	82 b3       	in	r24, 0x12	; 18
    233c:	80 58       	subi	r24, 0x80	; 128
    233e:	82 bb       	out	0x12, r24	; 18
             break;
    }
    OS_EXIT_CRITICAL();
    2340:	82 2f       	mov	r24, r18
    2342:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
}
    2346:	1f 91       	pop	r17
    2348:	08 95       	ret

0000234a <LED_Off>:
*                      8    turns OFF LED8 on the board
*********************************************************************************************************
*/

void  LED_Off (INT8U led)
{
    234a:	1f 93       	push	r17
    234c:	18 2f       	mov	r17, r24
#if OS_CRITICAL_METHOD == 3                                             /* Allocate storage for CPU status register                 */
    OS_CPU_SR  cpu_sr = 0;
#endif


    OS_ENTER_CRITICAL();
    234e:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    2352:	98 2f       	mov	r25, r24
    switch (led) {
    2354:	14 30       	cpi	r17, 0x04	; 4
    2356:	e9 f0       	breq	.+58     	; 0x2392 <LED_Off+0x48>
    2358:	15 30       	cpi	r17, 0x05	; 5
    235a:	48 f4       	brcc	.+18     	; 0x236e <LED_Off+0x24>
    235c:	11 30       	cpi	r17, 0x01	; 1
    235e:	99 f0       	breq	.+38     	; 0x2386 <LED_Off+0x3c>
    2360:	11 30       	cpi	r17, 0x01	; 1
    2362:	70 f0       	brcs	.+28     	; 0x2380 <LED_Off+0x36>
    2364:	12 30       	cpi	r17, 0x02	; 2
    2366:	89 f0       	breq	.+34     	; 0x238a <LED_Off+0x40>
    2368:	13 30       	cpi	r17, 0x03	; 3
    236a:	e1 f4       	brne	.+56     	; 0x23a4 <LED_Off+0x5a>
    236c:	10 c0       	rjmp	.+32     	; 0x238e <LED_Off+0x44>
    236e:	16 30       	cpi	r17, 0x06	; 6
    2370:	a1 f0       	breq	.+40     	; 0x239a <LED_Off+0x50>
    2372:	16 30       	cpi	r17, 0x06	; 6
    2374:	80 f0       	brcs	.+32     	; 0x2396 <LED_Off+0x4c>
    2376:	17 30       	cpi	r17, 0x07	; 7
    2378:	91 f0       	breq	.+36     	; 0x239e <LED_Off+0x54>
    237a:	18 30       	cpi	r17, 0x08	; 8
    237c:	99 f4       	brne	.+38     	; 0x23a4 <LED_Off+0x5a>
    237e:	11 c0       	rjmp	.+34     	; 0x23a2 <LED_Off+0x58>
        case 0:
             PORTD  =  0xFF;
    2380:	8f ef       	ldi	r24, 0xFF	; 255
    2382:	82 bb       	out	0x12, r24	; 18
    2384:	0f c0       	rjmp	.+30     	; 0x23a4 <LED_Off+0x5a>
             break;

        case 1:
             PORTD |=  0x01;
    2386:	90 9a       	sbi	0x12, 0	; 18
    2388:	0d c0       	rjmp	.+26     	; 0x23a4 <LED_Off+0x5a>
             break;

        case 2:
             PORTD |=  0x02;
    238a:	91 9a       	sbi	0x12, 1	; 18
    238c:	0b c0       	rjmp	.+22     	; 0x23a4 <LED_Off+0x5a>
             break;

        case 3:
             PORTD |=  0x04;
    238e:	92 9a       	sbi	0x12, 2	; 18
    2390:	09 c0       	rjmp	.+18     	; 0x23a4 <LED_Off+0x5a>
             break;

        case 4:
             PORTD |=  0x08;
    2392:	93 9a       	sbi	0x12, 3	; 18
    2394:	07 c0       	rjmp	.+14     	; 0x23a4 <LED_Off+0x5a>
             break;

        case 5:
             PORTD |=  0x10;
    2396:	94 9a       	sbi	0x12, 4	; 18
    2398:	05 c0       	rjmp	.+10     	; 0x23a4 <LED_Off+0x5a>
             break;

        case 6:
             PORTD |=  0x20;
    239a:	95 9a       	sbi	0x12, 5	; 18
    239c:	03 c0       	rjmp	.+6      	; 0x23a4 <LED_Off+0x5a>
             break;

        case 7:
             PORTD |=  0x40;
    239e:	96 9a       	sbi	0x12, 6	; 18
    23a0:	01 c0       	rjmp	.+2      	; 0x23a4 <LED_Off+0x5a>
             break;

        case 8:
             PORTD |=  0x80;
    23a2:	97 9a       	sbi	0x12, 7	; 18
             break;
    }
    OS_EXIT_CRITICAL();
    23a4:	89 2f       	mov	r24, r25
    23a6:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
}
    23aa:	1f 91       	pop	r17
    23ac:	08 95       	ret

000023ae <LED_On>:
*                      8    turns ON LED8 on the board
*********************************************************************************************************
*/

void  LED_On (INT8U led)
{
    23ae:	1f 93       	push	r17
    23b0:	18 2f       	mov	r17, r24
#if OS_CRITICAL_METHOD == 3                                             /* Allocate storage for CPU status register                 */
    OS_CPU_SR  cpu_sr = 0;
#endif


    OS_ENTER_CRITICAL();
    23b2:	0e 94 1f 01 	call	0x23e	; 0x23e <OS_CPU_SR_SAVE>
    switch (led) {
    23b6:	14 30       	cpi	r17, 0x04	; 4
    23b8:	e1 f0       	breq	.+56     	; 0x23f2 <LED_On+0x44>
    23ba:	15 30       	cpi	r17, 0x05	; 5
    23bc:	48 f4       	brcc	.+18     	; 0x23d0 <LED_On+0x22>
    23be:	11 30       	cpi	r17, 0x01	; 1
    23c0:	91 f0       	breq	.+36     	; 0x23e6 <LED_On+0x38>
    23c2:	11 30       	cpi	r17, 0x01	; 1
    23c4:	70 f0       	brcs	.+28     	; 0x23e2 <LED_On+0x34>
    23c6:	12 30       	cpi	r17, 0x02	; 2
    23c8:	81 f0       	breq	.+32     	; 0x23ea <LED_On+0x3c>
    23ca:	13 30       	cpi	r17, 0x03	; 3
    23cc:	d9 f4       	brne	.+54     	; 0x2404 <LED_On+0x56>
    23ce:	0f c0       	rjmp	.+30     	; 0x23ee <LED_On+0x40>
    23d0:	16 30       	cpi	r17, 0x06	; 6
    23d2:	99 f0       	breq	.+38     	; 0x23fa <LED_On+0x4c>
    23d4:	16 30       	cpi	r17, 0x06	; 6
    23d6:	78 f0       	brcs	.+30     	; 0x23f6 <LED_On+0x48>
    23d8:	17 30       	cpi	r17, 0x07	; 7
    23da:	89 f0       	breq	.+34     	; 0x23fe <LED_On+0x50>
    23dc:	18 30       	cpi	r17, 0x08	; 8
    23de:	91 f4       	brne	.+36     	; 0x2404 <LED_On+0x56>
    23e0:	10 c0       	rjmp	.+32     	; 0x2402 <LED_On+0x54>
        case 0:
             PORTD  =  0x00;
    23e2:	12 ba       	out	0x12, r1	; 18
    23e4:	0f c0       	rjmp	.+30     	; 0x2404 <LED_On+0x56>
             break;

        case 1:
             PORTD &= ~0x01;
    23e6:	90 98       	cbi	0x12, 0	; 18
    23e8:	0d c0       	rjmp	.+26     	; 0x2404 <LED_On+0x56>
             break;

        case 2:
             PORTD &= ~0x02;
    23ea:	91 98       	cbi	0x12, 1	; 18
    23ec:	0b c0       	rjmp	.+22     	; 0x2404 <LED_On+0x56>
             break;

        case 3:
             PORTD &= ~0x04;
    23ee:	92 98       	cbi	0x12, 2	; 18
    23f0:	09 c0       	rjmp	.+18     	; 0x2404 <LED_On+0x56>
             break;

        case 4:
             PORTD &= ~0x08;
    23f2:	93 98       	cbi	0x12, 3	; 18
    23f4:	07 c0       	rjmp	.+14     	; 0x2404 <LED_On+0x56>
             break;

        case 5:
             PORTD &= ~0x10;
    23f6:	94 98       	cbi	0x12, 4	; 18
    23f8:	05 c0       	rjmp	.+10     	; 0x2404 <LED_On+0x56>
             break;

        case 6:
             PORTD &= ~0x20;
    23fa:	95 98       	cbi	0x12, 5	; 18
    23fc:	03 c0       	rjmp	.+6      	; 0x2404 <LED_On+0x56>
             break;

        case 7:
             PORTD &= ~0x40;
    23fe:	96 98       	cbi	0x12, 6	; 18
    2400:	01 c0       	rjmp	.+2      	; 0x2404 <LED_On+0x56>
             break;

        case 8:
             PORTD &= ~0x80;
    2402:	97 98       	cbi	0x12, 7	; 18
             break;
    }
    OS_EXIT_CRITICAL();
    2404:	0e 94 22 01 	call	0x244	; 0x244 <OS_CPU_SR_RESTORE>
}
    2408:	1f 91       	pop	r17
    240a:	08 95       	ret

0000240c <BSP_TickISR_Handler>:
*********************************************************************************************************
*/

void  BSP_TickISR_Handler (void)
{
    OSTimeTick();
    240c:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <OSTimeTick>
}
    2410:	08 95       	ret

00002412 <__mulsi3>:
    2412:	62 9f       	mul	r22, r18
    2414:	d0 01       	movw	r26, r0
    2416:	73 9f       	mul	r23, r19
    2418:	f0 01       	movw	r30, r0
    241a:	82 9f       	mul	r24, r18
    241c:	e0 0d       	add	r30, r0
    241e:	f1 1d       	adc	r31, r1
    2420:	64 9f       	mul	r22, r20
    2422:	e0 0d       	add	r30, r0
    2424:	f1 1d       	adc	r31, r1
    2426:	92 9f       	mul	r25, r18
    2428:	f0 0d       	add	r31, r0
    242a:	83 9f       	mul	r24, r19
    242c:	f0 0d       	add	r31, r0
    242e:	74 9f       	mul	r23, r20
    2430:	f0 0d       	add	r31, r0
    2432:	65 9f       	mul	r22, r21
    2434:	f0 0d       	add	r31, r0
    2436:	99 27       	eor	r25, r25
    2438:	72 9f       	mul	r23, r18
    243a:	b0 0d       	add	r27, r0
    243c:	e1 1d       	adc	r30, r1
    243e:	f9 1f       	adc	r31, r25
    2440:	63 9f       	mul	r22, r19
    2442:	b0 0d       	add	r27, r0
    2444:	e1 1d       	adc	r30, r1
    2446:	f9 1f       	adc	r31, r25
    2448:	bd 01       	movw	r22, r26
    244a:	cf 01       	movw	r24, r30
    244c:	11 24       	eor	r1, r1
    244e:	08 95       	ret

00002450 <__udivmodsi4>:
    2450:	a1 e2       	ldi	r26, 0x21	; 33
    2452:	1a 2e       	mov	r1, r26
    2454:	aa 1b       	sub	r26, r26
    2456:	bb 1b       	sub	r27, r27
    2458:	fd 01       	movw	r30, r26
    245a:	0d c0       	rjmp	.+26     	; 0x2476 <__udivmodsi4_ep>

0000245c <__udivmodsi4_loop>:
    245c:	aa 1f       	adc	r26, r26
    245e:	bb 1f       	adc	r27, r27
    2460:	ee 1f       	adc	r30, r30
    2462:	ff 1f       	adc	r31, r31
    2464:	a2 17       	cp	r26, r18
    2466:	b3 07       	cpc	r27, r19
    2468:	e4 07       	cpc	r30, r20
    246a:	f5 07       	cpc	r31, r21
    246c:	20 f0       	brcs	.+8      	; 0x2476 <__udivmodsi4_ep>
    246e:	a2 1b       	sub	r26, r18
    2470:	b3 0b       	sbc	r27, r19
    2472:	e4 0b       	sbc	r30, r20
    2474:	f5 0b       	sbc	r31, r21

00002476 <__udivmodsi4_ep>:
    2476:	66 1f       	adc	r22, r22
    2478:	77 1f       	adc	r23, r23
    247a:	88 1f       	adc	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	1a 94       	dec	r1
    2480:	69 f7       	brne	.-38     	; 0x245c <__udivmodsi4_loop>
    2482:	60 95       	com	r22
    2484:	70 95       	com	r23
    2486:	80 95       	com	r24
    2488:	90 95       	com	r25
    248a:	9b 01       	movw	r18, r22
    248c:	ac 01       	movw	r20, r24
    248e:	bd 01       	movw	r22, r26
    2490:	cf 01       	movw	r24, r30
    2492:	08 95       	ret

00002494 <_exit>:
    2494:	f8 94       	cli

00002496 <__stop_program>:
    2496:	ff cf       	rjmp	.-2      	; 0x2496 <__stop_program>
