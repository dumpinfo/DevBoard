
REDCTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002c2  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800110  00800110  00000366  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000366  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000ae  00000000  00000000  00000386  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003b4  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000019d  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000389  00000000  00000000  00000985  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000154  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015d  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  00001021  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ec       	ldi	r30, 0xC2	; 194
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 32       	cpi	r26, 0x20	; 32
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <main>
  c6:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <system_init>:
//			IO端口初始化
//***********************************************************************

void system_init()
{
    Data_IO=0xFF;             //数据口为输出
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8b bb       	out	0x1b, r24	; 27
    Data_DDR=0xFF;
  d2:	8a bb       	out	0x1a, r24	; 26

    PORTD=0xFF;               //74HC573的控制口，设置为输出
  d4:	82 bb       	out	0x12, r24	; 18
    DDRD=0xFF;
  d6:	81 bb       	out	0x11, r24	; 17
 
	PORTB=0xFF;               //关LED
  d8:	88 bb       	out	0x18, r24	; 24
	DDRB=0xFF;
  da:	87 bb       	out	0x17, r24	; 23

    DDRE=0xFF;
  dc:	e2 e2       	ldi	r30, 0x22	; 34
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 83       	st	Z, r24

    RED_SET;
  e2:	a3 e2       	ldi	r26, 0x23	; 35
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	8c 91       	ld	r24, X
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	8c 93       	st	X, r24
	RED_IN;
  ec:	80 81       	ld	r24, Z
  ee:	87 7f       	andi	r24, 0xF7	; 247
  f0:	80 83       	st	Z, r24
}
  f2:	08 95       	ret

000000f4 <Display_Key>:
//*************************************************************************
//			74HC573控制数码管动态扫描显示函数，显示采集到的数据
//*************************************************************************

void Display_Key(uint data_KEY)
{
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	8c 01       	movw	r16, r24
	 system_init();
  fe:	0e 94 67 00 	call	0xce	; 0xce <system_init>

     D_LE1;                    
 102:	e2 e3       	ldi	r30, 0x32	; 50
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	80 61       	ori	r24, 0x10	; 16
 10a:	80 83       	st	Z, r24
     W_LE1;                    
 10c:	80 81       	ld	r24, Z
 10e:	80 62       	ori	r24, 0x20	; 32
 110:	80 83       	st	Z, r24
     Data_IO=0x00;               
 112:	ab e3       	ldi	r26, 0x3B	; 59
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	1c 92       	st	X, r1
     W_LE0;                    
 118:	80 81       	ld	r24, Z
 11a:	8f 7d       	andi	r24, 0xDF	; 223
 11c:	80 83       	st	Z, r24
	 Data_IO=table[data_KEY];         
 11e:	00 50       	subi	r16, 0x00	; 0
 120:	1f 4f       	sbci	r17, 0xFF	; 255
 122:	e8 01       	movw	r28, r16
 124:	88 81       	ld	r24, Y
 126:	8c 93       	st	X, r24
     D_LE0;                    
 128:	80 81       	ld	r24, Z
 12a:	8f 7e       	andi	r24, 0xEF	; 239
 12c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 12e:	83 e3       	ldi	r24, 0x33	; 51
 130:	97 e0       	ldi	r25, 0x07	; 7
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <Display_Key+0x3e>
     delay_ms(1);                    
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <Key_Icode>:
//*************************************************************************
//			遥控器键值赋功能值子程序
//*************************************************************************
 void Key_Icode(void)
 {
   switch(key_code[2])
 140:	80 91 1e 01 	lds	r24, 0x011E
 144:	85 30       	cpi	r24, 0x05	; 5
 146:	59 f1       	breq	.+86     	; 0x19e <Key_Icode+0x5e>
 148:	86 30       	cpi	r24, 0x06	; 6
 14a:	48 f4       	brcc	.+18     	; 0x15e <Key_Icode+0x1e>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	d9 f0       	breq	.+54     	; 0x186 <Key_Icode+0x46>
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	a8 f0       	brcs	.+42     	; 0x17e <Key_Icode+0x3e>
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	d9 f0       	breq	.+54     	; 0x18e <Key_Icode+0x4e>
 158:	84 30       	cpi	r24, 0x04	; 4
 15a:	a9 f5       	brne	.+106    	; 0x1c6 <Key_Icode+0x86>
 15c:	1c c0       	rjmp	.+56     	; 0x196 <Key_Icode+0x56>
 15e:	89 30       	cpi	r24, 0x09	; 9
 160:	51 f1       	breq	.+84     	; 0x1b6 <Key_Icode+0x76>
 162:	8a 30       	cpi	r24, 0x0A	; 10
 164:	28 f4       	brcc	.+10     	; 0x170 <Key_Icode+0x30>
 166:	86 30       	cpi	r24, 0x06	; 6
 168:	f1 f0       	breq	.+60     	; 0x1a6 <Key_Icode+0x66>
 16a:	88 30       	cpi	r24, 0x08	; 8
 16c:	61 f5       	brne	.+88     	; 0x1c6 <Key_Icode+0x86>
 16e:	1f c0       	rjmp	.+62     	; 0x1ae <Key_Icode+0x6e>
 170:	8a 30       	cpi	r24, 0x0A	; 10
 172:	29 f1       	breq	.+74     	; 0x1be <Key_Icode+0x7e>
 174:	8d 30       	cpi	r24, 0x0D	; 13
 176:	39 f5       	brne	.+78     	; 0x1c6 <Key_Icode+0x86>
   {
    case KEY_0:key=0;break;
 178:	10 92 1b 01 	sts	0x011B, r1
 17c:	08 95       	ret
	case KEY_1:key=1;break;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 93 1b 01 	sts	0x011B, r24
 184:	08 95       	ret
	case KEY_2:key=2;break;
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	80 93 1b 01 	sts	0x011B, r24
 18c:	08 95       	ret
	case KEY_3:key=3;break;
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	80 93 1b 01 	sts	0x011B, r24
 194:	08 95       	ret
	case KEY_4:key=4;break;
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	80 93 1b 01 	sts	0x011B, r24
 19c:	08 95       	ret
	case KEY_5:key=5;break;
 19e:	85 e0       	ldi	r24, 0x05	; 5
 1a0:	80 93 1b 01 	sts	0x011B, r24
 1a4:	08 95       	ret
	case KEY_6:key=6;break;
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	80 93 1b 01 	sts	0x011B, r24
 1ac:	08 95       	ret
	case KEY_7:key=7;break;
 1ae:	87 e0       	ldi	r24, 0x07	; 7
 1b0:	80 93 1b 01 	sts	0x011B, r24
 1b4:	08 95       	ret
	case KEY_8:key=8;break;
 1b6:	88 e0       	ldi	r24, 0x08	; 8
 1b8:	80 93 1b 01 	sts	0x011B, r24
 1bc:	08 95       	ret
	case KEY_9:key=9;break;
 1be:	89 e0       	ldi	r24, 0x09	; 9
 1c0:	80 93 1b 01 	sts	0x011B, r24
 1c4:	08 95       	ret
	default:key=10;break;
 1c6:	8a e0       	ldi	r24, 0x0A	; 10
 1c8:	80 93 1b 01 	sts	0x011B, r24
 1cc:	08 95       	ret

000001ce <Red_Code>:
//*************************************************************************
//			遥控器解码子程序
//*************************************************************************

void Red_Code()
{
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	41 ee       	ldi	r20, 0xE1	; 225
 1d6:	52 e0       	ldi	r21, 0x02	; 2
uchar i,j,k = 0;

 for(i = 0;i < 19;i++)
{
  delay_us(400);           //延时400us
  if(RED_R)                //9ms内有高电平，则判断为干扰，退出处理程序
 1d8:	e1 e2       	ldi	r30, 0x21	; 33
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	ca 01       	movw	r24, r20
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <Red_Code+0x10>
 1e2:	80 81       	ld	r24, Z
 1e4:	83 fd       	sbrc	r24, 3
 1e6:	63 c0       	rjmp	.+198    	; 0x2ae <Red_Code+0xe0>

void Red_Code()
{
uchar i,j,k = 0;

 for(i = 0;i < 19;i++)
 1e8:	2f 5f       	subi	r18, 0xFF	; 255
 1ea:	23 31       	cpi	r18, 0x13	; 19
 1ec:	b9 f7       	brne	.-18     	; 0x1dc <Red_Code+0xe>
  {
      return;
  }
}

while(!RED_R);            //等待9ms低电平过去
 1ee:	e1 e2       	ldi	r30, 0x21	; 33
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	83 ff       	sbrs	r24, 3
 1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <Red_Code+0x24>
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	49 e9       	ldi	r20, 0x99	; 153
 1fc:	53 e0       	ldi	r21, 0x03	; 3


for(i=0;i<5;i++)          //是否连发码
{
  delay_us(500);
  if(!RED_R)
 1fe:	e1 e2       	ldi	r30, 0x21	; 33
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	ca 01       	movw	r24, r20
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <Red_Code+0x36>
 208:	80 81       	ld	r24, Z
 20a:	83 ff       	sbrs	r24, 3
 20c:	50 c0       	rjmp	.+160    	; 0x2ae <Red_Code+0xe0>

while(!RED_R);            //等待9ms低电平过去



for(i=0;i<5;i++)          //是否连发码
 20e:	2f 5f       	subi	r18, 0xFF	; 255
 210:	25 30       	cpi	r18, 0x05	; 5
 212:	b9 f7       	brne	.-18     	; 0x202 <Red_Code+0x34>
     return;
   }
}


while(RED_R);               //等待4.5ms高电平过去
 214:	e1 e2       	ldi	r30, 0x21	; 33
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	83 fd       	sbrc	r24, 3
 21c:	fd cf       	rjmp	.-6      	; 0x218 <Red_Code+0x4a>
 21e:	3a c0       	rjmp	.+116    	; 0x294 <Red_Code+0xc6>
{
  for(j = 0;j < 8;j++)      //每个字节的数据8位
  {
   

   while(!RED_R);         //等待变高电平
 220:	80 81       	ld	r24, Z
 222:	83 ff       	sbrs	r24, 3
 224:	fd cf       	rjmp	.-6      	; 0x220 <Red_Code+0x52>
 226:	09 c0       	rjmp	.+18     	; 0x23a <Red_Code+0x6c>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 228:	83 2f       	mov	r24, r19
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <Red_Code+0x5c>
   while(RED_R)           //计算高电平时间
   {
    delay_us(100);
    k++;
 22e:	9f 5f       	subi	r25, 0xFF	; 255
    if(k >= 22)           //高电平时间过长，则退出处理程序
 230:	96 31       	cpi	r25, 0x16	; 22
 232:	21 f4       	brne	.+8      	; 0x23c <Red_Code+0x6e>
 234:	20 93 10 01 	sts	0x0110, r18
 238:	3a c0       	rjmp	.+116    	; 0x2ae <Red_Code+0xe0>
 23a:	95 2f       	mov	r25, r21
  for(j = 0;j < 8;j++)      //每个字节的数据8位
  {
   

   while(!RED_R);         //等待变高电平
   while(RED_R)           //计算高电平时间
 23c:	80 81       	ld	r24, Z
 23e:	83 fd       	sbrc	r24, 3
 240:	f3 cf       	rjmp	.-26     	; 0x228 <Red_Code+0x5a>
     return;              //
    }
    
   }

   code_value>>=1;        //接受一位数据
 242:	26 95       	lsr	r18
   if(k >= 8)
 244:	98 30       	cpi	r25, 0x08	; 8
 246:	08 f0       	brcs	.+2      	; 0x24a <Red_Code+0x7c>
   {
    code_value|=0x80;   //高电平时间大于0.56，则为数据1
 248:	20 68       	ori	r18, 0x80	; 128

while(RED_R);               //等待4.5ms高电平过去

for(i = 0;i < 4;i++)        //接收4个字节的数据
{
  for(j = 0;j < 8;j++)      //每个字节的数据8位
 24a:	4f 5f       	subi	r20, 0xFF	; 255
 24c:	48 30       	cpi	r20, 0x08	; 8
 24e:	41 f7       	brne	.-48     	; 0x220 <Red_Code+0x52>
   {
    code_value|=0x80;   //高电平时间大于0.56，则为数据1
   }
   k = 0;                  //计时清零
  }
  key_code[i]=code_value;  //四个字节的数据
 250:	2d 93       	st	X+, r18
}


while(RED_R);               //等待4.5ms高电平过去

for(i = 0;i < 4;i++)        //接收4个字节的数据
 252:	ac 17       	cp	r26, r28
 254:	bd 07       	cpc	r27, r29
 256:	49 f5       	brne	.+82     	; 0x2aa <Red_Code+0xdc>
 258:	20 93 10 01 	sts	0x0110, r18
   k = 0;                  //计时清零
  }
  key_code[i]=code_value;  //四个字节的数据
}

  Key_Icode();             //调用赋值函数
 25c:	0e 94 a0 00 	call	0x140	; 0x140 <Key_Icode>

  Display_Key(key);        //显示按键值
 260:	80 91 1b 01 	lds	r24, 0x011B
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 7a 00 	call	0xf4	; 0xf4 <Display_Key>
  
  Beep0;                  //按键声音指示
 26a:	e2 e3       	ldi	r30, 0x32	; 50
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	8f 7b       	andi	r24, 0xBF	; 191
 272:	80 83       	st	Z, r24
 274:	24 ef       	ldi	r18, 0xF4	; 244
 276:	31 e0       	ldi	r19, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 278:	48 eb       	ldi	r20, 0xB8	; 184
 27a:	50 e0       	ldi	r21, 0x00	; 0
 27c:	ca 01       	movw	r24, r20
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <Red_Code+0xb0>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 282:	21 50       	subi	r18, 0x01	; 1
 284:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 286:	d1 f7       	brne	.-12     	; 0x27c <Red_Code+0xae>
  delay_ms(50);
  Beep1;
 288:	e2 e3       	ldi	r30, 0x32	; 50
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	80 64       	ori	r24, 0x40	; 64
 290:	80 83       	st	Z, r24
 292:	0d c0       	rjmp	.+26     	; 0x2ae <Red_Code+0xe0>
 294:	20 91 10 01 	lds	r18, 0x0110
 298:	ac e1       	ldi	r26, 0x1C	; 28
 29a:	b1 e0       	ldi	r27, 0x01	; 1
 29c:	60 e0       	ldi	r22, 0x00	; 0
{
  for(j = 0;j < 8;j++)      //每个字节的数据8位
  {
   

   while(!RED_R);         //等待变高电平
 29e:	e1 e2       	ldi	r30, 0x21	; 33
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2a2:	35 ef       	ldi	r19, 0xF5	; 245
   while(RED_R)           //计算高电平时间
   {
    delay_us(100);
    k++;
    if(k >= 22)           //高电平时间过长，则退出处理程序
 2a4:	56 2f       	mov	r21, r22
}


while(RED_R);               //等待4.5ms高电平过去

for(i = 0;i < 4;i++)        //接收4个字节的数据
 2a6:	c0 e2       	ldi	r28, 0x20	; 32
 2a8:	d1 e0       	ldi	r29, 0x01	; 1

  Display_Key(key);        //显示按键值
  
  Beep0;                  //按键声音指示
  delay_ms(50);
  Beep1;
 2aa:	46 2f       	mov	r20, r22
 2ac:	b9 cf       	rjmp	.-142    	; 0x220 <Red_Code+0x52>
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <main>:
//*************************************************************************
//			主程序
//*************************************************************************
int main(void)
{
  system_init();         //系统初始化
 2b4:	0e 94 67 00 	call	0xce	; 0xce <system_init>
  while(1)
 {
    Red_Code();          //调用遥控器解码子程序
 2b8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Red_Code>
 2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <main+0x4>

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
